{"version":3,"sources":["views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/Header.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/types.ts","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","state/hooks.ts","hooks/useTokenBalance.ts"],"names":["useGetLatestOraclePrice","price","setPrice","useState","ethers","BigNumber","from","lastUpdated","setLastUpdated","refresh","useLastUpdated","useEffect","async","contract","getChainlinkOracleContract","response","latestAnswer","fetchPrice","usePollOraclePrice","seconds","arguments","length","undefined","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","LIVE","liveAndCurrent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","_templateObject2","bounceInAnimation","css","_templateObject3","bounceOutAnimation","_templateObject4","Wrapper","_templateObject5","mediaQueries","md","Popup","_templateObject6","_ref2","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","bets","getBetHistory","user","toLowerCase","claimed","winnerBets","filter","bet","position","round","_jsx","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","children","_jsxs","TrophyGoldIcon","width","style","flex","mr","Button","onClick","handleOpenHistory","setHistoryPaneState","IconButton","variant","handleClick","CloseIcon","color","SwiperContext","createContext","SwiperProvider","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","Box","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","Card","CardBody","Heading","mb","ErrorNotification","Text","as","PauseNotification","formatUsd","usd","concat","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","toastSuccess","toastError","useToast","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","minWidth","mt","ModalHeader","ModalTitle","ModalCloseButton","ModalBody","p","mx","Flex","alignItems","justifyContent","textAlign","fontSize","times","toFormat","tx","claim","receipt","wait","transactionHash","LinkExternal","href","getBscScanLink","isLoading","endIcon","AutoRenewIcon","spin","CollectWinningsButton","hasClaimed","props","onPresentCollectWinningsModal","useModal","disabled","ReclaimPositionButton","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","hours","minutes","getTimePeriods","minutesSeconds","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","getPayoutv2","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","bg","Tag","startIcon","icon","ArrowUpIcon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","_ref3","betPosition","isUpPosition","ArrowDownIcon","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","_ref4","Background","_ref5","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","_ref6","card","background","RoundResultBox","_ref7","getPrizePoolAmountHistory","PrizePoolHistoryRow","_ref8","LockPriceHistoryRow","_ref9","RoundResult","hasFailed","closePrice","getBetPosition","HOUSE","gt","isPositionUp","priceDifference","Skeleton","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetRewardRate","targetRef","tooltip","tooltipVisible","useTooltip","fee","placement","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","_Fragment","getHeaderText","getHeaderIcon","PrizeIcon","BlockIcon","markBetHistoryAsCollected","betId","claimedHash","getResultColor","toNumber","InfoIcon","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","RoundResultHistory","Link","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","toggleOpen","role","WaitIcon","PlayCircleOutlineIcon","scale","ChevronUpIcon","ChevronDownIcon","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","HistoryTabs","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","size","ArrowForwardIcon","ButtonMenu","activeIndex","onItemClick","tabIndex","ButtonMenuItem","ROUNDS","Radio","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","_templateObject7","Info","_templateObject8","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","store","getState","predictions","reduce","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","OpenNewIcon","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","ConnectWalletButton","Spinner","RoundMultiplierDownArrow","isActive","fill","Svg","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","whiteSpace","outline","CheckmarkCircleFillIcon","CheckmarkCircleIcon","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","UIKitCard","getTextColorByStatus","StyledCardHeader","getBackgroundColor","cardHeader","warning","Round","CardHeader","isBottom","CollectWinningsOverlay","useGetIsClaimable","CanceledRoundCard","useGetTotalIntervalBlocks","startBlock","estimatedEndBlock","blockNumber","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","hasClaimedUp","hasClaimedDown","initialBlock","useBlock","useGetBetByEpoch","formattedPayout","toUnsafeFloat","hasRoundFailed","getHasRoundFailed","oracleCalled","BlockProgress","currentBlock","rawProgress","progress","Progress","primaryStep","CalculatingCard","TooltipText","GradientBorder","GradientCard","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","estimatedEndBlockPlusPadding","BLOCK_PADDING","priceAsNumber","countUp","update","useCountUp","start","end","duration","decimals","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","front","back","Error","getComponents","useSwiper","swiperContext","useContext","FlexRow","gasPrice","parseUnits","dust","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","balance","bnbBalance","useGetBnbBalance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","key","getButtonProps","minBetAmountBalance","lte","lt","inputAmount","data","token","onMouseOver","handleMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","handleMouseOut","enable","attachEvents","handleGoBack","ArrowBackIcon","BinanceIcon","BalanceInput","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","Slider","name","min","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","OpenRoundCard","state","setState","isSettingPosition","useGetIntervalBlocks","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useBlockCountdown","secondsRemaining","setSecondsRemaining","simpleRpcProvider","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedbearMultiplier","Token","lg","Title","Price","Interval","Label","dir","PricePairLabel","display","BnbUsdtPairTokenIcon","TimerLabel","_ref10","unit","pr","PocketWatchIcon","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","handlePrevSlide","slidePrev","handleSlideToLive","currentEpochIndex","findIndex","slideTo","BunnyCardsIcon","handleNextSlide","slideNext","HistoryButton","HistoryIcon","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","HelpIcon","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","Swiper","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","SwiperSlide","ExpandChartButton","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","ChartIcon","toggleChartPane","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","Cards","MenuWrapper","ChartWrapper","Chart","PageView","StyledMobile","xl","View","isVisible","Mobile","getView","HISTORY","CHART","POSITIONS","GradientModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","Checkbox","handleSetAcknowledgeRisk","handleSetAcknowledgeBeta","handleConfirm","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","usePersistState","localStorageKey","hasAcceptedChart","setHasAcceptedChart","useInitialBlock","isDesktop","onPresentRiskDisclaimer","handleAcceptRiskSuccess","onPresentChartDisclaimer","handleAcceptChart","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","INITIAL","PageLoader","Helmet","roundData","useGetRounds","useSelector","keys","accum","parseBigNumberObj","ledgers","claimableStatuses","earliestRound","minBy","intervalBlocks","bufferBlocks","currentRoundStartBlockNumber","history","lastOraclePrice","useGetCollectibles","isInitialized","collectibles","identifiers","fetchWalletNfts","tokenIds","nftsInWallet","Nfts","nft","includes","identifier","FetchStatus","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","setBalance","BIG_ZERO","getBep20Contract","res","balanceOf","fetchBalance","walletBalance","getBalance","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","fetchStatus","fastRefresh","e","console","error","prev"],"mappings":"8PAsBeA,MAjBiBA,KAC9B,MAAOC,EAAOC,GAAYC,mBAASC,IAAOC,UAAUC,KAAK,KACnD,YAAEC,EAAaC,eAAgBC,GAAYC,cAYjD,OAVAC,qBAAU,KACWC,WACjB,MAAMC,EAAWC,cACXC,QAAiBF,EAASG,eAChCd,EAASa,IAGXE,KACC,CAACV,EAAaL,IAEV,CAAED,QAAOM,cAAaE,YCQhBS,MAtBY,WAAmB,IAAlBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACpC,MAAM,MAAEnB,EAAK,QAAEQ,GAAYT,IACrBuB,EAAWC,cAGjBb,qBAAU,KACRF,IACA,MAAMgB,EAAQC,aAAY,KACxBjB,MACW,IAAVU,GAEH,MAAO,KACLQ,cAAcF,MAEf,CAACN,EAASV,IAGbE,qBAAU,KACRY,EAASK,YAAmB3B,EAAM4B,aACjC,CAAC5B,EAAOsB,K,SCuBEO,I,EAAAA,EArCYA,KACzB,MAAML,EAAQM,iBAAuB,MAC/BR,EAAWC,eACX,QAAEQ,GAAYC,cACdC,EAAeC,cACfC,EAAgBC,cAChBC,EAASC,cAEf5B,qBAAU,KAEJc,EAAMe,SACRb,cAAcF,EAAMe,SAGlBF,IAAWG,IAAiBC,OAC9BjB,EAAMe,QAAUd,aAAYd,UAC1B,MAAM+B,EAAiB,CAACT,EAAcA,EAAe,GAKrD,GAHAX,EAASqB,YAAYD,IACrBpB,EAASsB,eAELb,EAAS,CACX,MAAMc,EAAaC,gBAAMX,EAAeF,EAAe,GACvDX,EAASyB,YAAgB,CAAEhB,UAASiB,OAAQH,KAC5CvB,EAAS2B,YAAuB,CAAElB,UAASiB,OAAQH,QAEpDK,MAGE,KACD1B,EAAMe,SACRb,cAAcF,EAAMe,YAGvB,CAACf,EAAOO,EAASM,EAAQJ,EAAcE,EAAeb,K,cClC5C6B,I,YAAAA,EARGC,IAAOC,IAAGC,MAAAC,YAAA,4IACZC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,UAAUC,a,+BCWtD,MAAMC,EAAmBC,YAASR,MAAAC,YAAA,6eAgC5BQ,EAAoBD,YAASE,MAAAT,YAAA,mQAiB7BU,EAAoBC,YAAGC,MAAAZ,YAAA,+BACdM,GAGTO,EAAqBF,YAAGG,MAAAd,YAAA,+BACfQ,GAGTO,EAAUlB,IAAOC,IAAGkB,MAAAhB,YAAA,yhBAcpBU,EAYAG,GAGFZ,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMe,aAAaC,MAUhCC,EAAQtB,IAAOC,IAAGsB,MAAApB,YAAA,oKAEFqB,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMC,OAAOmB,aA6EnCC,MArEcA,KAC3B,MAAOC,EAAQC,GAAa9E,oBAAS,IAC/B,EAAE+E,GAAMC,cACRC,EAAMrD,iBAAO,MACbN,EAAQM,iBAAO,OACf,QAAEC,GAAYC,cACdoD,EAAmB9C,cACnB+C,EAAoBC,cACpBhE,EAAWC,cA4CjB,OAhCAb,qBAAU,KACR,IAAI6E,GAAc,EAkBlB,OAjBIxD,IACFP,EAAMe,QAAUd,aAAYd,UAC1B,MAAM6E,QAAaC,YAAc,CAAEC,KAAM3D,EAAQ4D,cAAeC,SAAS,IAEzE,IAAKL,EAAa,CAEhB,MAAMM,EAAaL,EAAKM,QAAQC,GACvBA,EAAIC,WAAaD,EAAIE,MAAMD,WAG/BX,GACHL,EAAUa,EAAWzE,OAAS,MAGjC,MAGE,KACLM,cAAcF,EAAMe,SACpBgD,GAAc,KAEf,CAACxD,EAASP,EAAO4D,EAAkBJ,EAAWK,IAGjD3E,qBAAU,KACJ2E,GACFL,GAAU,KAEX,CAACK,EAAmBL,IAGrBkB,cAACC,IAAa,CAACC,GAAIrB,EAAQsB,eAAa,EAACC,QAASnB,EAAKoB,QAAS,IAAMC,WAAW,QAAOC,SACtFP,cAAC5B,EAAO,CAACa,IAAKA,EAAIsB,SAChBC,eAAChC,EAAK,CAAA+B,SAAA,CACJP,cAACS,KAAc,CAACC,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzDb,cAACc,IAAM,CAACH,MAAO,CAAEC,KAAM,GAAKG,QA/CVC,KACxB5F,EAAS6F,aAAoB,KA8CgCV,SACpDxB,EAAE,sBAELiB,cAACkB,KAAU,CAACC,QAAQ,OAAOJ,QA9CfK,KAClBtC,GAAU,GACVtD,cAAcF,EAAMe,UA4CkCkE,SAC9CP,cAACqB,IAAS,CAACC,MAAM,UAAUZ,MAAM,mBC5KtC,MAAMa,EAAgBC,6BAAuBrG,GAerCsG,MAbQnE,IAAmB,IAAlB,SAAEiD,GAAUjD,EAClC,MAAOoE,EAAQC,GAAa3H,mBAAqB,MASjD,OAAOgG,cAACuB,EAAcK,SAAQ,CAACC,MAAO,CAAEH,SAAQC,YAAWG,cAPrCA,KAChBJ,IACFA,EAAOK,UACPJ,EAAU,SAI6DpB,SAAEA,K,+CCZ/E,MAAMyB,EAAsBvH,SAC1B,IAAIwH,SAAeC,GACjBC,OAAOC,eAAeC,OAAQ,cAAe,CAC3CC,cAAc,EACdC,IAAIV,GACFW,KAAKC,GAAKZ,EACVK,EAAQL,QAKVa,EAAwBA,CAACC,EAAqBpF,EAAqBqF,KAIvE,IAAID,EAAeE,OAAO,CACxBC,UAAU,EACVC,OAAQ,OACRC,OAAQ,kBACRC,SAAU,IACVC,SAAU,UACV3F,MAAOA,EAAM4F,OAAS,OAAS,QAC/BxC,MAAO,IACPyC,OAAQR,EACRS,WAAY,UACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,aAAc,uBA2BHC,I,MAAAA,GAvBKA,KAClB,MAAM,gBAAEC,GAAoB1E,cACtBzB,EAAQoG,cAcd,OAZAnJ,qBAAU,KAEJ6H,OAAOoB,YAETf,EAAsBL,OAAOoB,YAAalG,EAAOmG,EAAgBE,MAEjE5B,IAAsB6B,MAAMpB,IAC1BC,EAAsBD,EAAIlF,EAAOmG,EAAgBE,WAGpD,CAACrG,EAAOmG,IAGT1D,cAAC8D,IAAG,CAACC,SAAS,SAASC,UAAU,wBAAuBzD,SACtDP,cAAA,OAAKiE,GAAG,yBC1Cd,MAAM7F,GAAUlB,IAAOC,IAAGC,MAAAC,YAAA,6GAQpB6G,GAAchH,IAAOC,IAAGW,MAAAT,YAAA,kDAKxB8G,GAAkBjH,IAAOC,IAAGc,MAAAZ,YAAA,qHA2BnB+G,OAlBmC9G,IAA0B,IAAzB,MAAE+G,EAAK,SAAE9D,GAAUjD,EACpE,OACE0C,cAAC5B,GAAO,CAAAmC,SACNC,eAAC0D,GAAW,CAAA3D,SAAA,CACVP,cAACmE,GAAe,CAAA5D,SACdP,cAAA,OAAKsE,IAAI,uCAAuCC,IAAI,mBAAmBxB,OAAO,QAAQrC,MAAM,YAE9FV,cAACwE,IAAI,CAAAjE,SACHC,eAACiE,IAAQ,CAAAlE,SAAA,CACPP,cAAC0E,IAAO,CAACC,GAAG,OAAMpE,SAAE8D,IACnB9D,aCtBEqE,OAnBWA,KACxB,MAAM,EAAE7F,GAAMC,cACR5D,EAAWC,cAKjB,OACEmF,eAAC4D,GAAY,CAACC,MAAOtF,EAAE,SAASwB,SAAA,CAC9BP,cAAC6E,KAAI,CAACC,GAAG,IAAIH,GAAG,OAAMpE,SACnBxB,EAAE,0FAELiB,cAACc,IAAM,CAACK,QAAQ,UAAUT,MAAM,OAAOK,QARjBC,KACxB5F,EAAS6F,aAAoB,KAOuCV,SAC/DxB,EAAE,sBCWIgG,OAxBWA,KACxB,MAAM,EAAEhG,GAAMC,cACR5D,EAAWC,cAMjB,OACEmF,eAAC4D,GAAY,CAACC,MAAOtF,EAAE,kBAAkBwB,SAAA,CACvCC,eAACsD,IAAG,CAACa,GAAG,OAAMpE,SAAA,CACZP,cAAC6E,KAAI,CAACC,GAAG,IAAGvE,SAAExB,EAAE,0DAChBiB,cAAC6E,KAAI,CAACC,GAAG,IAAGvE,SAAExB,EAAE,4CAChBiB,cAAC6E,KAAI,CAACC,GAAG,IAAGvE,SACTxB,EAAE,oGAGPiB,cAACc,IAAM,CAACK,QAAQ,UAAUT,MAAM,OAAOK,QAbjBC,KACxB5F,EAAS6F,aAAoB,KAYuCV,SAC/DxB,EAAE,sB,kBCtBJ,MAAMiG,GAAaC,GAClB,IAANC,OAAWC,aAAaF,GAAO,EAAG,EAAG,IAG1BG,GAAaC,GACjBA,EAAMA,EAAIC,oBAAenK,EAAW,CAAEoK,sBAAuB,EAAGC,sBAAuB,IAAO,IAG1FC,GAAgBA,CAACC,EAAeC,IAC7B,IAAVD,GAA0B,IAAXC,EACV,EAGFD,EAAQC,EAMJC,GAAY,SAAC/F,GAA8B,IAApBgG,EAAU5K,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC/C,IAAK4E,IAAQA,EAAIE,MACf,OAAO,EAGT,MAAM,WAAE+F,EAAU,WAAEC,EAAU,YAAEC,GAAgBnG,EAAIE,MAC9CkG,EAAaR,GAAcO,EAAanG,EAAIC,WAAaoG,IAAYC,KAAOL,EAAaC,GAC/F,OAAOlG,EAAI8F,OAASM,EAAaJ,GAGtBO,GAAe,SAACvG,GAAsC,IAA5BgG,EAAU5K,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAClD,IAAK4E,IAAQA,EAAIE,MACf,OAAO,EAGT,MAAMsG,EAAST,GAAU/F,EAAKgG,GAC9B,OAAOQ,EAASxG,EAAI8F,Q,8CCJtB,MAAMW,GAAQpJ,YAAOqJ,KAAPrJ,CAAsBE,QAAAC,YAAA,gCAI9B8G,GAAkBjH,IAAOC,IAAGW,QAAAT,YAAA,+IAyGnBmJ,OAjG6DlJ,IAMrE,IANsE,OAC3E+I,EAAM,UACNI,EAAS,MACTC,EAAK,UACLC,EAAS,UACTC,GACDtJ,EACC,MAAOuJ,EAAaC,GAAkB9M,oBAAS,IACzC,QAAE6B,GAAYC,eACd,EAAEiD,GAAMC,eACR,aAAE+H,EAAY,WAAEC,GAAeC,eAC/BC,EAAsBC,eACtBC,EAAeC,eACfjM,EAAWC,cAGXiM,EAAgBC,WAAWlB,GAC3BmB,EAAmBD,WAAWd,GAmCpC,OACEjG,eAAC8F,GAAK,CAACmB,SAAS,QAAQ3H,SAAS,WAAW4H,GAAG,QAAOnH,SAAA,CACpDP,cAACmE,GAAe,CAAA5D,SACdP,cAAA,OAAKsE,IAAI,sCAAsCC,IAAI,mBAAmBxB,OAAO,QAAQrC,MAAM,YAE7FF,eAACmH,KAAW,CAAApH,SAAA,CACVP,cAAC4H,KAAU,CAAArH,SACTP,cAAC0E,IAAO,CAAAnE,SAAExB,EAAE,wBAEdiB,cAAC6H,KAAgB,CAAClB,UAAWA,OAE/BnG,eAACsH,KAAS,CAACC,EAAE,OAAMxH,SAAA,CACjBP,cAACS,KAAc,CAACC,MAAM,OAAOsH,GAAG,OAAOrD,GAAG,SAC1CnE,eAACyH,IAAI,CAACC,WAAW,QAAQC,eAAe,gBAAgBxD,GAAG,MAAKpE,SAAA,CAC9DP,cAAC6E,KAAI,CAAAtE,SAAExB,EAAE,mBACTyB,eAACsD,IAAG,CAACnD,MAAO,CAAEyH,UAAW,SAAU7H,SAAA,CACjCP,cAAC6E,KAAI,CAAAtE,SAAA,GAAA2E,OAAKuB,EAAS,UACnBzG,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,KAAA2E,OAChCkC,EAAakB,MAAMd,GAAkBe,SAAS,YAI1D/H,eAACyH,IAAI,CAACC,WAAW,QAAQC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAC/DP,cAAC6E,KAAI,CAAAtE,SAAExB,EAAE,mBACTyB,eAACsD,IAAG,CAACnD,MAAO,CAAEyH,UAAW,SAAU7H,SAAA,CACjCP,cAAC6E,KAAI,CAAAtE,SAAA,GAAA2E,OAAKmB,EAAM,UAChBrG,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,KAAA2E,OAChCkC,EAAakB,MAAMhB,GAAeiB,SAAS,YAIvDvI,cAACc,IAAM,CACLJ,MAAM,OACNiE,GAAG,MACH5D,QAnEYtG,UAClB,IACE,MAAM+N,QAAWtB,EAAoBuB,MAAM/B,GAC3CI,GAAe,GACf,MAAM4B,QAAgBF,EAAGG,OAErB/B,SACIA,UAGFxL,EAAS2B,YAAuB,CAAElB,UAASiB,OAAQ,CAAC4J,MAC1DC,IACAG,GAAe,GACfC,EACEhI,EAAE,uBACFyB,eAACsD,IAAG,CAAAvD,SAAA,CACFP,cAAC6E,KAAI,CAACC,GAAG,IAAIH,GAAG,MAAKpE,SAClBxB,EAAE,+CAEJ2J,EAAQE,iBACP5I,cAAC6I,KAAY,CAACC,KAAMC,aAAeL,EAAQE,gBAAiB,eAAerI,SACxExB,EAAE,yBAKX,MACAiI,EAAWjI,EAAE,SAAUA,EAAE,uFAC1B,QACC+H,GAAe,KAuCXkC,UAAWnC,EACXoC,QAASpC,EAAc7G,cAACkJ,IAAa,CAACC,MAAI,EAAC7H,MAAM,iBAAoB,KAAKf,SAEzExB,EAAE,oBCvGEqK,OArBqD9L,IAQ7D,IAR8D,OACnE+I,EAAM,UACNI,EAAS,MACTC,EAAK,WACL2C,EAAU,UACVzC,EAAS,SACTrG,KACG+I,GACJhM,EACC,MAAOiM,GAAiCC,aACtCxJ,cAACwG,GAAyB,CAACH,OAAQA,EAAQI,UAAWA,EAAWC,MAAOA,EAAOE,UAAWA,KAC1F,GAGF,OACE5G,cAACc,IAAM,CAACC,QAASwI,EAA+BE,SAAUJ,KAAgBC,EAAK/I,SAC5EA,KCmBQmJ,OAnCqDpM,IAA+C,IAA9C,MAAEoJ,EAAK,UAAEE,EAAS,SAAErG,KAAa+I,GAAOhM,EAC3G,MAAOuJ,EAAaC,GAAkB9M,oBAAS,IACzC,EAAE+E,GAAMC,cACRkI,EAAsBC,gBACtB,aAAEJ,EAAY,WAAEC,GAAeC,eAmBrC,OACEjH,cAACc,IAAM,CACLC,QAnBkBtG,UACpB,MAAM+N,QAAWtB,EAAoBuB,MAAM/B,GAC3CI,GAAe,UAEO0B,EAAGG,QACbxM,QACNyK,SACIA,IAERE,GAAe,GACfC,EAAahI,EAAE,0BAEf+H,GAAe,GACfE,EAAWjI,EAAE,SAAUA,EAAE,yFAOzBiK,UAAWnC,EACXoC,QAASpC,EAAc7G,cAACkJ,IAAa,CAACC,MAAI,EAAC7H,MAAM,UAAa,QAC1DgI,EAAK/I,SAERA,GAAYxB,EAAE,uB,UCrCd,MAAM4K,GAAe1E,GACpB,IAANC,OAAW0E,aAAuB3E,EAAK,EAAG,IAG/B4E,GAAexE,IAC1B,MAAMxD,EAAQwD,GAAOpL,IAAOC,UAAUC,KAAK,GAC3C,OAAOyP,aAAuB/H,EAAO,IAG1BiI,GAAWC,GAAgBA,EAAIC,WAAWC,SAAS,EAAG,KAEtDC,GAAmBC,IAC9B,MAAM,MAAEC,EAAK,QAAEC,EAAO,QAAErP,GAAYsP,aAAeH,GAC7CI,EAAc,GAAArF,OAAM4E,GAAQO,GAAQ,KAAAnF,OAAI4E,GAAQ9O,IAEtD,OAAIoP,EAAQ,EACJ,GAANlF,OAAU4E,GAAQM,GAAM,KAAAlF,OAAIqF,GAGvBA,GAWIC,GAAkBA,CAAC9E,EAAyBC,KACvD,IAAKD,EACH,OAAOzL,IAAOwQ,YAAYtQ,KAAK,GAGjC,GAAIuL,EAAMgF,GAAG,IAAM/E,EAAO+E,GAAG,GAC3B,OAAOzQ,IAAOwQ,YAAYtQ,KAAK,GAGjC,MAAMwQ,EAAoB1Q,IAAOwQ,YAAYtQ,KAAKuL,GAC5CkF,EAAwB3Q,IAAOwQ,YAAYtQ,KAAKwL,GAEtD,OAAOgF,EAAkBE,UAAUD,IAgBxBE,GAAiBA,CAACC,EAAoBhL,KACjD,IAAKgL,IAAWhL,EACd,OAAO9F,IAAOwQ,YAAYtQ,KAAK,GAGjC,MAAMkM,EAlBmB2E,EAACD,EAAoBhL,KAC9C,IAAKgL,IAAWhL,EACd,OAAO9F,IAAOwQ,YAAYtQ,KAAK,GAGjC,MAAM,WAAE2L,EAAU,WAAEC,EAAU,aAAEkF,GAAiBlL,GAC3C,OAAE4F,EAAM,SAAE7F,GAAaiL,EAEvBG,EAAcjR,IAAOwQ,YAAYtQ,KAAKgR,aAAgBxF,IACtDM,EAAauE,GAAgBS,EAAcnL,IAAaoG,IAAYC,KAAOL,EAAaC,GAC9F,OAAOmF,EAAYE,UAAUnF,IAQd+E,CAAYD,EAAQhL,GAC7B4F,EAAS1L,IAAOwQ,YAAYtQ,KAAKgR,aAAgBJ,EAAOpF,SAE9D,OAAOU,EAAOgF,UAAU1F,IAGb2F,GAAqBA,CAACxR,EAAyByR,IACrDzR,GAAUyR,EAIRzR,EAAM0R,IAAID,GAHRtR,IAAOC,UAAUC,KAAK,G,OClEjC,MAAMsR,GAAYvO,YAAO+K,IAAP/K,CAAYE,QAAAC,YAAA,6DACRC,IAAA,IAAC,GAAEoO,EAAE,MAAEnO,GAAOD,EAAA,OAAKC,EAAMC,OAAOkO,MAIzCC,GAA0BjN,IAAiE,IAAhE,GAAEgN,EAAK,UAAS,UAAEE,EAAS,SAAErL,EAAQ,QAAEQ,KAAYuI,GAAO5K,EAChG,MAAMmN,EAAOD,GAAa5L,cAAC8L,IAAW,CAACxK,MAAM,UAE7C,OACEd,eAACiL,GAAS,CACRvD,WAAW,SACXC,eAAe,SACf4D,aAAa,MACbL,GAAIA,EACJM,GAAG,MACHC,GAAG,MACHlL,QAASA,EACTJ,MAAO,CAAEuL,OAAQnL,EAAU,UAAY,aACnCuI,EAAK/I,SAAA,CAERsL,EACD7L,cAAC6E,KAAI,CAACsH,cAAc,YAAY7K,MAAM,QAAQ8K,GAAG,MAAK7L,SACnDA,QAqBM8L,I,MAAAA,GAXiCC,IAA0C,IAAzC,YAAEC,EAAW,SAAEhM,KAAa+I,GAAOgD,EAClF,MAAME,EAAeD,IAAgBrG,IAAYC,KAC3C0F,EAAOW,EAAexM,cAAC8L,IAAW,CAACxK,MAAM,UAAatB,cAACyM,IAAa,CAACnL,MAAM,UAEjF,OACEtB,cAAC2L,GAAG,CAACD,GAAIc,EAAe,UAAY,UAAWZ,UAAWC,KAAUvC,EAAK/I,SACtEA,KCnCP,MAAMmM,GAAsB1G,GACrBA,EAIE6D,GAAY7D,GAHV,IAML2G,GAAMrP,IAA6B,IAA5B,SAAEiD,KAAa+I,GAAOhM,EACjC,OACE0C,cAACiI,IAAI,CAACC,WAAW,SAASC,eAAe,mBAAoBmB,EAAK/I,SAC/DA,KAKMqM,GAA4ClO,IAAgC,IAA/B,YAAEsH,KAAgBsD,GAAO5K,EACjF,MAAM,EAAEK,GAAMC,cAEd,OACEwB,eAACmM,GAAG,IAAKrD,EAAK/I,SAAA,CACZC,eAACqE,KAAI,CAACgI,MAAI,EAAAtM,SAAA,CAAExB,EAAE,cAAc,OAC5BiB,cAAC6E,KAAI,CAACgI,MAAI,EAAAtM,SAAA,GAAA2E,OAAKwH,GAAmB1G,GAAY,cAYvC8G,GAAsCR,IAAsD,IAArD,cAAES,EAAa,WAAE9G,EAAU,OAAEN,KAAW2D,GAAOgD,EACjG,MAAM,EAAEvN,GAAMC,cACRgO,EAAmB,GAAA9H,OAAMe,EAAWX,oBAAenK,EAAW,CAAEqK,sBAAuB,IAAI,KAEjG,OACEhF,eAACmM,GAAG,CAAC5J,OAAO,UAAWuG,EAAK/I,SAAA,CAC1BC,eAACqE,KAAI,CAACwD,SAAS,OAAO8D,cAAc,YAAW5L,SAAA,CAC5CwM,EAAc,OAEjBvM,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAAC6E,KAAI,CAACwD,SAAS,OAAO4E,WAAW,OAAOJ,MAAI,EAAAtM,SACzCxB,EAAE,sBAAuB,CAAEkH,WAAY+G,MAE1ChN,cAAC6E,KAAI,CAACmD,GAAG,MAAKzH,SAAC,MACfP,cAAC6E,KAAI,CAACwD,SAAS,OAAO4E,WAAW,OAAM1M,SAAA,GAAA2E,OAAKE,GAAUO,GAAO,iBAUxDuH,GAA4CC,IAA8B,IAA7B,UAAE5B,KAAcjC,GAAO6D,EAC/E,MAAM,EAAEpO,GAAMC,cAEd,OACEwB,eAACmM,GAAG,IAAKrD,EAAK/I,SAAA,CACZC,eAACqE,KAAI,CAACwD,SAAS,OAAM9H,SAAA,CAAExB,EAAE,gBAAgB,OACzCiB,cAAC6E,KAAI,CAACwD,SAAS,OAAM9H,SAAEoJ,GAAY4B,SAuCnC6B,GAAalQ,YAAO4G,IAAP5G,CAAWE,QAAAC,YAAA,uEA1BHgQ,IAM2B,IAN1B,MAC1B9P,EAAK,YACLgP,EAAW,OACXe,EAAM,OACNC,EAAM,WACNC,GAC8CH,EAC9C,OAAIC,EACK,oDAGLE,GAAcD,EACThQ,EAAMC,OAAOmB,UAGlB4N,IAAgBrG,IAAYC,KACvB5I,EAAMC,OAAOiQ,QAGlBlB,IAAgBrG,IAAYwH,KACvBnQ,EAAMC,OAAOmQ,QAGfpQ,EAAMC,OAAOoQ,cAShBC,GAAuB3Q,IAAOC,IAAGW,QAAAT,YAAA,wEACvByQ,IAAA,IAAC,MAAEvQ,GAAOuQ,EAAA,OAAKvQ,EAAMwQ,KAAKC,cAK7BC,GAAgDC,IAMtD,IANuD,OAC5DZ,GAAS,EAAK,WACdE,GAAa,EAAK,OAClBD,GAAS,EAAK,SACdhN,KACG+I,GACJ4E,EACC,OACElO,cAACoN,GAAU,CAACE,OAAQA,EAAQE,WAAYA,EAAYD,OAAQA,KAAYjE,EAAK/I,SAC3EP,cAAC6N,GAAoB,CAAAtN,SAAEA,OAcvB4N,GAA6BnI,GAC5BA,EAIEZ,GAAUY,GAHR,IAMEoI,GAA0DC,IAAgC,IAA/B,YAAErI,KAAgBsD,GAAO+E,EAC/F,MAAM,EAAEtP,GAAMC,cAEd,OACEwB,eAACmM,GAAG,IAAKrD,EAAK/I,SAAA,CACZC,eAACqE,KAAI,CAACgI,MAAI,EAAAtM,SAAA,CAAExB,EAAE,cAAc,OAC5BiB,cAAC6E,KAAI,CAACgI,MAAI,EAAAtM,SAAA,GAAA2E,OAAKiJ,GAA0BnI,GAAY,cAS9CsI,GAA0DC,IAA8B,IAA7B,UAAEhD,KAAcjC,GAAOiF,EAC7F,MAAM,EAAExP,GAAMC,cAEd,OACEwB,eAACmM,GAAG,IAAKrD,EAAK/I,SAAA,CACZC,eAACqE,KAAI,CAACwD,SAAS,OAAM9H,SAAA,CAAExB,EAAE,gBAAgB,OACzCiB,cAAC6E,KAAI,CAACwD,SAAS,OAAM9H,SAAEyE,GAAUuG,SCvHxBiD,OAnCiClR,IAAuD,IAAtD,MAAEyC,EAAK,UAAE0O,GAAY,EAAK,SAAElO,KAAa+I,GAAOhM,EAC/F,MAAM,UAAEiO,EAAS,WAAEmD,EAAU,YAAE1I,GAAgBjG,EACzCwM,EAdeoC,EAACD,EAA8BnD,IAC/CmD,EAIDA,EAAWhE,GAAGa,GACTrF,IAAY0I,MAGdF,EAAWG,GAAGtD,GAAarF,IAAYC,KAAOD,IAAYwH,KAPxD,KAYWiB,CAAeD,EAAYnD,GACzCuD,EAAevC,IAAgBrG,IAAYC,MAC3C,EAAEpH,GAAMC,cACR+P,EAAkBzD,GAAmBoD,EAAYnD,GAEvD,OACE/K,eAACyN,GAAc,CAAC1B,YAAaA,KAAiBjD,EAAK/I,SAAA,CACjDP,cAAC6E,KAAI,CAACvD,MAAM,aAAa+G,SAAS,OAAOwE,MAAI,EAACV,cAAc,YAAYxH,GAAG,MAAKpE,SAC7ExB,EAAE,kBAEJ0P,EACCzO,cAAC6E,KAAI,CAACgI,MAAI,EAACV,cAAc,YAAY7K,MAAM,eAAeqD,GAAG,OAAO0D,SAAS,OAAM9H,SAChFxB,EAAE,cAGLyB,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAC/DmO,EACC1O,cAAC6E,KAAI,CAACvD,MAAOwN,EAAe,UAAY,UAAWjC,MAAI,EAACxE,SAAS,OAAM9H,SACpEoJ,GAAY+E,KAGf1O,cAACgP,KAAQ,CAACjM,OAAO,OAAOkM,GAAG,QAE7BjP,cAACqM,GAAW,CAACE,YAAaA,EAAYhM,SAAEoJ,GAAYoF,QAGvDxD,GAAavL,cAACkN,GAAY,CAAC3B,UAAWA,IACvCvL,cAAC4M,GAAY,CAAC5G,YAAaA,IAC1BzF,MCbQiO,OA/BiClR,IAAoC,IAAnC,MAAEyC,EAAK,SAAEQ,KAAa+I,GAAOhM,EAC5E,MAAM,UAAEiO,EAAS,WAAEmD,EAAU,YAAE1I,GAAgBjG,EACzCwM,EAAcmC,EAAanD,EAAYrF,IAAYC,KAAOD,IAAYwH,KACtEoB,EAAevC,IAAgBrG,IAAYC,MAC3C,EAAEpH,GAAMC,cACR+P,EAAkBL,EAAanD,EAErC,OACE/K,eAACyN,GAAc,CAAC1B,YAAaA,KAAiBjD,EAAK/I,SAAA,CACjDP,cAAC6E,KAAI,CAACvD,MAAM,aAAa+G,SAAS,OAAOwE,MAAI,EAACV,cAAc,YAAYxH,GAAG,MAAKpE,SAC7ExB,EAAE,kBAEJgB,EAAMmP,OACLlP,cAAC6E,KAAI,CAACgI,MAAI,EAACV,cAAc,YAAY7K,MAAM,eAAeqD,GAAG,OAAO0D,SAAS,OAAM9H,SAChFxB,EAAE,cAGLyB,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAChEP,cAAC6E,KAAI,CAACvD,MAAOwN,EAAe,UAAY,UAAWjC,MAAI,EAACxE,SAAS,OAAM9H,SACpEyE,GAAU0J,KAEb1O,cAACqM,GAAW,CAACE,YAAaA,EAAYhM,SAAEyE,GAAU+J,QAGrDxD,GAAavL,cAACsO,GAAmB,CAAC/C,UAAWA,IAC9CvL,cAACoO,GAAmB,CAACpI,YAAaA,IACjCzF,MCRQ4O,I,MAAAA,GA1BUzI,IACvB,MAAO0I,EAAcC,GAAmBrV,oBAAS,IAC3C,QAAE6B,GAAYC,cAqBpB,OAnBAtB,qBAAU,KAcJqB,GAb0BpB,WAC5B,MAAMyM,EAAsBoI,cAG5B,SAFyBpI,EAAoBqI,WAAW7I,EAAO7K,GAE/C,CAEd,MAAMkP,QAAe7D,EAAoB6D,OAAOrE,EAAO7K,GACvDwT,GAAmC,IAAnBtE,EAAOrL,cAEvB2P,GAAgB,IAKlBG,KAED,CAAC3T,EAAS6K,EAAO2I,IAEb,CAAED,eAAcC,oBCJzB,MAAMI,GAAkBvS,YAAO4G,IAAP5G,CAAWE,QAAAC,YAAA,sGACbC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOkS,gBAM5CC,GAAUzS,IAAO0S,GAAE9R,QAAAT,YAAA,oCACHqB,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMC,OAAOoQ,cA0JnCiC,I,GAAAA,GAvJ6BvD,IAAsB,IAArB,IAAEzM,EAAG,OAAEiQ,GAAQxD,EAC1D,MAAM,EAAEvN,GAAMC,cACR5D,EAAWC,eACX,QAAEQ,GAAYC,eACd,aAAEsT,GAAiBD,GAAgBtP,EAAIE,MAAM2G,OAC7CU,EAAeC,eACf0I,GAAYlQ,EAAIH,SAAWG,EAAIC,WAAaD,EAAIE,MAAMD,SACtD+F,EAAamK,eACb,UAAEC,EAAS,QAAEC,EAAO,eAAEC,GAAmBC,aAC7CpQ,cAAC6E,KAAI,CAACC,GAAG,IAAGvE,SAAExB,EAAE,0EAA2E,CAAEsR,IAAK,SAClG,CAAEC,UAAW,SAGTC,EAAWT,IAAWU,IAAOC,IAG7BpK,EAASkK,EAAWnK,GAAavG,EAAKgG,GAAchG,EAAI8F,OACxD+K,EAAWrK,EAASxG,EAAI8F,OAExBgL,EAAiBA,KACrB,OAAQb,GACN,KAAKU,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOI,KACV,MAAO,aACT,KAAKJ,IAAOK,SACV,MAAO,eACT,QACE,MAAO,SA+Cb,OACErQ,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEC,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,MAAKpE,SAAA,CAC/DP,cAAC0E,IAAO,CAAAnE,SAAExB,EAAE,kBACZyB,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAAC0E,IAAO,CAACI,GAAG,KAAKxD,MAAOqP,IAAkBxE,cAAc,YAAYU,MAAI,EAAChM,GAAG,MAAKN,SAhDnEwQ,MACpB,OAAQjB,GACN,KAAKU,IAAOC,IACV,OAAO1R,EAAE,OACX,KAAKyR,IAAOI,KACV,OAAO7R,EAAE,QACX,KAAKyR,IAAOK,SACV,OAAO9R,EAAE,YACX,QACE,MAAO,KAwCFgS,KApCWC,MACpB,OAAQlB,GACN,KAAKU,IAAOC,IACV,OAAOzQ,cAACiR,KAAS,CAAC3P,MAAOqP,MAC3B,KAAKH,IAAOI,KACZ,KAAKJ,IAAOK,SACV,OAAO7Q,cAACkR,IAAS,CAAC5P,MAAOqP,MAC3B,QACE,OAAO,OA8BJK,SAGLxQ,eAACiP,GAAe,CAAAlP,SAAA,CACbuP,IAAWU,IAAOC,MAAQV,GACzB/P,cAACoJ,GAAqB,CACpB/C,OAAQjB,GAAUiB,GAClBI,UAAW5G,EAAI8F,OAAOqE,WACtBtD,MAAO7G,EAAIE,MAAM2G,MACjB2C,YAAa0G,EACbrP,MAAM,OACNiE,GAAG,OACHiC,UA1BYnM,UAEpBW,EAAS+V,YAA0B,CAAEtV,UAASuV,MAAOvR,EAAIoE,MACzD7I,EAASyB,YAAgB,CAAEhB,UAASiB,OAAQ,CAAC+C,EAAIE,MAAM2G,WAuBtBnG,SAExBV,EAAIH,QAAUX,EAAE,qBAAuBA,EAAE,sBAG7Cc,EAAIH,SACHM,cAACiI,IAAI,CAACE,eAAe,SAAQ5H,SAC3BP,cAAC6I,KAAY,CAACC,KAAMC,aAAelJ,EAAIwR,YAAa,eAAgB1M,GAAG,OAAMpE,SAC1ExB,EAAE,uBAIR+Q,IAAWU,IAAOK,UAAYzB,GAC7BpP,cAAC0J,GAAqB,CAAChD,MAAO7G,EAAIE,MAAM2G,MAAOhG,MAAM,OAAOiE,GAAG,SAEjEnE,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAChEC,eAACqE,KAAI,CAAAtE,SAAA,CAAExB,EAAE,kBAAkB,OAC3BiB,cAACqM,GAAW,CAACE,YAAa1M,EAAIC,SAASS,SACpCV,EAAIC,WAAaoG,IAAYC,KAAOpH,EAAE,MAAQA,EAAE,aAGrDyB,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAChEP,cAAC6E,KAAI,CAAAtE,SAAExB,EAAE,mBACTiB,cAAC6E,KAAI,CAAAtE,SAAA,GAAA2E,OAAKE,GAAUvF,EAAI8F,QAAO,aAEjCnF,eAACyH,IAAI,CAACC,WAAW,QAAQC,eAAe,gBAAe5H,SAAA,CACrDC,eAACqE,KAAI,CAACgI,MAAI,EAAAtM,SAAA,CAAaxB,EAAXwR,EAAa,gBAAqB,eAAe,OAC7D/P,eAACsD,IAAG,CAACnD,MAAO,CAAEyH,UAAW,SAAU7H,SAAA,CACjCP,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAlEEgQ,MACrB,OAAQxB,GACN,KAAKU,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOI,KACV,MAAO,UACT,KAAKJ,IAAOK,SACZ,QACE,MAAO,SA0DeS,GAAiB/Q,SAAA,GAAA2E,OAAKqL,EAAW,IAAM,KAAGrL,OAAGE,GAAUiB,GAAO,UAChFrG,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,KAAA2E,OAChCE,GAAUgC,EAAakB,MAAMjC,GAAQkL,qBAIhDhB,GACC/P,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC2P,GAAO,IACRnP,eAACyH,IAAI,CAACC,WAAW,QAAQC,eAAe,gBAAe5H,SAAA,CACrDC,eAACqE,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,CACrCxB,EAAE,qBAAqB,OAE1ByB,eAACyH,IAAI,CAACE,eAAe,MAAK5H,SAAA,CACxBP,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,GAAA2E,OAAKE,GAAUsL,GAAS,UAChE1Q,cAAA,QAAMf,IAAKgR,EAAU1P,SACnBP,cAACwR,KAAQ,CAAClQ,MAAM,aAAa8K,GAAG,aAGnC+D,GAAkBD,eChKjC,MAAMuB,GAAmBvU,IAAOC,IAAGC,QAAAC,YAAA,uFACbC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOkU,YACrBhT,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMC,OAAOoQ,cAyC1C+D,I,MAAAA,GArC+BrF,IAAsB,IAArB,IAAEzM,EAAG,OAAEiQ,GAAQxD,EAC5D,MAAM,EAAEvN,GAAMC,eACR,YAAEgH,EAAW,WAAEF,EAAU,WAAEC,GAAelG,EAAIE,MAC9C6R,EAAiBnM,GAAcO,EAAaF,GAC5C+L,EAAiBpM,GAAcO,EAAaD,GAElD,OACEvF,eAACiR,GAAgB,CAAAlR,SAAA,CACduP,IAAWU,IAAOK,UACjB7Q,cAAC6E,KAAI,CAACC,GAAG,IAAIxD,MAAM,UAAUqD,GAAG,OAAMpE,SACnCxB,EACC,wHAIL+Q,IAAWU,IAAOjU,MAAQyD,cAAC6P,GAAS,CAAChQ,IAAKA,EAAKiQ,OAAQA,IACxD9P,cAAC0E,IAAO,CAACC,GAAG,MAAKpE,SAAExB,EAAE,mBACrByB,eAACsR,GAAkB,CAAC/R,MAAOF,EAAIE,MAAO4E,GAAG,OAAMpE,SAAA,CAC7CP,cAAC8M,GAAS,CAACC,cAAehO,EAAE,MAAOkH,WAAY2L,EAAgBjM,OAAQG,IACvE9F,cAAC8M,GAAS,CAACC,cAAehO,EAAE,QAASkH,WAAY4L,EAAgBlM,OAAQI,OAE3EvF,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,MAAKpE,SAAA,CAC/DP,cAAC6E,KAAI,CAAAtE,SAAExB,EAAE,mBACTiB,cAAC+R,KAAI,CAACjJ,KAAMC,aAAelJ,EAAIE,MAAMiS,UAAW,SAAUC,UAAQ,EAAA1R,SAC/DV,EAAIE,MAAMiS,eAGfxR,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAe5H,SAAA,CACtDP,cAAC6E,KAAI,CAAAtE,SAAExB,EAAE,mBACTiB,cAAC+R,KAAI,CAACjJ,KAAMC,aAAelJ,EAAIE,MAAMmS,SAAU,SAAUD,UAAQ,EAAA1R,SAC9DV,EAAIE,MAAMmS,kBCxBrB,MAAMC,GAAYjV,YAAO+K,KAAMmK,MAAM,CAAElK,WAAY,SAAUH,EAAG,QAA9C7K,CAAuDE,QAAAC,YAAA,yFACnDC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMwQ,KAAKC,cACnBtP,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMC,OAAOoQ,cAInDyE,GAAanV,YAAO4G,IAAP5G,CAAWY,QAAAT,YAAA,sBAwIfiV,I,SAAAA,GApI2BhG,IAAc,IAAb,IAAEzM,GAAKyM,EAChD,MAAOzN,EAAQC,GAAa9E,oBAAS,IAC/B,OAAE2L,EAAM,MAAE5F,GAAUF,GAEpB,EAAEd,GAAMC,cACRjD,EAAeC,cACfG,EAASC,cACTyJ,EAAamK,cACb5U,EAAWC,eACX,QAAEQ,GAAYC,cA6BdyW,EAAcC,YAAe3S,EAAK9D,GAClC0W,EA1BiB3C,KACrB,OAAQA,GACN,KAAKU,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOI,KACV,MAAO,UACT,KAAKJ,IAAOK,SACV,MAAO,eACT,QACE,MAAO,SAiBW6B,CAAcH,GAChCI,GAdkB7C,EAcgByC,KAbvB/B,IAAOI,KACb,IAGLd,IAAWU,IAAOC,IACb,IAGF,GATeX,MAexB,MAAM8C,EAAc7S,EAAM2G,QAAU3K,EAC9B8W,EAAc1W,IAAWG,IAAiBC,MAAQwD,EAAM2G,QAAU3K,EAAe,EACjFgU,GAAYlQ,EAAIH,SAAWG,EAAIC,WAAaD,EAAIE,MAAMD,SAGtDuG,EAASkM,IAAgB/B,IAAOC,IAAMrK,GAAavG,EAAKgG,GAAcF,EA2C5E,OACEnF,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEC,eAAC2R,GAAS,CAACpR,QAhFI+R,IAAMhU,GAAWD,GAgFAkU,KAAK,SAAQxS,SAAA,CAC3CP,cAAC8D,IAAG,CAACpD,MAAM,OAAMH,SACfC,eAACqE,KAAI,CAACuD,UAAU,SAAQ7H,SAAA,CACtBP,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SACrCxB,EAAE,WAELiB,cAAC6E,KAAI,CAACgI,MAAI,EAACI,WAAY,EAAE1M,SACtBR,EAAM2G,MAAMpB,wBAInBtF,cAACqS,GAAU,CAACpG,GAAG,OAAM1L,SArDrBqS,EAEApS,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAACgT,KAAQ,CAAC1R,MAAM,UAAUT,GAAG,MAAMH,MAAM,SACzCV,cAAC6E,KAAI,CAACvD,MAAM,UAAUuL,MAAI,EAAAtM,SACvBxB,EAAE,sBAMP8T,EAEArS,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAACiT,KAAqB,CAAC3R,MAAM,YAAYT,GAAG,MAAMH,MAAM,SACxDV,cAAC6E,KAAI,CAACvD,MAAM,YAAYuL,MAAI,EAAAtM,SACzBxB,EAAE,iBAOTyB,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SACrCxB,EAAE,iBAELiB,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAAOmR,EAAiBxF,WAAY,EAAE1M,SAC9CgS,IAAgB/B,IAAOK,SAAW9R,EAAE,YAAW,GAAAmG,OAAMyN,GAAgBzN,OAAGE,GAAUiB,WA0BpFkM,IAAgB/B,IAAOC,KAAOV,GAC7B/P,cAACoJ,GAAqB,CACpBC,YAAa0G,EACbrJ,MAAO7G,EAAIE,MAAM2G,MACjBL,OAAQjB,GAAUiB,GAClBO,UAzBYnM,UAEpBW,EAAS+V,YAA0B,CAAEtV,UAASuV,MAAOvR,EAAIoE,MACzD7I,EAASyB,YAAgB,CAAEhB,UAASiB,OAAQ,CAAC+C,EAAIE,MAAM2G,WAuB/CD,UAAW5G,EAAI8F,OAAOqE,WACtBkJ,MAAM,KACNrS,GAAG,MAAKN,SAEPxB,EAAE,aAGNwT,IAAgB/B,IAAOK,UAAYd,GAClC/P,cAAC0J,GAAqB,CAAChD,MAAO7G,EAAIE,MAAM2G,MAAOwM,MAAM,KAAKrS,GAAG,MAAKN,SAC/DxB,EAAE,cAGL6T,IAAgBC,GAChB7S,cAACkB,KAAU,CAACC,QAAQ,OAAO+R,MAAM,KAAI3S,SAClC1B,EAASmB,cAACmT,IAAa,IAAMnT,cAACoT,IAAe,SAInDvU,GAAUmB,cAAC2R,GAAU,CAAC9R,IAAKA,EAAKiQ,OAAQ0C,YAAe3S,EAAK9D,SCjJnE,MAAMsX,GAASnW,IAAOoW,MAAKlW,QAAAC,YAAA,sGAOrBkW,GAAerW,YAAO4G,IAAP5G,CAAWY,QAAAT,YAAA,+DAChBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,UAAU+V,aAKhDC,GAAsBvW,IAAOC,IAAGc,QAAAZ,YAAA,qGAWhCqW,GAAiBC,IACrB,OAAQA,GACN,KAAKC,IAAcC,UACjB,OAAO,EACT,KAAKD,IAAcE,YACjB,OAAO,EACT,KAAKF,IAAcG,IACnB,QACE,SASC,IAAKC,IAGX,SAHWA,OAAW,mBAAXA,IAAW,aAGtB,CAHWA,QAAW,KAoFRC,OA/EuBvV,IAAkC,IAAjC,UAAEwV,EAAS,aAAEC,GAAczV,EAChE,MAAMiV,EAAgBS,cAChBC,EAAoBC,eACpB,EAAEvV,GAAMC,cACR5D,EAAWC,eACX,QAAEQ,GAAYC,cAMdyY,EAAgBC,GAA6B/Z,UAC7C+Z,IAAcb,UACVvY,EAASqZ,YAAa,CAAE5Y,UAAS6D,QAASgU,GAAcc,MAC9DpZ,EAASsZ,YAAiBF,MAS9B,OACEhU,eAAC+S,GAAY,CAAAhT,SAAA,CACXC,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAChEP,cAAC0E,IAAO,CAACI,GAAG,KAAK6P,KAAK,KAAIpU,SACvBxB,EAAE,aAELiB,cAACc,IAAM,CAACC,QAtBMK,KAClBhG,EAAS6F,aAAoB,KAqBKE,QAAQ,OAAO8H,QAASjJ,cAAC4U,IAAgB,CAACtT,MAAM,YAAc2K,GAAG,IAAG1L,SAC/FxB,EAAE,cAGPiB,cAACyT,GAAmB,CAAAlT,SAClBC,eAACqU,IAAU,CAACC,YAAaZ,EAAWhB,MAAM,KAAK/R,QAAQ,SAAS4T,YAhBpDta,UAChB0Z,EAAaa,SACPT,EAAaX,IAAcG,IAA3BQ,IAcqFhU,SAAA,CACrFP,cAACiV,IAAc,CAAA1U,SAAExB,EAAE,YACnBiB,cAACiV,IAAc,CAAA1U,SAAExB,EAAE,cAGtBmV,IAAcF,GAAYkB,QACzB1U,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC6E,KAAI,CAACvD,MAAM,aAAa+G,SAAS,OAAO1D,GAAG,MAAKpE,SAC9CxB,EAAE,YAELyB,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBC,eAAC6S,GAAM,CAAA9S,SAAA,CACLP,cAACmV,KAAK,CACJjC,MAAM,KACNkC,QAASzB,IAAkBC,IAAcG,IACzCtK,SAAU4K,IAAsBxY,EAChCwZ,SAAUd,EAAaX,IAAcG,OAEvC/T,cAAC6E,KAAI,CAACuH,GAAG,MAAK7L,SAAExB,EAAE,YAEpByB,eAAC6S,GAAM,CAAA9S,SAAA,CACLP,cAACmV,KAAK,CACJjC,MAAM,KACNkC,QAASzB,IAAkBC,IAAcC,UACzCpK,SAAU4K,IAAsBxY,EAChCwZ,SAAUd,EAAaX,IAAcC,aAEvC7T,cAAC6E,KAAI,CAACuH,GAAG,MAAK7L,SAAExB,EAAE,kBAEpByB,eAAC6S,GAAM,CAAA9S,SAAA,CACLP,cAACmV,KAAK,CACJjC,MAAM,KACNkC,QAASzB,IAAkBC,IAAcE,YACzCrK,SAAU4K,IAAsBxY,EAChCwZ,SAAUd,EAAaX,IAAcE,eAEvC9T,cAAC6E,KAAI,CAACuH,GAAG,MAAK7L,SAAExB,EAAE,8BCrGjBuW,I,wBAAAA,GAvB6BhY,IAA8B,IAA7B,cAAEiY,EAAa,KAAEjW,GAAMhC,EAClE,MAAM,EAAEyB,GAAMC,cAEd,OAAOuW,EACLvV,cAAA8Q,WAAA,CAAAvQ,SACGiV,kBAAQlW,EAAM,CAAC,eAAgB,CAAC,SAASmW,KAAK5V,GAC7CG,cAACsS,GAAa,CAAczS,IAAKA,GAAbA,EAAIoE,QAI5BzD,eAACsD,IAAG,CAACiE,EAAE,OAAMxH,SAAA,CACXP,cAAC0E,IAAO,CAACiQ,KAAK,KAAKvM,UAAU,SAASzD,GAAG,MAAKpE,SAC3CxB,EAAE,qCAELiB,cAAC6E,KAAI,CAACC,GAAG,IAAIsD,UAAU,SAAQ7H,SAC5BxB,EACC,2HCTH,MAAM2W,GAAgB9X,YAASR,QAAAC,YAAA,4GAKdC,IAAA,IAAC,OAAEpC,GAAoBoC,EAAA,OAAKpC,KAIvCya,GAAkB/X,YAASE,QAAAT,YAAA,6FAKdiM,IAAWA,EAAMsM,SAI9BC,GAAM3Y,IAAO4Y,IAAG7X,QAAAZ,YAAA,2EAMvB0Y,GAAe7Y,IAAO8Y,OAAM7X,QAAAd,YAAA,wEAGXiM,GAAK,GAAApE,OAAQoE,EAAMpO,OAAM,cAGnC+a,GAAY/Y,YAAO6Y,GAAP7Y,CAAoBmB,QAAAhB,YAAA,wDAE9BqY,IAGFQ,GAAWhZ,YAAO6Y,GAAP7Y,CAAoBuB,QAAApB,YAAA,iGAEpBiM,IAAWA,EAAMsM,QAC1BF,GAA0BC,IAG5BvX,GAAUlB,IAAOC,IAAGgZ,QAAA9Y,YAAA,oEAMpB+Y,GAAOlZ,IAAOC,IAAGkZ,QAAAhZ,YAAA,oOClDxBiZ,GAAgB,QA4BPC,OA1B2BjZ,IAAoB,IAAnB,KAAEkZ,EAAI,IAAEC,GAAKnZ,EACtD,MAAM,EAAEyB,GAAMC,cACR0X,GAAwB,IAAND,GAAcD,EAAOC,IAAME,QAAQ,GACrDC,EAAaJ,GAAQC,EAAMD,GAASF,GACpCO,EAAWP,GAAgBM,EACjC,OACEpW,eAACpC,GAAO,CAAAmC,SAAA,CACNC,eAACqV,GAAG,CAACiB,QAAQ,cAAavW,SAAA,CACxBP,cAACiW,GAAS,CAACc,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAK/b,OAAQ0b,IAC1C5W,cAACkW,GAAQ,CAACa,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAK/b,OAAQ2b,EAAUjB,OAAQgB,OAE7DpW,eAAC4V,GAAI,CAAA7V,SAAA,CACHP,cAAC6E,KAAI,CAACqS,OAAK,EAACjK,WAAW,IAAG1M,SACvBxB,EAAE,SAELyB,eAACqE,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO4E,WAAW,IAAG1M,SAAA,CACtCkW,EAAI,IAAEA,EAAMD,KAEfhW,eAACqE,KAAI,CAACqS,OAAK,EAACjK,WAAW,IAAI3L,MAAM,aAAYf,SAAA,CAC1CmW,EAAc,cCvBzB,MAAMS,GAAoB,CACxBV,IAAK,UACLD,KAAM,UACNY,QAAS,QAGLC,GAAmB,CACvBZ,IAAK,IACLD,KAAM,IACNY,QAAS,IAwCIE,I,GAAAA,GArC+Bha,IAAsC,IAArC,KAAEia,EAAI,QAAEC,EAAO,aAAEpQ,GAAc9J,EAC5E,MAAM,EAAEyB,GAAMC,cAERsC,EAAQ6V,GAAkBI,IAC1B,OAAEE,EAAM,OAAE9R,GAAW6R,EAAQD,GAE7BG,GAA8B,IAATD,EADPD,EAAQJ,QAAQK,QACoBd,QAAQ,GAC1DgB,EAAqBJ,EAAKK,OAAO,GAAGC,cAAgBN,EAAKO,MAAM,GAC/DC,EAAyB,QAATR,EAAiBC,EAAQD,GAAMlR,OAASV,EAE9D,OACEnF,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC6E,KAAI,CAAC6C,GAAG,OAAOmF,MAAI,EAACvL,MAAM,aAAYf,SACpCxB,EAAE4Y,KAELnX,eAACyH,IAAI,CAAA1H,SAAA,CACHC,eAACyH,IAAI,CAACrH,KAAK,IAAIoX,cAAc,SAAQzX,SAAA,CACnCC,eAACqE,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO/G,MAAOA,EAAMf,SAAA,CACrCkX,EAAO,IAAE1Y,EAAE,UAAUkZ,uBAExBjY,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAC5B,YAATgX,EAAqBxY,EAAE,SAASkZ,oBAAmB,GAAA/S,OAAMwS,EAAgB,UAG9ElX,eAACyH,IAAI,CAACrH,KAAK,IAAIoX,cAAc,SAAQzX,SAAA,CACnCP,cAAC6E,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO/G,MAAOA,EAAMf,SAAA,GAAA2E,OAClCmS,GAAiBE,IAAKrS,OAAGE,GAAU2S,GAAc,UAEvD/X,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAM,aAAYf,SAAA,KAAA2E,OAChCE,GAAUgC,EAAakB,MAAMyP,GAAexG,yBCxB9D,MAAM5B,GAAUzS,IAAOC,IAAGC,QAAAC,YAAA,0FACJC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAO0a,sBAM5CC,GAAgC,CACpC1B,IAAK,CACHgB,OAAQ,EACR9R,OAAQ,EACRU,OAAQ,EACR+R,UAAW,CACTnU,GAAI,IACJoC,OAAQ,EACRJ,WAAY,IAGhBuQ,KAAM,CACJiB,OAAQ,EACR9R,OAAQ,GAEVyR,QAAS,CACPK,OAAQ,EACR9R,OAAQ,IAuJG0S,I,SAAAA,GArGuB3Z,IAA8B,IAA7B,cAAE6W,EAAa,KAAEjW,GAAMZ,EAC5D,MAAM,EAAEK,GAAMC,eACR,QAAEnD,GAAYC,cACdC,EAAeC,cACfoL,EAAeC,eAEfmQ,EApDcc,EAAChZ,EAAavD,KAClC,MACM8J,EADQ0S,IAAMC,WACKC,YAAY5S,WAAa,IAElD,OAAOvG,EAAKoZ,QAAO,CAAClB,EAAqB3X,KACvC,MAAM0S,EAAcC,YAAe3S,EAAK9D,GACxC,GAAIwW,IAAgB/B,IAAOC,IAAK,CAC9B,MAAMpK,EAASD,GAAavG,EAAKgG,GACjC,IAAI,UAAEuS,GAAcZ,EAAQf,IAC5B,GAAIpQ,EAAS+R,EAAU/R,OAAQ,CAC7B,MAAM,WAAEP,EAAU,WAAEC,EAAU,YAAEC,GAAgBnG,EAAIE,MAC9CkG,EAAaR,GAAcO,EAAanG,EAAIC,WAAaoG,IAAYC,KAAOL,EAAaC,GAC/FqS,EAAY,CAAEnU,GAAIpE,EAAIE,MAAMkE,GAAIoC,SAAQJ,cAE1C,MAAO,CACLwQ,IAAK,CACHgB,OAAQD,EAAQf,IAAIgB,OAAS,EAC7B9R,OAAQ6R,EAAQf,IAAI9Q,OAAS9F,EAAI8F,OACjCU,OAAQmR,EAAQf,IAAIpQ,OAASA,EAC7B+R,aAEFhB,QAAS,CACPK,OAAQD,EAAQJ,QAAQK,OAAS,EACjC9R,OAAQ6R,EAAQJ,QAAQzR,OAAS9F,EAAI8F,QAEvC6Q,KAAMgB,EAAQhB,MAGlB,OAAIjE,IAAgB/B,IAAOI,KAClB,CACL4F,KAAM,CACJiB,OAAQD,EAAQhB,KAAKiB,OAAS,EAC9B9R,OAAQ6R,EAAQhB,KAAK7Q,OAAS9F,EAAI8F,QAEpCyR,QAAS,CACPK,OAAQD,EAAQJ,QAAQK,OAAS,EACjC9R,OAAQ6R,EAAQJ,QAAQzR,OAAS9F,EAAI8F,QAEvC8Q,IAAKe,EAAQf,KAIVe,IACNW,KASaG,CAAchZ,EAAMvD,GAC9B4c,EAAkBnB,EAAQf,IAAIpQ,OAASmR,EAAQhB,KAAK7Q,OACpDiT,EAAsBD,EAAkB,EACxCE,EAAqBrB,EAAQJ,QAAQzR,OAAS6R,EAAQJ,QAAQK,OAC9DqB,EAAoBH,EAAkBnB,EAAQJ,QAAQK,OACtDsB,EAAsBD,EAAoB,EAG1CE,EAAgD,IAAjCxB,EAAQf,IAAI2B,UAAU/R,OAE3C,OAAOkP,EACL/U,eAACsD,IAAG,CAACiE,EAAE,OAAMxH,SAAA,CACXP,cAAC6E,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO/G,MAAM,YAAY2X,GAAG,OAAM1Y,SACnDxB,EAAE,kBAELyB,eAACyH,IAAI,CAAA1H,SAAA,CACHP,cAACuW,GAAQ,CAACC,KAAMgB,EAAQhB,KAAKiB,OAAQhB,IAAKe,EAAQf,IAAIgB,SACtDjX,eAACyH,IAAI,CAAC+P,cAAc,SAAS7P,eAAe,SAAS+Q,GAAG,OAAM3Y,SAAA,CAC5DP,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAAM,aAAYf,SAC1BxB,EAAE,iBAELiB,cAAC6E,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO4E,WAAW,IAAI3L,MAAOsX,EAAsB,UAAY,UAAUrY,SAAA,GAAA2E,OACvF0T,EAAsB,IAAM,IAAE1T,OAAGE,GAAUuT,GAAgB,UAEjE3Y,cAAC6E,KAAI,CAACqS,OAAK,EAAC5V,MAAM,aAAYf,SAAA,KAAA2E,OACtBE,GAAUgC,EAAakB,MAAMqQ,GAAiBpH,qBAI1D/Q,eAACsD,IAAG,CAACoV,GAAG,MAAK3Y,SAAA,CACXP,cAAC6E,KAAI,CAAC6C,GAAG,OAAOmF,MAAI,EAACvL,MAAM,aAAYf,SACpCxB,EAAE,4BAELiB,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAAOyX,EAAsB,UAAY,UAAUxY,SAAA,GAAA2E,OACxD6T,EAAsB,IAAM,IAAE7T,OAAGE,GAAU0T,GAAkB,UAEnE9Y,cAAC6E,KAAI,CAACqS,OAAK,EAAC5V,MAAM,aAAYf,SAAA,KAAA2E,OACtBE,GAAUgC,EAAakB,MAAMwQ,GAAmBvH,eAGvDyH,GACCxY,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC6E,KAAI,CAAC6C,GAAG,OAAOmF,MAAI,EAACvL,MAAM,aAAYf,SACpCxB,EAAE,yBAA0B,CAAEoa,QAAS3B,EAAQf,IAAI2B,UAAUnU,OAEhEzD,eAACyH,IAAI,CAACC,WAAW,WAAU3H,SAAA,CACzBP,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAAM,UAASf,SAAA,IAAA2E,OAAME,GAAUoS,EAAQf,IAAI2B,UAAU/R,QAAO,UACvE7F,eAACqE,KAAI,CAACuH,GAAG,MAAM8K,OAAK,EAAC5V,MAAM,aAAYf,SAAA,CAAC,IACpCiX,EAAQf,IAAI2B,UAAUnS,WAAW0Q,QAAQ,GAAG,WAGlD3W,cAAC6E,KAAI,CAACqS,OAAK,EAAC5V,MAAM,aAAYf,SAAA,KAAA2E,OACtBE,GAAUgC,EAAakB,MAAMkP,EAAQf,IAAI2B,UAAU/R,QAAQkL,kBAKvEvR,cAAC6E,KAAI,CAAC6C,GAAG,OAAOmF,MAAI,EAACvL,MAAM,aAAYf,SACpCxB,EAAE,sCAELiB,cAAC6E,KAAI,CAACgI,MAAI,EAAAtM,SAAA,GAAA2E,OAAKE,GAAUyT,GAAmB,UAC5C7Y,cAAC6E,KAAI,CAACqS,OAAK,EAAC5V,MAAM,aAAYf,SAAA,KAAA2E,OACtBE,GAAUgC,EAAakB,MAAMuQ,GAAoBtH,eAGzDvR,cAAC2P,GAAO,IAER3P,cAACsX,GAAU,CAACC,KAAK,MAAMC,QAASA,EAASpQ,aAAcA,IACvDpH,cAACsX,GAAU,CAACC,KAAK,OAAOC,QAASA,EAASpQ,aAAcA,IACxDpH,cAACsX,GAAU,CAACC,KAAK,UAAUC,QAASA,EAASpQ,aAAcA,IAE3DpH,cAACiI,IAAI,CAACE,eAAe,SAAST,GAAG,OAAMnH,SACrCP,cAAC+R,KAAI,CAACjJ,KAAI,GAAA5D,OAAK6D,aAAelN,EAAS,WAAU,eAAe8I,GAAG,OAAOsN,UAAQ,EAAA1R,SAChFC,eAACM,IAAM,CAAC4G,GAAG,MAAMhH,MAAM,OAAMH,SAAA,CAC1BxB,EAAE,wBACHiB,cAACoZ,KAAW,CAAC9X,MAAM,QAAQ8K,GAAG,qBAOxC5L,eAACsD,IAAG,CAACiE,EAAE,OAAMxH,SAAA,CACXP,cAAC0E,IAAO,CAACiQ,KAAK,KAAKvM,UAAU,SAASzD,GAAG,MAAKpE,SAC3CxB,EAAE,qCAELiB,cAAC6E,KAAI,CAACC,GAAG,IAAIsD,UAAU,SAAQ7H,SAC5BxB,EACC,2HClLV,MAAMsa,GAAgBnc,IAAOC,IAAGC,QAAAC,YAAA,kGACVC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMwQ,KAAKC,cAM1CsL,GAAapc,IAAOC,IAAGW,QAAAT,YAAA,mFAOvBkc,GAAiBrc,IAAOC,IAAGc,QAAAZ,YAAA,yLAEXqB,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMwQ,KAAKC,cAsEjCwL,OA5DCA,KACd,MAAM,QAAE3d,GAAYC,cACdV,EAAWC,cACX8D,EAAoBC,cACpBiV,EAAoBC,cACpBX,EAAgBS,cAChBrY,EAAeC,eACf,EAAE+C,GAAMC,cACRM,EAAOma,YAAuB5d,IAC7BqY,EAAWC,GAAgBna,mBAASga,GAAYkB,QAEvD1a,qBAAU,KACJqB,GAAWsD,GACb/D,EAASqZ,YAAa,CAAE5Y,eAEzB,CAACA,EAASE,EAAcoD,EAAmB/D,IAI9C,MAAMse,EAAU/F,IAAkBC,IAAcE,YAAc6F,YAAwBra,GAAQA,EAExFiW,EAAgBmE,GAAWA,EAAQxe,OAAS,EAElD,IAAI0e,EAAqB,KAEzB,OAAQ1F,GACN,KAAKF,GAAY6F,IACfD,EAAqB5Z,cAACqY,GAAM,CAAC9C,cAAeA,EAAejW,KAAMoa,IACjE,MACF,KAAK1F,GAAYkB,OACjB,QACE0E,EAAqB5Z,cAACsV,GAAS,CAACC,cAAeA,EAAejW,KAAMoa,IAaxE,OATK7d,IACH+d,EACEpZ,eAACyH,IAAI,CAACE,eAAe,SAASD,WAAW,SAAS8P,cAAc,SAAStQ,GAAG,OAAMnH,SAAA,CAChFP,cAAC8Z,KAAmB,IACpB9Z,cAAC6E,KAAI,CAAC6C,GAAG,MAAKnH,SAAExB,EAAE,6DAMtByB,eAAC6Y,GAAa,CAAA9Y,SAAA,CACZP,cAACiU,GAAM,CAACC,UAAWA,EAAWC,aAAcA,IAC5CnU,cAACsZ,GAAU,CAAA/Y,SACR8T,EACCrU,cAACuZ,GAAc,CAAAhZ,SACbP,cAAC+Z,KAAO,CAACpF,KAAM,OAGjBiF,Q,+DC5FH,MAAMI,GAAsD1c,IAA6B,IAA5B,SAAE2c,KAAa3Q,GAAOhM,EACxF,MACM4c,EADQvW,cACKnG,OAAOyc,EAAW,UAAY,YAEjD,OACEzZ,eAAC2Z,KAAG,CAACpX,OAAO,OAAOrC,MAAM,QAAQoW,QAAQ,gBAAiBxN,EAAK/I,SAAA,CAC7DP,cAAA,KAAGJ,OAAO,kBAAiBW,SACzBP,cAAA,QACEoa,EAAE,yNACFF,KAAMA,MAGVla,cAAA,QAAAO,SACEC,eAAA,UACEyD,GAAG,YACHoW,EAAE,UACFC,EAAE,IACF5Z,MAAM,MACNqC,OAAO,UACPwX,YAAY,iBACZC,0BAA0B,OAAMja,SAAA,CAEhCP,cAAA,WAASya,aAAa,IAAI3K,OAAO,uBACjC9P,cAAA,WAAS0a,KAAK,SAASxa,GAAG,gBAAgBya,IAAI,qBAAqB7K,OAAO,UAC1E9P,cAAA,iBACEE,GAAG,cACHqX,KAAK,SACLqD,OAAO,4CACP9K,OAAO,cAET9P,cAAA,eACAA,cAAA,kBAAgB6a,aAAa,MAC7B7a,cAAA,eAAa2a,IAAI,YAAYG,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9Dhb,cAAA,iBAAeuX,KAAK,SAASqD,OAAO,+CACpC5a,cAAA,WAAS0a,KAAK,SAASC,IAAI,QAAQ7K,OAAO,iCAOvCmL,GAAoDvc,IAA6B,IAA5B,SAAEub,KAAa3Q,GAAO5K,EACtF,MACMwb,EADQvW,cACKnG,OAAOyc,EAAW,UAAY,YAEjD,OACEzZ,eAAC2Z,KAAG,CAACpX,OAAO,OAAOrC,MAAM,QAAQoW,QAAQ,gBAAiBxN,EAAK/I,SAAA,CAC7DP,cAAA,KAAGJ,OAAO,kBAAiBW,SACzBP,cAAA,QACEoa,EAAE,4NACFF,KAAMA,MAGVla,cAAA,QAAAO,SACEC,eAAA,UACEyD,GAAG,YACHoW,EAAE,UACFC,EAAE,UACF5Z,MAAM,MACNqC,OAAO,UACPwX,YAAY,iBACZC,0BAA0B,OAAMja,SAAA,CAEhCP,cAAA,WAASya,aAAa,IAAI3K,OAAO,uBACjC9P,cAAA,WAAS0a,KAAK,SAASxa,GAAG,gBAAgBya,IAAI,qBAAqB7K,OAAO,UAC1E9P,cAAA,iBACEE,GAAG,cACHqX,KAAK,SACLqD,OAAO,4CACP9K,OAAO,cAET9P,cAAA,eACAA,cAAA,kBAAgB6a,aAAa,MAC7B7a,cAAA,eAAa2a,IAAI,YAAYG,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9Dhb,cAAA,iBAAeuX,KAAK,SAASqD,OAAO,+CACpC5a,cAAA,WAAS0a,KAAK,SAASC,IAAI,QAAQ7K,OAAO,iC,OCvEpD,MAAMoL,GAAmBhe,YAAOyO,KAAPzO,CAAWE,QAAAC,YAAA,kFAGpBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOwQ,cA0B7BmN,I,SAAAA,GAvB+Bzc,IAAqC,IAApC,OAAEiH,EAAM,WAAE0D,GAAa,GAAO3K,EAC3E,MAAM,EAAEK,GAAMC,eACR,UAAEiR,EAAS,eAAEE,EAAc,QAAED,GAAYE,aAC7CpQ,cAAA,OAAKW,MAAO,CAAEya,WAAY,UAAW7a,SAAA,GAAA2E,OAAK2E,GAAYlE,GAAO,UAC7D,CAAE2K,UAAW,WAGf,OACE9P,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEC,eAAA,QAAMvB,IAAKgR,EAAU1P,SAAA,CACnBP,cAACkb,GAAgB,CACf/Z,QAAQ,YACRka,SAAUhS,EACVuC,UAAWvC,EAAarJ,cAACsb,IAAuB,CAAC5a,MAAM,SAAYV,cAACub,IAAmB,CAAC7a,MAAM,SAAUH,SAE1FxB,EAAbsK,EAAe,UAAe,aACb,OACd,IACP8G,GAAkBD,MCjBzB,MAAMsL,GAAete,IAAOC,IAAGC,QAAAC,YAAA,+DAMzBoe,GAAUve,IAAOC,IAAGW,QAAAT,YAAA,0LAYpBqe,GAAoBxe,IAAOC,IAAGc,QAAAZ,YAAA,iDAK9Bse,GACJ,eAACC,EAAQ3gB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,aAAY,MACxB,CAACgf,EAAmB4B,IACdA,EACK,eAGL5B,EACK,QAGF2B,GA0EIE,I,GAAAA,GAvEyCxe,IAQjD,IARkD,UACvDmJ,EAAS,WACTR,EAAU,WACVuH,GAAa,EAAK,WAClBnE,GAAa,EAAK,YAClBkD,EAAcrG,IAAYC,KAAI,WAC9B0V,GAAa,EAAK,SAClB5B,GAAW,GACZ3c,EACC,MAAM,EAAEyB,GAAMC,cACR+c,EAAUJ,GAAa,UAAbA,CAAwB1B,EAAU4B,GAC5CG,EAAYL,GAAa,UAAbA,CAAwB1B,EAAU4B,GAC9CI,EAAYN,KAAe1B,EAAU4B,GACrCK,EACJlc,cAAC8D,IAAG,CAAAvD,SACFC,eAACyH,IAAI,CAACE,eAAe,SAASpF,OAAO,OAAMxC,SAAA,CACzCP,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAO2a,EAAWpP,MAAI,EAACI,WAAW,MAAK1M,cAC3CpF,IAAf8K,EAAwB,GAAAf,OAAMe,EAAU,KAAM,MAEjDjG,cAAC6E,KAAI,CAACwD,SAAS,OAAO/G,MAAO2a,EAAWhP,WAAW,MAAMb,GAAG,MAAK7L,SAC9DxB,EAAE,iBAMLod,EAAiBrc,GAChB0N,EAKHxN,cAAC0b,GAAiB,CAAC/a,MAAOb,EAASS,SACjCP,cAACmb,GAAU,CAACxV,OAAQc,EAAW4C,WAAYA,MALtC,KAUX,OAAIkD,IAAgBrG,IAAYwH,KAE5B1N,cAAC8D,IAAG,CAAC4D,GAAG,OAAO5H,SAAS,WAAUS,SAChCC,eAACgb,GAAY,CAAAjb,SAAA,CACXP,cAACga,GAAwB,CAACC,SAAUA,IACnCkC,EAAc,CAAEC,OAAQ,EAAGC,MAAO,IACnC7b,eAACib,GAAO,CAAAlb,SAAA,EACJsb,GAAcK,EAChBlc,cAAC6E,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO1D,GAAG,MAAMrD,MAAO0a,EAAW7P,cAAc,YAAW5L,SAC5ExB,EAAE,kBASbiB,cAAC8D,IAAG,CAACa,GAAG,OAAO7E,SAAS,WAAUS,SAChCC,eAACgb,GAAY,CAAAjb,SAAA,CACXP,cAACib,GAAsB,CAAChB,SAAUA,IACjCkC,EAAc,CAAEG,IAAK,EAAGC,KAAM,IAC/B/b,eAACib,GAAO,CAAAlb,SAAA,CACNP,cAAC6E,KAAI,CAACgI,MAAI,EAACxE,SAAS,OAAO4E,WAAW,OAAO3L,MAAOya,EAAS5P,cAAc,YAAW5L,SACnFxB,EAAE,SAEH8c,GAAcK,WCjHX1X,I,MAAAA,GAJFtH,YAAOsf,IAAPtf,CAAiBE,QAAAC,YAAA,kCCW9B,MAoBMof,GAAuBA,CAACtgB,EAAgByf,KAC5C,OAAQzf,GACN,IAAK,UACH,MAAO,eACT,IAAK,OACH,MAAO,QACT,IAAK,OACH,MAAO,YACT,IAAK,WACL,IAAK,cACH,MAAO,OACT,QACE,OAAOyf,IAIPc,GAAmBxf,IAAOC,IAAGC,QAAAC,YAAA,6JAEnBC,IAAA,IAAC,MAAEC,EAAK,OAAEpB,GAAQmB,EAAA,MAtCPqf,EAACpf,EAAqBpB,KAC/C,OAAQA,GACN,IAAK,cACH,OAAOoB,EAAMC,OAAOC,UAAUmf,WAChC,IAAK,OACH,MAAO,cACT,IAAK,WACH,OAAOrf,EAAMC,OAAOqf,QACtB,IAAK,OACH,OAAOtf,EAAMC,OAAOmB,UACtB,IAAK,UACL,IAAK,OACL,QACE,OAAOpB,EAAMC,OAAOoQ,aAyBa+O,CAAmBpf,EAAOpB,MAIpDuC,IAAA,IAAC,OAAEvC,GAAQuC,EAAA,MAAiB,SAAXvC,EAAoB,OAAS,SAGrD2gB,GAAQ5f,IAAOC,IAAGW,QAAAT,YAAA,mCAyBT0f,I,GAAAA,GArB+BzQ,IAAqC,IAApC,OAAEnQ,EAAM,MAAEkI,EAAK,MAAEqC,EAAK,KAAEmF,GAAMS,EAC3E,MAAM2P,EAAYQ,GAAqBtgB,EAAQ,QACzCoR,EAAoB,SAAXpR,EAEf,OACEqE,eAACkc,GAAgB,CAACvgB,OAAQA,EAAOoE,SAAA,CAC/BC,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACtBsL,EACD7L,cAAC6E,KAAI,CAACvD,MAAO2a,EAAWpP,KAAMU,EAAQpB,cAAeoB,EAAS,YAAc,aAAcN,WAAW,OAAM1M,SACxG8D,OAGLrE,cAAC8c,GAAK,CAAAvc,SACJP,cAAC6E,KAAI,CAACwD,SAAUkF,EAAS,OAAS,OAAQjM,MAAOmb,GAAqBtgB,EAAQ,cAAeiM,UAAU,SAAQ7H,SAAA,IAAA2E,OACxGwB,WC/Df,MAAMtI,GAAUlB,YAAO+K,IAAP/K,CAAYE,QAAAC,YAAA,gHACNC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOmB,aAM9CD,IAAmB,IAAlB,SAAEse,GAAUte,EACb,OAAOse,EAAQ,oHAmCJC,OAxBuD3Q,IAM/D,IANgE,MACrE5F,EAAK,OACLL,EAAM,UACNI,EAAS,SACTuW,GAAW,KACR1T,GACJgD,EACC,MAAM,EAAEvN,GAAMC,cAGd,OAFoBke,YAAkBxW,GAOpClG,eAACpC,GAAO,CAAC8J,WAAW,SAASH,EAAE,OAAOiV,SAAUA,KAAc1T,EAAK/I,SAAA,CACjEP,cAACS,KAAc,CAACC,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzDb,cAACoJ,GAAqB,CAAC/C,OAAQA,EAAQI,UAAWA,EAAWC,MAAOA,EAAO2C,YAAY,EAAO3I,MAAM,OAAMH,SACvGxB,EAAE,yBAPA,MCWIoe,I,GAAAA,GAvC6C7f,IAAgB,IAAf,MAAEyC,GAAOzC,EACpE,MAAM,EAAEyB,GAAMC,cACRiE,EAAWma,eACX,aAAEhO,EAAY,gBAAEC,GAAoBF,GAAgBpP,EAAM2G,QAC1D,MAAEA,EAAK,WAAE2W,GAAetd,EACxBud,EAAoBD,EAAapa,EAMvC,OACEzC,eAACgE,GAAI,CAAAjE,SAAA,CACHP,cAAC+c,GAAU,CACT5gB,OAAO,WACP0P,KAAM7L,cAACkR,IAAS,CAACrQ,GAAG,MAAMH,MAAM,SAChC2D,MAAOtF,EAAE,YACT2H,MAAO3G,EAAM2G,MACb6W,YAAaD,IAEf9c,eAACiE,IAAQ,CAACsD,EAAE,OAAMxH,SAAA,CAChBP,cAAC8b,GAAe,CAACD,YAAU,IAC3B7b,cAACiO,GAAc,CAAA1N,SACbC,eAACyH,IAAI,CAAC+P,cAAc,SAAS9P,WAAW,SAAQ3H,SAAA,CAC9CP,cAAC6E,KAAI,CAACgI,MAAI,EAACvL,MAAO8N,EAAe,OAAS,eAAe7O,SACtDxB,EAAE,oBAEJqQ,GAAgBpP,cAAC0J,GAAqB,CAAChD,MAAOA,EAAOE,UApB1CnM,UACpB4U,GAAgB,IAmBwE3O,MAAM,OAAOuO,GAAG,QAChGjP,cAAC6I,KAAY,CAACC,KAAK,uDAAuDmJ,UAAQ,EAAA1R,SAC/ExB,EAAE,qBAITiB,cAAC8b,GAAe,CAACvP,YAAarG,IAAYwH,KAAMmO,YAAU,WCrBlE,MAAM2B,GAAyBtgB,YAAOsH,GAAPtH,CAAYE,QAAAC,YAAA,8FAyE5BogB,OAhE2CngB,IASnD,IAToD,MACzDyC,EAAK,UACL0G,EAAS,aACTiX,EAAY,eACZC,EAAc,aACdC,EAAY,eACZC,EAAc,eACdjM,EAAc,eACdC,GACDvU,EACC,MAAM,EAAEyB,GAAMC,eACR,QAAEnD,GAAYC,eACd,aAAEgiB,GAAiBC,eACnB,MAAErX,EAAK,SAAEwL,EAAQ,UAAE3G,EAAS,WAAEmD,GAAe3O,EAE7CwM,EAAcmC,EAAanD,EAAYrF,IAAYC,KAAOD,IAAYwH,KACtE3C,EAASiT,YAAiBniB,EAAS6K,GAEnCuX,EADSnT,GAAeC,EAAQhL,GACPme,gBAAgBvH,QAAQ,GACjDwH,EvB7ByBC,EAACre,EAAkBwd,MAC7Cxd,EAAMmS,UAIJqL,EAAcxd,EAAMmS,WAAmC,IAAvBnS,EAAMse,auBwBtBD,CAAkBre,EAAO+d,GAEhD,OAAIK,EACKne,cAACmd,GAAiB,CAACpd,MAAOA,IAIjCS,eAACsD,IAAG,CAAChE,SAAS,WAAUS,SAAA,CACtBC,eAACgd,GAAsB,CAAAjd,SAAA,CACrBP,cAAC+c,GAAU,CACT5gB,OAAO,UACP0P,KAAM7L,cAACkR,IAAS,CAACrQ,GAAG,MAAMH,MAAM,OAAOY,MAAM,iBAC7C+C,MAAOtF,EAAE,WACTwe,YAAarL,EACbxL,MAAO3G,EAAM2G,QAEflG,eAACiE,IAAQ,CAACsD,EAAE,OAAOpH,MAAO,CAAEb,SAAU,YAAaS,SAAA,CACjDP,cAAC8b,GAAe,CACdrV,UAAWA,EACXR,WAAY2L,EACZqI,SAAU1N,IAAgBrG,IAAYC,KACtCqH,WAAYkQ,EACZrU,WAAYuU,IAEd5d,cAACwO,GAAW,CAACzO,MAAOA,EAAO0O,UAAW0P,IACtCne,cAAC8b,GAAe,CACdrV,UAAWA,EACXR,WAAY4L,EACZtF,YAAarG,IAAYwH,KACzBuM,SAAU1N,IAAgBrG,IAAYwH,KACtCF,WAAYmQ,EACZtU,WAAYwU,UAIlB7d,cAACid,GAAsB,CACrBvW,MAAOA,EACPL,OAAQ4X,EACRxX,UAAWA,EAAYmD,aAAuBnD,EAAW,GAAK,IAC9DuW,SAAUW,Q,UC9EHW,OARqChhB,IAAyC,IAAxC,WAAE+f,EAAU,SAAEnL,KAAa5I,GAAOhM,EACrF,MAAM,aAAEihB,GAAiBR,cACnBS,GAAgBD,EAAelB,IAAenL,EAAWmL,GAAe,IACxEoB,EAAWD,GAAe,IAAMA,EAAc,IAEpD,OAAOxe,cAAC0e,KAAQ,CAACC,YAAaF,KAAcnV,KCsC/BsV,I,MAAAA,GAtCyCthB,IAAgB,IAAf,MAAEyC,GAAOzC,EAChE,MAAM,EAAEyB,GAAMC,cACRiE,EAAWma,cACXE,EAAoBvd,EAAMsd,WAAapa,GACvC,UAAEgN,EAAS,QAAEC,EAAO,eAAEC,GAAmBC,aAC7CrR,EAAE,6GACF,CAAEuR,UAAW,WAGf,OACE9P,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEC,eAACgE,GAAI,CAAAjE,SAAA,CACHP,cAAC+c,GAAU,CACT5gB,OAAO,cACP0P,KAAM7L,cAACgT,KAAQ,CAACnS,GAAG,MAAMH,MAAM,SAC/B2D,MAAOtF,EAAE,eACT2H,MAAO3G,EAAM2G,MACb6W,YAAaD,IAEf9c,eAACiE,IAAQ,CAACsD,EAAE,OAAMxH,SAAA,CAChBP,cAAC8b,GAAe,CAACD,YAAU,IAC3B7b,cAACiO,GAAc,CAAA1N,SACbC,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,SAAS6P,cAAc,SAAQzX,SAAA,CACtEP,cAAC+Z,KAAO,CAACpF,KAAM,KACfnU,eAACyH,IAAI,CAACP,GAAG,MAAMzI,IAAKgR,EAAU1P,SAAA,CAC5BP,cAAC6e,KAAW,CAAAte,SAAExB,EAAE,iBAChBiB,cAACwR,KAAQ,CAACpF,GAAG,gBAInBpM,cAAC8b,GAAe,CAACvP,YAAarG,IAAYwH,KAAMmO,YAAU,UAG7D1L,GAAkBD,MCnBzB,MAAM4O,GAAiB5hB,IAAOC,IAAGC,QAAAC,YAAA,qHAM3B0hB,GAAe7hB,YAAOsH,GAAPtH,CAAYY,QAAAT,YAAA,8BACjBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,UAAU+V,aA4FvCwL,I,YAAAA,GAzFqCtgB,IAO7C,IAP8C,MACnDqB,EAAK,UACL0G,EAAS,aACTiX,EAAY,eACZC,EAAc,eACd/L,EAAc,eACdC,GACDnT,EACC,MAAM,EAAEK,GAAMC,eACR,UAAEuM,EAAS,UAAEyG,EAAS,SAAEE,EAAQ,YAAElM,GAAgBjG,GAClD,aAAEwe,GAAiBR,cACnBjkB,EAAQmlB,cAERC,EAAS3T,GAAazR,EAAM+U,GAAGtD,GAC/B4T,EAAaD,EAAS,UAAY,UAClCE,EAA+BlN,EAAWmN,IAE1CtQ,EAAkBzD,GAAmBxR,EAAOyR,GAC5C+T,EAAgB/X,WAAWqC,aAAuB9P,EAAO,EAAG,KAE5D,QAAEylB,EAAO,OAAEC,GAAWC,sBAAW,CACrCC,MAAO,EACPC,IAAKL,EACLM,SAAU,EACVC,SAAU,KAEN,UAAE5P,EAAS,QAAEC,EAAO,eAAEC,GAAmBC,aAAWrR,EAAE,oCAAqC,CAC/FuR,UAAW,WAGPwP,EAAYlkB,iBAAO4jB,GAMzB,OAJAhlB,qBAAU,KACRslB,EAAUzjB,QAAQijB,KACjB,CAACA,EAAeQ,IAEfvB,EAAea,EACVpf,cAAC4e,GAAe,CAAC7e,MAAOA,IAI/BS,eAACse,GAAc,CAAAve,SAAA,CACbC,eAACue,GAAY,CAAAxe,SAAA,CACXP,cAAC+c,GAAU,CACT5gB,OAAO,OACP0P,KAAM7L,cAACiT,KAAqB,CAACpS,GAAG,MAAMH,MAAM,OAAOY,MAAM,cACzD+C,MAAOtF,EAAE,QACT2H,MAAO3G,EAAM2G,MACb6W,YAAa6B,IAEfpf,cAACse,GAAa,CAACnd,QAAQ,OAAO+R,MAAM,KAAKmK,WAAYrL,EAAWE,SAAUkN,IAC1E5e,eAACiE,IAAQ,CAACsD,EAAE,OAAMxH,SAAA,CAChBP,cAAC8b,GAAe,CACdrV,UAAWA,EACXR,WAAY2L,EACZpE,WAAYkQ,EACZzD,SAAUiF,IAEZ1e,eAACyN,GAAc,CAAC1B,YAAa2S,EAAShZ,IAAYC,KAAOD,IAAYwH,KAAKnN,SAAA,CACxEP,cAAC6E,KAAI,CAACvD,MAAM,aAAa+G,SAAS,OAAOwE,MAAI,EAACV,cAAc,YAAYxH,GAAG,MAAKpE,SAC7ExB,EAAE,gBAELyB,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAO5B,OAAO,OAAMxC,SAAA,CAC9EP,cAAA,OAAKf,IAAKgR,EAAU1P,SAClBP,cAAC6e,KAAW,CAAChS,MAAI,EAACvL,MAAO6d,EAAY9W,SAAS,OAAO1H,MAAO,CAAEof,UAAW,QAASxf,SAC/EzG,EAAM+U,GAAG,GAAE,IAAA3J,OAAOqa,GAAYvf,cAACgP,KAAQ,CAACjM,OAAO,OAAOrC,MAAM,aAGjEV,cAACqM,GAAW,CAACE,YAAa2S,EAAShZ,IAAYC,KAAOD,IAAYwH,KAAKnN,SACpEoJ,GAAYoF,QAGhBxD,GAAavL,cAACkN,GAAY,CAAC3B,UAAWA,IACvCvL,cAAC4M,GAAY,CAAC5G,YAAaA,OAE7BhG,cAAC8b,GAAe,CACdrV,UAAWA,EACXR,WAAY4L,EACZtF,YAAarG,IAAYwH,KACzBF,WAAYmQ,EACZ1D,UAAWiF,UAIhB/O,GAAkBD,MCjHzB,MAAM8P,GAAQ9iB,IAAOC,IAAGC,QAAAC,YAAA,mOAgBlB4iB,GAAO/iB,YAAO8iB,GAAP9iB,CAAaY,QAAAT,YAAA,yCAIpB6iB,GAAQhjB,IAAOC,IAAGc,QAAAZ,YAAA,wNAGDC,IAAA,IAAC,UAAE6iB,GAAW7iB,EAAA,OAAM6iB,EAAY,IAAM,IAIzDH,IACWthB,IAAA,IAAC,UAAEyhB,GAAWzhB,EAAA,OAAMyhB,EAAY,EAAI,KAG/CF,IACW3T,IAAA,IAAC,UAAE6T,GAAW7T,EAAA,OAAM6T,EAAY,GAAK,KAI9CC,GAAiBljB,IAAOC,IAAGgB,QAAAd,YAAA,oDA0BlBgjB,OAb2BlT,IAAsC,IAArC,UAAEgT,EAAS,OAAEpd,EAAM,SAAExC,GAAU4M,EACxE,MAAOmT,EAAOC,GATOhgB,KACrB,GAAwB,IAApBA,EAASrF,OACX,MAAM,IAAIslB,MAAM,uCAGlB,OAAOjgB,GAIekgB,CAAclgB,GAEpC,OACEP,cAACogB,GAAc,CAACzf,MAAO,CAAEoC,UAASxC,SAChCC,eAAC0f,GAAK,CAACC,UAAWA,EAAU5f,SAAA,CAC1BP,cAACggB,GAAK,CAAAzf,SAAE+f,IACRtgB,cAACigB,GAAI,CAAA1f,SAAEggB,U,mBCpDAG,I,GAAAA,GAVGA,KAChB,MAAMC,EAAgBC,qBAAWrf,GAEjC,QAAsBpG,IAAlBwlB,EACF,MAAM,IAAIH,MAAM,oBAGlB,OAAOG,GCHME,OAJC3jB,YAAO+K,KAAMmK,MAAM,CAAElK,WAAY,UAAjChL,CAA4CE,QAAAC,YAAA,sBCuC5D,MAAMyjB,GAAWC,sBAAW,IAAK,QAC3BC,GAAOD,sBAAW,OAAQ,IAC1BE,GAAmB,CAAC,GAAI,GAAI,GAAI,IAyBhCC,GAAsBrf,IAC1B,MAAMsf,EAAe5Z,WAAW1F,GAChC,OAAOuf,OAAOC,MAAMF,GAAgBlnB,IAAOC,UAAUC,KAAK,GAAK4mB,sBAAWlf,IAyN7Dyf,OAtNyChkB,IAAsD,IAArD,SAAEwC,EAAQ,eAAEyhB,EAAc,OAAEC,EAAM,UAAE5a,GAAWtJ,EACtG,MAAOuE,EAAO4f,GAAYznB,mBAAS,KAC5B0nB,EAAaC,GAAkB3nB,oBAAS,IACxC4nB,EAAcC,GAAmB7nB,mBAAS,OAC1C8nB,EAASC,GAAc/nB,mBAAS,IAEjC,QAAE6B,GAAYC,eACd,OAAE4F,GAAWgf,MACXsB,QAASC,GAAeC,eAC1BC,EAAeC,eACf,EAAErjB,GAAMC,eACR,WAAEgI,GAAeC,eACjBC,EAAsBC,eAGtBkb,EAAiBC,mBAAQ,IACtBroB,IAAOC,UAAUC,KAAK8nB,EAAWjY,aACvC,CAACiY,IACEM,EAAaD,mBAAQ,IAClBD,EAAexT,GAAGmS,IAAQqB,EAAe7W,IAAIwV,IAAQA,IAC3D,CAACqB,IACEG,EAAiBrX,aAAgBkX,GAEjCI,EAAYvB,GAAmBrf,GAC/B6gB,EAAmB7mB,GAAW4mB,EAAU5T,GAAG,IAAuB,OAAjB+S,EAmBjDe,EAAuBC,IAC3B,GAAIA,EAAgB,EAAG,CACrB,MAAMC,EAAe5oB,IAAOwQ,YAAYtQ,KAAKooB,GACvCO,EAAc7oB,IAAOwQ,YAAYtQ,KAAK,KACtC4oB,EAAoB9oB,IAAOwQ,YAAYtQ,KAAKyoB,EAAcjM,QAAQ,KAAK9L,UAAUiY,GACjFE,EAAoBH,EAAazX,UAAU2X,GACjDtB,EAASwB,aAAkBD,SAE3BvB,EAAS,IAEXM,EAAWa,KAuBP,IAAEM,EAAG,SAAEzZ,GAxGQ0Z,EACrBthB,EACAogB,EACAmB,KAGMvhB,EAAMgN,GAAG,GACJhN,EAAMwhB,IAAIpB,GAEZA,EAAWpT,GAAG,IAOnBhN,EAAM6I,GAAG,GACJ,CAAEwY,IAAK,kBAAmBzZ,UAAU,GAGtC,CAAEyZ,IAAK,UAAWzZ,SAAU5H,EAAMyhB,GAAGF,IAPnC,CAAEF,IAAK,2BAA4BzZ,UAAU,GA2F5B0Z,CAAeV,EAAWF,EAAYJ,GAkChE,OAhBA3nB,qBAAU,KACR,MAAM+oB,EAAcrC,GAAmBrf,GACV0hB,EAAY1U,GAAG,IAAM0U,EAAYF,IAAId,GAIvDgB,EAAY1U,GAAG,IAAM0U,EAAYD,GAAGnB,GAC7CN,EAAgB,CACdqB,IAAK,gDACLM,KAAM,CAAEzZ,IAAKoB,aAAgBgX,GAAesB,MAAO,SAGrD5B,EAAgB,MAPhBA,EAAgB,CAAEqB,IAAK,+BASxB,CAACrhB,EAAO0gB,EAAYJ,EAAcN,IAGnCrhB,eAACgE,GAAI,CAACkf,YA/CgBC,KACtBjiB,EAAOkiB,SAASC,UAChBniB,EAAOoiB,WAAWD,UAClBniB,EAAOqiB,gBA4C6BC,WAzCfC,KACrBviB,EAAOkiB,SAASM,SAChBxiB,EAAOoiB,WAAWI,SAClBxiB,EAAOyiB,gBAsCwD5jB,SAAA,CAC7DP,cAAC+c,IAAU,CAAChV,EAAE,OAAMxH,SAClBC,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAACkB,KAAU,CAACC,QAAQ,OAAO+R,MAAM,KAAKnS,QAzDzBqjB,KACnB3C,EAAS,IACTM,EAAW,GACXP,KAsDmE3gB,GAAG,MAAKN,SACnEP,cAACqkB,IAAa,CAAC3jB,MAAM,WAEvBV,cAAC6gB,GAAO,CAAAtgB,SACNP,cAAC0E,IAAO,CAACwO,MAAM,KAAI3S,SAAExB,EAAE,oBAEzBiB,cAACqM,GAAW,CAACE,YAAazM,EAAUiB,QAASwgB,EAAehhB,SACzDT,IAAaoG,IAAYC,KAAOpH,EAAE,MAAQA,EAAE,eAInDyB,eAACiE,IAAQ,CAACuH,GAAG,OAAMzL,SAAA,CACjBC,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,MAAKpE,SAAA,CAC/DC,eAACqE,KAAI,CAACuD,UAAU,QAAQ9G,MAAM,aAAYf,SAAA,CACvCxB,EAAE,UAAU,OAEfyB,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAACskB,IAAW,CAACzjB,GAAG,UAChBb,cAAC6E,KAAI,CAACgI,MAAI,EAACV,cAAc,YAAW5L,SAAC,cAKzCP,cAACukB,IAAY,CACX1iB,MAAOA,EACP2iB,YAjHmBC,IACzB,MAAMC,EAAYxD,GAAmBuD,GAErC,GAAIC,EAAUha,GAAG,GACfqX,EAAW,OACN,CACL,MAAM4C,EAAY1qB,IAAOwQ,YAAYtQ,KAAKuqB,GACpC7B,EAAe5oB,IAAOwQ,YAAYtQ,KAAKooB,GACvCO,EAAc7oB,IAAOwQ,YAAYtQ,KAAK,KAEtCyqB,EADaD,EAAU9Z,UAAUgY,GAAczX,UAAU0X,GAC1B5E,gBAErC6D,EAAW6C,EAAoB,IAAM,IAAMA,GAE7CnD,EAASgD,IAoGHI,UAAWnC,EACXoC,WAAY,CAAErb,UAAW5N,GAAW6lB,KAErCgB,GACC1iB,cAAC6E,KAAI,CAACvD,MAAM,UAAU+G,SAAS,OAAOX,GAAG,MAAMU,UAAU,QAAO7H,SAC7DxB,EAAE6iB,EAAasB,IAAKtB,EAAa4B,QAGtCxjB,cAAC6E,KAAI,CAACuD,UAAU,QAAQzD,GAAG,OAAOrD,MAAM,aAAa+G,SAAS,OAAO1H,MAAO,CAAEoC,OAAQ,QAASxC,SAC5F1E,GAAWkD,EAAE,qBAAsB,CAAEijB,QAASQ,MAEjDxiB,cAAC+kB,KAAM,CACLC,KAAK,UACLC,IAAK,EACLC,IAAK,IACLrjB,MAAOigB,EACPqD,eAAgBxC,EAChByC,WAAYvpB,EAAO,GAAAqJ,OAAM4c,EAAQnL,QAAQmL,EAAU,EAAI,EAAI,GAAE,KAAM,GACnEuD,KAAM,IACN5b,UAAW5N,GAAW6lB,EACtB/c,GAAG,MACHX,WAAYnI,GAAW6lB,EAAc,GAAK,sBAE5ClhB,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAgBxD,GAAG,OAAMpE,SAAA,CAC/D0gB,GAAiBxL,KAAK6P,GAMnBtlB,cAACc,IAAM,CAELoS,MAAM,KACN/R,QAAQ,WACRJ,QATgBK,KAClBuhB,EAAoB2C,IASlB7b,UAAW5N,GAAW6lB,EACtB/gB,MAAO,CAAEC,KAAM,GAAIL,SAAA,GAAA2E,OAEfogB,EAAe,MAPdA,KAWXtlB,cAACc,IAAM,CACLoS,MAAM,KACN/R,QAAQ,WACRJ,QAASA,IAAM4hB,EAAoB,KACnClZ,UAAW5N,GAAW6lB,EAAYnhB,SAEjCxB,EAAE,YAGPiB,cAAC8D,IAAG,CAACa,GAAG,MAAKpE,SACV1E,EACCmE,cAACc,IAAM,CACLJ,MAAM,OACN+I,UAAW5N,GAAW4N,EACtB1I,QAtHgBtG,UAC1B,MAAM8qB,EAAYzlB,IAAaoG,IAAYC,KAAO,UAAY,UAE9D,IACE,MAAMqC,QAAWtB,EAAoBqe,GAAW,CAAE1jB,MAAO4gB,EAAUzY,WAAY8W,cAC/Ea,GAAe,GACf,MAAMjZ,QAAgBF,EAAGG,OACzB/B,EAAU6b,EAAUzY,WAAYtB,EAAQE,iBACxC,MACA5B,EAAWjI,EAAE,SAAUA,EAAE,uFAC1B,QACC4iB,GAAe,KA4GP3Y,UAAW0Y,EACXzY,QAASyY,EAAc1hB,cAACkJ,IAAa,CAAC5H,MAAM,eAAe6H,MAAI,IAAM,KAAK5I,SAEzExB,EAAEmkB,KAGLljB,cAAC8Z,KAAmB,CAACpZ,MAAM,WAG/BV,cAAC6E,KAAI,CAACC,GAAG,IAAIuD,SAAS,OAAO4E,WAAY,EAAG3L,MAAM,aAAYf,SAC3DxB,EAAE,wFCvGEymB,OAlJqCloB,IAO7C,IAP8C,MACnDyC,EAAK,UACL0G,EAAS,aACTiX,EAAY,eACZC,EAAc,eACd/L,EAAc,eACdC,GACDvU,EACC,MAAOmoB,EAAOC,GAAY1rB,mBAAgB,CACxC2rB,mBAAmB,EACnB7lB,SAAUoG,IAAYC,QAElB,EAAEpH,GAAMC,cACRiE,EAAW2iB,eACX,aAAE7e,GAAiBE,gBACnB,QAAEpL,GAAYC,cACdV,EAAWC,eACX,aAAEkjB,GAAiBR,eACnB,kBAAE4H,EAAiB,SAAE7lB,GAAa2lB,EAClCI,EAAgBtH,GAAgBxe,EAAMsd,YAAcpa,EAAWoc,KAC/DyG,EAAkBhmB,IAAaoG,IAAYC,KAAOpH,EAAE,MAAM8Y,cAAgB9Y,EAAE,QAAQ8Y,eACpF,UAAE5H,EAAS,eAAEE,EAAc,QAAED,GAAYE,aAC7CpQ,cAAA,OAAKW,MAAO,CAAEya,WAAY,UAAW7a,SAAA,GAAA2E,OAAK2E,GAAYpD,GAAU,UAChE,CAAE6J,UAAW,QAKTyV,EAAqBhmB,EAAMsd,YAAcpa,EAAWoc,KAcpD2G,GAXAtI,IAAgBC,GAII,OAApB5d,EAAMwL,UASN0a,EAAaA,IACjBP,GAAUQ,IAAS,IACdA,EACHP,mBAAmB,MAGjBQ,EAAqBC,IACzBV,GAAUQ,IAAS,IACdA,EACHP,mBAAmB,EACnB7lB,SAAUsmB,OA4Bd,OACE5lB,eAAC6f,GAAQ,CAACF,UAAWwF,EAAmB5iB,OAAO,QAAOxC,SAAA,CACpDC,eAACgE,GAAI,CAAAjE,SAAA,CACHP,cAAC+c,GAAU,CACT5gB,OAAO,OACPuK,MAAO3G,EAAM2G,MACb6W,YAAawI,EACbla,KAAM7L,cAACiT,KAAqB,CAAC3R,MAAM,QAAQT,GAAG,MAAMH,MAAM,SAC1D2D,MAAOtF,EAAE,UAEXyB,eAACiE,IAAQ,CAACsD,EAAE,OAAMxH,SAAA,CAChBP,cAAC8b,GAAe,CAACrV,UAAWA,EAAWR,WAAY2L,EAAgBpE,WAAYkQ,IAC/E1d,cAACiO,GAAc,CAACX,OAAQ0Y,EAAkBzY,QAASyY,EAAiBzlB,SACjEylB,EACCxlB,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAC4M,GAAY,CAAC5G,YAAajG,EAAMiG,YAAarB,GAAG,QACjD3E,cAACc,IAAM,CACLK,QAAQ,UACRT,MAAM,OACNK,QAASA,IAAMolB,EAAkBjgB,IAAYC,MAC7CxB,GAAG,MACH8E,UAAWuc,GAAoBH,EAActlB,SAE5CxB,EAAE,cAELiB,cAACc,IAAM,CACLK,QAAQ,SACRT,MAAM,OACNK,QAASA,IAAMolB,EAAkBjgB,IAAYwH,MAC7CjE,UAAWuc,GAAoBH,EAActlB,SAE5CxB,EAAE,mBAIPyB,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAAA,OAAKf,IAAKgR,EAAU1P,SAClBP,cAACc,IAAM,CAAC2I,UAAQ,EAACmC,UAxCxB9L,IAAaoG,IAAYC,KAAOnG,cAAC8L,IAAW,CAACxK,MAAM,iBAAoBtB,cAACyM,IAAa,CAACnL,MAAM,iBAwC/BZ,MAAM,OAAOiE,GAAG,MAAKpE,SACxExB,EAAE,qBAAsB,CAAEe,SAAUgmB,QAGzC9lB,cAAC4M,GAAY,CAAC5G,YAAajG,EAAMiG,cAChCmK,GAAkBD,OAIzBlQ,cAAC8b,GAAe,CACdrV,UAAWA,EACXR,WAAY4L,EACZtF,YAAarG,IAAYwH,KACzBF,WAAYmQ,UAIlB3d,cAACshB,GAAe,CACdE,OAAQyE,EACRrf,UAzEgBnM,gBACdW,EAASyB,YAAgB,CAAEhB,UAASiB,OAAQ,CAACiD,EAAM2G,UAEzDuf,IAEAlf,EACEhI,EAAE,YACFA,EAAE,8BAA+B,CAC/Be,SAAUgmB,MAkEVhmB,SAAUA,EACVyhB,eAlFiBA,KACrBmE,GAAUQ,IAAS,IACdA,EACHpmB,SAAUomB,EAAUpmB,WAAaoG,IAAYC,KAAOD,IAAYwH,KAAOxH,IAAYC,gB,kBChD1EkgB,OAtCY9I,IACzB,MAAMjiB,EAAQM,iBAAsC,OAC7C0qB,EAAkBC,GAAuBvsB,mBAAS,GAiCzD,OA/BAQ,qBAAU,KACeC,WACrB,MAAM8jB,QAAqBiI,KAAkBC,iBAEzClJ,EAAcgB,IAChBgI,GAAqBhJ,EAAcgB,GAAgBmI,MAG/CprB,EAAMe,SACRb,cAAcF,EAAMe,SAGtBf,EAAMe,QAAUd,aAAY,KAC1BgrB,GAAqBI,IACU,IAAzBA,GACFnrB,cAAcF,EAAMe,SAGfsqB,EAAuB,OAE/B,OAIPC,GAEO,KACLprB,cAAcF,EAAMe,YAErB,CAACkqB,EAAqBhJ,EAAajiB,IAE/BgrB,GC3BMO,OATW,WAAyB,IAAxBC,EAAc7rB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC1C,MAAMgI,EAAW2iB,cACXmB,EAAuBC,cACvBC,EAAcH,EAAiB7jB,EAC/BjI,EAAUqrB,GAAkBU,EAAuBE,GAEzD,OAAOjsB,GCqCMksB,OAjCqC5pB,IAAgB,IAAf,MAAEyC,GAAOzC,EAC5D,MAAM,EAAEyB,GAAMC,cACRiE,EAAWma,cACXrhB,EAAeC,cACfshB,EAAoBvd,EAAMsd,WAAapa,EACvCjI,EAAU6rB,GAAkB9mB,EAAM2G,MAAQ3K,EAAe,GACzDorB,EAAYjd,GAAgBlP,GAElC,OACEwF,eAACgE,GAAI,CAAAjE,SAAA,CACHP,cAAC+c,GAAU,CACT5gB,OAAO,OACP0P,KAAM7L,cAACgT,KAAQ,CAACnS,GAAG,MAAMH,MAAM,SAC/B2D,MAAOtF,EAAE,SACT2H,MAAO3G,EAAM2G,MACb6W,YAAaD,IAEf9c,eAACiE,IAAQ,CAACsD,EAAE,OAAMxH,SAAA,CAChBP,cAAC8b,GAAe,CAACD,YAAU,IAC3B7b,cAACiO,GAAc,CAAA1N,SACbC,eAACqE,KAAI,CAACuD,UAAU,SAAQ7H,SAAA,CACtBP,cAAC6E,KAAI,CAACgI,MAAI,EAAAtM,SAAExB,EAAE,kBACdiB,cAAC6E,KAAI,CAACwD,SAAS,OAAOwE,MAAI,EAAAtM,SAAA,IAAA2E,OACnBiiB,UAIXnnB,cAAC8b,GAAe,CAACvP,YAAarG,IAAYwH,KAAMmO,YAAU,WCoCnDuL,I,eAAAA,GAjE6B9pB,IAAgB,IAAf,MAAEyC,GAAOzC,EACpD,MAAM,MAAEoJ,EAAK,UAAE6E,EAAS,WAAEmD,EAAU,YAAE1I,EAAW,WAAEF,EAAU,WAAEC,GAAehG,EACxEhE,EAAeC,eACf,QAAEH,GAAYC,cACdiP,EAASiT,YAAiBniB,EAAS6K,GACnC8G,IAAazC,GAASA,EAAOpF,OAAOkJ,GAAG,GACvC6O,EAAelQ,GAAczC,EAAOjL,WAAaoG,IAAYC,KAC7DwX,EAAiBnQ,GAAczC,EAAOjL,WAAaoG,IAAYwH,KAC/DkQ,EAAepQ,GAAczC,EAAOrL,SAAWqL,EAAOjL,WAAaoG,IAAYC,KAC/E0X,EAAiBrQ,GAAczC,EAAOrL,SAAWqL,EAAOjL,WAAaoG,IAAYwH,KAEjFkE,EAAiBpH,GAAgBxE,EAAaF,GAC9C+L,EAAiBrH,GAAgBxE,EAAaD,GAE9CshB,EAA0BzV,EAAesM,gBAAgBvH,QAAQ/E,EAAe0V,SAAW,EAAI,GAC/FC,EAA0B1V,EAAeqM,gBAAgBvH,QAAQ9E,EAAeyV,SAAW,EAAI,GAGrG,OAAI5gB,IAAU3K,GAA8B,OAAdwP,EAE1BvL,cAACwlB,GAAa,CACZzlB,MAAOA,EACP4d,eAAgBA,EAChBD,aAAcA,EACdjX,UAAiB,OAANsE,QAAM,IAANA,OAAM,EAANA,EAAQpF,OACnBiM,eAAgByV,EAChBxV,eAAgB0V,IAMH,OAAf7Y,GAAuBhI,IAAU3K,EAAe,EAEhDiE,cAACgf,GAAa,CACZvY,UAAiB,OAANsE,QAAM,IAANA,OAAM,EAANA,EAAQpF,OACnBgY,eAAgBA,EAChBD,aAAcA,EACd3d,MAAOA,EACP6R,eAAgByV,EAChBxV,eAAgB0V,IAMlB7gB,EAAQ3K,EACHiE,cAACknB,GAAa,CAACnnB,MAAOA,IAK7BC,cAACyd,GAAgB,CACf1d,MAAOA,EACP4d,eAAgBA,EAChBD,aAAcA,EACdG,eAAgBA,EAChBD,aAAcA,EACdnX,UAAiB,OAANsE,QAAM,IAANA,OAAM,EAANA,EAAQpF,OACnBiM,eAAgByV,EAChBxV,eAAgB0V,KChEtB,MAAMC,GAAQtqB,YAAO4G,IAAP5G,CAAWE,QAAAC,YAAA,sPAWrBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMe,aAAampB,MAUhCC,GAAQxqB,YAAO2H,KAAP3H,CAAYY,QAAAT,YAAA,kHAItBqB,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMe,aAAampB,MAMhCE,GAAQzqB,YAAO2H,KAAP3H,CAAYe,QAAAZ,YAAA,4GAKtBiP,IAAA,IAAC,MAAE/O,GAAO+O,EAAA,OAAK/O,EAAMe,aAAampB,MAKhCG,GAAW1qB,YAAO2H,KAAP3H,CAAYiB,QAAAd,YAAA,mEACzB8P,IAAA,IAAC,MAAE5P,GAAO4P,EAAA,OAAK5P,EAAMe,aAAampB,MAMhCI,GAAQ3qB,YAAOsH,IAAPtH,CAAYmB,QAAAhB,YAAA,2PACTgQ,IAAA,IAAC,IAAEya,GAAKza,EAAA,MAAc,UAARya,EAAkB,WAAa,gBAC3Cha,IAAA,IAAC,IAAEga,GAAKha,EAAA,MAAc,UAARga,EAAkB,mBAAqB,sBAI3D5Z,IAAA,IAAC,IAAE4Z,GAAK5Z,EAAA,MAAc,UAAR4Z,EAAkB,eAAiB,kBAE1DzZ,IAAA,IAAC,MAAE9Q,GAAO8Q,EAAA,OAAK9Q,EAAMe,aAAampB,MAIvBlZ,IAAA,IAAC,IAAEuZ,GAAKvZ,EAAA,MAAc,UAARuZ,EAAkB,mBAAqB,sBAIvDC,GAA2BA,KACtC,MAAMjuB,EAAQmlB,cACRK,EAAgB/X,WAAWqC,aAAuB9P,EAAO,EAAG,KAC5D,QAAEylB,EAAO,OAAEC,GAAWC,sBAAW,CACrCC,MAAO,EACPC,IAAKL,EACLM,SAAU,EACVC,SAAU,IAGNC,EAAYlkB,iBAAO4jB,GAMzB,OAJAhlB,qBAAU,KACRslB,EAAUzjB,QAAQijB,KACjB,CAACA,EAAeQ,IAGjBtf,eAACsD,IAAG,CAACoV,GAAG,OAAOpZ,SAAS,WAAWkoB,QAAQ,eAAcznB,SAAA,CACvDP,cAACwnB,GAAK,CAACjL,KAAM,EAAEhc,SACbP,cAACioB,IAAoB,MAEvBznB,eAACqnB,GAAK,CAACC,IAAI,OAAMvnB,SAAA,CACfP,cAAC0nB,GAAK,CAAC7a,MAAI,EAACV,cAAc,YAAW5L,SAAC,YAGtCP,cAAC2nB,GAAK,CAACtf,SAAS,OAAM9H,SAAA,IAAA2E,OAAMqa,YAWvB2I,GAAwCC,IAAyB,IAAxB,SAAEllB,EAAQ,KAAEmlB,GAAMD,EACtE,MAAMntB,EAAU6rB,KACVM,EAAYjd,GAAgBlP,IAC5B,EAAE+D,GAAMC,cAEd,OACEwB,eAACsD,IAAG,CAACukB,GAAG,OAAOvoB,SAAS,WAAUS,SAAA,CAChCC,eAACqnB,GAAK,CAACC,IAAI,QAAOvnB,SAAA,CAChBP,cAAC0nB,GAAK,CAAC7a,MAAI,EAACvL,MAAM,YAAWf,SACd,IAAZvF,EAAgB+D,EAAE,WAAaooB,IAElCnnB,cAAC4nB,GAAQ,CAACvf,SAAS,OAAM9H,SAAA,GAAA2E,OAAKjC,GAAQiC,OAAGnG,EAAEqpB,SAE7CpoB,cAACwnB,GAAK,CAACnL,MAAO,EAAE9b,SACdP,cAACsoB,KAAe,U,UCtHxB,MAAMC,GAAoBrrB,YAAOsH,IAAPtH,CAAYE,QAAAC,YAAA,yLAQlCC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMe,aAAampB,MAKhCe,GAAOtrB,IAAOC,IAAGW,QAAAT,YAAA,0FA0CRorB,OAnCKA,KAClB,MAAM,OAAE/mB,GAAWgf,KACb3kB,EAAeC,cACfyb,EAASiR,cAiBf,OACEloB,eAAC+nB,GAAiB,CAAAhoB,SAAA,CAChBP,cAACkB,KAAU,CAACC,QAAQ,OAAO+R,MAAM,KAAKnS,QAjBlB4nB,KACtBjnB,EAAOknB,aAgB0DroB,SAC7DP,cAACqkB,IAAa,CAAC/iB,MAAM,UAAUZ,MAAM,WAEvCV,cAACwoB,GAAI,CAACznB,QAZgB8nB,KACxB,MAAMC,EAAoBrR,EAAOsR,WAAWhpB,GAAUA,EAAM2G,QAAU3K,IAEtE2F,EAAOsnB,QAAQF,EAAoB,GACnCpnB,EAAO8d,UAQ4Bjf,SAC/BP,cAACipB,IAAc,CAACvoB,MAAM,WAExBV,cAACkB,KAAU,CAACC,QAAQ,OAAO+R,MAAM,KAAKnS,QAnBlBmoB,KACtBxnB,EAAOynB,aAkB0D5oB,SAC7DP,cAAC4U,IAAgB,CAACtT,MAAM,UAAUZ,MAAM,eChCjC0oB,I,YAAAA,GAhBOA,KACpB,MAAM/U,EAAoBC,cACpBlZ,EAAWC,eACX,QAAEQ,GAAYC,cAMpB,OACEkE,cAACkB,KAAU,CAACC,QAAQ,SAASiL,GAAG,MAAMrL,QALpBK,KAClBhG,EAAS6F,aAAoB,KAI+B+H,UAAWqL,EAAmB5K,UAAW5N,EAAQ0E,SAC1G8T,EAAoBrU,cAACkJ,IAAa,CAACC,MAAI,EAAC7H,MAAM,UAAatB,cAACqpB,IAAW,CAAC3oB,MAAM,OAAOY,MAAM,aCVlG,MAAMgoB,GAASpsB,IAAOC,IAAGC,QAAAC,YAAA,4EAIrBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMe,aAAampB,MAKhC8B,GAAoBrsB,IAAOC,IAAGW,QAAAT,YAAA,oGAIhCqB,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMe,aAAampB,MAMhC+B,GAAoBtsB,IAAOC,IAAGc,QAAAZ,YAAA,sDAGhCiP,IAAA,IAAC,MAAE/O,GAAO+O,EAAA,OAAK/O,EAAMe,aAAampB,MAKhCgC,GAAuBvsB,IAAOC,IAAGgB,QAAAd,YAAA,gFAInC8P,IAAA,IAAC,MAAE5P,GAAO4P,EAAA,OAAK5P,EAAMe,aAAampB,MAuCvBiC,OAlCFA,IAETlpB,eAACqgB,GAAO,CAAC3Y,WAAW,SAASH,EAAE,OAAMxH,SAAA,CACnCP,cAACspB,GAAM,CAAA/oB,SACLP,cAAC+nB,GAAc,MAEjB/nB,cAAC6gB,GAAO,CAAC1Y,eAAe,SAAQ5H,SAC9BP,cAACyoB,GAAW,MAEdzoB,cAACspB,GAAM,CAAA/oB,SACLC,eAACyH,IAAI,CAACC,WAAW,SAASC,eAAe,WAAU5H,SAAA,CACjDP,cAACwpB,GAAiB,CAAAjpB,SAChBP,cAACkoB,GAAU,CAACjlB,SAAS,IAAImlB,KAAK,QAEhCpoB,cAACupB,GAAiB,CAAAhpB,SAChBP,cAACkB,KAAU,CACTC,QAAQ,SACR2D,GAAG,IACHgE,KAAK,uDACL6gB,OAAO,SACPC,IAAI,sBAAqBrpB,SAEzBP,cAAC6pB,IAAQ,CAACnpB,MAAM,OAAOY,MAAM,cAGjCtB,cAACypB,GAAoB,CAAAlpB,SACnBP,cAACopB,GAAa,c,UCzCXU,OAnBQA,KACrB,MAAM/tB,EAAeC,cACfyb,EAASiR,eACT,QAAE7sB,GAAYC,cACdiuB,EAAgBC,aAAiBjuB,IACjC,OAAE2F,GAAWgf,KACbtlB,EAAWC,cAEjBb,qBAAU,KACR,GAAIkH,QAA2BvG,IAAjBY,QAAgDZ,IAAlB4uB,GAA+BhuB,IAAiBguB,EAAe,CACzG,MAAMjB,EAAoBrR,EAAOsR,WAAWhpB,GAAUA,EAAM2G,QAAU3K,IAGtE2F,EAAOsnB,QAAQF,EAAoB,GACnCpnB,EAAO8d,YAER,CAACuK,EAAehuB,EAAc0b,EAAQ/V,EAAQ7F,EAAST,KCP7C6uB,I,GAAAA,GAXSA,CAACC,EAAyBC,KAChD,MAAM,OAAEzoB,GAAWgf,KACb0J,EAAWC,aAAYF,GAE7B3vB,qBAAU,KACJkH,GAAUyoB,IAASC,GAAY1oB,EAAOoT,cAAgBoV,GACxDxoB,EAAOsnB,QAAQkB,EAAiB,MAEjC,CAACxoB,EAAQ0oB,EAAUD,EAAMD,KCF9BI,KAAWC,IAAI,CAACC,KAAUC,OAE1B,MAAMC,GAAextB,IAAOC,IAAGC,QAAAC,YAAA,+HAkDhBstB,I,qBAAAA,GAxCkCrtB,IAAe,IAAd,KAAE6sB,GAAM7sB,EACxD,MAAM,UAAEqE,GAAc+e,KAChBjJ,EAASiR,cACT3sB,EAAeC,cACf+tB,EAAgBhuB,EAAe,EAAIA,EAAe,EAAIA,EACtD6uB,EAAgBnT,EAAOoT,MAAM9qB,GAAUA,EAAM2G,QAAUqjB,IACvDe,EAAcrT,EAAOsT,QAAQH,GAKnC,OAHAd,KACAG,GAAgBa,EAAaX,GAG3B3pB,eAACsD,IAAG,CAACC,SAAS,SAAQxD,SAAA,CACpBP,cAAC0pB,GAAI,IACL1pB,cAAC0qB,GAAY,CAAAnqB,SACXP,cAACgrB,KAAM,CACLC,aAAcH,EACdI,SAAUvpB,EACVwpB,aAAc,GACdC,cAAc,OACdC,UAAQ,EACRC,gBAAc,EACdC,gBAAc,EACdC,sBAAuB,IACvBC,8BAA+B,GAC/B3H,YAAU,EACVF,UAAQ,EACR8H,gBAAc,EAAAnrB,SAEbkX,EAAOhC,KAAK1V,GACXC,cAAC2rB,KAAW,CAAAprB,SACVP,cAAConB,GAAS,CAACrnB,MAAOA,KADFA,EAAM2G,iBCvCpC,MAEMklB,GAAoB1uB,YAAO4D,IAAP5D,CAAcE,QAAAC,YAAA,qZAClBC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMwQ,KAAKC,cAIrCtP,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMC,OAAOquB,QAOfvf,IAAA,IAAC,MAAE/O,GAAO+O,EAAA,OAAK/O,EAAMwQ,KAAKC,cAI9Cb,IAAA,IAAC,MAAE5P,GAAO4P,EAAA,OAAK5P,EAAMe,aAAampB,MAKhCqE,GAAe5uB,IAAOC,IAAGW,QAAAT,YAAA,+HAQzB0uB,GAAY7uB,IAAOC,IAAGc,QAAAZ,YAAA,sDAKtB2uB,GAAc9uB,IAAOC,IAAGgB,QAAAd,YAAA,qGAInBgQ,IAAA,IAAC,kBAAElO,GAAmBkO,EAAA,OAAMlO,EAAoB,QAAU,KAG/D8sB,GAAgB/uB,IAAOC,IAAGkB,QAAAhB,YAAA,mFAG5ByQ,IAAA,IAAC,MAAEvQ,GAAOuQ,EAAA,OAAKvQ,EAAMe,aAAampB,MAMhCyE,GAAehvB,IAAOC,IAAGsB,QAAApB,YAAA,6KAazB8uB,GAASjvB,IAAOC,IAAGgZ,QAAA9Y,YAAA,8SACT6Q,IAAA,IAAC,MAAE3Q,GAAO2Q,EAAA,OAAK3Q,EAAMC,OAAOkU,YAMpBrD,IAAA,IAAC,MAAE9Q,GAAO8Q,EAAA,OAAK9Q,EAAMC,OAAO4uB,cAqGrCC,I,SAAAA,GAzFWA,KACxB,MAAMC,EAAkB1wB,mBAClB2wB,EAAW3wB,mBACX4wB,EAAY5wB,mBACZuD,EAAoBC,cACpBqtB,EAAkBC,cAClBtxB,EAAWC,eACX,EAAE0D,GAAMC,cACR7C,EAASC,cA6Cf,OA1BA5B,qBAAU,KACR,MACMmyB,EAAaC,KAAS,KAC1B,MAAM,OAAE7pB,GAAWwpB,EAASlwB,QAAQwwB,wBAGpCzxB,EAAS0xB,YAAkB/pB,EALX,QAMf,IAEGgqB,EAAQC,YAAM,CAClBC,aAAc,EACdC,WAVgB,IAWhBC,OAAQR,EACRS,WAAY,CACV,CACEC,MAAO,EACPC,QAASd,EAAUnwB,YAKzB,MAAO,KACL0wB,EAAMhrB,aAEP,CAACyqB,EAAWD,EAAUnxB,IAGvBoF,eAAAsQ,WAAA,CAAAvQ,SAAA,EACIksB,GACAzsB,cAAC4rB,GAAiB,CAChBzqB,QAAQ,WACR+R,MAAM,KACNtH,UAAW6gB,EAAkBzsB,cAACyM,IAAa,IAAMzM,cAACutB,IAAS,IAC3DxsB,QAlDgBysB,KACtB,MAAMC,GAAqBhB,EAEvBgB,IACFnB,EAAgBjwB,QAAQsE,MAAM+sB,WAAa,2BAC3CpB,EAAgBjwB,QAAQsE,MAAMgtB,iBAnGV,kBAuGpBC,KAAM,KACJtB,EAAgBjwB,QAAQsE,MAAM+sB,WAAa,KAC1C,MAGLtyB,EAAS0xB,YAAkBW,KAoCIltB,SAENxB,EAAlB0tB,EAAoB,QAAa,YAGtCjsB,eAACyrB,GAAa,CAAA1rB,SAAA,CACZC,eAACsrB,GAAY,CAAC7sB,IAAKqtB,EAAgB/rB,SAAA,CACjCC,eAAC0rB,GAAY,CAAA3rB,SAAA,CACVpE,IAAWG,IAAiBuxB,OAAS7tB,cAAC4E,GAAiB,IACvDzI,IAAWG,IAAiBwxB,QAAU9tB,cAAC+E,GAAiB,IACxD5I,IAAWG,IAAiBC,MAC3ByD,cAAA,OAAAO,SACEP,cAAC2qB,GAAS,SAIhB3qB,cAACmsB,GAAM,CAACltB,IAAKutB,IACbxsB,cAAC+rB,GAAS,CAAC9sB,IAAKstB,EAAShsB,SACvBP,cAACyD,GAAW,SAGhBzD,cAACgsB,GAAW,CAAC7sB,kBAAmBA,EAAkBoB,SAChDP,cAACwZ,GAAO,aCpKlB,MAAMuU,GAAY7wB,IAAOC,IAAGC,QAAAC,YAAA,yBAItB2wB,GAAS9wB,IAAOC,IAAGW,QAAAT,YAAA,6CAKnB4wB,GAAmB/wB,IAAOC,IAAGc,QAAAZ,YAAA,kJAEbC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMwQ,KAAKC,cAK5CtP,IAAA,IAAC,MAAEnB,GAAOmB,EAAA,OAAKnB,EAAMe,aAAampB,MAuEvByG,I,MAAAA,GAtDIA,KACjB,MAAM,OAAExsB,GAAWgf,KACbyN,EAAgB/uB,cAChBgvB,EAAc1B,cACdvwB,EAASC,cACT0Y,EAjBeuZ,EAACF,EAAwBC,IAC1CD,EACK,EAGLC,EACK,EAGF,EAQaC,CAAeF,EAAeC,GAC5ChzB,EAAWC,eACX,QAAEQ,GAAYC,cAkBpB,OACE0E,eAACytB,GAAgB,CAAA1tB,SAAA,CACfP,cAAC+tB,GAAS,CAAAxtB,SACRP,cAACkB,KAAU,CAACC,QAAQ,OAAOJ,QAASA,IAAMW,EAAOknB,YAAanf,SAAUtN,IAAWG,IAAiBC,KAAKgE,SACvGP,cAACqkB,IAAa,CAAC3jB,MAAM,OAAOY,MAAM,gBAGtCtB,cAACguB,GAAM,CAAAztB,SACLC,eAACqU,IAAU,CAACC,YAAaA,EAAa5B,MAAM,KAAK/R,QAAQ,SAAS4T,YAxB/CuZ,IACvB,OAAQA,GACN,KAAK,EACHlzB,EAAS6F,aAAoB,IAC7B,MACF,KAAK,EACH7F,EAAS0xB,aAAkB,IAC3B1xB,EAAS6F,aAAoB,IAC7B,MACF,KAAK,EACL,QACE7F,EAAS6F,aAAoB,IAC7B7F,EAAS0xB,aAAkB,MAYoEvsB,SAAA,CAC7FP,cAACiV,IAAc,CAAA1U,SACbP,cAACuuB,IAAK,CAACjtB,MAAM,mBAEftB,cAACiV,IAAc,CAAA1U,SACbP,cAACutB,IAAS,CAACjsB,MAAM,mBAEnBtB,cAACiV,IAAc,CAACxL,UAAW5N,EAAQ0E,SACjCP,cAACqpB,IAAW,CAAC/nB,MAAM,wBAIzBtB,cAAC+tB,GAAS,CAAAxtB,SACRP,cAACkB,KAAU,CAACC,QAAQ,OAAOJ,QAASA,IAAMW,EAAOynB,YAAa1f,SAAUtN,IAAWG,IAAiBC,KAAKgE,SACvGP,cAAC4U,IAAgB,CAAClU,MAAM,OAAOY,MAAM,oBC7F/C,MAAMktB,GAActxB,IAAOC,IAAGC,QAAAC,YAAA,yBAIxBoxB,GAAevxB,IAAOC,IAAGW,QAAAT,YAAA,uCAkBhBqxB,OAbDA,IAEVluB,eAACyH,IAAI,CAAC+P,cAAc,SAASjV,OAAO,OAAMxC,SAAA,CACxCP,cAACwuB,GAAW,CAAAjuB,SACVP,cAAC0pB,GAAI,MAEP1pB,cAACyuB,GAAY,CAAAluB,SACXP,cAACyD,GAAW,SCtBb,IAAKkrB,G,WAIX,SAJWA,KAAQ,sBAARA,EAAQ,kBAARA,EAAQ,cAInB,CAJWA,QAAQ,KCYpB,MAAMC,GAAe1xB,IAAOC,IAAGC,QAAAC,YAAA,iIAM3BC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMe,aAAauwB,MAKhCC,GAAO5xB,IAAOC,IAAGW,QAAAT,YAAA,6GAMPqB,IAAA,IAAC,UAAEqwB,GAAWrwB,EAAA,OAAMqwB,EAAY,UAAY,YA2C7CC,I,GAAAA,GA5BUA,KACvB,MAEM7E,EAfQ8E,EAAC9vB,EAA4BstB,IACvCttB,EACKwvB,GAASO,QAGdzC,EACKkC,GAASQ,MAGXR,GAASS,UAMHH,CAFa7vB,cACFstB,eAElBvwB,EAASC,cAEf,OACEoE,eAACouB,GAAY,CAAAruB,SAAA,CACXC,eAACsD,IAAG,CAACf,OAAO,OAAOgB,SAAS,SAASjE,SAAS,WAAUS,SAAA,CACtDP,cAAC8uB,GAAI,CAACC,UAAW5E,IAASwE,GAASS,UAAU7uB,SAC3CC,eAACyH,IAAI,CAACC,WAAW,SAASnF,OAAO,OAAMxC,SAAA,CACpCpE,IAAWG,IAAiBuxB,OAAS7tB,cAAC4E,GAAiB,IACvDzI,IAAWG,IAAiBwxB,QAAU9tB,cAAC+E,GAAiB,IACxD5I,IAAWG,IAAiBC,MAAQyD,cAAC2qB,GAAS,CAACR,KAAMA,SAG1DnqB,cAAC8uB,GAAI,CAACC,UAAW5E,IAASwE,GAASQ,MAAM5uB,SACvCP,cAAC0uB,GAAK,MAER1uB,cAAC8uB,GAAI,CAACC,UAAW5E,IAASwE,GAASO,QAAQ3uB,SACzCP,cAACwZ,GAAO,SAGZxZ,cAACkuB,GAAU,QC9CjB,MAAMmB,GAAsBnyB,YAAOyK,KAAPzK,CAAmBE,QAAAC,YAAA,6EAC/BC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC,UAAU+V,aAuEvC8b,OAlEuC5wB,IAA+B,IAA9B,UAAEkI,EAAS,UAAED,GAAWjI,EAC7E,MAAO6wB,EAAiBC,GAAsBx1B,oBAAS,IAChDy1B,EAAiBC,GAAsB11B,oBAAS,IACjD,EAAE+E,GAAMC,cAed,OACEwB,eAAC+F,KAAc,CAAClC,MAAOtF,EAAE,YAAa0I,SAAS,QAAOlH,SAAA,CACpDP,cAACqvB,GAAmB,CAAA9uB,SAClBP,cAAC4H,KAAU,CAAArH,SACTP,cAAC0E,IAAO,CAACwO,MAAM,KAAI3S,SAAExB,EAAE,kBAG3ByB,eAACsH,KAAS,CAACC,EAAE,OAAO4nB,SAAS,QAAOpvB,SAAA,CAClCC,eAACsD,IAAG,CAAC8rB,UAAU,QAAQC,UAAU,OAAMtvB,SAAA,CACrCP,cAAC0E,IAAO,CAACI,GAAG,KAAKH,GAAG,OAAMpE,SACvBxB,EAAE,8BAGLiB,cAAC6E,KAAI,CAACC,GAAG,IAAIxD,MAAM,aAAaqD,GAAG,OAAMpE,SACtCxB,EAAE,gEAGLiB,cAAA,SAAO8vB,QAAQ,WAAWnvB,MAAO,CAAEqnB,QAAS,QAAS9b,OAAQ,UAAW6jB,aAAc,QAASxvB,SAC7FC,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAAA,OAAKW,MAAO,CAAEC,KAAM,QAASL,SAC3BP,cAACgwB,IAAQ,CAAC/rB,GAAG,WAAWiP,MAAM,KAAKkC,QAASma,EAAiBla,SAjC1C4a,KAC/BT,GAAoBD,QAkCVvvB,cAAC6E,KAAI,CAACuH,GAAG,MAAK7L,SACXxB,EACC,qIAKRiB,cAAA,SAAO8vB,QAAQ,YAAYnvB,MAAO,CAAEqnB,QAAS,QAAS9b,OAAQ,UAAW6jB,aAAc,QAASxvB,SAC9FC,eAACyH,IAAI,CAACC,WAAW,SAAQ3H,SAAA,CACvBP,cAAA,OAAKW,MAAO,CAAEC,KAAM,QAASL,SAC3BP,cAACgwB,IAAQ,CAAC/rB,GAAG,YAAYiP,MAAM,KAAKkC,QAASqa,EAAiBpa,SAzC3C6a,KAC/BR,GAAoBD,QA0CVzvB,cAAC6E,KAAI,CAACuH,GAAG,MAAK7L,SACXxB,EAAE,gGAKXiB,cAACc,IAAM,CAACJ,MAAM,OAAOK,QA7CLovB,KACpBvpB,IACAD,KA2CiD8C,UAAW8lB,IAAoBE,EAAgBlvB,SACzFxB,EAAE,qBC7CEqxB,OAjCyC9yB,IAA+B,IAA9B,UAAEsJ,EAAS,UAAED,GAAWrJ,EAC/E,MAAM,EAAEyB,GAAMC,cAOd,OACEgB,cAACuG,KAAc,CAAClC,MAAOtF,EAAE,YAAa0I,SAAS,QAAOlH,SACpDC,eAACsH,KAAS,CAACC,EAAE,OAAO4nB,SAAS,QAAOpvB,SAAA,CAClCP,cAAC6E,KAAI,CAACC,GAAG,IAAIH,GAAG,OAAMpE,SACnBxB,EAAE,2FAELiB,cAAC6E,KAAI,CAACC,GAAG,IAAIH,GAAG,OAAMpE,SACnBxB,EAAE,0EAELiB,cAACc,IAAM,CAACJ,MAAM,OAAOK,QAdLovB,KACpBvpB,IACAD,KAYiDhC,GAAG,OAAMpE,SACnDxB,EAAE,kBAELiB,cAACiI,IAAI,CAACE,eAAe,SAASD,WAAW,SAAQ3H,SAC/CP,cAAC6I,KAAY,CACXC,KAAK,6GACLmJ,UAAQ,EAAA1R,SAEPxB,EAAE,wBCsDAsxB,UAlEKA,KAClB,MAAM,KAAEC,GAASC,gBACVC,EAAiBC,GAAsBC,aAAgB,EAAO,CACnEC,gBAAiB,uCAEZC,EAAkBC,GAAuBH,aAAgB,EAAO,CACrEC,gBAAiB,+BAEb,QAAE90B,GAAYC,cACdK,EAASC,cACTqwB,EAAkBC,cAClBtxB,EAAWC,cACXyiB,EAAegT,cACfC,EAAYT,GAGXU,GAA2BxnB,aAASxJ,cAACsvB,GAAc,CAAC1oB,UAF3BqqB,IAAMR,GAAmB,MAE0C,IAC5FS,GAA4B1nB,aAASxJ,cAACowB,GAAe,CAACxpB,UAFnCuqB,IAAMN,GAAoB,MAE2C,GAGzFO,EAA6Bx1B,iBAAOo1B,GACpCK,EAA8Bz1B,iBAAOs1B,GA0B3C,OAvBA12B,qBAAU,KACHg2B,GACHY,EAA2B/0B,YAE5B,CAACm0B,EAAiBY,IAGrB52B,qBAAU,MACHo2B,GAAoBnE,GACvB4E,EAA4Bh1B,YAE7B,CAACg1B,EAA6BT,EAAkBnE,IAEnDjyB,qBAAU,KACJsjB,EAAe,GAEjB1iB,EAASk2B,YAAsBz1B,MAEhC,CAACiiB,EAAc1iB,EAAUS,IAE5BF,IACAZ,IAEIoB,IAAWG,IAAiBi1B,QACvBvxB,cAACwxB,IAAU,IAIlBhxB,eAAAsQ,WAAA,CAAAvQ,SAAA,CACEP,cAACyxB,IAAM,CAAAlxB,SACLP,cAAA,UAAQsE,IAAI,mCAAmCiT,KAAK,kBAAkBtT,GAAG,wBAE3EjE,cAACyB,EAAc,CAAAlB,SACbC,eAACvD,EAAS,CAAAsD,SAAA,CACPwwB,EAAY/wB,cAACqsB,GAAO,IAAMrsB,cAACgvB,GAAM,IAClChvB,cAACpB,EAAoB,c,iCChF/B,krBAeO,MAeM8pB,EAAqBA,KAChC,MAAMgJ,EAhBoBC,MAC1B,MAAMla,EAASma,aAAanM,GAAiBA,EAAMhN,YAAYhB,SAC/D,OAAOtV,OAAO0vB,KAAKpa,GAAQiB,QAAO,CAACoZ,EAAOprB,KACjC,IACForB,EACH,CAACprB,GAAQqrB,YAA6Cta,EAAO/Q,OAE9D,KASeirB,GAClB,OAAOnc,kBAAQrT,OAAOyY,OAAO8W,GAAY,CAAC,SAAU,CAAC,SAG1C1T,EAAmBA,CAACniB,EAAiB6K,KAChD,MAAMpH,EAAOsyB,aAAanM,GAAiBA,EAAMhN,YAAYuZ,UAE7D,OAAK1yB,EAAKzD,IAILyD,EAAKzD,GAAS6K,GAIZqrB,YAA+CzyB,EAAKzD,GAAS6K,IAP3D,MAUEwW,EAAqBxW,GACNkrB,aAAanM,GAAiBA,EAAMhN,YAAYwZ,oBACjDvrB,KAAU,EAMxBxK,EAAsBA,IAC1B01B,aAAanM,IAClB,MAAMyM,EAAgBC,gBAAMhwB,OAAOyY,OAAO6K,EAAMhN,YAAYhB,QAAS,SACrE,OAAoB,OAAbya,QAAa,IAAbA,OAAa,EAAbA,EAAexrB,SAIbtH,EAAuBA,IAC3BwyB,aAAanM,GAAiBA,EAAMhN,YAAYtZ,oBAG5CutB,EAAqBA,IACzBkF,aAAanM,GAAiBA,EAAMhN,YAAYgU,kBAG5CzwB,EAAqBA,IACzB41B,aAAanM,GAAiBA,EAAMhN,YAAY1c,eAG5C6pB,EAAuBA,IAC3BgM,aAAanM,GAAiBA,EAAMhN,YAAY2Z,iBAO5ChV,EAA4BA,IAChBwI,IAJhBgM,aAAanM,GAAiBA,EAAMhN,YAAY4Z,eAe5Cj2B,EAA0BA,IAC9Bw1B,aAAanM,GAAiBA,EAAMhN,YAAYtc,SAG5CiY,EAAsBA,IAC1Bwd,aAAanM,GAAiBA,EAAMhN,YAAY9E,gBAG5CqT,EAAgCA,IACpC4K,aAAanM,GAAiBA,EAAMhN,YAAY6Z,+BAG5ClQ,EAAqBA,KAChC,MAAMD,EAAeyP,aAAanM,GAAiBA,EAAMhN,YAAY0J,eACrE,OAAOG,mBAAQ,IAAMroB,IAAOC,UAAUC,KAAKgoB,IAAe,CAACA,KAGhDnS,EAAmBA,IACX4hB,aAAanM,GAAiBA,EAAMhN,YAAY5S,aAC/C,IAGTyO,EAA0BA,IAC9Bsd,aAAanM,GAAiBA,EAAMhN,YAAYpE,oBAO5CoF,EAA0B5d,IACrC,MAAMyD,EAJCsyB,aAAanM,GAAiBA,EAAMhN,YAAY8Z,UAKvD,OAAOjzB,EAAOA,EAAKzD,GAAW,IAiBnBojB,EAAwBA,KACnC,MAAMuT,EAAkBZ,aAAanM,GAAiBA,EAAMhN,YAAY+Z,kBACxE,OAAOlQ,mBAAQ,IACNroB,IAAOC,UAAUC,KAAKq4B,IAC5B,CAACA,KAIOC,EAAqBA,KAChC,MAAM,QAAE52B,GAAYC,cACdV,EAAWC,eACX,cAAEq3B,EAAa,UAAE1pB,EAAS,KAAEwa,GAASoO,aAAanM,GAAiBA,EAAMkN,eACzEC,EAAczwB,OAAO0vB,KAAKrO,GAShC,OAPAhpB,qBAAU,KAEHk4B,GACHt3B,EAASy3B,YAAgBh3B,MAE1B,CAAC62B,EAAe72B,EAAST,IAErB,CACLs3B,gBACA1pB,YACA8pB,SAAUtP,EACVuP,aAAcC,IAAKpzB,QAAQqzB,GAAQL,EAAYM,SAASD,EAAIE,iB,iCC1KhE,sNAcO,IAAKC,GAIX,SAJWA,KAAW,0BAAXA,EAAW,kBAAXA,EAAW,gBAItB,CAJWA,MAAW,KAMvB,MAgCaC,EAAiBA,KAC5B,MAAM,YAAEC,GAAgBC,eACjBC,EAAaC,GAAkBz5B,qBAYtC,OAVAQ,qBAAU,MACRC,iBACE,MAAMi5B,EAAeC,cACfC,QAAeF,EAAaF,cAClCC,EAAe,IAAIv5B,IAAU05B,EAAO5pB,aAGtC6pB,KACC,CAACP,IAEGE,GAGIM,EAAoBC,IAC/B,MAAO/R,EAASgS,GAAch6B,mBAASi6B,MACjC,YAAEX,GAAgBC,cAYxB,OAVA/4B,qBAAU,KACaC,WACnB,MAAMC,EAAWw5B,YAAiBH,GAC5BI,QAAYz5B,EAAS05B,UAAU,8CACrCJ,EAAW,IAAI95B,IAAUi6B,EAAInqB,cAG/BqqB,KACC,CAACN,EAAcT,IAEXtR,GAGIE,EAAmBA,KAC9B,MAAOF,EAASgS,GAAch6B,mBAASi6B,MACjC,QAAEp4B,GAAYC,eACd,YAAE1B,EAAW,eAAEC,GAAmBE,cAaxC,OAXAC,qBAAU,KAMJqB,GALiBpB,WACnB,MAAM65B,QAAsB9N,IAAkB+N,WAAW14B,GACzDm4B,EAAW,IAAI95B,IAAUo6B,EAActqB,cAIvCqqB,KAED,CAACx4B,EAASzB,EAAa45B,IAEnB,CAAEhS,UAAS1nB,QAASD,IAGdm6B,IArFUT,IACvB,MAAM,YAAEU,EAAW,QAAEC,EAAO,OAAEC,GAAWvB,GAClCwB,EAAcC,GAAmB76B,mBAA+B,CACrEgoB,QAASiS,IACTa,YAAaL,KAET,QAAE54B,GAAYC,eACd,YAAEi5B,GAAgBxB,cAsBxB,OApBA/4B,qBAAU,KAeJqB,GAdiBpB,WACnB,MAAMC,EAAWw5B,YAAiBH,GAClC,IACE,MAAMI,QAAYz5B,EAAS05B,UAAUv4B,GACrCg5B,EAAgB,CAAE7S,QAAS,IAAI9nB,IAAUi6B,EAAInqB,YAAa8qB,YAAaJ,IACvE,MAAOM,GACPC,QAAQC,MAAMF,GACdH,GAAiBM,IAAI,IAChBA,EACHL,YAAaH,QAMjBN,KAED,CAACx4B,EAASk4B,EAAcgB,EAAaL,EAASC,IAE1CC","file":"static/js/18.c162ad49.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status === PredictionStatus.LIVE) {\r\n      timer.current = setInterval(async () => {\r\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\r\n\r\n        dispatch(fetchRounds(liveAndCurrent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { fetchClaimableStatuses } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Convert payout to number for compatibility\r\n  const payoutAsFloat = parseFloat(payout)\r\n  const betAmountAsFloat = parseFloat(betAmount)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await predictionsContract.claim(epoch)\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <Box>\r\n          <Text as=\"p\" mb=\"8px\">\r\n            {t('Your prizes have been sent to your wallet')}\r\n          </Text>\r\n          {receipt.transactionHash && (\r\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          )}\r\n        </Box>,\r\n      )\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${betAmount} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Your winnings')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${payout} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await predictionsContract.claim(epoch)\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'))\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { ethers } from 'ethers'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\r\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\r\n  const value = bnb || ethers.BigNumber.from(0)\r\n  return formatBigNumberToFixed(value, 4)\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\r\n  if (!round.endBlock) {\r\n    return false\r\n  }\r\n\r\n  return blockNumber > round.endBlock && round.oracleCalled === false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const { bullAmount, bearAmount, rewardAmount } = round\r\n  const { amount, position } = ledger\r\n\r\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\r\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return amountFixed.mulUnsafe(multiplier)\r\n}\r\n\r\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const payout = getPayoutv2(ledger, round)\r\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\r\n\r\n  return payout.subUnsafe(amount)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getBetPosition(closePrice, lockPrice)\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {closePrice ? (\r\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n              {formatUsdv2(closePrice)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"34px\" my=\"1px\" />\r\n          )}\r\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetRewardRate } from 'state/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport styled from 'styled-components'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n  const rewardRate = useGetRewardRate()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, rewardRate) : bet.amount\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={formatBnb(payout)}\r\n            betAmount={bet.amount.toString()}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.endBlock, 'block')} external>\r\n          {bet.round.endBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/hooks'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const rewardRate = useGetRewardRate()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            epoch={bet.round.epoch}\r\n            payout={formatBnb(payout)}\r\n            onSuccess={handleSuccess}\r\n            betAmount={bet.amount.toString()}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport store from 'state'\r\nimport { useGetCurrentEpoch } from 'state/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  const state = store.getState()\r\n  const rewardRate = state.predictions.rewardRate / 100\r\n\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, rewardRate)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <ConnectWalletButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled from 'styled-components'\r\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n  hasClaimed?: boolean\r\n}\r\n\r\nconst StyledEnteredTag = styled(Tag)`\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <StyledEnteredTag\r\n          variant=\"secondary\"\r\n          outline={!hasClaimed}\r\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\r\n        >\r\n          {hasClaimed ? t('Claimed') : t('Entered')}\r\n        </StyledEnteredTag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  hasClaimed?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  hasClaimed = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box mt=\"-1px\" position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"-1px\" position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import styled from 'styled-components'\r\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\r\n\r\nconst Card = styled(UIKitCard)`\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default Card\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  blockNumber: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  border-radius: 16px 16px 0 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  payout: string\r\n  betAmount: string\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  epoch,\r\n  payout,\r\n  betAmount,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch, startBlock } = round\r\n  const estimatedEndBlock = startBlock + interval\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useGetBetByEpoch } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  hasClaimedUp: boolean\r\n  hasClaimedDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  hasClaimedUp,\r\n  hasClaimedDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { initialBlock } = useBlock()\r\n  const { epoch, endBlock, lockPrice, closePrice } = round\r\n\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const payout = getNetPayoutv2(ledger, round)\r\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\r\n  const hasRoundFailed = getHasRoundFailed(round, initialBlock)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          blockNumber={endBlock}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n            hasClaimed={hasClaimedUp}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            hasClaimed={hasClaimedDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay\r\n        epoch={epoch}\r\n        payout={formattedPayout}\r\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\r\n        isBottom={hasEnteredDown}\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/block/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n","import React from 'react'\r\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlock}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { BLOCK_PADDING } from 'state/predictions'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const price = useGetLastOraclePrice()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (currentBlock > estimatedEndBlockPlusPadding) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlockPlusPadding}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsdv2(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\nimport Card from './Card'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\r\n}\r\n\r\n// /!\\ TEMPORARY /!\\\r\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\r\n// TODO: Remove on beta-v2 smart contract release.\r\nconst gasPrice = parseUnits('6', 'gwei')\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  // Convert bnb balance to ethers.BigNumber\r\n  const bnbBalanceAsBn = useMemo(() => {\r\n    return ethers.BigNumber.from(bnbBalance.toString())\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\r\n  }, [bnbBalanceAsBn])\r\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await predictionsContract[betMethod]({ value: valueAsBn.toString(), gasPrice })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <ConnectWalletButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { useGetIntervalBlocks } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\r\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useRoundCountdown = (intervalsToAdd = 1) => {\r\n  const interval = useGetIntervalBlocks()\r\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\r\n  const blocksToAdd = intervalsToAdd * interval\r\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\r\n\r\n  return seconds\r\n}\r\n\r\nexport default useRoundCountdown\r\n","import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierv2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\r\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\r\n\r\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedbearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedbearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      hasClaimedDown={hasClaimedDown}\r\n      hasClaimedUp={hasClaimedUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedbearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useRoundCountdown from '../hooks/useRoundCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: 16px;\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const seconds = useRoundCountdown()\r\n  const countdown = formatRoundTime(seconds)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {seconds === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Card)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\nimport useOnViewChange from './hooks/useOnViewChange'\r\nimport { PageView } from './types'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\r\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\r\n  const swiperIndex = rounds.indexOf(previousRound)\r\n\r\n  useOnNextRound()\r\n  useOnViewChange(swiperIndex, view)\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={swiperIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","export enum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport { PageView } from './types'\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ChartDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\r\n        </Text>\r\n        <Text as=\"p\" mb=\"16px\">\r\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\r\n        </Text>\r\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n          {t('I understand')}\r\n        </Button>\r\n        <Flex justifyContent=\"center\" alignItems=\"center\">\r\n          <LinkExternal\r\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n            external\r\n          >\r\n            {t('Learn More')}\r\n          </LinkExternal>\r\n        </Flex>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/hooks'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\r\nimport { fetchWalletNfts } from './collectibles'\r\nimport { parseBigNumberObj } from './predictions/helpers'\r\n\r\n// /!\\\r\n// Don't add anything here. These hooks will be moved the the predictions folder\r\n\r\n// Predictions\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetRewardRate = () => {\r\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\r\n  return rewardRate / 100\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\r\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!ledgers[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!ledgers[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return ledgers[account][roundId]\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"sourceRoot":""}