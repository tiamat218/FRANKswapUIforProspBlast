{"version":3,"sources":["views/PoolFinder/index.tsx","components/Links/index.tsx"],"names":["Fields","StyledButton","styled","Button","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","input","_ref2","text","PoolFinder","_ref3","account","useActiveWeb3React","t","useTranslation","activeField","setActiveField","useState","TOKEN1","currency0","setCurrency0","ETHER","currency1","setCurrency1","pairState","pair","usePair","undefined","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","_jsx","LightCard","padding","children","Text","textAlign","onPresentCurrencyModal","useModal","CurrencySearchModal","onCurrencySelect","showCommonBases","selectedCurrency","Page","_jsxs","AppBody","AppHeader","title","subtitle","backTo","AutoColumn","style","gap","endIcon","ChevronDownIcon","onClick","Row","CurrencyLogo","ml","symbol","ColumnCenter","AddIcon","as","justifyItems","backgroundColor","borderRadius","StyledInternalLink","to","MinimalPositionCard","justify","concat","currencyId","INVALID","fontWeight","LOADING","Dots","Link","primary"],"mappings":"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","file":"static/js/20.11a88cf4.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap/sdk'\r\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport { CurrencyLogo } from '../../components/Logo'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row from '../../components/Layout/Row'\r\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\r\nimport { PairState, usePair } from '../../hooks/usePairs'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { usePairAdder } from '../../state/user/hooks'\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport Page from '../Page'\r\n\r\nenum Fields {\r\n  TOKEN0 = 0,\r\n  TOKEN1 = 1,\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  box-shadow: none;\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default function PoolFinder() {\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\r\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\r\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\r\n\r\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\r\n  const addPair = usePairAdder()\r\n  useEffect(() => {\r\n    if (pair) {\r\n      addPair(pair)\r\n    }\r\n  }, [pair, addPair])\r\n\r\n  const validPairNoLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\r\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\r\n    )\r\n\r\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\r\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      if (activeField === Fields.TOKEN0) {\r\n        setCurrency0(currency)\r\n      } else {\r\n        setCurrency1(currency)\r\n      }\r\n    },\r\n    [activeField],\r\n  )\r\n\r\n  const prerequisiteMessage = (\r\n    <LightCard padding=\"45px 10px\">\r\n      <Text textAlign=\"center\">\r\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\r\n      </Text>\r\n    </LightCard>\r\n  )\r\n\r\n  const [onPresentCurrencyModal] = useModal(\r\n    <CurrencySearchModal\r\n      onCurrencySelect={handleCurrencySelect}\r\n      showCommonBases\r\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n    />,\r\n    true,\r\n    true,\r\n    'selectCurrencyModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\r\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN0)\r\n            }}\r\n          >\r\n            {currency0 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency0} />\r\n                <Text ml=\"8px\">{currency0.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          <ColumnCenter>\r\n            <AddIcon />\r\n          </ColumnCenter>\r\n\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN1)\r\n            }}\r\n          >\r\n            {currency1 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency1} />\r\n                <Text ml=\"8px\">{currency1.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text as={Row}>{t('Select a Token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          {hasPosition && (\r\n            <ColumnCenter\r\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\r\n            >\r\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\r\n              <StyledInternalLink to=\"/pool\">\r\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\r\n              </StyledInternalLink>\r\n            </ColumnCenter>\r\n          )}\r\n\r\n          {currency0 && currency1 ? (\r\n            pairState === PairState.EXISTS ? (\r\n              hasPosition && pair ? (\r\n                <MinimalPositionCard pair={pair} />\r\n              ) : (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\r\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\r\n                    </StyledInternalLink>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              )\r\n            ) : validPairNoLiquidity ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\r\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                    {t('Create pool.')}\r\n                  </StyledInternalLink>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.INVALID ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\" fontWeight={500}>\r\n                    {t('Invalid pair.')}\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.LOADING ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">\r\n                    {t('Loading')}\r\n                    <Dots />\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : null\r\n          ) : (\r\n            prerequisiteMessage\r\n          )}\r\n        </AutoColumn>\r\n\r\n        {/* <CurrencySearchModal\r\n          isOpen={showSearch}\r\n          onCurrencySelect={handleCurrencySelect}\r\n          onDismiss={handleSearchDismiss}\r\n          showCommonBases\r\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n        /> */}\r\n      </AppBody>\r\n    </Page>\r\n  )\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n"],"sourceRoot":""}