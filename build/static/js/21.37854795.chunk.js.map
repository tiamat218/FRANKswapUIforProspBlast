{"version":3,"sources":["state/burn/hooks.ts","views/RemoveLiquidity/index.tsx","hooks/useDebouncedChangeHandler.ts","components/Links/index.tsx"],"names":["useBurnState","useSelector","state","burn","BorderCard","styled","div","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","cardBorder","RemoveLiquidity","_ref2","_useCurrency","_useCurrency2","_parsedAmounts$Field$","_parsedAmounts$Field$2","_parsedAmounts$Field$3","_parsedAmounts$Field$4","_parsedAmounts$Field$5","_parsedAmounts$Field$6","_parsedAmounts$Field$7","_pair$liquidityToken","_parsedAmounts$Field$13","_parsedAmounts$Field$14","_currencyA$symbol2","_parsedAmounts$Field$15","_parsedAmounts$Field$16","_currencyB$symbol2","_currencyA$symbol3","_currencyB$symbol3","history","match","params","currencyIdA","currencyIdB","currencyA","currencyB","useCurrency","undefined","account","chainId","library","useActiveWeb3React","tokenA","tokenB","useMemo","wrappedCurrency","t","useTranslation","independentField","typedValue","pair","parsedAmounts","error","_pair$liquidityToken$","usePair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","address","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","raw","TokenAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","token","multiply","quotient","_error","useDerivedBurnInfo","onUserInput","_onUserInput","dispatch","useDispatch","useCallback","field","typeInput","useBurnActionHandlers","isValid","showDetailed","setShowDetailed","useState","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","allowedSlippage","useUserSlippageTolerance","formattedAmounts","equalTo","lessThan","toFixed","toSignificant","atMaxAmount","pairContract","usePairContract","signatureData","setSignatureData","approval","approveCallback","useApproveCallback","ROUTER_ADDRESS","value","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","async","onRemove","Error","currencyAmountA","currencyAmountB","router","getRouterContract","amountsMin","calculateSlippageAmount","liquidityAmount","currencyBIsETH","ETHER","oneCurrencyIsETH","methodNames","args","ApprovalState","APPROVED","toString","toHexString","v","r","s","safeGasEstimates","Promise","all","map","methodName","estimateGas","then","calculateGasMargin","catch","err","console","indexOfSuccessfulEstimation","findIndex","safeGasEstimate","BigNumber","isBigNumber","gasLimit","response","_parsedAmounts$Field$8","_parsedAmounts$Field$9","summary","concat","symbol","hash","modalHeader","_parsedAmounts$Field$10","_parsedAmounts$Field$11","_jsxs","AutoColumn","gap","children","RowBetween","align","_jsx","Text","fontSize","RowFixed","CurrencyLogo","currency","size","ml","AddIcon","width","small","textAlign","pt","slippage","modalBottom","_currencyA$symbol","_currencyB$symbol","_parsedAmounts$Field$12","_Fragment","assetA","assetB","DoubleCurrencyLogo","currency0","currency1","margin","priceOf","Button","disabled","onClick","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","innerLiquidityPercentage","setInnerLiquidityPercentage","onChange","debouncedMs","arguments","length","inner","setInner","timer","useRef","onChangeInner","newValue","current","clearTimeout","setTimeout","useEffect","useDebouncedChangeHandler","Number","parseInt","onPresentRemoveLiquidity","useModal","TransactionConfirmationModal","title","customOnDismiss","content","ConfirmationModalContent","topContent","bottomContent","Page","AppBody","AppHeader","backTo","subtitle","noConfig","CardBody","variant","scale","bold","mb","style","lineHeight","Slider","name","min","max","onValueChanged","Math","ceil","Flex","flexWrap","justifyContent","ColumnCenter","ArrowDownIcon","color","my","textTransform","LightGreyCard","id","StyledInternalLink","to","Box","CurrencyInputPanel","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","nonce","nonces","domain","version","verifyingContract","message","owner","spender","toNumber","data","JSON","stringify","types","EIP712Domain","type","Permit","primaryType","send","splitSignature","signature","code","NOT_APPROVED","mr","PENDING","Dots","ConnectWalletButton","minWidth","maxWidth","MinimalPositionCard","showUnwrapped","Link","primary"],"mappings":"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","file":"static/js/21.37854795.chunk.js","sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n    const liquidityValue = liquidityValues[independentField]\r\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onUserInput,\r\n  }\r\n}\r\n","import React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from '@pancakeswap/sdk'\r\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from '@pancakeswap/uikit'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport { LightGreyCard } from '../../components/Card'\r\n\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\r\nimport { ROUTER_ADDRESS } from '../../config/constants'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { usePairContract } from '../../hooks/useContract'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\n\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\r\n\r\nimport { Field } from '../../state/burn/actions'\r\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport Page from '../Page'\r\n\r\nconst BorderCard = styled.div`\r\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nexport default function RemoveLiquidity({\r\n  history,\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\r\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const [tokenA, tokenB] = useMemo(\r\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\r\n    [currencyA, currencyB, chainId],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  // burn state\r\n  const { independentField, typedValue } = useBurnState()\r\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [txHash, setTxHash] = useState<string>('')\r\n  const deadline = useTransactionDeadline()\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const formattedAmounts = {\r\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\r\n      ? '0'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\r\n      ? '<1'\r\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\r\n    [Field.LIQUIDITY]:\r\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_A]:\r\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    [Field.CURRENCY_B]:\r\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\r\n\r\n  // pair contract\r\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\r\n\r\n  // allowance handling\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\r\n\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n    ]\r\n    const domain = {\r\n      name: 'Pancake LPs',\r\n      version: '1',\r\n      chainId,\r\n      verifyingContract: pair.liquidityToken.address,\r\n    }\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: ROUTER_ADDRESS,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadline.toNumber(),\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit,\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message,\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then((signature) => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadline.toNumber(),\r\n        })\r\n      })\r\n      .catch((err) => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        if (err?.code !== 4001) {\r\n          approveCallback()\r\n        }\r\n      })\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback(\r\n    (field: Field, value: string) => {\r\n      setSignatureData(null)\r\n      return _onUserInput(field, value)\r\n    },\r\n    [_onUserInput],\r\n  )\r\n\r\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\r\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\r\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\r\n\r\n  // tx sending\r\n  const addTransaction = useTransactionAdder()\r\n  async function onRemove() {\r\n    if (!chainId || !library || !account || !deadline) throw new Error('missing dependencies')\r\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\r\n    if (!currencyAmountA || !currencyAmountB) {\r\n      throw new Error('missing currency amounts')\r\n    }\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\r\n    }\r\n\r\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\r\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\r\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\r\n\r\n    const currencyBIsETH = currencyB === ETHER\r\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\r\n\r\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\r\n\r\n    let methodNames: string[]\r\n    let args: Array<string | string[] | number | boolean>\r\n    // we have approval, use normal remove liquidity\r\n    if (approval === ApprovalState.APPROVED) {\r\n      // removeLiquidityETH\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETH', 'removeLiquidityETHSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n      // removeLiquidity\r\n      else {\r\n        methodNames = ['removeLiquidity']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          deadline.toHexString(),\r\n        ]\r\n      }\r\n    }\r\n    // we have a signataure, use permit versions of remove liquidity\r\n    else if (signatureData !== null) {\r\n      // removeLiquidityETHWithPermit\r\n      if (oneCurrencyIsETH) {\r\n        methodNames = ['removeLiquidityETHWithPermit', 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens']\r\n        args = [\r\n          currencyBIsETH ? tokenA.address : tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\r\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n      // removeLiquidityETHWithPermit\r\n      else {\r\n        methodNames = ['removeLiquidityWithPermit']\r\n        args = [\r\n          tokenA.address,\r\n          tokenB.address,\r\n          liquidityAmount.raw.toString(),\r\n          amountsMin[Field.CURRENCY_A].toString(),\r\n          amountsMin[Field.CURRENCY_B].toString(),\r\n          account,\r\n          signatureData.deadline,\r\n          false,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ]\r\n      }\r\n    } else {\r\n      throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\r\n    }\r\n\r\n    const safeGasEstimates: (BigNumber | undefined)[] = await Promise.all(\r\n      methodNames.map((methodName) =>\r\n        router.estimateGas[methodName](...args)\r\n          .then(calculateGasMargin)\r\n          .catch((err) => {\r\n            console.error(`estimateGas failed`, methodName, args, err)\r\n            return undefined\r\n          }),\r\n      ),\r\n    )\r\n\r\n    const indexOfSuccessfulEstimation = safeGasEstimates.findIndex((safeGasEstimate) =>\r\n      BigNumber.isBigNumber(safeGasEstimate),\r\n    )\r\n\r\n    // all estimations failed...\r\n    if (indexOfSuccessfulEstimation === -1) {\r\n      console.error('This transaction would fail. Please contact support.')\r\n    } else {\r\n      const methodName = methodNames[indexOfSuccessfulEstimation]\r\n      const safeGasEstimate = safeGasEstimates[indexOfSuccessfulEstimation]\r\n\r\n      setAttemptingTxn(true)\r\n      await router[methodName](...args, {\r\n        gasLimit: safeGasEstimate,\r\n      })\r\n        .then((response: TransactionResponse) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencyA?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n        .catch((err: Error) => {\r\n          setAttemptingTxn(false)\r\n          // we only care if the error is something _other_ than the user rejected the tx\r\n          console.error(err)\r\n        })\r\n    }\r\n  }\r\n\r\n  function modalHeader() {\r\n    return (\r\n      <AutoColumn gap=\"md\">\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyA?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowFixed>\r\n          <AddIcon width=\"16px\" />\r\n        </RowFixed>\r\n        <RowBetween align=\"flex-end\">\r\n          <Text fontSize=\"24px\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n          <RowFixed gap=\"4px\">\r\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\r\n            <Text fontSize=\"24px\" ml=\"10px\">\r\n              {currencyB?.symbol}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n\r\n        <Text small textAlign=\"left\" pt=\"12px\">\r\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\r\n            slippage: allowedSlippage / 100,\r\n          })}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  function modalBottom() {\r\n    return (\r\n      <>\r\n        <RowBetween>\r\n          {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\r\n          <RowFixed>\r\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\r\n            <Text>{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        {pair && (\r\n          <>\r\n            <RowBetween>\r\n              <Text>{t('Price')}</Text>\r\n              <Text>\r\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n            <RowBetween>\r\n              <div />\r\n              <Text>\r\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n              </Text>\r\n            </RowBetween>\r\n          </>\r\n        )}\r\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\r\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    symbolA: currencyA?.symbol ?? '',\r\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n    symbolB: currencyB?.symbol ?? '',\r\n  })\r\n\r\n  const liquidityPercentChangeCallback = useCallback(\r\n    (value: number) => {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\r\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\r\n  )\r\n\r\n  const handleSelectCurrencyA = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n  const handleSelectCurrencyB = useCallback(\r\n    (currency: Currency) => {\r\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\r\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\r\n      } else {\r\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\r\n      }\r\n    },\r\n    [currencyIdA, currencyIdB, history],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\r\n    }\r\n    setTxHash('')\r\n  }, [onUserInput, txHash])\r\n\r\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\r\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\r\n    liquidityPercentChangeCallback,\r\n  )\r\n\r\n  const [onPresentRemoveLiquidity] = useModal(\r\n    <TransactionConfirmationModal\r\n      title={t('You will receive')}\r\n      customOnDismiss={handleDismissConfirmation}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash || ''}\r\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\r\n      pendingText={pendingText}\r\n    />,\r\n    true,\r\n    true,\r\n    'removeLiquidityModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader\r\n          backTo=\"/pool\"\r\n          title={t('Remove %assetA%-%assetB% liquidity', {\r\n            assetA: currencyA?.symbol ?? '',\r\n            assetB: currencyB?.symbol ?? '',\r\n          })}\r\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\r\n          noConfig\r\n        />\r\n\r\n        <CardBody>\r\n          <AutoColumn gap=\"20px\">\r\n            <RowBetween>\r\n              <Text>{t('Amount')}</Text>\r\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\r\n                {showDetailed ? t('Simple') : t('Detailed')}\r\n              </Button>\r\n            </RowBetween>\r\n            {!showDetailed && (\r\n              <BorderCard>\r\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\r\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\r\n                </Text>\r\n                <Slider\r\n                  name=\"lp-amount\"\r\n                  min={0}\r\n                  max={100}\r\n                  value={innerLiquidityPercentage}\r\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\r\n                  mb=\"16px\"\r\n                />\r\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\r\n                    25%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\r\n                    50%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\r\n                    75%\r\n                  </Button>\r\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\r\n                    Max\r\n                  </Button>\r\n                </Flex>\r\n              </BorderCard>\r\n            )}\r\n          </AutoColumn>\r\n          {!showDetailed && (\r\n            <>\r\n              <ColumnCenter>\r\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <AutoColumn gap=\"10px\">\r\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                  {t('You will receive')}\r\n                </Text>\r\n                <LightGreyCard>\r\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyA} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\r\n                        {currencyA?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\r\n                  </Flex>\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex>\r\n                      <CurrencyLogo currency={currencyB} />\r\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\r\n                        {currencyB?.symbol}\r\n                      </Text>\r\n                    </Flex>\r\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\r\n                  </Flex>\r\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\r\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\r\n                      {oneCurrencyIsETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\r\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive WBNB')}\r\n                        </StyledInternalLink>\r\n                      ) : oneCurrencyIsWETH ? (\r\n                        <StyledInternalLink\r\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\r\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\r\n                          }`}\r\n                        >\r\n                          {t('Receive BNB')}\r\n                        </StyledInternalLink>\r\n                      ) : null}\r\n                    </RowBetween>\r\n                  ) : null}\r\n                </LightGreyCard>\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n\r\n          {showDetailed && (\r\n            <Box my=\"16px\">\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.LIQUIDITY]}\r\n                onUserInput={onLiquidityInput}\r\n                onMax={() => {\r\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\r\n                }}\r\n                showMaxButton={!atMaxAmount}\r\n                disableCurrencySelect\r\n                currency={pair?.liquidityToken}\r\n                pair={pair}\r\n                id=\"liquidity-amount\"\r\n                onCurrencySelect={() => null}\r\n              />\r\n              <ColumnCenter>\r\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onCurrencyAInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyA}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyA}\r\n                id=\"remove-liquidity-tokena\"\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon width=\"24px\" my=\"16px\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                hideBalance\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onCurrencyBInput}\r\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\r\n                showMaxButton={!atMaxAmount}\r\n                currency={currencyB}\r\n                label={t('Output')}\r\n                onCurrencySelect={handleSelectCurrencyB}\r\n                id=\"remove-liquidity-tokenb\"\r\n              />\r\n            </Box>\r\n          )}\r\n          {pair && (\r\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\r\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                {t('Prices')}\r\n              </Text>\r\n              <LightGreyCard>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyA?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text small color=\"textSubtle\">\r\n                    1 {currencyB?.symbol} =\r\n                  </Text>\r\n                  <Text small>\r\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n              </LightGreyCard>\r\n            </AutoColumn>\r\n          )}\r\n          <Box position=\"relative\" mt=\"16px\">\r\n            {!account ? (\r\n              <ConnectWalletButton />\r\n            ) : (\r\n              <RowBetween>\r\n                <Button\r\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\r\n                  onClick={onAttemptToApprove}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n                  width=\"100%\"\r\n                  mr=\"0.5rem\"\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <Dots>{t('Enabling')}</Dots>\r\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                    t('Enabled')\r\n                  ) : (\r\n                    t('Enable')\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant={\r\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                      ? 'danger'\r\n                      : 'primary'\r\n                  }\r\n                  onClick={() => {\r\n                    onPresentRemoveLiquidity()\r\n                  }}\r\n                  width=\"100%\"\r\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n                >\r\n                  {error || t('Remove')}\r\n                </Button>\r\n              </RowBetween>\r\n            )}\r\n          </Box>\r\n        </CardBody>\r\n      </AppBody>\r\n\r\n      {pair ? (\r\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </Page>\r\n  )\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n"],"sourceRoot":""}