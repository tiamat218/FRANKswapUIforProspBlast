{"version":3,"sources":["views/Voting/Proposal/Details.tsx","views/Voting/components/TextEllipsis.tsx","views/Voting/Proposal/Results.tsx","views/Voting/components/CastVoteModal/types.ts","views/Voting/components/CastVoteModal/MainView.tsx","views/Voting/components/CastVoteModal/index.tsx","views/Voting/Proposal/Vote.tsx","views/Voting/components/Proposal/VotesLoading.tsx","views/Voting/components/Proposal/Row.tsx","views/Voting/components/Proposal/VoteRow.tsx","views/Voting/Proposal/Votes.tsx","views/Voting/Proposal/index.tsx","views/Voting/helpers.ts","views/Voting/config.ts","utils/truncateWalletAddress.ts","state/voting/hooks.ts","views/Voting/components/Proposals/tags.tsx","views/Voting/components/CastVoteModal/styles.tsx","views/Voting/components/Layout.tsx","views/Voting/components/CastVoteModal/DetailsView.tsx","views/Voting/hooks/useGetVotingPower.tsx","components/ReactMarkdown/styles.tsx","components/ReactMarkdown/index.tsx"],"names":["DetailBox","styled","Box","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","background","_ref2","cardBorder","Details","_ref3","proposal","t","useTranslation","startDate","Date","start","endDate","end","_jsxs","Card","mb","children","_jsx","CardHeader","Heading","as","scale","CardBody","Flex","alignItems","Text","color","LinkExternal","href","concat","IPFS_GATEWAY","id","ml","slice","getBscScanLink","author","truncateWalletAddress","snapshot","p","ProposalStateTag","proposalState","state","fontSize","format","TextEllipsis","Results","choices","votes","results","calculateVoteResults","votingStatus","useGetVotingStateLoadingStatus","account","useWeb3React","totalVotes","getTotalFromVotes","VotingStateLoadingStatus","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","eq","div","times","toNumber","hasVoted","some","vote","voter","toLowerCase","mt","title","Tag","variant","outline","CheckmarkCircleIcon","mr","Progress","primaryStep","justifyContent","total","toFormat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count","Skeleton","height","ConfirmVoteView","MainView","isPending","isLoading","onConfirm","onViewDetails","onDismiss","_Fragment","ModalInner","textTransform","bold","label","VotingBox","onClick","style","cursor","IconButton","ChevronRightIcon","width","Button","endIcon","AutoRenewIcon","spin","disabled","CastVoteModal","onSuccess","proposalId","block","view","setView","useState","MAIN","modalIsOpen","setModalIsOpen","setIsPending","toastError","useToast","library","useWeb3Provider","useTheme","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","verificationHash","useGetVotingPower","isStartView","handleBack","DETAILS","handleDismiss","Modal","onBack","hideCloseButton","headerBackground","gradients","cardHeader","async","voteMsg","JSON","stringify","generatePayloadData","type","SnapshotCommand","VOTE","payload","value","metadata","votingPower","toString","sig","signMessage","msg","address","sendSnaphotData","error","message","console","handleViewDetails","DetailsView","Choice","isChecked","isDisabled","ChoiceText","_templateObject2","Vote","props","setVote","toastSuccess","dispatch","useAppDispatch","presentCastVoteModal","useModal","fetchVotes","Number","flexShrink","Radio","checked","onChange","handleChange","ConnectWalletButton","Row","StyledSkeleton","VotesLoading","AddressColumn","attrs","ChoiceColumn","VotingPowerColumn","_templateObject3","Grid","_templateObject4","mediaQueries","sm","VoteRow","_vote$metadata","isVoter","hasVotingPower","BigNumber","parseVotePower","incomingVote","_incomingVote$metadat","parseFloat","Votes","showAll","setShowAll","orderedVotes","orderBy","displayVotes","isFinished","py","px","handleClick","ChevronUpIcon","ChevronDownIcon","Proposal","useParams","useGetProposal","useGetVotes","voteLoadingStatus","proposalLoadingStatus","useGetProposalLoadingStatus","hasAccountVoted","isPageLoading","useEffect","fetchProposal","verifyVotes","getVotes","Container","Link","to","startIcon","ArrowBackIcon","Layout","ProposalTypeTag","isCoreProposal","ReactMarkdown","body","ProposalState","ACTIVE","PageLoader","ADMIN_ADDRESS","filterProposalsByType","proposals","proposalType","ProposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","generateMetaData","plugins","network","strategies","name","params","symbol","getCakeAddress","decimals","version","SNAPSHOT_VERSION","timestamp","now","toFixed","space","PANCAKE_SPACE","response","fetch","SNAPSHOT_HUB_API","method","headers","Accept","ok","json","Error","error_description","getVotingPower","poolAddresses","blockNumber","simpleRpcProvider","getBlockNumber","SNAPSHOT_VOTING_API","data","reduce","accum","choiceText","power","plus","BIG_ZERO","PROPOSALS_TO_SHOW","VOTE_THRESHOLD","startLength","arguments","endLength","substring","useGetProposals","useSelector","voting","Object","values","_inValid","VoteNowTag","PENDING","SoonTag","ClosedTag","CoreTag","CommunityTag","maxWidth","lg","textAlign","initialState","isActive","setVotingPower","setIsLoading","getActivePools","contractAddress","getAddress","prevVotingPower","fetchVotingPower","Table","table","text","ThemedComponent","Title","my","markdownComponents","h1","h2","h3","h4","h5","h6","ol","ul","pre","ReactMarkdownLib","remarkPlugins","gfm","components"],"mappings":"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","file":"static/js/8.b081cbc2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Box, Card, CardBody, CardHeader, Flex, Heading, LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { format } from 'date-fns'\r\nimport { Proposal } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\r\nimport { IPFS_GATEWAY } from '../config'\r\nimport { ProposalStateTag } from '../components/Proposals/tags'\r\n\r\ninterface DetailsProps {\r\n  proposal: Proposal\r\n}\r\n\r\nconst DetailBox = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 16px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ proposal }) => {\r\n  const { t } = useTranslation()\r\n  const startDate = new Date(proposal.start * 1000)\r\n  const endDate = new Date(proposal.end * 1000)\r\n\r\n  return (\r\n    <Card mb=\"16px\">\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Details')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Identifier')}</Text>\r\n          <LinkExternal href={`${IPFS_GATEWAY}/${proposal.id}`} ml=\"8px\">\r\n            {proposal.id.slice(0, 8)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"8px\">\r\n          <Text color=\"textSubtle\">{t('Creator')}</Text>\r\n          <LinkExternal href={getBscScanLink(proposal.author, 'address')} ml=\"8px\">\r\n            {truncateWalletAddress(proposal.author)}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" mb=\"16px\">\r\n          <Text color=\"textSubtle\">{t('Snapshot')}</Text>\r\n          <LinkExternal href={getBscScanLink(proposal.snapshot, 'block')} ml=\"8px\">\r\n            {proposal.snapshot}\r\n          </LinkExternal>\r\n        </Flex>\r\n        <DetailBox p=\"16px\">\r\n          <ProposalStateTag proposalState={proposal.state} mb=\"8px\" />\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Start Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(startDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n          <Flex alignItems=\"center\">\r\n            <Text color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('End Date')}\r\n            </Text>\r\n            <Text ml=\"8px\">{format(endDate, 'yyyy-MM-dd HH:mm')}</Text>\r\n          </Flex>\r\n        </DetailBox>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import styled from 'styled-components'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nconst TextEllipsis = styled(Text)`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`\r\n\r\nexport default TextEllipsis\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Heading,\r\n  Progress,\r\n  Skeleton,\r\n  Tag,\r\n  CheckmarkCircleIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport times from 'lodash/times'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\r\nimport TextEllipsis from '../components/TextEllipsis'\r\n\r\ninterface ResultsProps {\r\n  choices: string[]\r\n  votes: Vote[]\r\n}\r\n\r\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\r\n  const { t } = useTranslation()\r\n  const results = calculateVoteResults(votes)\r\n  const votingStatus = useGetVotingStateLoadingStatus()\r\n  const { account } = useWeb3React()\r\n  const totalVotes = getTotalFromVotes(votes)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Current Results')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\r\n          choices.map((choice, index) => {\r\n            const choiceVotes = results[choice] || []\r\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\r\n\r\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\r\n            const hasVoted = choiceVotes.some((vote) => {\r\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            })\r\n\r\n            return (\r\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\r\n                <Flex alignItems=\"center\" mb=\"8px\">\r\n                  <TextEllipsis mb=\"4px\" title={choice}>\r\n                    {choice}\r\n                  </TextEllipsis>\r\n                  {hasVoted && (\r\n                    <Tag variant=\"success\" outline ml=\"8px\">\r\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n                    </Tag>\r\n                  )}\r\n                </Flex>\r\n                <Box mb=\"4px\">\r\n                  <Progress primaryStep={progress} scale=\"sm\" />\r\n                </Box>\r\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\r\n                  <Text>\r\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\r\n                  </Text>\r\n                </Flex>\r\n              </Box>\r\n            )\r\n          })}\r\n\r\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\r\n          times(choices.length).map((count, index) => {\r\n            return (\r\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\r\n                <Skeleton height=\"36px\" mb=\"4px\" />\r\n              </Box>\r\n            )\r\n          })}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import { InjectedModalProps } from '@pancakeswap/uikit'\r\n\r\nexport enum ConfirmVoteView {\r\n  MAIN = 'main',\r\n  DETAILS = 'details',\r\n}\r\n\r\nexport interface CastVoteModalProps extends InjectedModalProps {\r\n  onSuccess: () => Promise<void>\r\n  proposalId: string\r\n  vote: {\r\n    label: string\r\n    value: number\r\n  }\r\n  block?: number\r\n}\r\n","import React from 'react'\r\nimport { IconButton, Text, Skeleton, Button, AutoRenewIcon, ChevronRightIcon } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport { VotingBox, ModalInner } from './styles'\r\nimport { CastVoteModalProps } from './types'\r\n\r\ninterface MainViewProps {\r\n  vote: {\r\n    label: string\r\n    value: number\r\n  }\r\n  isLoading: boolean\r\n  isPending: boolean\r\n  total: BigNumber\r\n  onConfirm: () => void\r\n  onViewDetails: () => void\r\n  onDismiss: CastVoteModalProps['onDismiss']\r\n}\r\n\r\nconst MainView: React.FC<MainViewProps> = ({\r\n  vote,\r\n  total,\r\n  isPending,\r\n  isLoading,\r\n  onConfirm,\r\n  onViewDetails,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <ModalInner>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Voting For')}\r\n        </Text>\r\n        <TextEllipsis bold fontSize=\"20px\" mb=\"8px\" title={vote.label}>\r\n          {vote.label}\r\n        </TextEllipsis>\r\n        <Text color=\"secondary\" mb=\"8px\" textTransform=\"uppercase\" fontSize=\"12px\" bold>\r\n          {t('Your Voting Power')}\r\n        </Text>\r\n        {isLoading ? (\r\n          <Skeleton height=\"64px\" mb=\"24px\" />\r\n        ) : (\r\n          <VotingBox onClick={onViewDetails} style={{ cursor: 'pointer' }}>\r\n            <Text bold fontSize=\"20px\">\r\n              {total.toFormat(3)}\r\n            </Text>\r\n            <IconButton scale=\"sm\" variant=\"text\">\r\n              <ChevronRightIcon width=\"24px\" />\r\n            </IconButton>\r\n          </VotingBox>\r\n        )}\r\n        <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\">\r\n          {t('Are you sure you want to vote for the above choice? This action cannot be undone.')}\r\n        </Text>\r\n      </ModalInner>\r\n      <Button\r\n        isLoading={isPending}\r\n        endIcon={isPending ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={isLoading || total.eq(0)}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={onConfirm}\r\n      >\r\n        {t('Confirm Vote')}\r\n      </Button>\r\n      <Button variant=\"secondary\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Cancel')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainView\r\n","import React, { useState } from 'react'\r\nimport { Box, Modal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SnapshotCommand } from 'state/types'\r\nimport { signMessage } from 'utils/web3React'\r\nimport useToast from 'hooks/useToast'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { CastVoteModalProps, ConfirmVoteView } from './types'\r\nimport MainView from './MainView'\r\nimport DetailsView from './DetailsView'\r\nimport { generatePayloadData, Message, sendSnaphotData } from '../../helpers'\r\nimport useGetVotingPower from '../../hooks/useGetVotingPower'\r\n\r\nconst CastVoteModal: React.FC<CastVoteModalProps> = ({ onSuccess, proposalId, vote, block, onDismiss }) => {\r\n  const [view, setView] = useState<ConfirmVoteView>(ConfirmVoteView.MAIN)\r\n  const [modalIsOpen, setModalIsOpen] = useState(true)\r\n  const [isPending, setIsPending] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { library } = useWeb3Provider()\r\n  const { theme } = useTheme()\r\n  const {\r\n    isLoading,\r\n    total,\r\n    cakeBalance,\r\n    cakeVaultBalance,\r\n    cakePoolBalance,\r\n    poolsBalance,\r\n    cakeBnbLpBalance,\r\n    verificationHash,\r\n  } = useGetVotingPower(block, modalIsOpen)\r\n\r\n  const isStartView = view === ConfirmVoteView.MAIN\r\n  const handleBack = isStartView ? null : () => setView(ConfirmVoteView.MAIN)\r\n  const handleViewDetails = () => setView(ConfirmVoteView.DETAILS)\r\n\r\n  const title = {\r\n    [ConfirmVoteView.MAIN]: t('Confirm Vote'),\r\n    [ConfirmVoteView.DETAILS]: t('Voting Power'),\r\n  }\r\n\r\n  const handleDismiss = () => {\r\n    setModalIsOpen(false)\r\n    onDismiss()\r\n  }\r\n\r\n  const handleConfirmVote = async () => {\r\n    try {\r\n      setIsPending(true)\r\n      const voteMsg = JSON.stringify({\r\n        ...generatePayloadData(),\r\n        type: SnapshotCommand.VOTE,\r\n        payload: {\r\n          proposal: proposalId,\r\n          choice: vote.value,\r\n          metadata: {\r\n            votingPower: total.toString(),\r\n            verificationHash,\r\n          },\r\n        },\r\n      })\r\n\r\n      const sig = await signMessage(library, account, voteMsg)\r\n      const msg: Message = { address: account, msg: voteMsg, sig }\r\n\r\n      // Save proposal to snapshot\r\n      await sendSnaphotData(msg)\r\n      setIsPending(false)\r\n\r\n      await onSuccess()\r\n\r\n      handleDismiss()\r\n    } catch (error) {\r\n      setIsPending(false)\r\n      toastError(t('Error'), error?.message)\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={title[view]}\r\n      onBack={handleBack}\r\n      onDismiss={onDismiss}\r\n      hideCloseButton={!isStartView}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Box mb=\"24px\" width=\"320px\">\r\n        {view === ConfirmVoteView.MAIN && (\r\n          <MainView\r\n            vote={vote}\r\n            isLoading={isLoading}\r\n            isPending={isPending}\r\n            total={total}\r\n            onConfirm={handleConfirmVote}\r\n            onViewDetails={handleViewDetails}\r\n            onDismiss={handleDismiss}\r\n          />\r\n        )}\r\n        {view === ConfirmVoteView.DETAILS && (\r\n          <DetailsView\r\n            total={total}\r\n            cakeBalance={cakeBalance}\r\n            cakeVaultBalance={cakeVaultBalance}\r\n            cakePoolBalance={cakePoolBalance}\r\n            poolsBalance={poolsBalance}\r\n            cakeBnbLpBalance={cakeBnbLpBalance}\r\n          />\r\n        )}\r\n      </Box>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CastVoteModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Card, CardBody, CardHeader, CardProps, Heading, Radio, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { Proposal } from 'state/types'\r\nimport { fetchVotes } from 'state/voting'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport CastVoteModal from '../components/CastVoteModal'\r\n\r\ninterface VoteProps extends CardProps {\r\n  proposal: Proposal\r\n}\r\n\r\ninterface State {\r\n  label: string\r\n  value: number\r\n}\r\n\r\nconst Choice = styled.label<{ isChecked: boolean; isDisabled: boolean }>`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme, isChecked }) => theme.colors[isChecked ? 'success' : 'cardBorder']};\r\n  border-radius: 16px;\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n`\r\n\r\nconst ChoiceText = styled.div`\r\n  flex: 1;\r\n  padding-left: 16px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  width: 0;\r\n`\r\n\r\nconst Vote: React.FC<VoteProps> = ({ proposal, ...props }) => {\r\n  const [vote, setVote] = useState<State>(null)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleSuccess = async () => {\r\n    toastSuccess(t('Vote cast!'))\r\n    dispatch(fetchVotes({ proposalId: proposal.id, block: Number(proposal.snapshot) }))\r\n  }\r\n\r\n  const [presentCastVoteModal] = useModal(\r\n    <CastVoteModal onSuccess={handleSuccess} proposalId={proposal.id} vote={vote} block={Number(proposal.snapshot)} />,\r\n  )\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Cast your vote')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {proposal.choices.map((choice, index) => {\r\n          const isChecked = index + 1 === vote?.value\r\n\r\n          const handleChange = () => {\r\n            setVote({\r\n              label: choice,\r\n              value: index + 1,\r\n            })\r\n          }\r\n\r\n          return (\r\n            <Choice key={choice} isChecked={isChecked} isDisabled={!account}>\r\n              <div style={{ flexShrink: 0 }}>\r\n                <Radio scale=\"sm\" value={choice} checked={isChecked} onChange={handleChange} disabled={!account} />\r\n              </div>\r\n              <ChoiceText>\r\n                <Text as=\"span\" title={choice}>\r\n                  {choice}\r\n                </Text>\r\n              </ChoiceText>\r\n            </Choice>\r\n          )\r\n        })}\r\n        {account ? (\r\n          <Button onClick={presentCastVoteModal} disabled={vote === null}>\r\n            {t('Cast Vote')}\r\n          </Button>\r\n        ) : (\r\n          <ConnectWalletButton />\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Vote\r\n","import React from 'react'\r\nimport { Box, Flex, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\nimport styled from 'styled-components'\r\n\r\nconst Row = styled(Flex)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 16px 24px;\r\n`\r\n\r\nconst StyledSkeleton = styled(Skeleton)`\r\n  flex: 1;\r\n`\r\n\r\nconst VotesLoading = () => {\r\n  return (\r\n    <Box>\r\n      {times(10).map((index) => (\r\n        <Row key={index}>\r\n          <Skeleton height=\"21px\" mr=\"32px\" width=\"100px\" />\r\n          <StyledSkeleton height=\"21px\" mr=\"32px\" width=\"100%\" />\r\n          <StyledSkeleton height=\"21px\" width=\"100%\" />\r\n        </Row>\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default VotesLoading\r\n","import styled from 'styled-components'\r\nimport { Grid, Box } from '@pancakeswap/uikit'\r\n\r\nexport const AddressColumn = styled(Box).attrs({ alignItems: 'center' })`\r\n  grid-area: address;\r\n`\r\n\r\nexport const ChoiceColumn = styled(Box)`\r\n  grid-area: choice;\r\n  overflow: hidden;\r\n`\r\n\r\nexport const VotingPowerColumn = styled(Box)`\r\n  justify-self: end;\r\n  grid-area: vote;\r\n`\r\n\r\nconst Row = styled(Grid)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  grid-gap: 8px;\r\n  grid-template-areas: 'address choice vote';\r\n  grid-template-columns: minmax(110px, 200px) 1fr 1fr;\r\n  padding: 8px 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-gap: 16px;\r\n    padding: 16px 24px;\r\n  }\r\n`\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\r\nimport truncateWalletAddress from 'utils/truncateWalletAddress'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote } from 'state/types'\r\nimport { IPFS_GATEWAY } from '../../config'\r\nimport TextEllipsis from '../TextEllipsis'\r\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\r\n\r\ninterface VoteRowProps {\r\n  vote: Vote\r\n  isVoter: boolean\r\n}\r\n\r\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\r\n  const { t } = useTranslation()\r\n  const hasVotingPower = !!vote.metadata?.votingPower\r\n  const votingPower = hasVotingPower ? new BigNumber(vote.metadata.votingPower).toFormat(3) : '--'\r\n\r\n  return (\r\n    <Row>\r\n      <AddressColumn>\r\n        <Flex alignItems=\"center\">\r\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateWalletAddress(vote.voter)}</LinkExternal>\r\n          {isVoter && (\r\n            <Tag variant=\"success\" outline ml=\"8px\">\r\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n            </Tag>\r\n          )}\r\n        </Flex>\r\n      </AddressColumn>\r\n      <ChoiceColumn>\r\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\r\n          {vote.proposal.choices[vote.choice - 1]}\r\n        </TextEllipsis>\r\n      </ChoiceColumn>\r\n      <VotingPowerColumn>\r\n        <Flex alignItems=\"center\" justifyContent=\"end\">\r\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\r\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\r\n        </Flex>\r\n      </VotingPowerColumn>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default VoteRow\r\n","import React, { useState } from 'react'\r\nimport {\r\n  AutoRenewIcon,\r\n  Card,\r\n  CardHeader,\r\n  ChevronDownIcon,\r\n  Flex,\r\n  Heading,\r\n  Button,\r\n  ChevronUpIcon,\r\n  Text,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\r\nimport VotesLoading from '../components/Proposal/VotesLoading'\r\nimport VoteRow from '../components/Proposal/VoteRow'\r\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from '../components/Proposal/Row'\r\n\r\nconst VOTES_PER_VIEW = 20\r\n\r\ninterface VotesProps {\r\n  votes: Vote[]\r\n}\r\n\r\nconst parseVotePower = (incomingVote: Vote) => {\r\n  return parseFloat(incomingVote?.metadata?.votingPower)\r\n}\r\n\r\nconst Votes: React.FC<VotesProps> = ({ votes }) => {\r\n  const [showAll, setShowAll] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const orderedVotes = orderBy(votes, [parseVotePower, 'created'], ['desc', 'desc'])\r\n  const displayVotes = showAll ? orderedVotes : orderedVotes.slice(0, VOTES_PER_VIEW)\r\n  const voteStatus = useGetVotingStateLoadingStatus()\r\n  const isFinished = voteStatus === VotingStateLoadingStatus.IDLE\r\n\r\n  const handleClick = () => {\r\n    setShowAll(!showAll)\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\" scale=\"md\">\r\n            {t('Votes (%count%)', { count: votes.length.toLocaleString() })}\r\n          </Heading>\r\n          {!isFinished && <AutoRenewIcon spin width=\"22px\" />}\r\n        </Flex>\r\n      </CardHeader>\r\n      {!isFinished && <VotesLoading />}\r\n\r\n      {isFinished && displayVotes.length > 0 && (\r\n        <>\r\n          <Row>\r\n            <AddressColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Voter')}\r\n              </Text>\r\n            </AddressColumn>\r\n            <ChoiceColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Decision')}\r\n              </Text>\r\n            </ChoiceColumn>\r\n            <VotingPowerColumn>\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" textTransform=\"uppercase\" bold>\r\n                {t('Vote Weight')}\r\n              </Text>\r\n            </VotingPowerColumn>\r\n          </Row>\r\n          {displayVotes.map((vote) => {\r\n            const isVoter = account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            return <VoteRow key={vote.id} vote={vote} isVoter={isVoter} />\r\n          })}\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" py=\"8px\" px=\"24px\">\r\n            <Button\r\n              width=\"100%\"\r\n              onClick={handleClick}\r\n              variant=\"text\"\r\n              endIcon={\r\n                showAll ? (\r\n                  <ChevronUpIcon color=\"primary\" width=\"21px\" />\r\n                ) : (\r\n                  <ChevronDownIcon color=\"primary\" width=\"21px\" />\r\n                )\r\n              }\r\n              disabled={!isFinished}\r\n            >\r\n              {showAll ? t('Hide') : t('See All')}\r\n            </Button>\r\n          </Flex>\r\n        </>\r\n      )}\r\n\r\n      {isFinished && displayVotes.length === 0 && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"32px\">\r\n          <Heading as=\"h5\">{t('No votes found')}</Heading>\r\n        </Flex>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Votes\r\n","import React, { useEffect } from 'react'\r\nimport { ArrowBackIcon, Box, Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { useAppDispatch } from 'state'\r\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types'\r\nimport {\r\n  useGetProposal,\r\n  useGetVotingStateLoadingStatus,\r\n  useGetVotes,\r\n  useGetProposalLoadingStatus,\r\n} from 'state/voting/hooks'\r\nimport { fetchProposal, fetchVotes, verifyVotes } from 'state/voting'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport ReactMarkdown from 'components/ReactMarkdown'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { isCoreProposal } from '../helpers'\r\nimport { ProposalStateTag, ProposalTypeTag } from '../components/Proposals/tags'\r\nimport Layout from '../components/Layout'\r\nimport Details from './Details'\r\nimport Results from './Results'\r\nimport Vote from './Vote'\r\nimport Votes from './Votes'\r\n\r\nconst Proposal = () => {\r\n  const { id }: { id: string } = useParams()\r\n  const proposal = useGetProposal(id)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const votes = useGetVotes(id)\r\n  const voteLoadingStatus = useGetVotingStateLoadingStatus()\r\n  const proposalLoadingStatus = useGetProposalLoadingStatus()\r\n  const hasAccountVoted = account && votes.some((vote) => vote.voter.toLowerCase() === account.toLowerCase())\r\n  const { id: proposalId = null, snapshot = null } = proposal ?? {}\r\n  const isPageLoading =\r\n    voteLoadingStatus === VotingStateLoadingStatus.LOADING || proposalLoadingStatus === VotingStateLoadingStatus.LOADING\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProposal(id))\r\n  }, [id, dispatch])\r\n\r\n  // We have to wait for the proposal to load before fetching the votes because we need to include the snapshot\r\n  useEffect(() => {\r\n    const getVotes = async () => {\r\n      await dispatch(fetchVotes({ proposalId, block: Number(snapshot) }))\r\n      dispatch(verifyVotes({ proposalId, snapshot }))\r\n    }\r\n\r\n    if (proposalId && snapshot) {\r\n      getVotes()\r\n    }\r\n  }, [proposalId, snapshot, dispatch])\r\n\r\n  if (!proposal) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <Container py=\"40px\">\r\n      <Box mb=\"40px\">\r\n        <Button as={Link} to=\"/voting\" variant=\"text\" startIcon={<ArrowBackIcon color=\"primary\" width=\"24px\" />} px=\"0\">\r\n          {t('Back to Vote Overview')}\r\n        </Button>\r\n      </Box>\r\n      <Layout>\r\n        <Box>\r\n          <Box mb=\"32px\">\r\n            <Flex alignItems=\"center\" mb=\"8px\">\r\n              <ProposalStateTag proposalState={proposal.state} />\r\n              <ProposalTypeTag isCoreProposal={isCoreProposal(proposal)} ml=\"8px\" />\r\n            </Flex>\r\n            <Heading as=\"h1\" scale=\"xl\" mb=\"16px\">\r\n              {proposal.title}\r\n            </Heading>\r\n            <Box>\r\n              <ReactMarkdown>{proposal.body}</ReactMarkdown>\r\n            </Box>\r\n          </Box>\r\n          {!isPageLoading && !hasAccountVoted && proposal.state === ProposalState.ACTIVE && (\r\n            <Vote proposal={proposal} mb=\"16px\" />\r\n          )}\r\n          <Votes votes={votes} />\r\n        </Box>\r\n        <Box>\r\n          <Details proposal={proposal} />\r\n          <Results choices={proposal.choices} votes={votes} />\r\n        </Box>\r\n      </Layout>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Proposal\r\n","import BigNumber from 'bignumber.js'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\r\n\r\nexport const isCoreProposal = (proposal: Proposal) => {\r\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\r\n}\r\n\r\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\r\n  switch (proposalType) {\r\n    case ProposalType.COMMUNITY:\r\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\r\n    case ProposalType.CORE:\r\n      return proposals.filter((proposal) => isCoreProposal(proposal))\r\n    case ProposalType.ALL:\r\n    default:\r\n      return proposals\r\n  }\r\n}\r\n\r\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\r\n  return proposals.filter((proposal) => proposal.state === state)\r\n}\r\n\r\nexport interface Message {\r\n  address: string\r\n  msg: string\r\n  sig: string\r\n}\r\n\r\n/**\r\n * Generates metadata required by snapshot to validate payload\r\n */\r\nexport const generateMetaData = () => {\r\n  return {\r\n    plugins: {},\r\n    network: 56,\r\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\r\n  }\r\n}\r\n\r\n/**\r\n * Returns data that is required on all snapshot payloads\r\n */\r\nexport const generatePayloadData = () => {\r\n  return {\r\n    version: SNAPSHOT_VERSION,\r\n    timestamp: (Date.now() / 1e3).toFixed(),\r\n    space: PANCAKE_SPACE,\r\n  }\r\n}\r\n\r\n/**\r\n * General function to send commands to the snapshot api\r\n */\r\nexport const sendSnaphotData = async (message: Message) => {\r\n  const response = await fetch(SNAPSHOT_HUB_API, {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error?.error_description)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      address: account,\r\n      block: blockNumber,\r\n      poolAddresses,\r\n    }),\r\n  })\r\n  const data = await response.json()\r\n  return data.data\r\n}\r\n\r\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\r\n  return votes.reduce((accum, vote) => {\r\n    const choiceText = vote.proposal.choices[vote.choice - 1]\r\n\r\n    return {\r\n      ...accum,\r\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getTotalFromVotes = (votes: Vote[]) => {\r\n  return votes.reduce((accum, vote) => {\r\n    const power = new BigNumber(vote.metadata?.votingPower)\r\n    return accum.plus(power)\r\n  }, BIG_ZERO)\r\n}\r\n","export const PROPOSALS_TO_SHOW = 10\r\nexport const ADMIN_ADDRESS = '0x2096aFDaA68EEaE1EbF95DFdf565eE6d9B1fbA37'\r\nexport const IPFS_GATEWAY = 'https://gateway.ipfs.io/ipfs'\r\nexport const SNAPSHOT_VERSION = '0.1.3'\r\nexport const PANCAKE_SPACE = 'cake.eth'\r\nexport const VOTE_THRESHOLD = 10\r\n","/**\r\n * Truncates a wallet's address\r\n */\r\nconst truncateWalletAddress = (address: string, startLength = 4, endLength = 4) => {\r\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\r\n}\r\n\r\nexport default truncateWalletAddress\r\n","import { useSelector } from 'react-redux'\r\nimport { State } from '../types'\r\n\r\n// Voting\r\nexport const useGetProposals = () => {\r\n  const proposals = useSelector((state: State) => state.voting.proposals)\r\n  return Object.values(proposals)\r\n}\r\n\r\nexport const useGetProposal = (proposalId: string) => {\r\n  const proposal = useSelector((state: State) => state.voting.proposals[proposalId])\r\n  return proposal\r\n}\r\n\r\nexport const useGetVotes = (proposalId: string) => {\r\n  const votes = useSelector((state: State) => state.voting.votes[proposalId])\r\n  return votes ? votes.filter((vote) => vote._inValid !== true) : []\r\n}\r\n\r\nexport const useGetVotingStateLoadingStatus = () => {\r\n  const votingStatus = useSelector((state: State) => state.voting.voteLoadingStatus)\r\n  return votingStatus\r\n}\r\n\r\nexport const useGetProposalLoadingStatus = () => {\r\n  const votingStatus = useSelector((state: State) => state.voting.proposalLoadingStatus)\r\n  return votingStatus\r\n}\r\n","import React from 'react'\r\nimport { TagProps } from '@pancakeswap/uikit'\r\nimport { ClosedTag, CommunityTag, CoreTag, SoonTag, VoteNowTag } from 'components/Tags'\r\nimport { ProposalState } from 'state/types'\r\n\r\ninterface ProposalStateTagProps extends TagProps {\r\n  proposalState: ProposalState\r\n}\r\n\r\nexport const ProposalStateTag: React.FC<ProposalStateTagProps> = ({ proposalState, ...props }) => {\r\n  if (proposalState === ProposalState.ACTIVE) {\r\n    return <VoteNowTag {...props} />\r\n  }\r\n\r\n  if (proposalState === ProposalState.PENDING) {\r\n    return <SoonTag {...props} />\r\n  }\r\n\r\n  return <ClosedTag {...props} />\r\n}\r\n\r\ninterface ProposalTypeTagProps extends TagProps {\r\n  isCoreProposal: boolean\r\n}\r\n\r\nexport const ProposalTypeTag: React.FC<ProposalTypeTagProps> = ({ isCoreProposal, ...props }) => {\r\n  if (isCoreProposal) {\r\n    return <CoreTag {...props} />\r\n  }\r\n\r\n  return <CommunityTag {...props} />\r\n}\r\n","import React from 'react'\r\nimport { Box, BoxProps } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nexport const VotingBox = styled.div`\r\n  align-items: center;\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: 12px;\r\n  display: flex;\r\n  height: 64px;\r\n  justify-content: space-between;\r\n  margin-bottom: 24px;\r\n  padding: 0 16px;\r\n`\r\n\r\nexport const ModalInner: React.FC<BoxProps> = (props) => {\r\n  return <Box mb=\"24px\" maxWidth=\"320px\" {...props} />\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Layout = styled.div`\r\n  align-items: start;\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: minmax(0, 1fr);\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1fr 332px;\r\n  }\r\n`\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport { Text, Flex } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { VotingBox, ModalInner } from './styles'\r\n\r\ninterface DetailsViewProps {\r\n  total: BigNumber\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n}\r\n\r\nconst DetailsView: React.FC<DetailsViewProps> = ({\r\n  total,\r\n  cakeBalance,\r\n  cakeVaultBalance,\r\n  cakePoolBalance,\r\n  poolsBalance,\r\n  cakeBnbLpBalance,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <ModalInner mb=\"0\">\r\n      <Text as=\"p\" mb=\"24px\" fontSize=\"14px\" color=\"textSubtle\">\r\n        {t(\r\n          'Your voting power is determined by the amount of CAKE you held at the block detailed below. CAKE held in other places does not contribute to your voting power.',\r\n        )}\r\n      </Text>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Overview')}\r\n      </Text>\r\n      <VotingBox>\r\n        <Text color=\"secondary\">{t('Your Voting Power')}</Text>\r\n        <Text bold fontSize=\"20px\">\r\n          {total.toFormat(3)}\r\n        </Text>\r\n      </VotingBox>\r\n      <Text color=\"secondary\" textTransform=\"uppercase\" mb=\"4px\" bold fontSize=\"14px\">\r\n        {t('Your Cake Held Now')}\r\n      </Text>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Wallet')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Manual CAKE Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakePoolBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Auto CAKE Pool')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeVaultBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('Other Syrup Pools')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{poolsBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"4px\">\r\n        <Text color=\"textSubtle\" fontSize=\"16px\">\r\n          {t('CAKE BNB LP')}\r\n        </Text>\r\n        <Text textAlign=\"right\">{cakeBnbLpBalance.toFormat(3)}</Text>\r\n      </Flex>\r\n    </ModalInner>\r\n  )\r\n}\r\n\r\nexport default DetailsView\r\n","import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n  total: BigNumber\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: BIG_ZERO,\r\n  cakeVaultBalance: BIG_ZERO,\r\n  cakePoolBalance: BIG_ZERO,\r\n  poolsBalance: BIG_ZERO,\r\n  cakeBnbLpBalance: BIG_ZERO,\r\n  total: BIG_ZERO,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: new BigNumber(cakeBalance),\r\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\r\n            cakePoolBalance: new BigNumber(cakePoolBalance),\r\n            poolsBalance: new BigNumber(poolsBalance),\r\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\r\n            total: new BigNumber(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n","import React from 'react'\r\nimport { Heading, Text } from '@pancakeswap/uikit'\r\nimport { NormalComponents, SpecialComponents } from 'react-markdown/src/ast-to-react'\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\n  margin-bottom: 32px;\r\n  margin-top: 32px;\r\n  width: 100%;\r\n\r\n  td,\r\n  th {\r\n    color: ${({ theme }) => theme.colors.text};\r\n    padding: 8px;\r\n  }\r\n`\r\n\r\nconst ThemedComponent = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n\r\n  li {\r\n    margin-bottom: 8px;\r\n  }\r\n`\r\n\r\nconst Pre = styled.pre`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  margin-bottom: 16px;\r\n  margin-top: 16px;\r\n  max-width: 100%;\r\n  overflow-x: auto;\r\n`\r\n\r\nconst Title = (props) => {\r\n  return <Heading as=\"h4\" scale=\"lg\" my=\"16px\" {...props} />\r\n}\r\n\r\nconst markdownComponents: Partial<NormalComponents & SpecialComponents> = {\r\n  h1: Title,\r\n  h2: Title,\r\n  h3: Title,\r\n  h4: Title,\r\n  h5: Title,\r\n  h6: Title,\r\n  p: (props) => {\r\n    return <Text as=\"p\" my=\"16px\" {...props} />\r\n  },\r\n  table: Table,\r\n  ol: (props) => {\r\n    return <ThemedComponent as=\"ol\" {...props} />\r\n  },\r\n  ul: (props) => {\r\n    return <ThemedComponent as=\"ul\" {...props} />\r\n  },\r\n  pre: Pre,\r\n}\r\n\r\nexport default markdownComponents\r\n","import React from 'react'\r\nimport ReactMarkdownLib, { ReactMarkdownOptions } from 'react-markdown'\r\nimport gfm from 'remark-gfm'\r\nimport markdownComponents from './styles'\r\n\r\nconst ReactMarkdown: React.FC<ReactMarkdownOptions> = (props) => {\r\n  return <ReactMarkdownLib remarkPlugins={[gfm]} components={markdownComponents} {...props} />\r\n}\r\n\r\nexport default ReactMarkdown\r\n"],"sourceRoot":""}