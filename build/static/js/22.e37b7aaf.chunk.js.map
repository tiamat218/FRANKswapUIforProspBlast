{"version":3,"sources":["views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/hooks/useFetchLotteryForPromos.ts","views/Home/Home.tsx","hooks/useTokenBalance.ts"],"names":["CardValue","_ref","value","decimals","fontSize","lineHeight","prefix","bold","color","countUp","update","useCountUp","start","end","duration","separator","undefined","updateValue","useRef","useEffect","current","_jsxs","Text","style","children","CardBusdValue","props","_jsx","CakeWalletBalance","t","useTranslation","balance","cakeBalance","useTokenBalance","getCakeAddress","cakePriceBusd","usePriceCakeBusd","busdBalance","BigNumber","getBalanceNumber","multipliedBy","toNumber","account","useWeb3React","_Fragment","gt","StyledFarmStakingCard","styled","Card","_templateObject","_taggedTemplateLiteral","Block","div","_templateObject2","CardImage","img","_templateObject3","Label","_templateObject4","theme","colors","textSubtle","_templateObject5","FarmedStakingCard","pendingTx","setPendingTx","useState","toastSuccess","toastError","useToast","useMasterchef","CardBody","Heading","scale","mb","src","alt","width","height","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","useFetchLotteryForPromos","slowRefresh","useRefresh","lotteryId","setLotteryId","currentLotteryPrize","setCurrentLotteryPrize","async","currentLotteryId","fetchCurrentLotteryIdAndMaxBuy","fetchCurrentID","amountCollectedInCake","fetchLottery","fetchCurrentLotteryPrize","Hero","mediaQueries","lg","Cards","BaseLayout","_ref2","sm","_ref3","_ref4","_ref5","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","supply","toString","fetchTotalSupply","tokenAddress","setBalance","BIG_ZERO","contract","getBep20Contract","res","balanceOf","fetchBalance","useGetBnbBalance","lastUpdated","setLastUpdated","useLastUpdated","walletBalance","simpleRpcProvider","getBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","fetchStatus","fastRefresh","e","console","error","prev"],"mappings":"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","file":"static/js/22.e37b7aaf.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  // const farmsWithBalance = useFarmsWithBalance()\r\n  const masterChefContract = useMasterchef()\r\n  // const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\r\n\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{t('CAKE to Harvest')}:</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('CAKE in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={19} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import { useState, useEffect } from 'react'\r\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\r\nimport useRefresh from 'hooks/useRefresh'\r\n\r\nconst useFetchLotteryForPromos = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [lotteryId, setLotteryId] = useState<string>(null)\r\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID\r\n    const fetchCurrentID = async () => {\r\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\r\n      setLotteryId(currentLotteryId)\r\n    }\r\n\r\n    fetchCurrentID()\r\n  }, [setLotteryId])\r\n\r\n  useEffect(() => {\r\n    // get public data for current lottery\r\n    const fetchCurrentLotteryPrize = async () => {\r\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\r\n      setCurrentLotteryPrize(amountCollectedInCake)\r\n    }\r\n\r\n    if (lotteryId) {\r\n      fetchCurrentLotteryPrize()\r\n    }\r\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\r\n\r\n  return { currentLotteryPrize }\r\n}\r\n\r\nexport default useFetchLotteryForPromos\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport PredictionPromotionCard from 'views/Home/components/PredictionPromotionCard'\r\nimport LotteryPromotionCard from 'views/Home/components/LotteryPromotionCard'\r\n\r\nimport useFetchLotteryForPromos from 'views/Home/hooks/useFetchLotteryForPromos'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 24px;\r\n  grid-gap: 24px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n    grid-gap: 32px;\r\n\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { currentLotteryPrize } = useFetchLotteryForPromos()\r\n\r\n  return (\r\n    <>\r\n     \r\n      <Page>\r\n        <Hero>\r\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\r\n            {t('PancakeSwap')}\r\n          </Heading>\r\n          <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n        </Hero>\r\n        <div>\r\n          <Cards>\r\n            <FarmStakingCard />\r\n            {/* <PredictionPromotionCard /> */}\r\n          </Cards>\r\n\r\n{/*           <CTACards>\r\n            <EarnAPRCard />\r\n            <EarnAssetCard />\r\n            <LotteryPromotionCard currentLotteryPrize={currentLotteryPrize} />\r\n          </CTACards> */}\r\n\r\n          <Cards>\r\n            <CakeStats />\r\n            {/* <TotalValueLockedCard /> */}\r\n          </Cards>\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"sourceRoot":""}