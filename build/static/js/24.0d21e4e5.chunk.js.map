{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","primary","ExpandableSectionButton","_ref2","onClick","expanded","t","useTranslation","_jsxs","role","children","_jsx","Text","color","bold","ChevronUpIcon","ChevronDownIcon","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","concat","StyledLinkExternal","LinkExternal","_templateObject2","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","Flex","justifyContent","Skeleton","width","height","href","symbol","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","Heading","split","CommunityTag","CoreTag","StyledSpacer","props","size","Spacer","spacing","useContext","ThemeContext","s","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","_Fragment","StyledTokenInput","input","isWarning","shadows","warning","inset","_ref3","text","StyledInput","Input","_ref4","mediaQueries","xs","_ref5","sm","StyledErrorMessage","_templateObject3","ModalInput","_ref6","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","Button","scale","mr","Link","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","useState","toastSuccess","toastError","useToast","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","Modal","title","disabled","isFinite","eq","async","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","unstakeFarm","amount","useStakeFarms","onStake","txHash","stakeFarm","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","stakedBalanceBigNumber","getBalanceAmount","onPresentDeposit","useModal","fetchFarmUserDataAsync","pids","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","IconButton","MinusIcon","AddIcon","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","tx","approve","address","ethers","constants","MaxUint256","wait","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","userData","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","ConnectWalletButton","ApyButton","apr","displayApr","onPresentApyModal","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","event","stopPropagation","ml","CalculateIcon","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","_templateObject4","cardBorder","ExpandingWrapper","_templateObject5","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","toggled","Details","actionPanelToggled","isXl","useMatchBreakpoints","isMobile","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","targetRef","tooltip","tooltipVisible","useTooltip","placement","tooltipOffset","ref","HelpIcon","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","_templateObject6","StakeContainer","_templateObject7","TagsContainer","_templateObject8","_templateObject9","_ref7","InfoContainer","_templateObject10","ValueContainer","_templateObject11","_ref8","ValueWrapper","_templateObject12","ActionPanel","_ref9","details","isActive","bsc","DualTag","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","ViewMode","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","_createElement","original","scrollToTop","current","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","activeIndex","ButtonMenu","ButtonMenuItem","as","to","NotificationDot","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","CardViewIcon","TABLE","ListViewIcon","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","farmsLP","userDataLoaded","useFarms","query","setQuery","setViewMode","usePersistState","localStorageKey","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","entry","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","NavLink","exact","activeClassName","p","ArrowForwardIcon","Page","Toggle","checked","Select","options","option","marginLeft","SearchInput","target","renderContent","sort","a","b","Table","FlexLayout","Route","Loading","src","alt"],"mappings":"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","file":"static/js/24.0d21e4e5.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  border-radius: 32px;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n                {displayApr}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton\r\n              lpLabel={lpLabel}\r\n              cakePrice={cakePrice}\r\n              apr={originalValue}\r\n              displayApr={value}\r\n              addLiquidityUrl={addLiquidityUrl}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}