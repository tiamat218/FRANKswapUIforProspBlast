{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","state/hooks.ts"],"names":["InfoRow","styled","div","_templateObject","_taggedTemplateLiteral","Value","Text","ModalContent","_templateObject2","Actions","_templateObject3","Label","label","_templateObject4","_ref","theme","colors","text","TransferNftModal","_ref2","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","useState","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","_jsxs","Modal","title","children","_jsx","color","mb","nftName","name","htmlFor","Input","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","Button","width","variant","onClick","async","ethers","utils","isAddress","tx","transferFrom","wait","status","err","console","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","Flex","alignItems","justifyContent","bold","endIcon","AutoRenewIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","concat","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","attrs","InfoBlock","NftCard","_profile$nft","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleSuccess","onPresentTransferModal","useModal","onPresentClaimModal","Card","isActive","CardBody","Heading","Tag","outline","mt","CardFooter","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","teamNftMap","EasterNftCard","props","isClaimable","setIsClaimable","team","easterNftContract","useEasterNftContract","useEffect","fetchClaimStatus","response","mintNFT","nftComponents","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","StyledHero","textSubtle","Collectibles","Page","scale","useGetSortedRounds","roundData","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","values","useGetBetByEpoch","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetTotalIntervalBlocks","bufferBlocks","useGetPredictionsStatus","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","useMemo","BigNumber","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","history","useGetLastOraclePrice","lastOraclePrice","isInitialized","data","collectibles","identifiers","nftsInWallet","Nfts","filter","includes"],"mappings":"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","file":"static/js/23.bb19b1c2.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\r\nimport { getAddressByType } from 'utils/collectibles'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC721 } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const contract = useERC721(getAddressByType(nft.type))\r\n  const { toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = ethers.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(t('Please enter a valid wallet address'))\r\n      } else {\r\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\r\n        setIsLoading(true)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          onDismiss()\r\n          onSuccess()\r\n          toastSuccess(t('NFT successfully transferred!'))\r\n        } else {\r\n          setError(t('Unable to transfer NFT'))\r\n          setIsLoading(false)\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{t('Transferring')}:</Text>\r\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={t('Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    const tx = await onClaim()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Successfully claimed!'))\r\n      onDismiss()\r\n      onSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Nft } from 'config/constants/types'\r\n\r\ninterface PreviewProps {\r\n  nft: Nft\r\n  isOwned?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n  height: 100%;\r\n  width: 100%;\r\n`\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\r\n  const { images, name, video } = nft\r\n  const previewImageSrc = `/images/nfts/${images.lg}`\r\n\r\n  if (video) {\r\n    const videoComponent = (\r\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\r\n        <source src={video.webm} type=\"video/webm\" />\r\n        <source src={video.mp4} type=\"video/mp4\" />\r\n      </StyledVideo>\r\n    )\r\n\r\n    return isOwned ? (\r\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n        {videoComponent}\r\n      </a>\r\n    ) : (\r\n      videoComponent\r\n    )\r\n  }\r\n\r\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\r\n\r\n  return (\r\n    <Container>\r\n      {isOwned ? (\r\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport TransferNftModal from '../TransferNftModal'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport Preview from './Preview'\r\n\r\nexport interface NftCardProps {\r\n  nft: Nft\r\n  canClaim?: boolean\r\n  tokenIds?: number[]\r\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\r\n  refresh: () => void\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 24px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { profile } = useProfile()\r\n  const { identifier, name, description } = nft\r\n  const walletOwnsNft = tokenIds.length > 0\r\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const handleClick = async () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    refresh()\r\n  }\r\n\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Preview nft={nft} isOwned={walletOwnsNft} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {walletOwnsNft && (\r\n            <Tag outline variant=\"secondary\">\r\n              {t('In Wallet')}\r\n            </Tag>\r\n          )}\r\n          {profile?.nft?.identifier === identifier && (\r\n            <Tag outline variant=\"success\">\r\n              {t('Profile Pic')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {canClaim && (\r\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\r\n            {t('Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {walletOwnsNft && (\r\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {t('Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {t('Details')}\r\n        </DetailsButton>\r\n        {isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\r\n              {t(description)}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\n\r\nconst NftGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useEasterNftContract } from 'hooks/useContract'\r\nimport NftCard, { NftCardProps } from './index'\r\n\r\n/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */\r\nexport const teamNftMap = {\r\n  'easter-storm': 1,\r\n  'easter-flipper': 2,\r\n  'easter-caker': 3,\r\n}\r\n\r\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\r\n  const [isClaimable, setIsClaimable] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { profile } = useProfile()\r\n  const { identifier } = nft\r\n  const { team } = profile ?? {}\r\n  const easterNftContract = useEasterNftContract()\r\n\r\n  const handleClaim = async () => {\r\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\r\n    await response.wait()\r\n    return response\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchClaimStatus = async () => {\r\n      const canClaim = await easterNftContract.canClaim(account)\r\n\r\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\r\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\r\n    }\r\n\r\n    if (account && team) {\r\n      fetchClaimStatus()\r\n    }\r\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\r\n\r\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\r\n}\r\n\r\nexport default EasterNftCard\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport nfts from 'config/constants/nfts'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchWalletNfts } from 'state/collectibles'\r\nimport { useGetCollectibles } from 'state/hooks'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport EasterNftCard from './NftCard/EasterNftCard'\r\n\r\n/**\r\n * A map of bunnyIds to special campaigns (NFT distribution)\r\n * Each NftCard is responsible for checking it's own claim status\r\n *\r\n */\r\nconst nftComponents = {\r\n  'easter-storm': EasterNftCard,\r\n  'easter-flipper': EasterNftCard,\r\n  'easter-caker': EasterNftCard,\r\n}\r\n\r\nconst NftList = () => {\r\n  const { tokenIds } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleRefresh = () => {\r\n    dispatch(fetchWalletNfts(account))\r\n  }\r\n\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => {\r\n        const Card = nftComponents[nft.identifier] || NftCard\r\n\r\n        return (\r\n          <div key={nft.name}>\r\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\r\n          </div>\r\n        )\r\n      })}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport NftList from './components/NftList'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Collectibles = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Page>\r\n      <StyledHero>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\r\n          {t('Pancake Collectibles')}\r\n        </Heading>\r\n      </StyledHero>\r\n      <NftList />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Collectibles\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\r\nimport { fetchWalletNfts } from './collectibles'\r\nimport { parseBigNumberObj } from './predictions/helpers'\r\n\r\n// /!\\\r\n// Don't add anything here. These hooks will be moved the the predictions folder\r\n\r\n// Predictions\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetRewardRate = () => {\r\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\r\n  return rewardRate / 100\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\r\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!ledgers[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!ledgers[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return ledgers[account][roundId]\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n"],"sourceRoot":""}