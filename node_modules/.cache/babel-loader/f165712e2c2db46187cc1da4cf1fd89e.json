{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { LotteryStatus } from 'config/constants/types';\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers';\nimport getLotteriesData from './getLotteriesData';\nimport getUserLotteryData from './getUserLotteryData';\nconst initialState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    lotteryId: null,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: []\n    }\n  },\n  lotteriesData: null,\n  userLotteryData: {\n    account: '',\n    totalCake: '',\n    totalTickets: '',\n    rounds: []\n  }\n};\nexport const fetchCurrentLottery = createAsyncThunk('lottery/fetchCurrentLottery', async ({\n  currentLotteryId\n}) => {\n  const lotteryInfo = await fetchLottery(currentLotteryId);\n  return lotteryInfo;\n});\nexport const fetchCurrentLotteryId = createAsyncThunk('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy();\n  return currentIdAndMaxBuy;\n});\nexport const fetchUserTicketsAndLotteries = createAsyncThunk('lottery/fetchUserTicketsAndLotteries', async ({\n  account,\n  currentLotteryId\n}) => {\n  var _userLotteriesRes$rou;\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId);\n  const userParticipationInCurrentRound = (_userLotteriesRes$rou = userLotteriesRes.rounds) === null || _userLotteriesRes$rou === void 0 ? void 0 : _userLotteriesRes$rou.find(round => round.lotteryId === currentLotteryId);\n  const userTickets = userParticipationInCurrentRound === null || userParticipationInCurrentRound === void 0 ? void 0 : userParticipationInCurrentRound.tickets;\n\n  // User has not bought tickets for the current lottery, or there has been an error\n  if (!userTickets || userTickets.length === 0) {\n    return {\n      userTickets: null,\n      userLotteries: userLotteriesRes\n    };\n  }\n  return {\n    userTickets,\n    userLotteries: userLotteriesRes\n  };\n});\nexport const fetchPublicLotteries = createAsyncThunk('lottery/fetchPublicLotteries', async ({\n  currentLotteryId\n}) => {\n  const lotteries = await getLotteriesData(currentLotteryId);\n  return lotteries;\n});\nexport const fetchUserLotteries = createAsyncThunk('lottery/fetchUserLotteries', async ({\n  account,\n  currentLotteryId\n}) => {\n  const userLotteries = await getUserLotteryData(account, currentLotteryId);\n  return userLotteries;\n});\nexport const setLotteryIsTransitioning = createAsyncThunk(`lottery/setIsTransitioning`, async ({\n  isTransitioning\n}) => {\n  return {\n    isTransitioning\n  };\n});\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action) => {\n      state.currentRound = {\n        ...state.currentRound,\n        ...action.payload\n      };\n    });\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action) => {\n      state.currentLotteryId = action.payload.currentLotteryId;\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim;\n    });\n    builder.addCase(fetchUserTicketsAndLotteries.fulfilled, (state, action) => {\n      state.currentRound.userTickets.isLoading = false;\n      state.currentRound.userTickets.tickets = action.payload.userTickets;\n      state.userLotteryData = action.payload.userLotteries;\n    });\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action) => {\n      state.lotteriesData = action.payload;\n    });\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action) => {\n      state.userLotteryData = action.payload;\n    });\n    builder.addCase(setLotteryIsTransitioning.fulfilled, (state, action) => {\n      state.isTransitioning = action.payload.isTransitioning;\n    });\n  }\n});\n\n// Actions\nexport const {\n  setLotteryPublicData\n} = LotterySlice.actions;\nexport default LotterySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","LotteryStatus","fetchLottery","fetchCurrentLotteryIdAndMaxBuy","getLotteriesData","getUserLotteryData","initialState","currentLotteryId","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","lotteryId","status","PENDING","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","userTickets","tickets","lotteriesData","userLotteryData","account","totalCake","totalTickets","rounds","fetchCurrentLottery","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","_userLotteriesRes$rou","userLotteriesRes","userParticipationInCurrentRound","find","round","length","userLotteries","fetchPublicLotteries","lotteries","fetchUserLotteries","setLotteryIsTransitioning","LotterySlice","name","reducers","setLotteryPublicData","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/lottery/index.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\r\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\r\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers'\r\nimport getLotteriesData from './getLotteriesData'\r\nimport getUserLotteryData from './getUserLotteryData'\r\n\r\ninterface PublicLotteryData {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n}\r\n\r\nconst initialState: LotteryState = {\r\n  currentLotteryId: null,\r\n  isTransitioning: false,\r\n  maxNumberTicketsPerBuyOrClaim: null,\r\n  currentRound: {\r\n    isLoading: true,\r\n    lotteryId: null,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n    userTickets: {\r\n      isLoading: true,\r\n      tickets: [],\r\n    },\r\n  },\r\n  lotteriesData: null,\r\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\r\n}\r\n\r\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\r\n  'lottery/fetchCurrentLottery',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteryInfo = await fetchLottery(currentLotteryId)\r\n    return lotteryInfo\r\n  },\r\n)\r\n\r\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\r\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\r\n  return currentIdAndMaxBuy\r\n})\r\n\r\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\r\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId)\r\n  const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round) => round.lotteryId === currentLotteryId)\r\n  const userTickets = userParticipationInCurrentRound?.tickets\r\n\r\n  // User has not bought tickets for the current lottery, or there has been an error\r\n  if (!userTickets || userTickets.length === 0) {\r\n    return { userTickets: null, userLotteries: userLotteriesRes }\r\n  }\r\n\r\n  return { userTickets, userLotteries: userLotteriesRes }\r\n})\r\n\r\nexport const fetchPublicLotteries = createAsyncThunk<LotteryRoundGraphEntity[], { currentLotteryId: string }>(\r\n  'lottery/fetchPublicLotteries',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteries = await getLotteriesData(currentLotteryId)\r\n    return lotteries\r\n  },\r\n)\r\n\r\nexport const fetchUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteries = await getUserLotteryData(account, currentLotteryId)\r\n  return userLotteries\r\n})\r\n\r\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\r\n  `lottery/setIsTransitioning`,\r\n  async ({ isTransitioning }) => {\r\n    return { isTransitioning }\r\n  },\r\n)\r\n\r\nexport const LotterySlice = createSlice({\r\n  name: 'Lottery',\r\n  initialState,\r\n  reducers: {\r\n    setLotteryPublicData: (state, action) => {\r\n      state = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\r\n      state.currentRound = { ...state.currentRound, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\r\n      state.currentLotteryId = action.payload.currentLotteryId\r\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\r\n    })\r\n    builder.addCase(\r\n      fetchUserTicketsAndLotteries.fulfilled,\r\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\r\n        state.currentRound.userTickets.isLoading = false\r\n        state.currentRound.userTickets.tickets = action.payload.userTickets\r\n        state.userLotteryData = action.payload.userLotteries\r\n      },\r\n    )\r\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\r\n      state.lotteriesData = action.payload\r\n    })\r\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      state.userLotteryData = action.payload\r\n    })\r\n    builder.addCase(\r\n      setLotteryIsTransitioning.fulfilled,\r\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\r\n        state.isTransitioning = action.payload.isTransitioning\r\n      },\r\n    )\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLotteryPublicData } = LotterySlice.actions\r\n\r\nexport default LotterySlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}