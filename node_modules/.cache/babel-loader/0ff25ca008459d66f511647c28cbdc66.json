{"ast":null,"code":"import { ethers } from 'ethers';\n\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\nexport const estimateGas = async (contract, methodName, methodArgs, gasMarginPer10000) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`);\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs);\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation.mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000))).div(ethers.BigNumber.from(10000));\n  return gasEstimation;\n};\n\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\nexport const callWithEstimateGas = async (contract, methodName, methodArgs = [], gasMarginPer10000 = 1000) => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000);\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation\n  });\n  return tx;\n};","map":{"version":3,"names":["ethers","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","Error","address","rawGasEstimation","gasEstimation","mul","BigNumber","from","add","div","callWithEstimateGas","tx","gasLimit"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/calls/estimateGas.ts"],"sourcesContent":["import { ethers, Contract } from 'ethers'\r\n\r\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const estimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[],\r\n  gasMarginPer10000: number,\r\n) => {\r\n  if (!contract[methodName]) {\r\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\r\n  }\r\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\r\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\r\n  const gasEstimation = rawGasEstimation\r\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\r\n    .div(ethers.BigNumber.from(10000))\r\n  return gasEstimation\r\n}\r\n\r\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const callWithEstimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[] = [],\r\n  gasMarginPer10000 = 1000,\r\n): Promise<ethers.providers.TransactionResponse> => {\r\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\r\n  const tx = await contract[methodName](...methodArgs, {\r\n    gasLimit: gasEstimation,\r\n  })\r\n  return tx\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAkB,QAAQ;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CACzBC,QAAkB,EAClBC,UAAkB,EAClBC,UAAiB,EACjBC,iBAAyB,KACtB;EACH,IAAI,CAACH,QAAQ,CAACC,UAAU,CAAC,EAAE;IACzB,MAAM,IAAIG,KAAK,CAAC,UAAUH,UAAU,qBAAqBD,QAAQ,CAACK,OAAO,EAAE,CAAC;EAC9E;EACA,MAAMC,gBAAgB,GAAG,MAAMN,QAAQ,CAACD,WAAW,CAACE,UAAU,CAAC,CAAC,GAAGC,UAAU,CAAC;EAC9E;EACA,MAAMK,aAAa,GAAGD,gBAAgB,CACnCE,GAAG,CAACV,MAAM,CAACW,SAAS,CAACC,IAAI,CAAC,KAAK,CAAC,CAACC,GAAG,CAACb,MAAM,CAACW,SAAS,CAACC,IAAI,CAACP,iBAAiB,CAAC,CAAC,CAAC,CAC/ES,GAAG,CAACd,MAAM,CAACW,SAAS,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;EACpC,OAAOH,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,mBAAmB,GAAG,MAAAA,CACjCb,QAAkB,EAClBC,UAAkB,EAClBC,UAAiB,GAAG,EAAE,EACtBC,iBAAiB,GAAG,IAAI,KAC0B;EAClD,MAAMI,aAAa,GAAGR,WAAW,CAACC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,iBAAiB,CAAC;EACtF,MAAMW,EAAE,GAAG,MAAMd,QAAQ,CAACC,UAAU,CAAC,CAAC,GAAGC,UAAU,EAAE;IACnDa,QAAQ,EAAER;EACZ,CAAC,CAAC;EACF,OAAOO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}