{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Collectibles\\\\components\\\\ClaimNftModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useWeb3React } from '@web3-react/core';\nimport { Button, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c2 = Actions;\nconst ClaimNftModal = ({\n  nft,\n  onSuccess,\n  onClaim,\n  onDismiss\n}) => {\n  _s();\n  const [isConfirming, setIsConfirming] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n  const handleConfirm = async () => {\n    const tx = await onClaim();\n    setIsConfirming(true);\n    const receipt = await tx.wait();\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'));\n      onDismiss();\n      onSuccess();\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsConfirming(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Claim Collectible'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('You will receive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: t('1x %nftName% Collectible', {\n            nftName: nft.name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        onClick: handleConfirm,\n        disabled: !account,\n        isLoading: isConfirming,\n        endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          color: \"currentColor\",\n          spin: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 35\n        }, this) : null,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ClaimNftModal, \"CPD477JjddhG/nJTCdFd/iLbz5k=\", false, function () {\n  return [useTranslation, useWeb3React, useToast];\n});\n_c3 = ClaimNftModal;\nexport default ClaimNftModal;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ModalContent\");\n$RefreshReg$(_c2, \"Actions\");\n$RefreshReg$(_c3, \"ClaimNftModal\");","map":{"version":3,"names":["React","useState","styled","useWeb3React","Button","Modal","Text","Flex","AutoRenewIcon","useTranslation","useToast","jsxDEV","_jsxDEV","ModalContent","div","_c","Actions","_c2","ClaimNftModal","nft","onSuccess","onClaim","onDismiss","_s","isConfirming","setIsConfirming","t","account","toastError","toastSuccess","handleConfirm","tx","receipt","wait","status","title","children","alignItems","mb","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","bold","nftName","name","width","variant","onClick","disabled","isLoading","endIcon","color","spin","_c3","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Collectibles/components/ClaimNftModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    const tx = await onClaim()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Successfully claimed!'))\r\n      onDismiss()\r\n      onSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}