{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\IfoCardDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { PoolIds } from 'config/constants/types';\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance';\nimport { SkeletonCardDetails } from './Skeletons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FooterEntry = ({\n  label,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      small: true,\n      color: \"textSubtle\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), value ? /*#__PURE__*/_jsxDEV(Text, {\n      small: true,\n      textAlign: \"right\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: 21,\n      width: 80\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FooterEntry;\n\nconst IfoCardDetails = ({\n  poolId,\n  ifo,\n  publicIfoData\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    status,\n    currencyPriceInUSD\n  } = publicIfoData;\n  const poolCharacteristic = publicIfoData[poolId];\n  /* Format start */\n\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals);\n  const taxRate = `${poolCharacteristic.taxRate}%`;\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool.div(poolCharacteristic.raisingAmountPool).times(100).toFixed(2);\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals);\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted);\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`;\n  /* Format end */\n\n  const renderBasedOnIfoStatus = () => {\n    if (status === 'coming_soon') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Funds to raise:'),\n          value: ifo[poolId].raiseAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('CAKE to burn:'),\n          value: ifo[poolId].cakeToBurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Price per %symbol%:', {\n            symbol: ifo.token.symbol\n          }),\n          value: `$${ifo.tokenOfferingPrice}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (status === 'live') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 44\n        }, this), poolId === PoolIds.poolUnlimited && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Additional fee:'),\n          value: taxRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Total committed:'),\n          value: currencyPriceInUSD.gt(0) ? totalCommitted : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (status === 'finished') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [poolId === PoolIds.poolBasic && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Max. LP token entry'),\n          value: maxLpTokens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 44\n        }, this), poolId === PoolIds.poolUnlimited && /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Additional fee:'),\n          value: taxRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Total committed:'),\n          value: currencyPriceInUSD.gt(0) ? totalCommitted : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Funds to raise:'),\n          value: ifo[poolId].raiseAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('CAKE to burn:'),\n          value: ifo[poolId].cakeToBurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FooterEntry, {\n          label: t('Price per %symbol%:', {\n            symbol: ifo.token.symbol\n          }),\n          value: `$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(SkeletonCardDetails, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    paddingTop: \"24px\",\n    children: renderBasedOnIfoStatus()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 10\n  }, this);\n};\n\n_s(IfoCardDetails, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c2 = IfoCardDetails;\nexport default IfoCardDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FooterEntry\");\n$RefreshReg$(_c2, \"IfoCardDetails\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx"],"names":["React","Text","Flex","Box","Skeleton","useTranslation","PoolIds","getBalanceNumber","formatNumber","SkeletonCardDetails","FooterEntry","label","value","IfoCardDetails","poolId","ifo","publicIfoData","t","status","currencyPriceInUSD","poolCharacteristic","maxLpTokens","limitPerUserInLP","currency","decimals","taxRate","totalCommittedPercent","totalAmountPool","div","raisingAmountPool","times","toFixed","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","toNumber","renderBasedOnIfoStatus","poolBasic","raiseAmount","cakeToBurn","symbol","token","tokenOfferingPrice","poolUnlimited","gt"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { SkeletonCardDetails } from './Skeletons'\r\n\r\nexport interface IfoCardDetailsProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nexport interface FooterEntryProps {\r\n  label: string\r\n  value: string | number\r\n}\r\n\r\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text small color=\"textSubtle\">\r\n        {label}\r\n      </Text>\r\n      {value ? (\r\n        <Text small textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height={21} width={80} />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, currencyPriceInUSD } = publicIfoData\r\n  const poolCharacteristic = publicIfoData[poolId]\r\n\r\n  /* Format start */\r\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\r\n  const taxRate = `${poolCharacteristic.taxRate}%`\r\n\r\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\r\n    .div(poolCharacteristic.raisingAmountPool)\r\n    .times(100)\r\n    .toFixed(2)\r\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\r\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\r\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\r\n\r\n  /* Format end */\r\n\r\n  const renderBasedOnIfoStatus = () => {\r\n    if (status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'live') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'finished') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    return <SkeletonCardDetails />\r\n  }\r\n\r\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\r\n}\r\n\r\nexport default IfoCardDetails\r\n"]},"metadata":{},"sourceType":"module"}