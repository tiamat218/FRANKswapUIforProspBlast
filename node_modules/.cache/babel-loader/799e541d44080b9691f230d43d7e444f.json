{"ast":null,"code":"import BigNumber from'bignumber.js';import erc20ABI from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';export const fetchFarmUserAllowances=async(account,farmsToFetch)=>{const masterChefAddress=getMasterChefAddress();const calls=farmsToFetch.map(farm=>{const lpContractAddress=getAddress(farm.lpAddresses);return{address:lpContractAddress,name:'allowance',params:[account,masterChefAddress]};});const rawLpAllowances=await multicall(erc20ABI,calls);const parsedLpAllowances=rawLpAllowances.map(lpBalance=>{return new BigNumber(lpBalance).toJSON();});return parsedLpAllowances;};export const fetchFarmUserTokenBalances=async(account,farmsToFetch)=>{const calls=farmsToFetch.map(farm=>{const lpContractAddress=getAddress(farm.lpAddresses);return{address:lpContractAddress,name:'balanceOf',params:[account]};});const rawTokenBalances=await multicall(erc20ABI,calls);const parsedTokenBalances=rawTokenBalances.map(tokenBalance=>{return new BigNumber(tokenBalance).toJSON();});return parsedTokenBalances;};export const fetchFarmUserStakedBalances=async(account,farmsToFetch)=>{const masterChefAddress=getMasterChefAddress();const calls=farmsToFetch.map(farm=>{return{address:masterChefAddress,name:'userInfo',params:[farm.pid,account]};});const rawStakedBalances=await multicall(masterchefABI,calls);const parsedStakedBalances=rawStakedBalances.map(stakedBalance=>{return new BigNumber(stakedBalance[0]._hex).toJSON();});return parsedStakedBalances;};export const fetchFarmUserEarnings=async(account,farmsToFetch)=>{const masterChefAddress=getMasterChefAddress();const calls=farmsToFetch.map(farm=>{return{address:masterChefAddress,name:'pendingCake',params:[farm.pid,account]};});const rawEarnings=await multicall(masterchefABI,calls);const parsedEarnings=rawEarnings.map(earnings=>{return new BigNumber(earnings).toJSON();});return parsedEarnings;};","map":{"version":3,"names":["BigNumber","erc20ABI","masterchefABI","multicall","getAddress","getMasterChefAddress","fetchFarmUserAllowances","account","farmsToFetch","masterChefAddress","calls","map","farm","lpContractAddress","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/fetchFarmUser.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'pendingCake',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}