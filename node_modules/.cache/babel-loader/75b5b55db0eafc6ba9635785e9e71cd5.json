{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\Farms.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react';\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Image, Heading, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport styled from 'styled-components';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks';\nimport usePersistState from 'hooks/usePersistState';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getFarmApr } from 'utils/apr';\nimport { orderBy } from 'lodash';\nimport isArchivedPid from 'utils/farmHelpers';\nimport { latinise } from 'utils/latinise';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport Loading from 'components/Loading';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Table from './components/FarmTable/FarmTable';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport ToggleView from './components/ToggleView/ToggleView';\nimport { DesktopColumnSchema, ViewMode } from './components/types';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c = ControlContainer;\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c2 = ToggleWrapper;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c3 = LabelWrapper;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c4 = FilterContainer;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c5 = ViewControls;\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`;\n_c6 = StyledImage;\nconst NUMBER_OF_FARMS_VISIBLE = 12;\nconst getDisplayApr = (cakeRewardsApr, lpRewardsApr) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n  return null;\n};\nconst Farms = () => {\n  _s();\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP,\n    userDataLoaded\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const [query, setQuery] = useState('');\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, {\n    localStorageKey: 'pancake_farm_view'\n  });\n  const {\n    account\n  } = useWeb3React();\n  const [sortOption, setSortOption] = useState('hot');\n  const chosenFarmsLength = useRef(0);\n  const isArchived = pathname.includes('archived');\n  const isInactive = pathname.includes('history');\n  const isActive = !isInactive && !isArchived;\n  usePollFarmsData(isArchived);\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || !!account && userDataLoaded;\n  const [stakedOnly, setStakedOnly] = useState(!isActive);\n  useEffect(() => {\n    setStakedOnly(!isActive);\n  }, [isActive]);\n  const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid));\n  const inactiveFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid));\n  const archivedFarms = farmsLP.filter(farm => isArchivedPid(farm.pid));\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedInactiveFarms = inactiveFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedArchivedFarms = archivedFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const farmsList = useCallback(farmsToDisplay => {\n    let farmsToDisplayWithAPR = farmsToDisplay.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n        return farm;\n      }\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n      const {\n        cakeRewardsApr,\n        lpRewardsApr\n      } = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]) : {\n        cakeRewardsApr: 0,\n        lpRewardsApr: 0\n      };\n      return {\n        ...farm,\n        apr: cakeRewardsApr,\n        lpRewardsApr,\n        liquidity: totalLiquidity\n      };\n    });\n    if (query) {\n      const lowercaseQuery = latinise(query.toLowerCase());\n      farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter(farm => {\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery);\n      });\n    }\n    return farmsToDisplayWithAPR;\n  }, [cakePrice, query, isActive]);\n  const handleChangeQuery = event => {\n    setQuery(event.target.value);\n  };\n  const loadMoreRef = useRef(null);\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = [];\n    const sortFarms = farms => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, farm => farm.apr + farm.lpRewardsApr, 'desc');\n        case 'multiplier':\n          return orderBy(farms, farm => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc');\n        case 'earned':\n          return orderBy(farms, farm => farm.userData ? Number(farm.userData.earnings) : 0, 'desc');\n        case 'liquidity':\n          return orderBy(farms, farm => Number(farm.liquidity), 'desc');\n        default:\n          return farms;\n      }\n    };\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms);\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms);\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms);\n    }\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible);\n  }, [sortOption, activeFarms, farmsList, inactiveFarms, archivedFarms, isActive, isInactive, isArchived, stakedArchivedFarms, stakedInactiveFarms, stakedOnly, stakedOnlyFarms, numberOfFarmsVisible]);\n  chosenFarmsLength.current = chosenFarmsMemoized.length;\n  useEffect(() => {\n    const showMoreFarms = entries => {\n      const [entry] = entries;\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible(farmsCurrentlyVisible => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE;\n          }\n          return farmsCurrentlyVisible;\n        });\n      }\n    };\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [chosenFarmsMemoized, observerIsSet]);\n  const rowData = chosenFarmsMemoized.map(farm => {\n    const {\n      token,\n      quoteToken\n    } = farm;\n    const tokenAddress = token.address;\n    const quoteTokenAddress = quoteToken.address;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '');\n    const row = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid\n      },\n      liquidity: {\n        liquidity: farm.liquidity\n      },\n      multiplier: {\n        multiplier: farm.multiplier\n      },\n      details: farm\n    };\n    return row;\n  });\n  const renderContent = () => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema;\n      const columns = columnSchema.map(column => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a, b) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id;\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value);\n              }\n              return 0;\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings;\n            default:\n              return 1;\n          }\n        },\n        sortable: column.sortable\n      }));\n      return /*#__PURE__*/_jsxDEV(Table, {\n        data: rowData,\n        columns: columns,\n        userDataReady: userDataReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: false\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/history`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/archived`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  };\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        scale: \"xxl\",\n        color: \"secondary\",\n        mb: \"24px\",\n        children: t('Farms')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"lg\",\n        color: \"text\",\n        children: t('Stake LP tokens to earn.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        activeClassName: \"active\",\n        to: \"/farms/auction\",\n        id: \"lottery-pot-banner\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          p: \"0\",\n          variant: \"text\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            color: \"primary\",\n            bold: true,\n            fontSize: \"16px\",\n            mr: \"4px\",\n            children: t('Community Auctions')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(ControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ViewControls, {\n          children: [/*#__PURE__*/_jsxDEV(ToggleView, {\n            viewMode: viewMode,\n            onToggle: mode => setViewMode(mode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Toggle, {\n              checked: stakedOnly,\n              onChange: () => setStakedOnly(!stakedOnly),\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [\" \", t('Staked only')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n            hasStakeInFinishedFarms: stakedInactiveFarms.length > 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              options: [{\n                label: t('Hot'),\n                value: 'hot'\n              }, {\n                label: t('APR'),\n                value: 'apr'\n              }, {\n                label: t('Multiplier'),\n                value: 'multiplier'\n              }, {\n                label: t('Earned'),\n                value: 'earned'\n              }, {\n                label: t('Liquidity'),\n                value: 'liquidity'\n              }],\n              onChange: handleSortOptionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeQuery,\n              placeholder: \"Search Farms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), renderContent(), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImage, {\n        src: \"/images/decorations/3dpan.png\",\n        alt: \"Pancake illustration\",\n        width: 120,\n        height: 103\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Farms, \"0LNkP0LojBoxN7HwGaBd4fv6Ils=\", false, function () {\n  return [useRouteMatch, useLocation, useTranslation, useFarms, usePriceCakeBusd, usePersistState, useWeb3React, usePollFarmsData];\n});\n_c7 = Farms;\nexport default Farms;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ControlContainer\");\n$RefreshReg$(_c2, \"ToggleWrapper\");\n$RefreshReg$(_c3, \"LabelWrapper\");\n$RefreshReg$(_c4, \"FilterContainer\");\n$RefreshReg$(_c5, \"ViewControls\");\n$RefreshReg$(_c6, \"StyledImage\");\n$RefreshReg$(_c7, \"Farms\");","map":{"version":3,"names":["React","useEffect","useCallback","useState","useMemo","useRef","Route","useRouteMatch","useLocation","NavLink","BigNumber","useWeb3React","Image","Heading","Toggle","Text","Button","ArrowForwardIcon","Flex","ChainId","styled","FlexLayout","Page","useFarms","usePollFarmsData","usePriceCakeBusd","usePersistState","useTranslation","getBalanceNumber","getFarmApr","orderBy","isArchivedPid","latinise","PageHeader","SearchInput","Select","Loading","FarmCard","Table","FarmTabButtons","ToggleView","DesktopColumnSchema","ViewMode","jsxDEV","_jsxDEV","Fragment","_Fragment","ControlContainer","div","theme","mediaQueries","sm","_c","ToggleWrapper","_c2","LabelWrapper","_c3","FilterContainer","_c4","ViewControls","_c5","StyledImage","_c6","NUMBER_OF_FARMS_VISIBLE","getDisplayApr","cakeRewardsApr","lpRewardsApr","toLocaleString","maximumFractionDigits","Farms","_s","path","pathname","t","data","farmsLP","userDataLoaded","cakePrice","query","setQuery","viewMode","setViewMode","TABLE","localStorageKey","account","sortOption","setSortOption","chosenFarmsLength","isArchived","includes","isInactive","isActive","userDataReady","stakedOnly","setStakedOnly","activeFarms","filter","farm","pid","multiplier","inactiveFarms","archivedFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","poolWeight","lpAddresses","MAINNET","apr","liquidity","lowercaseQuery","toLowerCase","lpSymbol","handleChangeQuery","event","target","value","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","sortFarms","farms","Number","slice","earnings","current","length","showMoreFarms","entries","entry","isIntersecting","farmsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","rowData","token","tokenAddress","address","quoteTokenAddress","lpLabel","split","toUpperCase","replace","row","originalValue","label","earned","details","renderContent","columnSchema","columns","column","id","name","sort","a","b","original","sortable","fileName","_jsxFileName","lineNumber","columnNumber","children","exact","displayApr","removed","handleSortOptionChange","option","as","scale","color","mb","activeClassName","to","p","variant","bold","fontSize","mr","onToggle","mode","checked","onChange","hasStakeInFinishedFarms","textTransform","options","style","marginLeft","placeholder","justifyContent","ref","src","alt","width","height","_c7","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Farms/Farms.tsx"],"sourcesContent":["import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}