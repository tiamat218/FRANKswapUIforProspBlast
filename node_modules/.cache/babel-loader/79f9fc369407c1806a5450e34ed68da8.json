{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\Cells\\\\NameCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { TokenPairImage } from 'components/TokenImage';\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`;\n_c = StyledCell;\n\nconst NameCell = ({\n  pool\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    userData,\n    isFinished,\n    isAutoVault\n  } = pool;\n  const {\n    userData: {\n      userShares\n    }\n  } = useCakeVault();\n  const hasVaultShares = userShares && userShares.gt(0);\n  const stakingTokenSymbol = stakingToken.symbol;\n  const earningTokenSymbol = earningToken.symbol;\n  const stakedBalance = (userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? new BigNumber(userData.stakedBalance) : BIG_ZERO;\n  const isStaked = stakedBalance.gt(0);\n  const isManualCakePool = sousId === 0;\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked;\n  let title = `${t('Earn')} ${earningTokenSymbol}`;\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`;\n  const showSubtitle = sousId !== 0 || sousId === 0 && !isXs && !isSm;\n\n  if (isAutoVault) {\n    title = t('Auto CAKE');\n    subtitle = t('Automatic restaking');\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE');\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: [isAutoVault ? /*#__PURE__*/_jsxDEV(CakeVaultTokenPairImage, {\n      mr: \"8px\",\n      width: 40,\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TokenPairImage, {\n      primaryToken: earningToken,\n      secondaryToken: stakingToken,\n      mr: \"8px\",\n      width: 40,\n      height: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [showStakedTag && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        bold: true,\n        color: isFinished ? 'failure' : 'secondary',\n        textTransform: \"uppercase\",\n        children: t('Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: !isXs && !isSm,\n        small: isXs || isSm,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), showSubtitle && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: subtitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NameCell, \"G3PZDMSWsaH/K9ph4JUzaCZQwE8=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useCakeVault];\n});\n\n_c2 = NameCell;\nexport default NameCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"NameCell\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/NameCell.tsx"],"names":["React","styled","BigNumber","Text","useMatchBreakpoints","useTranslation","useCakeVault","BIG_ZERO","TokenPairImage","CakeVaultTokenPairImage","BaseCell","CellContent","StyledCell","theme","mediaQueries","sm","NameCell","pool","t","isXs","isSm","sousId","stakingToken","earningToken","userData","isFinished","isAutoVault","userShares","hasVaultShares","gt","stakingTokenSymbol","symbol","earningTokenSymbol","stakedBalance","isStaked","isManualCakePool","showStakedTag","title","subtitle","showSubtitle","toLocaleLowerCase"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface NameCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 5;\r\n  flex-direction: row;\r\n  padding-left: 12px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 150px;\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\r\n  const {\r\n    userData: { userShares },\r\n  } = useCakeVault()\r\n  const hasVaultShares = userShares && userShares.gt(0)\r\n\r\n  const stakingTokenSymbol = stakingToken.symbol\r\n  const earningTokenSymbol = earningToken.symbol\r\n\r\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\r\n  const isStaked = stakedBalance.gt(0)\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\r\n\r\n  let title = `${t('Earn')} ${earningTokenSymbol}`\r\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\r\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\r\n\r\n  if (isAutoVault) {\r\n    title = t('Auto CAKE')\r\n    subtitle = t('Automatic restaking')\r\n  } else if (isManualCakePool) {\r\n    title = t('Manual CAKE')\r\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      {isAutoVault ? (\r\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\r\n      ) : (\r\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\r\n      )}\r\n      <CellContent>\r\n        {showStakedTag && (\r\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\r\n            {t('Staked')}\r\n          </Text>\r\n        )}\r\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\r\n          {title}\r\n        </Text>\r\n        {showSubtitle && (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default NameCell\r\n"]},"metadata":{},"sourceType":"module"}