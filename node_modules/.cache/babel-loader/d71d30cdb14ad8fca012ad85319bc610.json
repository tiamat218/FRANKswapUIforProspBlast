{"ast":null,"code":"import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import farmsConfig from'config/constants/farms';import isArchivedPid from'utils/farmHelpers';import priceHelperLpsConfig from'config/constants/priceHelperLps';import fetchFarms from'./fetchFarms';import fetchFarmsPrices from'./fetchFarmsPrices';import{fetchFarmUserEarnings,fetchFarmUserAllowances,fetchFarmUserTokenBalances,fetchFarmUserStakedBalances}from'./fetchFarmUser';const noAccountFarmConfig=farmsConfig.map(farm=>({...farm,userData:{allowance:'0',tokenBalance:'0',stakedBalance:'0',earnings:'0'}}));const initialState={data:noAccountFarmConfig,loadArchivedFarmsData:false,userDataLoaded:false};export const nonArchivedFarms=farmsConfig.filter(_ref=>{let{pid}=_ref;return!isArchivedPid(pid);});// Async thunks\nexport const fetchFarmsPublicDataAsync=createAsyncThunk('farms/fetchFarmsPublicDataAsync',async pids=>{const farmsToFetch=farmsConfig.filter(farmConfig=>pids.includes(farmConfig.pid));// Add price helper farms\nconst farmsWithPriceHelpers=farmsToFetch.concat(priceHelperLpsConfig);const farms=await fetchFarms(farmsWithPriceHelpers);const farmsWithPrices=await fetchFarmsPrices(farms);// Filter out price helper LP config farms\nconst farmsWithoutHelperLps=farmsWithPrices.filter(farm=>{return farm.pid||farm.pid===0;});return farmsWithoutHelperLps;});export const fetchFarmUserDataAsync=createAsyncThunk('farms/fetchFarmUserDataAsync',async _ref2=>{let{account,pids}=_ref2;const farmsToFetch=farmsConfig.filter(farmConfig=>pids.includes(farmConfig.pid));const userFarmAllowances=await fetchFarmUserAllowances(account,farmsToFetch);const userFarmTokenBalances=await fetchFarmUserTokenBalances(account,farmsToFetch);const userStakedBalances=await fetchFarmUserStakedBalances(account,farmsToFetch);const userFarmEarnings=await fetchFarmUserEarnings(account,farmsToFetch);return userFarmAllowances.map((farmAllowance,index)=>{return{pid:farmsToFetch[index].pid,allowance:userFarmAllowances[index],tokenBalance:userFarmTokenBalances[index],stakedBalance:userStakedBalances[index],earnings:userFarmEarnings[index]};});});export const farmsSlice=createSlice({name:'Farms',initialState,reducers:{setLoadArchivedFarmsData:(state,action)=>{const loadArchivedFarmsData=action.payload;state.loadArchivedFarmsData=loadArchivedFarmsData;}},extraReducers:builder=>{// Update farms with live data\nbuilder.addCase(fetchFarmsPublicDataAsync.fulfilled,(state,action)=>{state.data=state.data.map(farm=>{const liveFarmData=action.payload.find(farmData=>farmData.pid===farm.pid);return{...farm,...liveFarmData};});});// Update farms with user data\nbuilder.addCase(fetchFarmUserDataAsync.fulfilled,(state,action)=>{action.payload.forEach(userDataEl=>{const{pid}=userDataEl;const index=state.data.findIndex(farm=>farm.pid===pid);state.data[index]={...state.data[index],userData:userDataEl};});state.userDataLoaded=true;});}});// Actions\nexport const{setLoadArchivedFarmsData}=farmsSlice.actions;export default farmsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","farmsConfig","isArchivedPid","priceHelperLpsConfig","fetchFarms","fetchFarmsPrices","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","noAccountFarmConfig","map","farm","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","filter","_ref","pid","fetchFarmsPublicDataAsync","pids","farmsToFetch","farmConfig","includes","farmsWithPriceHelpers","concat","farms","farmsWithPrices","farmsWithoutHelperLps","fetchFarmUserDataAsync","_ref2","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","farmsSlice","name","reducers","setLoadArchivedFarmsData","state","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","find","farmData","forEach","userDataEl","findIndex","actions","reducer"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/farms/index.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      const loadArchivedFarmsData = action.payload\r\n      state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\nexport default farmsSlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}