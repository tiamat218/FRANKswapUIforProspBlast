{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport easterPrizes from 'config/constants/trading-competition/easter';\nimport BigNumber from 'bignumber.js';\nexport const localiseTradingVolume = (value, decimals = 0) => {\n  return value.toLocaleString('en-US', {\n    maximumFractionDigits: decimals\n  });\n};\nexport const useCompetitionCakeRewards = userCakeReward => {\n  _s();\n\n  const cakeAsBigNumber = new BigNumber(userCakeReward);\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber);\n  const cakePriceBusd = usePriceCakeBusd();\n  return {\n    cakeReward: cakeBalance,\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null\n  };\n}; // 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\n\n_s(useCompetitionCakeRewards, \"hGPUHk7pPJtm2wPjLczWbuCpA0k=\", false, function () {\n  return [usePriceCakeBusd];\n});\n\nexport const getRewardGroupAchievements = (userRewardGroup, teamRank = 1) => {\n  const userGroup = easterPrizes[teamRank].filter(prizeGroup => {\n    return prizeGroup.group === userRewardGroup;\n  })[0];\n  const userAchievements = userGroup && userGroup.achievements;\n  return userAchievements;\n};\nexport default localiseTradingVolume;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/helpers.ts"],"names":["usePriceCakeBusd","getBalanceNumber","easterPrizes","BigNumber","localiseTradingVolume","value","decimals","toLocaleString","maximumFractionDigits","useCompetitionCakeRewards","userCakeReward","cakeAsBigNumber","cakeBalance","cakePriceBusd","cakeReward","dollarValueOfCakeReward","gt","toNumber","getRewardGroupAchievements","userRewardGroup","teamRank","userGroup","filter","prizeGroup","group","userAchievements","achievements"],"mappings":";;AACA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAgBC,QAAQ,GAAG,CAA3B,KAAiC;AACpE,SAAOD,KAAK,CAACE,cAAN,CAAqB,OAArB,EAA8B;AAAEC,IAAAA,qBAAqB,EAAEF;AAAzB,GAA9B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,yBAAyB,GAAIC,cAAD,IAA+B;AAAA;;AACtE,QAAMC,eAAe,GAAG,IAAIR,SAAJ,CAAcO,cAAd,CAAxB;AACA,QAAME,WAAW,GAAGX,gBAAgB,CAACU,eAAD,CAApC;AACA,QAAME,aAAa,GAAGb,gBAAgB,EAAtC;AACA,SAAO;AACLc,IAAAA,UAAU,EAAEF,WADP;AAELG,IAAAA,uBAAuB,EAAEF,aAAa,CAACG,EAAd,CAAiB,CAAjB,IAAsBJ,WAAW,GAAGC,aAAa,CAACI,QAAd,EAApC,GAA+D;AAFnF,GAAP;AAID,CARM,C,CAUP;AACA;AACA;AACA;;GAbaR,yB;UAGWT,gB;;;AAWxB,OAAO,MAAMkB,0BAA0B,GAAG,CAACC,eAAD,EAA0BC,QAAQ,GAAG,CAArC,KAA2C;AACnF,QAAMC,SAAS,GAAGnB,YAAY,CAACkB,QAAD,CAAZ,CAAuBE,MAAvB,CAA+BC,UAAD,IAAgB;AAC9D,WAAOA,UAAU,CAACC,KAAX,KAAqBL,eAA5B;AACD,GAFiB,EAEf,CAFe,CAAlB;AAGA,QAAMM,gBAAgB,GAAGJ,SAAS,IAAIA,SAAS,CAACK,YAAhD;AACA,SAAOD,gBAAP;AACD,CANM;AAQP,eAAerB,qBAAf","sourcesContent":["import { ReactText } from 'react'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport easterPrizes from 'config/constants/trading-competition/easter'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const localiseTradingVolume = (value: number, decimals = 0) => {\r\n  return value.toLocaleString('en-US', { maximumFractionDigits: decimals })\r\n}\r\n\r\nexport const useCompetitionCakeRewards = (userCakeReward: ReactText) => {\r\n  const cakeAsBigNumber = new BigNumber(userCakeReward as string)\r\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  return {\r\n    cakeReward: cakeBalance,\r\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null,\r\n  }\r\n}\r\n\r\n// 1 is a reasonable teamRank default: accessing the first team in the config.\r\n// We use the smart contract userPointReward to get a users' points\r\n// Achievement keys are consistent across different teams regardless of team team rank\r\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\r\nexport const getRewardGroupAchievements = (userRewardGroup: string, teamRank = 1) => {\r\n  const userGroup = easterPrizes[teamRank].filter((prizeGroup) => {\r\n    return prizeGroup.group === userRewardGroup\r\n  })[0]\r\n  const userAchievements = userGroup && userGroup.achievements\r\n  return userAchievements\r\n}\r\n\r\nexport default localiseTradingVolume\r\n"]},"metadata":{},"sourceType":"module"}