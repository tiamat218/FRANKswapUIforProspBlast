{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nexport const fetchFarmUserAllowances = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChefAddress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\nexport const fetchFarmUserTokenBalances = async (account, farmsToFetch) => {\n  const calls = farmsToFetch.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  });\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\nexport const fetchFarmUserStakedBalances = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    return {\n      address: masterChefAddress,\n      name: 'userInfo',\n      params: [farm.pid, account]\n    };\n  });\n  const rawStakedBalances = await multicall(masterchefABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON();\n  });\n  return parsedStakedBalances;\n};\nexport const fetchFarmUserEarnings = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    return {\n      address: masterChefAddress,\n      name: 'pendingCake',\n      params: [farm.pid, account]\n    };\n  });\n  const rawEarnings = await multicall(masterchefABI, calls);\n  const parsedEarnings = rawEarnings.map(earnings => {\n    return new BigNumber(earnings).toJSON();\n  });\n  return parsedEarnings;\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","multicall","getAddress","getMasterChefAddress","fetchFarmUserAllowances","account","farmsToFetch","masterChefAddress","calls","map","farm","lpContractAddress","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'pendingCake',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n"]},"metadata":{},"sourceType":"module"}