{"ast":null,"code":"// chunks array into chunks of maximum size\n// evenly distributes items among the chunks\nexport default function chunkArray(items,maxChunkSize){if(maxChunkSize<1)throw new Error('maxChunkSize must be gte 1');if(items.length<=maxChunkSize)return[items];const numChunks=Math.ceil(items.length/maxChunkSize);const chunkSize=Math.ceil(items.length/numChunks);return[...Array(numChunks).keys()].map(ix=>items.slice(ix*chunkSize,ix*chunkSize+chunkSize));}","map":{"version":3,"names":["chunkArray","items","maxChunkSize","Error","length","numChunks","Math","ceil","chunkSize","Array","keys","map","ix","slice"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/multicall/chunkArray.ts"],"sourcesContent":["// chunks array into chunks of maximum size\r\n// evenly distributes items among the chunks\r\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\r\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1')\r\n  if (items.length <= maxChunkSize) return [items]\r\n\r\n  const numChunks: number = Math.ceil(items.length / maxChunkSize)\r\n  const chunkSize = Math.ceil(items.length / numChunks)\r\n\r\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize))\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,cAAe,SAAS,CAAAA,UAAUA,CAAIC,KAAU,CAAEC,YAAoB,CAAS,CAC7E,GAAIA,YAAY,CAAG,CAAC,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAC,CACnE,GAAIF,KAAK,CAACG,MAAM,EAAIF,YAAY,CAAE,MAAO,CAACD,KAAK,CAAC,CAEhD,KAAM,CAAAI,SAAiB,CAAGC,IAAI,CAACC,IAAI,CAACN,KAAK,CAACG,MAAM,CAAGF,YAAY,CAAC,CAChE,KAAM,CAAAM,SAAS,CAAGF,IAAI,CAACC,IAAI,CAACN,KAAK,CAACG,MAAM,CAAGC,SAAS,CAAC,CAErD,MAAO,CAAC,GAAGI,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,EAAE,EAAKX,KAAK,CAACY,KAAK,CAACD,EAAE,CAAGJ,SAAS,CAAEI,EAAE,CAAGJ,SAAS,CAAGA,SAAS,CAAC,CAAC,CAC1G","ignoreList":[]},"metadata":{},"sourceType":"module"}