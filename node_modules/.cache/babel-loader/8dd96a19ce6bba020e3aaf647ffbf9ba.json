{"ast":null,"code":"import{usePriceCakeBusd}from'state/farms/hooks';import{getBalanceNumber}from'utils/formatBalance';import easterPrizes from'config/constants/trading-competition/easter';import BigNumber from'bignumber.js';export const localiseTradingVolume=function(value){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return value.toLocaleString('en-US',{maximumFractionDigits:decimals});};export const useCompetitionCakeRewards=userCakeReward=>{const cakeAsBigNumber=new BigNumber(userCakeReward);const cakeBalance=getBalanceNumber(cakeAsBigNumber);const cakePriceBusd=usePriceCakeBusd();return{cakeReward:cakeBalance,dollarValueOfCakeReward:cakePriceBusd.gt(0)?cakeBalance*cakePriceBusd.toNumber():null};};// 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\nexport const getRewardGroupAchievements=function(userRewardGroup){let teamRank=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const userGroup=easterPrizes[teamRank].filter(prizeGroup=>{return prizeGroup.group===userRewardGroup;})[0];const userAchievements=userGroup&&userGroup.achievements;return userAchievements;};export default localiseTradingVolume;","map":{"version":3,"names":["usePriceCakeBusd","getBalanceNumber","easterPrizes","BigNumber","localiseTradingVolume","value","decimals","arguments","length","undefined","toLocaleString","maximumFractionDigits","useCompetitionCakeRewards","userCakeReward","cakeAsBigNumber","cakeBalance","cakePriceBusd","cakeReward","dollarValueOfCakeReward","gt","toNumber","getRewardGroupAchievements","userRewardGroup","teamRank","userGroup","filter","prizeGroup","group","userAchievements","achievements"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/helpers.ts"],"sourcesContent":["import { ReactText } from 'react'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport easterPrizes from 'config/constants/trading-competition/easter'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const localiseTradingVolume = (value: number, decimals = 0) => {\r\n  return value.toLocaleString('en-US', { maximumFractionDigits: decimals })\r\n}\r\n\r\nexport const useCompetitionCakeRewards = (userCakeReward: ReactText) => {\r\n  const cakeAsBigNumber = new BigNumber(userCakeReward as string)\r\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  return {\r\n    cakeReward: cakeBalance,\r\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null,\r\n  }\r\n}\r\n\r\n// 1 is a reasonable teamRank default: accessing the first team in the config.\r\n// We use the smart contract userPointReward to get a users' points\r\n// Achievement keys are consistent across different teams regardless of team team rank\r\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\r\nexport const getRewardGroupAchievements = (userRewardGroup: string, teamRank = 1) => {\r\n  const userGroup = easterPrizes[teamRank].filter((prizeGroup) => {\r\n    return prizeGroup.group === userRewardGroup\r\n  })[0]\r\n  const userAchievements = userGroup && userGroup.achievements\r\n  return userAchievements\r\n}\r\n\r\nexport default localiseTradingVolume\r\n"],"mappings":"AACA,OAASA,gBAAgB,KAAQ,mBAAmB,CACpD,OAASC,gBAAgB,KAAQ,qBAAqB,CACtD,MAAO,CAAAC,YAAY,KAAM,6CAA6C,CACtE,MAAO,CAAAC,SAAS,KAAM,cAAc,CAEpC,MAAO,MAAM,CAAAC,qBAAqB,CAAG,QAAAA,CAACC,KAAa,CAAmB,IAAjB,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC/D,MAAO,CAAAF,KAAK,CAACK,cAAc,CAAC,OAAO,CAAE,CAAEC,qBAAqB,CAAEL,QAAS,CAAC,CAAC,CAC3E,CAAC,CAED,MAAO,MAAM,CAAAM,yBAAyB,CAAIC,cAAyB,EAAK,CACtE,KAAM,CAAAC,eAAe,CAAG,GAAI,CAAAX,SAAS,CAACU,cAAwB,CAAC,CAC/D,KAAM,CAAAE,WAAW,CAAGd,gBAAgB,CAACa,eAAe,CAAC,CACrD,KAAM,CAAAE,aAAa,CAAGhB,gBAAgB,CAAC,CAAC,CACxC,MAAO,CACLiB,UAAU,CAAEF,WAAW,CACvBG,uBAAuB,CAAEF,aAAa,CAACG,EAAE,CAAC,CAAC,CAAC,CAAGJ,WAAW,CAAGC,aAAa,CAACI,QAAQ,CAAC,CAAC,CAAG,IAC1F,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,MAAO,MAAM,CAAAC,0BAA0B,CAAG,QAAAA,CAACC,eAAuB,CAAmB,IAAjB,CAAAC,QAAQ,CAAAhB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC9E,KAAM,CAAAiB,SAAS,CAAGtB,YAAY,CAACqB,QAAQ,CAAC,CAACE,MAAM,CAAEC,UAAU,EAAK,CAC9D,MAAO,CAAAA,UAAU,CAACC,KAAK,GAAKL,eAAe,CAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CACL,KAAM,CAAAM,gBAAgB,CAAGJ,SAAS,EAAIA,SAAS,CAACK,YAAY,CAC5D,MAAO,CAAAD,gBAAgB,CACzB,CAAC,CAED,cAAe,CAAAxB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}