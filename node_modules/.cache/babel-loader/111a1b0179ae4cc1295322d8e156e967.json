{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\ReclaimPositionButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReclaimPositionButton = ({\n  epoch,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  _s();\n  const [isPendingTx, setIsPendingTx] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const predictionsContract = usePredictionsContract();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const handleReclaim = async () => {\n    const tx = await predictionsContract.claim(epoch);\n    setIsPendingTx(true);\n    const receipt = await tx.wait();\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess();\n      }\n      setIsPendingTx(false);\n      toastSuccess(t('Position reclaimed!'));\n    } else {\n      setIsPendingTx(false);\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleReclaim,\n    isLoading: isPendingTx,\n    endIcon: isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n      spin: true,\n      color: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 30\n    }, this) : null,\n    ...props,\n    children: children || t('Reclaim Position')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ReclaimPositionButton, \"OKqmlAkkemWDycLyrw8q12USEMs=\", false, function () {\n  return [useTranslation, usePredictionsContract, useToast];\n});\n_c = ReclaimPositionButton;\nexport default ReclaimPositionButton;\nvar _c;\n$RefreshReg$(_c, \"ReclaimPositionButton\");","map":{"version":3,"names":["React","useState","AutoRenewIcon","Button","useTranslation","usePredictionsContract","useToast","jsxDEV","_jsxDEV","ReclaimPositionButton","epoch","onSuccess","children","props","_s","isPendingTx","setIsPendingTx","t","predictionsContract","toastSuccess","toastError","handleReclaim","tx","claim","receipt","wait","status","onClick","isLoading","endIcon","spin","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Predictions/components/ReclaimPositionButton.tsx"],"sourcesContent":["import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await predictionsContract.claim(epoch)\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'))\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,MAAM,QAAqB,oBAAoB;AACvE,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,sBAAsB,QAAQ,mBAAmB;AAC1D,OAAOC,QAAQ,MAAM,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQrC,MAAMC,qBAA2D,GAAGA,CAAC;EAAEC,KAAK;EAAEC,SAAS;EAAEC,QAAQ;EAAE,GAAGC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChH,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IAAEgB;EAAE,CAAC,GAAGb,cAAc,CAAC,CAAC;EAC9B,MAAMc,mBAAmB,GAAGb,sBAAsB,CAAC,CAAC;EACpD,MAAM;IAAEc,YAAY;IAAEC;EAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC;EAE/C,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,EAAE,GAAG,MAAMJ,mBAAmB,CAACK,KAAK,CAACb,KAAK,CAAC;IACjDM,cAAc,CAAC,IAAI,CAAC;IAEpB,MAAMQ,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAI,CAAC,CAAC;IAC/B,IAAID,OAAO,CAACE,MAAM,EAAE;MAClB,IAAIf,SAAS,EAAE;QACb,MAAMA,SAAS,CAAC,CAAC;MACnB;MACAK,cAAc,CAAC,KAAK,CAAC;MACrBG,YAAY,CAACF,CAAC,CAAC,qBAAqB,CAAC,CAAC;IACxC,CAAC,MAAM;MACLD,cAAc,CAAC,KAAK,CAAC;MACrBI,UAAU,CAACH,CAAC,CAAC,OAAO,CAAC,EAAEA,CAAC,CAAC,oFAAoF,CAAC,CAAC;IACjH;EACF,CAAC;EAED,oBACET,OAAA,CAACL,MAAM;IACLwB,OAAO,EAAEN,aAAc;IACvBO,SAAS,EAAEb,WAAY;IACvBc,OAAO,EAAEd,WAAW,gBAAGP,OAAA,CAACN,aAAa;MAAC4B,IAAI;MAACC,KAAK,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAG,IAAK;IAAA,GAC/DtB,KAAK;IAAAD,QAAA,EAERA,QAAQ,IAAIK,CAAC,CAAC,kBAAkB;EAAC;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEb,CAAC;AAAArB,EAAA,CAjCKL,qBAA2D;EAAA,QAEjDL,cAAc,EACAC,sBAAsB,EACbC,QAAQ;AAAA;AAAA8B,EAAA,GAJzC3B,qBAA2D;AAmCjE,eAAeA,qBAAqB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}