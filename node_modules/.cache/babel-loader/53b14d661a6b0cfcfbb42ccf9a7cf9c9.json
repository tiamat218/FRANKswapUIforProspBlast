{"ast":null,"code":"import{useState,useEffect}from'react';/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */const useDelayedUnmount=(isMounted,delayTime)=>{const[shouldRender,setShouldRender]=useState(false);useEffect(()=>{let timeoutId;if(isMounted&&!shouldRender){setShouldRender(true);}else if(!isMounted&&shouldRender){timeoutId=setTimeout(()=>setShouldRender(false),delayTime);}return()=>clearTimeout(timeoutId);},[isMounted,delayTime,shouldRender]);return shouldRender;};export default useDelayedUnmount;","map":{"version":3,"names":["useState","useEffect","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useDelayedUnmount.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,SAAkB,CAAEC,SAAiB,GAAK,CACnE,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CAEvDC,SAAS,CAAC,IAAM,CACd,GAAI,CAAAM,SAAwC,CAC5C,GAAIJ,SAAS,EAAI,CAACE,YAAY,CAAE,CAC9BC,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,IAAI,CAACH,SAAS,EAAIE,YAAY,CAAE,CACrCE,SAAS,CAAGC,UAAU,CAAC,IAAMF,eAAe,CAAC,KAAK,CAAC,CAAEF,SAAS,CAAC,CACjE,CACA,MAAO,IAAMK,YAAY,CAACF,SAAS,CAAC,CACtC,CAAC,CAAE,CAACJ,SAAS,CAAEC,SAAS,CAAEC,YAAY,CAAC,CAAC,CACxC,MAAO,CAAAA,YAAY,CACrB,CAAC,CAED,cAAe,CAAAH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}