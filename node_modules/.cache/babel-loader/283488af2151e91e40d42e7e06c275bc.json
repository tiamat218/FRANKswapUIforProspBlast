{"ast":null,"code":"import BigNumber from'bignumber.js';import poolsConfig from'config/constants/pools';import sousChefABI from'config/abi/sousChef.json';import cakeABI from'config/abi/cake.json';import wbnbABI from'config/abi/weth.json';import multicall from'utils/multicall';import{getAddress,getWbnbAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';import{getSouschefV2Contract}from'utils/contractHelpers';export const fetchPoolsBlockLimits=async()=>{const poolsWithEnd=poolsConfig.filter(p=>p.sousId!==0);const callsStartBlock=poolsWithEnd.map(poolConfig=>{return{address:getAddress(poolConfig.contractAddress),name:'startBlock'};});const callsEndBlock=poolsWithEnd.map(poolConfig=>{return{address:getAddress(poolConfig.contractAddress),name:'bonusEndBlock'};});const starts=await multicall(sousChefABI,callsStartBlock);const ends=await multicall(sousChefABI,callsEndBlock);return poolsWithEnd.map((cakePoolConfig,index)=>{const startBlock=starts[index];const endBlock=ends[index];return{sousId:cakePoolConfig.sousId,startBlock:new BigNumber(startBlock).toJSON(),endBlock:new BigNumber(endBlock).toJSON()};});};export const fetchPoolsTotalStaking=async()=>{const nonBnbPools=poolsConfig.filter(p=>p.stakingToken.symbol!=='BNB');const bnbPool=poolsConfig.filter(p=>p.stakingToken.symbol==='BNB');const callsNonBnbPools=nonBnbPools.map(poolConfig=>{return{address:getAddress(poolConfig.stakingToken.address),name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});const callsBnbPools=bnbPool.map(poolConfig=>{return{address:getWbnbAddress(),name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});const nonBnbPoolsTotalStaked=await multicall(cakeABI,callsNonBnbPools);const bnbPoolsTotalStaked=await multicall(wbnbABI,callsBnbPools);return[...nonBnbPools.map((p,index)=>({sousId:p.sousId,totalStaked:new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()})),...bnbPool.map((p,index)=>({sousId:p.sousId,totalStaked:new BigNumber(bnbPoolsTotalStaked[index]).toJSON()}))];};export const fetchPoolStakingLimit=async sousId=>{try{const sousContract=getSouschefV2Contract(sousId);const stakingLimit=await sousContract.poolLimitPerUser();return new BigNumber(stakingLimit.toString());}catch(error){return BIG_ZERO;}};export const fetchPoolsStakingLimits=async poolsWithStakingLimit=>{const validPools=poolsConfig.filter(p=>p.stakingToken.symbol!=='BNB'&&!p.isFinished).filter(p=>!poolsWithStakingLimit.includes(p.sousId));// Get the staking limit for each valid pool\n// Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\nconst stakingLimitPromises=validPools.map(validPool=>fetchPoolStakingLimit(validPool.sousId));const stakingLimits=await Promise.all(stakingLimitPromises);return stakingLimits.reduce((accum,stakingLimit,index)=>{return{...accum,[validPools[index].sousId]:stakingLimit};},{});};","map":{"version":3,"names":["BigNumber","poolsConfig","sousChefABI","cakeABI","wbnbABI","multicall","getAddress","getWbnbAddress","BIG_ZERO","getSouschefV2Contract","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStaking","nonBnbPools","stakingToken","symbol","bnbPool","callsNonBnbPools","params","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked","fetchPoolStakingLimit","sousContract","stakingLimit","poolLimitPerUser","toString","error","fetchPoolsStakingLimits","poolsWithStakingLimit","validPools","isFinished","includes","stakingLimitPromises","validPool","stakingLimits","Promise","all","reduce","accum"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/pools/fetchPools.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getSouschefV2Contract } from 'utils/contractHelpers'\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStaking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.stakingToken.address),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n\r\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\r\n  try {\r\n    const sousContract = getSouschefV2Contract(sousId)\r\n    const stakingLimit = await sousContract.poolLimitPerUser()\r\n    return new BigNumber(stakingLimit.toString())\r\n  } catch (error) {\r\n    return BIG_ZERO\r\n  }\r\n}\r\n\r\nexport const fetchPoolsStakingLimits = async (\r\n  poolsWithStakingLimit: number[],\r\n): Promise<{ [key: string]: BigNumber }> => {\r\n  const validPools = poolsConfig\r\n    .filter((p) => p.stakingToken.symbol !== 'BNB' && !p.isFinished)\r\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\r\n\r\n  // Get the staking limit for each valid pool\r\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\r\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\r\n  const stakingLimits = await Promise.all(stakingLimitPromises)\r\n\r\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\r\n    return {\r\n      ...accum,\r\n      [validPools[index].sousId]: stakingLimit,\r\n    }\r\n  }, {})\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}