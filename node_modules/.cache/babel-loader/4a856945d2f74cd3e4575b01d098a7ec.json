{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import styled from'styled-components';import{useTranslation}from'contexts/Localization';import{escapeRegExp}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";const StyledInput=styled.input(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  width: 0;\\n  position: relative;\\n  font-weight: 500;\\n  outline: none;\\n  border: none;\\n  flex: 1 1 auto;\\n  background-color: transparent;\\n  font-size: 16px;\\n  text-align: \",\";\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  padding: 0px;\\n  -webkit-appearance: textfield;\\n\\n  ::-webkit-search-decoration {\\n    -webkit-appearance: none;\\n  }\\n\\n  [type='number'] {\\n    -moz-appearance: textfield;\\n  }\\n\\n  ::-webkit-outer-spin-button,\\n  ::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n  }\\n\\n  ::placeholder {\\n    color: \",\";\\n  }\\n\"])),_ref=>{let{error,theme}=_ref;return error?theme.colors.failure:theme.colors.text;},_ref2=>{let{align}=_ref2;return align&&align;},_ref3=>{let{theme}=_ref3;return theme.colors.textSubtle;});const inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport const Input=/*#__PURE__*/React.memo(function InnerInput(_ref4){let{value,onUserInput,placeholder,...rest}=_ref4;const enforcer=nextUserInput=>{if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};const{t}=useTranslation();return/*#__PURE__*/_jsx(StyledInput,{...rest,value:value,onChange:event=>{// replace commas with periods, because we exclusively uses period as the decimal separator\nenforcer(event.target.value.replace(/,/g,'.'));}// universal input options\n,inputMode:\"decimal\",title:t('Token Amount'),autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0.0',minLength:1,maxLength:79,spellCheck:\"false\"});});export default Input;","map":{"version":3,"names":["React","styled","useTranslation","escapeRegExp","jsx","_jsx","StyledInput","input","_templateObject","_taggedTemplateLiteral","_ref","error","theme","colors","failure","text","_ref2","align","_ref3","textSubtle","inputRegex","RegExp","Input","memo","InnerInput","_ref4","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","t","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/components/CurrencyInputPanel/NumericalInput.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={(event) => {\r\n        // replace commas with periods, because we exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title={t('Token Amount')}\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n"],"mappings":"2MAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,YAAY,KAAQ,aAAa,QAAAC,GAAA,IAAAC,IAAA,yBAE1C,KAAM,CAAAC,WAAW,CAAGL,MAAM,CAACM,KAAK,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,omBACrBC,IAAA,MAAC,CAAEC,KAAK,CAAEC,KAAM,CAAC,CAAAF,IAAA,OAAM,CAAAC,KAAK,CAAGC,KAAK,CAACC,MAAM,CAACC,OAAO,CAAGF,KAAK,CAACC,MAAM,CAACE,IAAI,EAAC,CASnEC,KAAA,MAAC,CAAEC,KAAM,CAAC,CAAAD,KAAA,OAAK,CAAAC,KAAK,EAAIA,KAAK,GAqBhCC,KAAA,MAAC,CAAEN,KAAM,CAAC,CAAAM,KAAA,OAAK,CAAAN,KAAK,CAACC,MAAM,CAACM,UAAU,GAElD,CAED,KAAM,CAAAC,UAAU,CAAGC,MAAM,yBAAyB,CAAC,CAAC;AAEpD,MAAO,MAAM,CAAAC,KAAK,cAAGtB,KAAK,CAACuB,IAAI,CAAC,QAAS,CAAAC,UAAUA,CAAAC,KAAA,CAWqB,IAXpB,CAClDC,KAAK,CACLC,WAAW,CACXC,WAAW,CACX,GAAGC,IAOgE,CAAC,CAAAJ,KAAA,CACpE,KAAM,CAAAK,QAAQ,CAAIC,aAAqB,EAAK,CAC1C,GAAIA,aAAa,GAAK,EAAE,EAAIX,UAAU,CAACY,IAAI,CAAC7B,YAAY,CAAC4B,aAAa,CAAC,CAAC,CAAE,CACxEJ,WAAW,CAACI,aAAa,CAAC,CAC5B,CACF,CAAC,CAED,KAAM,CAAEE,CAAE,CAAC,CAAG/B,cAAc,CAAC,CAAC,CAE9B,mBACEG,IAAA,CAACC,WAAW,KACNuB,IAAI,CACRH,KAAK,CAAEA,KAAM,CACbQ,QAAQ,CAAGC,KAAK,EAAK,CACnB;AACAL,QAAQ,CAACK,KAAK,CAACC,MAAM,CAACV,KAAK,CAACW,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAAC,CACjD,CACA;AAAA,CACAC,SAAS,CAAC,SAAS,CACnBC,KAAK,CAAEN,CAAC,CAAC,cAAc,CAAE,CACzBO,YAAY,CAAC,KAAK,CAClBC,WAAW,CAAC,KACZ;AAAA,CACAC,IAAI,CAAC,MAAM,CACXC,OAAO,CAAC,qBAAqB,CAC7Bf,WAAW,CAAEA,WAAW,EAAI,KAAM,CAClCgB,SAAS,CAAE,CAAE,CACbC,SAAS,CAAE,EAAG,CACdC,UAAU,CAAC,OAAO,CACnB,CAAC,CAEN,CAAC,CAAC,CAEF,cAAe,CAAAxB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}