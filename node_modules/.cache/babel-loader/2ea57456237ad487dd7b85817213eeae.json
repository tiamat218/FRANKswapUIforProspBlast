{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Profile\\\\components\\\\EditProfileModal\\\\ChangeProfilePicView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { useGetCollectibles } from 'state/hooks';\nimport { useProfile } from 'state/profile/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { fetchProfile } from 'state/profile';\nimport { getAddressByType } from 'utils/collectibles';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { getErc721Contract } from 'utils/contractHelpers';\nimport { useProfile as useProfileContract } from 'hooks/useContract';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport SelectionCard from '../SelectionCard';\nimport ApproveConfirmButtons from '../ApproveConfirmButtons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChangeProfilePicPage = ({\n  onDismiss\n}) => {\n  _s();\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    isLoading,\n    tokenIds,\n    nftsInWallet\n  } = useGetCollectibles();\n  const dispatch = useAppDispatch();\n  const {\n    profile\n  } = useProfile();\n  const profileContract = useProfileContract();\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      const contract = getErc721Contract(selectedNft.nftAddress, library.getSigner());\n      return contract.approve(getPancakeProfileAddress(), selectedNft.tokenId);\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId);\n      }\n      return profileContract.updateProfile(selectedNft.nftAddress, selectedNft.tokenId);\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account));\n      toastSuccess(t('Profile Updated!'));\n      onDismiss();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      color: \"textSubtle\",\n      mb: \"24px\",\n      children: t('Choose a new Collectible to use as your profile pic.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: \"80px\",\n      mb: \"16px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : nftsInWallet.map(walletNft => {\n      const [firstTokenId] = tokenIds[walletNft.identifier];\n      const handleChange = value => {\n        setSelectedNft({\n          tokenId: Number(value),\n          nftAddress: getAddressByType(walletNft.type)\n        });\n      };\n      return /*#__PURE__*/_jsxDEV(SelectionCard, {\n        name: \"profilePicture\",\n        value: firstTokenId,\n        image: `/images/nfts/${walletNft.images.md}`,\n        isChecked: firstTokenId === selectedNft.tokenId,\n        onChange: handleChange,\n        disabled: isApproving || isConfirming || isConfirmed,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: walletNft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, walletNft.identifier, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this);\n    }), !isLoading && nftsInWallet.length === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"16px\",\n        children: t('Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"24px\",\n        children: t('Make sure you have a Pancake Collectible in your wallet and try again!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n      isApproveDisabled: isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null,\n      isApproving: isApproving,\n      isConfirmDisabled: !isApproved || isConfirmed || selectedNft.tokenId === null,\n      isConfirming: isConfirming,\n      onApprove: handleApprove,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"text\",\n      width: \"100%\",\n      onClick: onDismiss,\n      disabled: isApproving || isConfirming,\n      children: t('Close Window')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ChangeProfilePicPage, \"JuEcp6rCV6Ga3EkPIIQcor8cPDE=\", false, function () {\n  return [useTranslation, useGetCollectibles, useAppDispatch, useProfile, useProfileContract, useWeb3React, useToast, useApproveConfirmTransaction];\n});\n_c = ChangeProfilePicPage;\nexport default ChangeProfilePicPage;\nvar _c;\n$RefreshReg$(_c, \"ChangeProfilePicPage\");","map":{"version":3,"names":["React","useState","Button","Skeleton","Text","useWeb3React","useAppDispatch","useGetCollectibles","useProfile","useTranslation","useToast","fetchProfile","getAddressByType","useApproveConfirmTransaction","getErc721Contract","useProfileContract","getPancakeProfileAddress","SelectionCard","ApproveConfirmButtons","jsxDEV","_jsxDEV","Fragment","_Fragment","ChangeProfilePicPage","onDismiss","_s","selectedNft","setSelectedNft","tokenId","nftAddress","t","isLoading","tokenIds","nftsInWallet","dispatch","profile","profileContract","account","library","toastSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onApprove","contract","getSigner","approve","onConfirm","isActive","reactivateProfile","updateProfile","onSuccess","children","as","color","mb","fileName","_jsxFileName","lineNumber","columnNumber","height","map","walletNft","firstTokenId","identifier","handleChange","value","Number","type","name","image","images","md","isChecked","onChange","disabled","bold","length","isApproveDisabled","isConfirmDisabled","variant","width","onClick","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollectibles } from 'state/hooks'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport { getAddressByType } from 'utils/collectibles'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport SelectionCard from '../SelectionCard'\r\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    nftAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.nftAddress, library.getSigner())\r\n        return contract.approve(getPancakeProfileAddress(), selectedNft.tokenId)\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return profileContract.reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\r\n        }\r\n\r\n        return profileContract.updateProfile(selectedNft.nftAddress, selectedNft.tokenId)\r\n      },\r\n      onSuccess: async () => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'))\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      {isLoading ? (\r\n        <Skeleton height=\"80px\" mb=\"16px\" />\r\n      ) : (\r\n        nftsInWallet.map((walletNft) => {\r\n          const [firstTokenId] = tokenIds[walletNft.identifier]\r\n          const handleChange = (value: string) => {\r\n            setSelectedNft({\r\n              tokenId: Number(value),\r\n              nftAddress: getAddressByType(walletNft.type),\r\n            })\r\n          }\r\n\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={walletNft.identifier}\r\n              value={firstTokenId}\r\n              image={`/images/nfts/${walletNft.images.md}`}\r\n              isChecked={firstTokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })\r\n      )}\r\n      {!isLoading && nftsInWallet.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}