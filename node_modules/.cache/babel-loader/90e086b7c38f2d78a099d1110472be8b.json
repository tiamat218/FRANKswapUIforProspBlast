{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\components\\\\CurrencyInputPanel\\\\NumericalInput.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { escapeRegExp } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInput = styled.input`\n  color: ${({\n  error,\n  theme\n}) => error ? theme.colors.failure : theme.colors.text};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({\n  align\n}) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({\n  theme\n}) => theme.colors.textSubtle};\n  }\n`;\n_c = StyledInput;\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c2 = _s(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}) {\n  _s();\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(StyledInput, {\n    ...rest,\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because we exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    }\n    // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: t('Token Amount'),\n    autoComplete: \"off\",\n    autoCorrect: \"off\"\n    // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n}));\n_c3 = Input;\nexport default Input;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledInput\");\n$RefreshReg$(_c2, \"Input$React.memo\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"names":["React","styled","useTranslation","escapeRegExp","jsxDEV","_jsxDEV","StyledInput","input","error","theme","colors","failure","text","align","textSubtle","_c","inputRegex","RegExp","Input","memo","_c2","_s","InnerInput","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","t","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/components/CurrencyInputPanel/NumericalInput.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={(event) => {\r\n        // replace commas with periods, because we exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title={t('Token Amount')}\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,YAAY,QAAQ,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGL,MAAM,CAACM,KAA6D;AACxF,WAAW,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAMD,KAAK,GAAGC,KAAK,CAACC,MAAM,CAACC,OAAO,GAAGF,KAAK,CAACC,MAAM,CAACE,IAAK;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC;EAAEC;AAAM,CAAC,KAAKA,KAAK,IAAIA,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;EAAEJ;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACI,UAAU;AACnD;AACA,CAAC;AAAAC,EAAA,GAjCKT,WAAW;AAmCjB,MAAMU,UAAU,GAAGC,MAAM,CAAC,wBAAwB,CAAC,EAAC;;AAEpD,OAAO,MAAMC,KAAK,gBAAGlB,KAAK,CAACmB,IAAI,CAAAC,GAAA,GAAAC,EAAA,CAAC,SAASC,UAAUA,CAAC;EAClDC,KAAK;EACLC,WAAW;EACXC,WAAW;EACX,GAAGC;AAOgE,CAAC,EAAE;EAAAL,EAAA;EACtE,MAAMM,QAAQ,GAAIC,aAAqB,IAAK;IAC1C,IAAIA,aAAa,KAAK,EAAE,IAAIZ,UAAU,CAACa,IAAI,CAAC1B,YAAY,CAACyB,aAAa,CAAC,CAAC,EAAE;MACxEJ,WAAW,CAACI,aAAa,CAAC;IAC5B;EACF,CAAC;EAED,MAAM;IAAEE;EAAE,CAAC,GAAG5B,cAAc,CAAC,CAAC;EAE9B,oBACEG,OAAA,CAACC,WAAW;IAAA,GACNoB,IAAI;IACRH,KAAK,EAAEA,KAAM;IACbQ,QAAQ,EAAGC,KAAK,IAAK;MACnB;MACAL,QAAQ,CAACK,KAAK,CAACC,MAAM,CAACV,KAAK,CAACW,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACjD;IACA;IAAA;IACAC,SAAS,EAAC,SAAS;IACnBC,KAAK,EAAEN,CAAC,CAAC,cAAc,CAAE;IACzBO,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC;IACZ;IAAA;IACAC,IAAI,EAAC,MAAM;IACXC,OAAO,EAAC,qBAAqB;IAC7Bf,WAAW,EAAEA,WAAW,IAAI,KAAM;IAClCgB,SAAS,EAAE,CAAE;IACbC,SAAS,EAAE,EAAG;IACdC,UAAU,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEN,CAAC;EAAA,QAxBe7C,cAAc;AAAA,EAwB7B,CAAC;AAAA8C,GAAA,GA1CW9B,KAAK;AA4ClB,eAAeA,KAAK;AAAA,IAAAH,EAAA,EAAAK,GAAA,EAAA4B,GAAA;AAAAC,YAAA,CAAAlC,EAAA;AAAAkC,YAAA,CAAA7B,GAAA;AAAA6B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}