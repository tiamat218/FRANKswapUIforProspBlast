{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stakeFarm } from 'utils/calls';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst useStakePool = (sousId, isUsingBnb = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleStake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      await stakeFarm(masterChefContract, 0, amount);\n    } else if (isUsingBnb) {\n      await sousStakeBnb(sousChefContract, amount);\n    } else {\n      await sousStake(sousChefContract, amount, decimals);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStakePool, \"vpe8vSSPvb8ajwzF6csd4rEGZXU=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useStakePool;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useStakePool.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserStakedBalance","updateUserBalance","stakeFarm","BigNumber","DEFAULT_TOKEN_DECIMAL","DEFAULT_GAS_LIMIT","BIG_TEN","useMasterchef","useSousChef","options","gasLimit","sousStake","sousChefContract","amount","decimals","tx","deposit","times","pow","toString","receipt","wait","status","sousStakeBnb","useStakePool","sousId","isUsingBnb","dispatch","account","masterChefContract","handleStake","onStake"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,QAA2D,eAA3D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,QAAzD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAEL;AADI,CAAhB;;AAIA,MAAMM,SAAS,GAAG,OAAOC,gBAAP,EAAyBC,MAAzB,EAAiCC,QAAQ,GAAG,EAA5C,KAAmD;AACnE,QAAMC,EAAE,GAAG,MAAMH,gBAAgB,CAACI,OAAjB,CAAyB,IAAIb,SAAJ,CAAcU,MAAd,EAAsBI,KAAtB,CAA4BX,OAAO,CAACY,GAAR,CAAYJ,QAAZ,CAA5B,EAAmDK,QAAnD,EAAzB,EAAwFV,OAAxF,CAAjB;AACA,QAAMW,OAAO,GAAG,MAAML,EAAE,CAACM,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAJD;;AAMA,MAAMC,YAAY,GAAG,OAAOX,gBAAP,EAAyBC,MAAzB,KAAoC;AACvD,QAAME,EAAE,GAAG,MAAMH,gBAAgB,CAACI,OAAjB,CAAyB,IAAIb,SAAJ,CAAcU,MAAd,EAAsBI,KAAtB,CAA4Bb,qBAA5B,EAAmDe,QAAnD,EAAzB,EAAwFV,OAAxF,CAAjB;AACA,QAAMW,OAAO,GAAG,MAAML,EAAE,CAACM,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAJD;;AAMA,MAAME,YAAY,GAAG,CAACC,MAAD,EAAiBC,UAAU,GAAG,KAA9B,KAAwC;AAAA;;AAC3D,QAAMC,QAAQ,GAAG5B,cAAc,EAA/B;AACA,QAAM;AAAE6B,IAAAA;AAAF,MAAc9B,YAAY,EAAhC;AACA,QAAM+B,kBAAkB,GAAGtB,aAAa,EAAxC;AACA,QAAMK,gBAAgB,GAAGJ,WAAW,CAACiB,MAAD,CAApC;AAEA,QAAMK,WAAW,GAAGjC,WAAW,CAC7B,OAAOgB,MAAP,EAAuBC,QAAvB,KAA4C;AAC1C,QAAIW,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMvB,SAAS,CAAC2B,kBAAD,EAAqB,CAArB,EAAwBhB,MAAxB,CAAf;AACD,KAFD,MAEO,IAAIa,UAAJ,EAAgB;AACrB,YAAMH,YAAY,CAACX,gBAAD,EAAmBC,MAAnB,CAAlB;AACD,KAFM,MAEA;AACL,YAAMF,SAAS,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAf;AACD;;AACDa,IAAAA,QAAQ,CAAC3B,uBAAuB,CAACyB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAAC1B,iBAAiB,CAACwB,MAAD,EAASG,OAAT,CAAlB,CAAR;AACD,GAX4B,EAY7B,CAACA,OAAD,EAAUD,QAAV,EAAoBD,UAApB,EAAgCG,kBAAhC,EAAoDjB,gBAApD,EAAsEa,MAAtE,CAZ6B,CAA/B;AAeA,SAAO;AAAEM,IAAAA,OAAO,EAAED;AAAX,GAAP;AACD,CAtBD;;GAAMN,Y;UACazB,c,EACGD,Y,EACOS,a,EACFC,W;;;AAoB3B,eAAegB,YAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport BigNumber from 'bignumber.js'\r\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousStakeBnb = async (sousChefContract, amount) => {\r\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await stakeFarm(masterChefContract, 0, amount)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakePool\r\n"]},"metadata":{},"sourceType":"module"}