{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\HarvestAction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Heading } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport useToast from 'hooks/useToast';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useWeb3React } from '@web3-react/core';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport Balance from 'components/Balance';\nimport useHarvestFarm from '../../hooks/useHarvestFarm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HarvestAction = ({\n  earnings,\n  pid\n}) => {\n  _s();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvestFarm(pid);\n  const cakePrice = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO;\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN);\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0;\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    mb: \"8px\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: rawEarningsBalance.eq(0) ? 'textDisabled' : 'text',\n        children: displayBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), earningsBusd > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        decimals: 2,\n        value: earningsBusd,\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: rawEarningsBalance.eq(0) || pendingTx,\n      onClick: async () => {\n        setPendingTx(true);\n        try {\n          await onReward();\n          toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n            symbol: 'CAKE'\n          }));\n        } catch (e) {\n          toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n          console.error(e);\n        } finally {\n          setPendingTx(false);\n        }\n        dispatch(fetchFarmUserDataAsync({\n          account,\n          pids: [pid]\n        }));\n      },\n      children: t('Harvest')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(HarvestAction, \"aZ3F33wlxMiEzk6f6IwMl+DlLrE=\", false, function () {\n  return [useWeb3React, useToast, useTranslation, useHarvestFarm, usePriceCakeBusd, useAppDispatch];\n});\n_c = HarvestAction;\nexport default HarvestAction;\nvar _c;\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"names":["React","useState","BigNumber","Button","Flex","Heading","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useToast","getBalanceAmount","BIG_ZERO","useWeb3React","usePriceCakeBusd","Balance","useHarvestFarm","jsxDEV","_jsxDEV","HarvestAction","earnings","pid","_s","account","toastSuccess","toastError","t","pendingTx","setPendingTx","onReward","cakePrice","dispatch","rawEarningsBalance","displayBalance","toFixed","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","mb","justifyContent","alignItems","children","flexDirection","color","eq","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","decimals","value","unit","prefix","disabled","onClick","symbol","e","console","error","pids","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,MAAM,EAAEC,IAAI,EAAEC,OAAO,QAAQ,oBAAoB;AAC1D,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,sBAAsB,QAAQ,aAAa;AACpD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,cAAc,MAAM,4BAA4B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOvD,MAAMC,aAA6C,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM;IAAEC;EAAQ,CAAC,GAAGV,YAAY,CAAC,CAAC;EAClC,MAAM;IAAEW,YAAY;IAAEC;EAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC;EAC/C,MAAM;IAAEgB;EAAE,CAAC,GAAGnB,cAAc,CAAC,CAAC;EAC9B,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAE2B;EAAS,CAAC,GAAGb,cAAc,CAACK,GAAG,CAAC;EACxC,MAAMS,SAAS,GAAGhB,gBAAgB,CAAC,CAAC;EACpC,MAAMiB,QAAQ,GAAGvB,cAAc,CAAC,CAAC;EACjC,MAAMwB,kBAAkB,GAAGT,OAAO,GAAGZ,gBAAgB,CAACS,QAAQ,CAAC,GAAGR,QAAQ;EAC1E,MAAMqB,cAAc,GAAGD,kBAAkB,CAACE,OAAO,CAAC,CAAC,EAAE/B,SAAS,CAACgC,UAAU,CAAC;EAC1E,MAAMC,YAAY,GAAGJ,kBAAkB,GAAGA,kBAAkB,CAACK,YAAY,CAACP,SAAS,CAAC,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC;EAEnG,oBACEpB,OAAA,CAACb,IAAI;IAACkC,EAAE,EAAC,KAAK;IAACC,cAAc,EAAC,eAAe;IAACC,UAAU,EAAC,QAAQ;IAAAC,QAAA,gBAC/DxB,OAAA,CAACb,IAAI;MAACsC,aAAa,EAAC,QAAQ;MAACF,UAAU,EAAC,YAAY;MAAAC,QAAA,gBAClDxB,OAAA,CAACZ,OAAO;QAACsC,KAAK,EAAEZ,kBAAkB,CAACa,EAAE,CAAC,CAAC,CAAC,GAAG,cAAc,GAAG,MAAO;QAAAH,QAAA,EAAET;MAAc;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CAAC,EAC7Fb,YAAY,GAAG,CAAC,iBACflB,OAAA,CAACH,OAAO;QAACmC,QAAQ,EAAC,MAAM;QAACN,KAAK,EAAC,YAAY;QAACO,QAAQ,EAAE,CAAE;QAACC,KAAK,EAAEhB,YAAa;QAACiB,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC;MAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACvG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACP/B,OAAA,CAACd,MAAM;MACLmD,QAAQ,EAAEvB,kBAAkB,CAACa,EAAE,CAAC,CAAC,CAAC,IAAIlB,SAAU;MAChD6B,OAAO,EAAE,MAAAA,CAAA,KAAY;QACnB5B,YAAY,CAAC,IAAI,CAAC;QAClB,IAAI;UACF,MAAMC,QAAQ,CAAC,CAAC;UAChBL,YAAY,CACV,GAAGE,CAAC,CAAC,WAAW,CAAC,GAAG,EACpBA,CAAC,CAAC,uDAAuD,EAAE;YAAE+B,MAAM,EAAE;UAAO,CAAC,CAC/E,CAAC;QACH,CAAC,CAAC,OAAOC,CAAC,EAAE;UACVjC,UAAU,CACRC,CAAC,CAAC,OAAO,CAAC,EACVA,CAAC,CAAC,oFAAoF,CACxF,CAAC;UACDiC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;QAClB,CAAC,SAAS;UACR9B,YAAY,CAAC,KAAK,CAAC;QACrB;QACAG,QAAQ,CAACtB,sBAAsB,CAAC;UAAEc,OAAO;UAAEsC,IAAI,EAAE,CAACxC,GAAG;QAAE,CAAC,CAAC,CAAC;MAC5D,CAAE;MAAAqB,QAAA,EAEDhB,CAAC,CAAC,SAAS;IAAC;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAA3B,EAAA,CA9CKH,aAA6C;EAAA,QAC7BN,YAAY,EACKH,QAAQ,EAC/BH,cAAc,EAEPS,cAAc,EACjBF,gBAAgB,EACjBN,cAAc;AAAA;AAAAsD,EAAA,GAP3B3C,aAA6C;AAgDnD,eAAeA,aAAa;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}