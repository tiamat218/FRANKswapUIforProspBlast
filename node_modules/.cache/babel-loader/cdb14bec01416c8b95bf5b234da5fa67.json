{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\RecentCakeProfitRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { getCakeVaultEarnings } from 'views/Pools/helpers';\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecentCakeProfitCountdownRow = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pricePerFullShare,\n    userData: {\n      cakeAtLastUserAction,\n      userShares,\n      lastUserActionTime\n    }\n  } = useCakeVault();\n  const cakePriceBusd = usePriceCakeBusd();\n  const {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  } = getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, cakePriceBusd.toNumber());\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000;\n  const dateTimeLastAction = new Date(lastActionInMs);\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"14px\",\n      children: `${t('Recent CAKE profit')}:`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), hasAutoEarnings && /*#__PURE__*/_jsxDEV(RecentCakeProfitBalance, {\n      cakeToDisplay: autoCakeToDisplay,\n      dollarValueToDisplay: autoUsdToDisplay,\n      dateStringToDisplay: dateStringToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecentCakeProfitCountdownRow, \"0V2ksT8VR/S5AY0qI7MtNem1WqY=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, usePriceCakeBusd];\n});\n\n_c = RecentCakeProfitCountdownRow;\nexport default RecentCakeProfitCountdownRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentCakeProfitCountdownRow\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx"],"names":["React","Flex","Text","useWeb3React","useTranslation","usePriceCakeBusd","useCakeVault","getCakeVaultEarnings","RecentCakeProfitBalance","RecentCakeProfitCountdownRow","t","account","pricePerFullShare","userData","cakeAtLastUserAction","userShares","lastUserActionTime","cakePriceBusd","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","toNumber","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,uBAAP,MAAoC,2BAApC;;;AAEA,MAAMC,4BAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAQN,cAAc,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcR,YAAY,EAAhC;AACA,QAAM;AACJS,IAAAA,iBADI;AAEJC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,oBAAF;AAAwBC,MAAAA,UAAxB;AAAoCC,MAAAA;AAApC;AAFN,MAGFV,YAAY,EAHhB;AAIA,QAAMW,aAAa,GAAGZ,gBAAgB,EAAtC;AACA,QAAM;AAAEa,IAAAA,eAAF;AAAmBC,IAAAA,iBAAnB;AAAsCC,IAAAA;AAAtC,MAA2Db,oBAAoB,CACnFI,OADmF,EAEnFG,oBAFmF,EAGnFC,UAHmF,EAInFH,iBAJmF,EAKnFK,aAAa,CAACI,QAAd,EALmF,CAArF;AAQA,QAAMC,cAAc,GAAGN,kBAAkB,IAAIO,QAAQ,CAACP,kBAAD,CAAR,GAA+B,IAA5E;AACA,QAAMQ,kBAAkB,GAAG,IAAIC,IAAJ,CAASH,cAAT,CAA3B;AACA,QAAMI,mBAAmB,GAAGF,kBAAkB,CAACG,cAAnB,EAA5B;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,cAAc,EAAC,eAAzC;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAC,MAAf;AAAA,gBAAwB,GAAEjB,CAAC,CAAC,oBAAD,CAAuB;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGQ,eAAe,iBACd,QAAC,uBAAD;AACE,MAAA,aAAa,EAAEC,iBADjB;AAEE,MAAA,oBAAoB,EAAEC,gBAFxB;AAGE,MAAA,mBAAmB,EAAEM;AAHvB;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhCD;;GAAMjB,4B;UACUL,c,EACMD,Y,EAIhBG,Y,EACkBD,gB;;;KAPlBI,4B;AAkCN,eAAeA,4BAAf","sourcesContent":["import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useCakeVault()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n"]},"metadata":{},"sourceType":"module"}