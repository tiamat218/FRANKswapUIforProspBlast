{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.';\nexport const usePollFarmsData = (includeArchive = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids\n      }));\n    }\n  }, [includeArchive, dispatch, slowRefresh, account]);\n};\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\n\n_s(usePollFarmsData, \"GA0abdQx+3VL0XheKTRFc99Dfws=\", false, function () {\n  return [useAppDispatch, useRefresh, useWeb3React];\n});\n\nexport const usePollCoreFarmData = () => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([0, 1])); // pool ids for token BNB and token USD pool \n  }, [dispatch, fastRefresh]);\n};\n\n_s2(usePollCoreFarmData, \"ioW+pQi/3pF1VdJGlRLsvLuQtVc=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const useFarms = () => {\n  _s3();\n\n  const farms = useSelector(state => state.farms);\n  return farms;\n};\n\n_s3(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s4();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s4(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s5();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s5(useFarmFromLpSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s6();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n}; // Return the base token price for a farm, from a given pid\n\n_s6(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBusdPriceFromPid = pid => {\n  _s7();\n\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.token.busdPrice);\n};\n\n_s7(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useLpTokenPrice = symbol => {\n  _s8();\n\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal); // Double it to get overall value in LP\n\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2); // Divide total value of all tokens, by the number of LP tokens\n\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n\n  return lpTokenPrice;\n}; // /!\\ Deprecated , use the BUSD hook in /hooks\n\n_s8(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});\n\nexport const usePriceBnbBusd = () => {\n  // const bnbBusdFarm = useFarmFromPid(252)\n  return new BigNumber(500);\n};\nexport const usePriceCakeBusd = () => {\n  // const cakeBnbFarm = useFarmFromPid(251)\n  return new BigNumber(100);\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/hooks.ts"],"names":["useEffect","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","usePriceCakeBusd"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\r\nimport { State, Farm, FarmsState } from '../types'\r\n\r\nexport const usePollFarmsData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([0, 1]))  // pool ids for token BNB and token USD pool \r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// /!\\ Deprecated , use the BUSD hook in /hooks\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n // const bnbBusdFarm = useFarmFromPid(252)\r\n  return new BigNumber(500)\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n // const cakeBnbFarm = useFarmFromPid(251)\r\n  return new BigNumber(100)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}