{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\SuspenseWithChunkError\\\\index.tsx\";\nimport React, { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SuspenseWithChunkError extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error) {\n    var _window$history$state;\n\n    const isJsChunkLoadError = error.name === 'ChunkLoadError';\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED';\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError; // Save a flag on the window object indicating that we have already had a chunk error.\n    // This prevents infinite reloads\n\n    const isRecoveringFromChunkError = !!((_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.isRecoveringFromChunkError); // If was a chunk load error, refresh the page\n\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\n      const nextState = { ...window.history.state,\n        isRecoveringFromChunkError: true\n      };\n      window.history.replaceState(nextState, '');\n      window.location.reload();\n      return;\n    }\n\n    throw error;\n  }\n\n  render() {\n    const {\n      hasError\n    } = this.state;\n    const {\n      fallback\n    } = this.props;\n\n    if (hasError) {\n      return fallback;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Suspense, { ...this.props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default SuspenseWithChunkError;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/SuspenseWithChunkError/index.tsx"],"names":["React","Suspense","SuspenseWithChunkError","Component","constructor","props","state","hasError","getDerivedStateFromError","componentDidCatch","error","isJsChunkLoadError","name","isCssChunkLoadError","code","isChunkLoadError","isRecoveringFromChunkError","window","history","nextState","replaceState","location","reload","render","fallback"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+C,OAA/C;;;AAMA,MAAMC,sBAAN,SAAqCF,KAAK,CAACG,SAA3C,CAA2E;AACzEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACD;;AAE8B,SAAxBC,wBAAwB,GAAG;AAChC;AACA,WAAO;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AAAA;;AACvB,UAAMC,kBAAkB,GAAGD,KAAK,CAACE,IAAN,KAAe,gBAA1C;AACA,UAAMC,mBAAmB,GAAGH,KAAK,CAACI,IAAN,KAAe,uBAA3C;AACA,UAAMC,gBAAgB,GAAGJ,kBAAkB,IAAIE,mBAA/C,CAHuB,CAKvB;AACA;;AACA,UAAMG,0BAA0B,GAAG,CAAC,2BAACC,MAAM,CAACC,OAAP,CAAeZ,KAAhB,0DAAC,sBAAsBU,0BAAvB,CAApC,CAPuB,CASvB;;AACA,QAAID,gBAAgB,IAAI,CAACC,0BAAzB,EAAqD;AACnD,YAAMG,SAAS,GAAG,EAAE,GAAGF,MAAM,CAACC,OAAP,CAAeZ,KAApB;AAA2BU,QAAAA,0BAA0B,EAAE;AAAvD,OAAlB;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeE,YAAf,CAA4BD,SAA5B,EAAuC,EAAvC;AACAF,MAAAA,MAAM,CAACI,QAAP,CAAgBC,MAAhB;AACA;AACD;;AAED,UAAMZ,KAAN;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAe,KAAKnB,KAA1B;;AAEA,QAAIE,QAAJ,EAAc;AACZ,aAAOiB,QAAP;AACD;;AAED,wBAAO,QAAC,QAAD,OAAc,KAAKnB;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAxCwE;;AA2C3E,eAAeH,sBAAf","sourcesContent":["import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n"]},"metadata":{},"sourceType":"module"}