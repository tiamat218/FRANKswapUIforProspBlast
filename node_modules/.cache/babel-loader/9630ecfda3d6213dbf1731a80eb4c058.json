{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.';\nexport const usePollFarmsData = (includeArchive = false) => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids\n      }));\n    }\n  }, [includeArchive, dispatch, slowRefresh, account]);\n};\n\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\n_s(usePollFarmsData, \"GA0abdQx+3VL0XheKTRFc99Dfws=\", false, function () {\n  return [useAppDispatch, useRefresh, useWeb3React];\n});\nexport const usePollCoreFarmData = () => {\n  _s2();\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([0, 3]));\n  }, [dispatch, fastRefresh]);\n};\n_s2(usePollCoreFarmData, \"ioW+pQi/3pF1VdJGlRLsvLuQtVc=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\nexport const useFarms = () => {\n  _s3();\n  const farms = useSelector(state => state.farms);\n  return farms;\n};\n_s3(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\nexport const useFarmFromPid = pid => {\n  _s4();\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n_s4(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s5();\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n_s5(useFarmFromLpSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\nexport const useFarmUser = pid => {\n  _s6();\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n};\n\n// Return the base token price for a farm, from a given pid\n_s6(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\nexport const useBusdPriceFromPid = pid => {\n  _s7();\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.token.busdPrice);\n};\n_s7(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\nexport const useLpTokenPrice = symbol => {\n  _s8();\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal);\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2);\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n  return lpTokenPrice;\n};\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n_s8(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});\nexport const usePriceBnbBusd = () => {\n  // const bnbBusdFarm = useFarmFromPid(252)\n  return new BigNumber(500);\n};\nexport const usePriceCakeBusd = () => {\n  // const cakeBnbFarm = useFarmFromPid(251)\n  return new BigNumber(100);\n};","map":{"version":3,"names":["useEffect","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","_s","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","_s2","fastRefresh","useFarms","_s3","farms","state","useFarmFromPid","_s4","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","_s5","useFarmUser","_s6","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","_s7","token","busdPrice","useLpTokenPrice","symbol","_s8","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","usePriceCakeBusd"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/farms/hooks.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\r\nimport { State, Farm, FarmsState } from '../types'\r\n\r\nexport const usePollFarmsData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([0, 3]))\r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// /!\\ Deprecated , use the BUSD hook in /hooks\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n // const bnbBusdFarm = useFarmFromPid(252)\r\n  return new BigNumber(500)\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n // const cakeBnbFarm = useFarmFromPid(251)\r\n  return new BigNumber(100)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}