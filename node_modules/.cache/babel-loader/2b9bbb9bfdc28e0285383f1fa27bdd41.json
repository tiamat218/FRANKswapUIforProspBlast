{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport { useDispatch } from 'react-redux';\nimport farmsReducer from './farms';\nimport poolsReducer from './pools';\nimport predictionsReducer from './predictions';\nimport profileReducer from './profile';\nimport teamsReducer from './teams';\nimport achievementsReducer from './achievements';\nimport blockReducer from './block';\nimport collectiblesReducer from './collectibles';\nimport votingReducer from './voting';\nimport lotteryReducer from './lottery';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    block: blockReducer,\n    farms: farmsReducer,\n    pools: poolsReducer,\n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    collectibles: collectiblesReducer,\n    voting: votingReducer,\n    lottery: lotteryReducer,\n    // Exchange\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: true\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\n\nexport const useAppDispatch = () => {\n  _s();\n\n  return useDispatch();\n};\n\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\nexport default store;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","useDispatch","farmsReducer","poolsReducer","predictionsReducer","profileReducer","teamsReducer","achievementsReducer","blockReducer","collectiblesReducer","votingReducer","lotteryReducer","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","PERSISTED_KEYS","store","devTools","process","env","NODE_ENV","reducer","achievements","block","farms","pools","predictions","profile","teams","collectibles","voting","lottery","middleware","thunk","states","preloadedState","dispatch","useAppDispatch"],"mappings":";;AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,kBAAP,MAA+B,eAA/B;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,mBAAP,MAAgC,gBAAhC;AACA,OAAOC,YAAP,MAAyB,SAAzB;AACA,OAAOC,mBAAP,MAAgC,gBAAhC;AACA,OAAOC,aAAP,MAA0B,UAA1B;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,EAAyB,OAAzB,CAAjC;AAEA,MAAMC,KAAK,GAAGzB,cAAc,CAAC;AAC3B0B,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YADR;AAE3BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAErB,mBADP;AAEPsB,IAAAA,KAAK,EAAErB,YAFA;AAGPsB,IAAAA,KAAK,EAAE5B,YAHA;AAIP6B,IAAAA,KAAK,EAAE5B,YAJA;AAKP6B,IAAAA,WAAW,EAAE5B,kBALN;AAMP6B,IAAAA,OAAO,EAAE5B,cANF;AAOP6B,IAAAA,KAAK,EAAE5B,YAPA;AAQP6B,IAAAA,YAAY,EAAE1B,mBARP;AASP2B,IAAAA,MAAM,EAAE1B,aATD;AAUP2B,IAAAA,OAAO,EAAE1B,cAVF;AAYP;AACAC,IAAAA,WAbO;AAcPE,IAAAA,IAdO;AAePC,IAAAA,YAfO;AAgBPC,IAAAA,IAhBO;AAiBPC,IAAAA,IAjBO;AAkBPE,IAAAA,IAlBO;AAmBPC,IAAAA,SAnBO;AAoBPF,IAAAA;AApBO,GAFkB;AAwB3BoB,EAAAA,UAAU,EAAE,CAAC,GAAGxC,oBAAoB,CAAC;AAAEyC,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAxB,EAA2CxC,IAAI,CAAC;AAAEyC,IAAAA,MAAM,EAAEnB;AAAV,GAAD,CAA/C,CAxBe;AAyB3BoB,EAAAA,cAAc,EAAEzC,IAAI,CAAC;AAAEwC,IAAAA,MAAM,EAAEnB;AAAV,GAAD;AAzBO,CAAD,CAA5B;AA4BAC,KAAK,CAACoB,QAAN,CAAe7B,aAAa,EAA5B;AAEA;AACA;AACA;;AAGA,OAAO,MAAM8B,cAAc,GAAG;AAAA;;AAAA,SAAM1C,WAAW,EAAjB;AAAA,CAAvB;;GAAM0C,c;UAAuB1C,W;;;AAEpC,eAAeqB,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { save, load } from 'redux-localstorage-simple'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport predictionsReducer from './predictions'\r\nimport profileReducer from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\nimport collectiblesReducer from './collectibles'\r\nimport votingReducer from './voting'\r\nimport lotteryReducer from './lottery'\r\nimport application from './application/reducer'\r\nimport { updateVersion } from './global/actions'\r\nimport user from './user/reducer'\r\nimport transactions from './transactions/reducer'\r\nimport swap from './swap/reducer'\r\nimport mint from './mint/reducer'\r\nimport lists from './lists/reducer'\r\nimport burn from './burn/reducer'\r\nimport multicall from './multicall/reducer'\r\n\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    predictions: predictionsReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    collectibles: collectiblesReducer,\r\n    voting: votingReducer,\r\n    lottery: lotteryReducer,\r\n\r\n    // Exchange\r\n    application,\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n})\r\n\r\nstore.dispatch(updateVersion())\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppState = ReturnType<typeof store.getState>\r\nexport const useAppDispatch = () => useDispatch()\r\n\r\nexport default store\r\n"]},"metadata":{},"sourceType":"module"}