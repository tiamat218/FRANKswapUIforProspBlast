{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { PoolIds } from 'config/constants/types';\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV1Abi from 'config/abi/ifoV1.json';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useIfoAllowance from '../useIfoAllowance';\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n  const [state, setState] = useState({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO // Not used\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo;\n  const {\n    poolUnlimited\n  } = state;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoV1Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx);\n  const setPendingTx = status => setState(prevState => ({\n    [PoolIds.poolUnlimited]: {\n      ...prevState.poolUnlimited,\n      isPendingTx: status\n    }\n  }));\n  const setIsClaimed = () => {\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true\n      }\n    }));\n  };\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map(method => ({\n      address,\n      name: method,\n      params: [account]\n    }));\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls);\n    const parsedUserInfo = userInfoResponse ? {\n      amount: new BigNumber(userInfoResponse.amount.toString()),\n      claimed: userInfoResponse.claimed\n    } : {\n      amount: BIG_ZERO,\n      claimed: false\n    };\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO\n      }\n    }));\n  }, [account, address]);\n  useEffect(() => {\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, fetchIfoData]);\n  return {\n    ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    setIsClaimed,\n    fetchIfoData\n  };\n};\n_s(useGetWalletIfoData, \"9EeW4FzjTatTjDEsn/whabTKk94=\", false, function () {\n  return [useWeb3React, useIfoV1Contract, useERC20, useIfoAllowance];\n});\nexport default useGetWalletIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","PoolIds","useERC20","useIfoV1Contract","multicallv2","ifoV1Abi","getAddress","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","_s","state","setState","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","amount","toString","claimed"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Ifos/hooks/v1/useGetWalletIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    [PoolIds.poolUnlimited]: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO, // Not used\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}