{"ast":null,"code":"import{useEffect,useReducer}from'react';import{parseRetreivedNumber}from'../../helpers';import generateTicketNumbers from'./generateTicketNumbers';const getInitialState=_ref=>{let{amount,userCurrentTickets}=_ref;const randomTickets=generateTicketNumbers(amount,userCurrentTickets);const randomTicketsAsStringArray=randomTickets.map(ticket=>parseRetreivedNumber(ticket.toString()).split(''));const tickets=Array.from({length:amount},(_,i)=>i+1).map(index=>({id:index,numbers:randomTicketsAsStringArray[index-1],duplicateWith:[],isComplete:true}));return{tickets,allComplete:true};};const reducer=(state,action)=>{switch(action.type){case'updateTicket':{const tickets=[...state.tickets];const{ticketId,newNumbers}=action.payload;const newDuplicates=state.tickets.filter(ticket=>ticket.id!==ticketId&&ticket.isComplete&&ticket.numbers.join('')===newNumbers.join(''));// If ticket was duplicate but not duplicate anymore with this update\n// go through previously considered duplicates and remove id of this ticket\n// from their duplicateWith array\nconst prevDuplicates=tickets[ticketId-1].duplicateWith;prevDuplicates.forEach(prevTicketId=>{if(!newDuplicates.map(_ref2=>{let{id}=_ref2;return id;}).includes(prevTicketId)){const dupsToUpdate=[...tickets[prevTicketId-1].duplicateWith];const indexToRemvoe=dupsToUpdate.findIndex(id=>id===ticketId);dupsToUpdate.splice(indexToRemvoe,1);tickets[prevTicketId-1]={...tickets[prevTicketId-1],duplicateWith:dupsToUpdate};}});// If found duplicates - update their duplicateWith array\nif(newDuplicates.length!==0){newDuplicates.forEach(duplicate=>{tickets[duplicate.id-1]={...duplicate,duplicateWith:[...duplicate.duplicateWith,ticketId]};});}const updatedTicket={id:ticketId,numbers:newNumbers,duplicateWith:newDuplicates.map(ticket=>ticket.id),isComplete:newNumbers.join('').length===6};tickets[ticketId-1]=updatedTicket;// Check if all tickets are filled\nconst allComplete=tickets.every(ticket=>ticket.isComplete);return{tickets,allComplete};}case'reset':return getInitialState({amount:action.payload.amount,userCurrentTickets:action.payload.userCurrentTickets});default:throw new Error();}};export const useTicketsReducer=(amount,userCurrentTickets)=>{const[state,dispatch]=useReducer(reducer,{amount,userCurrentTickets},getInitialState);useEffect(()=>{dispatch({type:'reset',payload:{amount,userCurrentTickets}});},[amount,userCurrentTickets]);const updateTicket=(ticketId,newNumbers)=>{dispatch({type:'updateTicket',payload:{ticketId,newNumbers}});};const randomize=()=>{dispatch({type:'reset',payload:{amount,userCurrentTickets}});};const getTicketsForPurchase=()=>{return state.tickets.map(ticket=>{const reversedTicket=[...ticket.numbers].map(num=>parseInt(num,10)).reverse();reversedTicket.unshift(1);const ticketAsNumber=parseInt(reversedTicket.join(''),10);return ticketAsNumber;});};return[updateTicket,randomize,state.tickets,state.allComplete,getTicketsForPurchase];};","map":{"version":3,"names":["useEffect","useReducer","parseRetreivedNumber","generateTicketNumbers","getInitialState","_ref","amount","userCurrentTickets","randomTickets","randomTicketsAsStringArray","map","ticket","toString","split","tickets","Array","from","length","_","i","index","id","numbers","duplicateWith","isComplete","allComplete","reducer","state","action","type","ticketId","newNumbers","payload","newDuplicates","filter","join","prevDuplicates","forEach","prevTicketId","_ref2","includes","dupsToUpdate","indexToRemvoe","findIndex","splice","duplicate","updatedTicket","every","Error","useTicketsReducer","dispatch","updateTicket","randomize","getTicketsForPurchase","reversedTicket","num","parseInt","reverse","unshift","ticketAsNumber"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx"],"sourcesContent":["import { LotteryTicket } from 'config/constants/types'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { parseRetreivedNumber } from '../../helpers'\r\nimport generateTicketNumbers from './generateTicketNumbers'\r\n\r\nexport interface Ticket {\r\n  id: number\r\n  numbers: string[]\r\n  duplicateWith: number[]\r\n  isComplete: boolean\r\n}\r\n\r\nexport interface TicketsState {\r\n  tickets: Ticket[]\r\n  allComplete: boolean\r\n}\r\n\r\nconst getInitialState = ({\r\n  amount,\r\n  userCurrentTickets,\r\n}: {\r\n  amount: number\r\n  userCurrentTickets: LotteryTicket[]\r\n}): TicketsState => {\r\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\r\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetreivedNumber(ticket.toString()).split(''))\r\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\r\n    id: index,\r\n    numbers: randomTicketsAsStringArray[index - 1],\r\n    duplicateWith: [],\r\n    isComplete: true,\r\n  }))\r\n  return {\r\n    tickets,\r\n    allComplete: true,\r\n  }\r\n}\r\n\r\nconst reducer = (state: TicketsState, action: any) => {\r\n  switch (action.type) {\r\n    case 'updateTicket': {\r\n      const tickets = [...state.tickets]\r\n      const { ticketId, newNumbers } = action.payload\r\n\r\n      const newDuplicates = state.tickets.filter(\r\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\r\n      )\r\n\r\n      // If ticket was duplicate but not duplicate anymore with this update\r\n      // go through previously considered duplicates and remove id of this ticket\r\n      // from their duplicateWith array\r\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\r\n      prevDuplicates.forEach((prevTicketId) => {\r\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\r\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\r\n          const indexToRemvoe = dupsToUpdate.findIndex((id) => id === ticketId)\r\n          dupsToUpdate.splice(indexToRemvoe, 1)\r\n          tickets[prevTicketId - 1] = {\r\n            ...tickets[prevTicketId - 1],\r\n            duplicateWith: dupsToUpdate,\r\n          }\r\n        }\r\n      })\r\n\r\n      // If found duplicates - update their duplicateWith array\r\n      if (newDuplicates.length !== 0) {\r\n        newDuplicates.forEach((duplicate) => {\r\n          tickets[duplicate.id - 1] = {\r\n            ...duplicate,\r\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\r\n          }\r\n        })\r\n      }\r\n\r\n      const updatedTicket = {\r\n        id: ticketId,\r\n        numbers: newNumbers,\r\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\r\n        isComplete: newNumbers.join('').length === 6,\r\n      }\r\n      tickets[ticketId - 1] = updatedTicket\r\n\r\n      // Check if all tickets are filled\r\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\r\n\r\n      return {\r\n        tickets,\r\n        allComplete,\r\n      }\r\n    }\r\n    case 'reset':\r\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\r\n\r\nexport const useTicketsReducer = (\r\n  amount: number,\r\n  userCurrentTickets: LotteryTicket[],\r\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\r\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }, [amount, userCurrentTickets])\r\n\r\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\r\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\r\n  }\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }\r\n\r\n  const getTicketsForPurchase = () => {\r\n    return state.tickets.map((ticket) => {\r\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\r\n      reversedTicket.unshift(1)\r\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\r\n      return ticketAsNumber\r\n    })\r\n  }\r\n\r\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}