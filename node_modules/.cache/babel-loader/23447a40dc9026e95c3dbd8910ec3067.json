{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport { multicallv2 } from 'utils/multicall';\nimport cakeVaultAbi from 'config/abi/cakeVault.json';\nimport { getCakeVaultAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'calculateHarvestCakeRewards', 'calculateTotalPendingCakeRewards'].map(method => ({\n      address: getCakeVaultAddress(),\n      name: method\n    }));\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(cakeVaultAbi, calls);\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO;\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO;\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber);\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON()\n    };\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null\n    };\n  }\n};\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map(method => ({\n      address: getCakeVaultAddress(),\n      name: method\n    }));\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls);\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber()\n    };\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    };\n  }\n};\nexport default fetchPublicVaultData;","map":{"version":3,"names":["BigNumber","convertSharesToCake","multicallv2","cakeVaultAbi","getCakeVaultAddress","BIG_ZERO","fetchPublicVaultData","calls","map","method","address","name","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","toString","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","toJSON","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","error","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","toNumber"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/pools/fetchVaultPublic.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicVaultData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n    ].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\r\n      cakeVaultAbi,\r\n      calls,\r\n    )\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchVaultFees = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicVaultData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}