{"ast":null,"code":"'use strict';\n\nconst {\n  encoding: getCodec\n} = require('multibase');\nconst utf8Decoder = new TextDecoder('utf8');\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array - The array to turn into a string\n */\nfunction uint8ArrayToAsciiString(array) {\n  let string = '';\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i]);\n  }\n  return string;\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString(array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array);\n  }\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array);\n  }\n  return getCodec(encoding).encode(array);\n}\nmodule.exports = toString;","map":{"version":3,"names":["encoding","getCodec","require","utf8Decoder","TextDecoder","uint8ArrayToAsciiString","array","string","i","length","String","fromCharCode","toString","decode","encode","module","exports"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/uint8arrays/to-string.js"],"sourcesContent":["'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array - The array to turn into a string\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  return getCodec(encoding).encode(array)\n}\n\nmodule.exports = toString\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,QAAQ,EAAEC;AAAS,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnD,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAEC,KAAK,EAAE;EACvC,IAAIC,MAAM,GAAG,EAAE;EAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,MAAM,IAAIG,MAAM,CAACC,YAAY,CAACL,KAAK,CAACE,CAAC,CAAC,CAAC;EACzC;EACA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQA,CAAEN,KAAK,EAAEN,QAAQ,GAAG,MAAM,EAAE;EAC3C,IAAIA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,EAAE;IAC/C,OAAOG,WAAW,CAACU,MAAM,CAACP,KAAK,CAAC;EAClC;EAEA,IAAIN,QAAQ,KAAK,OAAO,EAAE;IACxB,OAAOK,uBAAuB,CAACC,KAAK,CAAC;EACvC;EAEA,OAAOL,QAAQ,CAACD,QAAQ,CAAC,CAACc,MAAM,CAACR,KAAK,CAAC;AACzC;AAEAS,MAAM,CAACC,OAAO,GAAGJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}