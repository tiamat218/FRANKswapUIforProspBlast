{"ast":null,"code":"import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts';\nimport { getAddress } from './addressHelpers';\nimport { getErc721Contract } from './contractHelpers';\n\n/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */\nexport const getIdentifierKeyFromAddress = nftAddress => {\n  const nftSource = Object.values(nftSources).find(nftSourceEntry => {\n    const address = getAddress(nftSourceEntry.address);\n    return address === nftAddress;\n  });\n  return nftSource ? nftSource.identifierKey : null;\n};\n\n/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */\nexport const getTokenUrl = tokenUri => {\n  if (tokenUri.startsWith('ipfs://')) {\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`;\n  }\n  return tokenUri;\n};\nexport const getAddressByType = type => {\n  return getAddress(nftSources[type].address);\n};\nexport const getTokenUriData = async (nftAddress, tokenId) => {\n  try {\n    const contract = getErc721Contract(nftAddress);\n    const tokenUri = await contract.tokenURI(tokenId);\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri));\n    if (!uriDataResponse.ok) {\n      return null;\n    }\n    const uriData = await uriDataResponse.json();\n    return uriData;\n  } catch (error) {\n    console.error('getTokenUriData', error);\n    return null;\n  }\n};\nexport const getNftByTokenId = async (nftAddress, tokenId) => {\n  const uriData = await getTokenUriData(nftAddress, tokenId);\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress);\n\n  // Bail out early if we have no uriData, identifierKey, or the value does not\n  // exist in the object\n  if (!uriData) {\n    return null;\n  }\n  if (!identifierKey) {\n    return null;\n  }\n  if (!uriData[identifierKey]) {\n    return null;\n  }\n  return Nfts.find(nft => {\n    return uriData[identifierKey].includes(nft.identifier);\n  });\n};","map":{"version":3,"names":["Nfts","IPFS_GATEWAY","nftSources","getAddress","getErc721Contract","getIdentifierKeyFromAddress","nftAddress","nftSource","Object","values","find","nftSourceEntry","address","identifierKey","getTokenUrl","tokenUri","startsWith","slice","getAddressByType","type","getTokenUriData","tokenId","contract","tokenURI","uriDataResponse","fetch","ok","uriData","json","error","console","getNftByTokenId","nft","includes","identifier"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/utils/collectibles.ts"],"sourcesContent":["import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\r\nimport { Nft, NftType } from 'config/constants/types'\r\nimport { getAddress } from './addressHelpers'\r\nimport { getErc721Contract } from './contractHelpers'\r\n\r\n/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */\r\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\r\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\r\n    const address = getAddress(nftSourceEntry.address)\r\n    return address === nftAddress\r\n  })\r\n\r\n  return nftSource ? nftSource.identifierKey : null\r\n}\r\n\r\n/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */\r\nexport const getTokenUrl = (tokenUri: string) => {\r\n  if (tokenUri.startsWith('ipfs://')) {\r\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\r\n  }\r\n\r\n  return tokenUri\r\n}\r\n\r\nexport const getAddressByType = (type: NftType) => {\r\n  return getAddress(nftSources[type].address)\r\n}\r\n\r\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\r\n  try {\r\n    const contract = getErc721Contract(nftAddress)\r\n    const tokenUri = await contract.tokenURI(tokenId)\r\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\r\n\r\n    if (!uriDataResponse.ok) {\r\n      return null\r\n    }\r\n\r\n    const uriData = await uriDataResponse.json()\r\n    return uriData\r\n  } catch (error) {\r\n    console.error('getTokenUriData', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\r\n  const uriData = await getTokenUriData(nftAddress, tokenId)\r\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\r\n\r\n  // Bail out early if we have no uriData, identifierKey, or the value does not\r\n  // exist in the object\r\n  if (!uriData) {\r\n    return null\r\n  }\r\n\r\n  if (!identifierKey) {\r\n    return null\r\n  }\r\n\r\n  if (!uriData[identifierKey]) {\r\n    return null\r\n  }\r\n\r\n  return Nfts.find((nft) => {\r\n    return uriData[identifierKey].includes(nft.identifier)\r\n  })\r\n}\r\n"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,YAAY,EAAEC,UAAU,QAAQ,uBAAuB;AAEtE,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,iBAAiB,QAAQ,mBAAmB;;AAErD;AACA;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,GAAIC,UAAkB,IAAK;EACjE,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACP,UAAU,CAAC,CAACQ,IAAI,CAAEC,cAAc,IAAK;IACnE,MAAMC,OAAO,GAAGT,UAAU,CAACQ,cAAc,CAACC,OAAO,CAAC;IAClD,OAAOA,OAAO,KAAKN,UAAU;EAC/B,CAAC,CAAC;EAEF,OAAOC,SAAS,GAAGA,SAAS,CAACM,aAAa,GAAG,IAAI;AACnD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAgB,IAAK;EAC/C,IAAIA,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,EAAE;IAClC,OAAO,GAAGf,YAAY,SAASc,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,EAAE;EACpD;EAEA,OAAOF,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,IAAa,IAAK;EACjD,OAAOhB,UAAU,CAACD,UAAU,CAACiB,IAAI,CAAC,CAACP,OAAO,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMQ,eAAe,GAAG,MAAAA,CAAOd,UAAkB,EAAEe,OAAe,KAAK;EAC5E,IAAI;IACF,MAAMC,QAAQ,GAAGlB,iBAAiB,CAACE,UAAU,CAAC;IAC9C,MAAMS,QAAQ,GAAG,MAAMO,QAAQ,CAACC,QAAQ,CAACF,OAAO,CAAC;IACjD,MAAMG,eAAe,GAAG,MAAMC,KAAK,CAACX,WAAW,CAACC,QAAQ,CAAC,CAAC;IAE1D,IAAI,CAACS,eAAe,CAACE,EAAE,EAAE;MACvB,OAAO,IAAI;IACb;IAEA,MAAMC,OAAO,GAAG,MAAMH,eAAe,CAACI,IAAI,CAAC,CAAC;IAC5C,OAAOD,OAAO;EAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAG,MAAAA,CAAOzB,UAAkB,EAAEe,OAAe,KAA0B;EACjG,MAAMM,OAAO,GAAG,MAAMP,eAAe,CAACd,UAAU,EAAEe,OAAO,CAAC;EAC1D,MAAMR,aAAa,GAAGR,2BAA2B,CAACC,UAAU,CAAC;;EAE7D;EACA;EACA,IAAI,CAACqB,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,IAAI,CAACd,aAAa,EAAE;IAClB,OAAO,IAAI;EACb;EAEA,IAAI,CAACc,OAAO,CAACd,aAAa,CAAC,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA,OAAOb,IAAI,CAACU,IAAI,CAAEsB,GAAG,IAAK;IACxB,OAAOL,OAAO,CAACd,aAAa,CAAC,CAACoB,QAAQ,CAACD,GAAG,CAACE,UAAU,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}