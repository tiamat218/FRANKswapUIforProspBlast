{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useIntersectionObserver = () => {\n  _s();\n  const observerRef = useRef(null);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    };\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      intersectionObserver.observe(observerRef.current);\n      setObserverIsSet(true);\n    }\n  }, [observerIsSet]);\n  return {\n    observerRef,\n    isIntersecting\n  };\n};\n_s(useIntersectionObserver, \"MgRcZp4citce7lqF8SMImUrD2hE=\");\nexport default useIntersectionObserver;","map":{"version":3,"names":["useEffect","useRef","useState","useIntersectionObserver","_s","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","checkObserverIsIntersecting","entry","intersectionObserver","IntersectionObserver","rootMargin","threshold","observe","current"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/hooks/useIntersectionObserver.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\n\r\nconst useIntersectionObserver = () => {\r\n  const observerRef = useRef<HTMLDivElement>(null)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const [isIntersecting, setIsIntersecting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\r\n      setIsIntersecting(entry.isIntersecting)\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      intersectionObserver.observe(observerRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  return { observerRef, isIntersecting }\r\n}\r\n\r\nexport default useIntersectionObserver\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAMC,WAAW,GAAGJ,MAAM,CAAiB,IAAI,CAAC;EAChD,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE3DF,SAAS,CAAC,MAAM;IACd,MAAMU,2BAA2B,GAAGA,CAAC,CAACC,KAAK,CAA8B,KAAK;MAC5EF,iBAAiB,CAACE,KAAK,CAACH,cAAc,CAAC;IACzC,CAAC;IAED,IAAI,CAACF,aAAa,EAAE;MAClB,MAAMM,oBAAoB,GAAG,IAAIC,oBAAoB,CAACH,2BAA2B,EAAE;QACjFI,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE;MACb,CAAC,CAAC;MACFH,oBAAoB,CAACI,OAAO,CAACX,WAAW,CAACY,OAAO,CAAC;MACjDV,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EAEnB,OAAO;IAAED,WAAW;IAAEG;EAAe,CAAC;AACxC,CAAC;AAAAJ,EAAA,CArBKD,uBAAuB;AAuB7B,eAAeA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module"}