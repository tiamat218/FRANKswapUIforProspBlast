{"ast":null,"code":"// Set of helper functions to facilitate wallet setup\n\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config';\nimport { nodes } from './getRpcUrl';\n\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\nexport const setupNetwork = async () => {\n  const provider = window.ethereum;\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: `0x${chainId.toString(16)}`,\n          chainName: 'Binance Smart Chain Mainnet',\n          nativeCurrency: {\n            name: 'BNB',\n            symbol: 'bnb',\n            decimals: 18\n          },\n          rpcUrls: nodes,\n          blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`]\n        }]\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};\n\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\nexport const registerToken = async (tokenAddress, tokenSymbol, tokenDecimals) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`\n      }\n    }\n  });\n  return tokenAdded;\n};","map":{"version":3,"names":["BASE_BSC_SCAN_URL","BASE_URL","nodes","setupNetwork","provider","window","ethereum","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","request","method","params","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","error","console","registerToken","tokenAddress","tokenSymbol","tokenDecimals","tokenAdded","type","options","address","image"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/wallet.ts"],"sourcesContent":["// Set of helper functions to facilitate wallet setup\r\n\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = window.ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Mainnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error('Failed to setup the network in Metamask:', error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\r\n  const tokenAdded = await window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,iBAAiB,EAAEC,QAAQ,QAAQ,QAAQ;AACpD,SAASC,KAAK,QAAQ,aAAa;;AAEnC;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ;EAChC,IAAIF,QAAQ,EAAE;IACZ,MAAMG,OAAO,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,EAAE,EAAE,CAAC;IAC5D,IAAI;MACF,MAAMP,QAAQ,CAACQ,OAAO,CAAC;QACrBC,MAAM,EAAE,yBAAyB;QACjCC,MAAM,EAAE,CACN;UACEP,OAAO,EAAE,KAAKA,OAAO,CAACQ,QAAQ,CAAC,EAAE,CAAC,EAAE;UACpCC,SAAS,EAAE,6BAA6B;UACxCC,cAAc,EAAE;YACdC,IAAI,EAAE,KAAK;YACXC,MAAM,EAAE,KAAK;YACbC,QAAQ,EAAE;UACZ,CAAC;UACDC,OAAO,EAAEnB,KAAK;UACdoB,iBAAiB,EAAE,CAAC,GAAGtB,iBAAiB,GAAG;QAC7C,CAAC;MAEL,CAAC,CAAC;MACF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,OAAO,KAAK;IACd;EACF,CAAC,MAAM;IACLC,OAAO,CAACD,KAAK,CAAC,8EAA8E,CAAC;IAC7F,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,YAAoB,EAAEC,WAAmB,EAAEC,aAAqB,KAAK;EACvG,MAAMC,UAAU,GAAG,MAAMxB,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC;IAC/CC,MAAM,EAAE,mBAAmB;IAC3BC,MAAM,EAAE;MACNgB,IAAI,EAAE,OAAO;MACbC,OAAO,EAAE;QACPC,OAAO,EAAEN,YAAY;QACrBP,MAAM,EAAEQ,WAAW;QACnBP,QAAQ,EAAEQ,aAAa;QACvBK,KAAK,EAAE,GAAGhC,QAAQ,kBAAkByB,YAAY;MAClD;IACF;EACF,CAAC,CAAC;EAEF,OAAOG,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}