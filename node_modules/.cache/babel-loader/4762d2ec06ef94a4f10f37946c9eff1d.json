{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { currencyEquals, ETHER, WETH } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { tryParseAmount } from '../state/swap/hooks';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useCurrencyBalance } from '../state/wallet/hooks';\nimport { useWETHContract } from './useContract';\nexport let WrapType;\n\n(function (WrapType) {\n  WrapType[WrapType[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  WrapType[WrapType[\"WRAP\"] = 1] = \"WRAP\";\n  WrapType[WrapType[\"UNWRAP\"] = 2] = \"UNWRAP\";\n})(WrapType || (WrapType = {}));\n\nconst NOT_APPLICABLE = {\n  wrapType: WrapType.NOT_APPLICABLE\n};\n/**\r\n * Given the selected input and output currency, return a wrap callback\r\n * @param inputCurrency the selected input currency\r\n * @param outputCurrency the selected output currency\r\n * @param typedValue the user input value\r\n */\n\nexport default function useWrapCallback(inputCurrency, outputCurrency, typedValue) {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const wethContract = useWETHContract();\n  const balance = useCurrencyBalance(account !== null && account !== void 0 ? account : undefined, inputCurrency); // we can always parse the amount typed as the input currency, since wrapping is 1:1\n\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue]);\n  const addTransaction = useTransactionAdder();\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE;\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount);\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute: sufficientBalance && inputAmount ? async () => {\n          try {\n            const txReceipt = await wethContract.deposit({\n              value: `0x${inputAmount.raw.toString(16)}`\n            });\n            addTransaction(txReceipt, {\n              summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB`\n            });\n          } catch (error) {\n            console.error('Could not deposit', error);\n          }\n        } : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance'\n      };\n    }\n\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute: sufficientBalance && inputAmount ? async () => {\n          try {\n            const txReceipt = await wethContract.withdraw(`0x${inputAmount.raw.toString(16)}`);\n            addTransaction(txReceipt, {\n              summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB`\n            });\n          } catch (error) {\n            console.error('Could not withdraw', error);\n          }\n        } : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance'\n      };\n    }\n\n    return NOT_APPLICABLE;\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction]);\n}\n\n_s(useWrapCallback, \"vntrhns1+yhOf5a8SvIDHA0AeGc=\", false, function () {\n  return [useActiveWeb3React, useWETHContract, useCurrencyBalance, useTransactionAdder];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useWrapCallback.ts"],"names":["currencyEquals","ETHER","WETH","useMemo","useActiveWeb3React","tryParseAmount","useTransactionAdder","useCurrencyBalance","useWETHContract","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","wethContract","balance","undefined","inputAmount","addTransaction","sufficientBalance","lessThan","WRAP","execute","txReceipt","deposit","value","raw","toString","summary","toSignificant","error","console","inputError","UNWRAP","withdraw"],"mappings":"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","sourcesContent":["import { Currency, currencyEquals, ETHER, WETH } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { tryParseAmount } from '../state/swap/hooks'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { useCurrencyBalance } from '../state/wallet/hooks'\r\nimport { useWETHContract } from './useContract'\r\n\r\nexport enum WrapType {\r\n  NOT_APPLICABLE,\r\n  WRAP,\r\n  UNWRAP,\r\n}\r\n\r\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\r\n/**\r\n * Given the selected input and output currency, return a wrap callback\r\n * @param inputCurrency the selected input currency\r\n * @param outputCurrency the selected output currency\r\n * @param typedValue the user input value\r\n */\r\nexport default function useWrapCallback(\r\n  inputCurrency: Currency | undefined,\r\n  outputCurrency: Currency | undefined,\r\n  typedValue: string | undefined,\r\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const wethContract = useWETHContract()\r\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\r\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\r\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  return useMemo(() => {\r\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\r\n\r\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\r\n\r\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\r\n      return {\r\n        wrapType: WrapType.WRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.raw.toString(16)}` })\r\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB` })\r\n                } catch (error) {\r\n                  console.error('Could not deposit', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance',\r\n      }\r\n    }\r\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\r\n      return {\r\n        wrapType: WrapType.UNWRAP,\r\n        execute:\r\n          sufficientBalance && inputAmount\r\n            ? async () => {\r\n                try {\r\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.raw.toString(16)}`)\r\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB` })\r\n                } catch (error) {\r\n                  console.error('Could not withdraw', error)\r\n                }\r\n              }\r\n            : undefined,\r\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance',\r\n      }\r\n    }\r\n    return NOT_APPLICABLE\r\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}