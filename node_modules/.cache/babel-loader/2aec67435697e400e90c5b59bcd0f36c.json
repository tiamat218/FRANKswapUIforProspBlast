{"ast":null,"code":"var _s = $RefreshSig$();\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\n\n/**\r\n * Does a lookup for an ENS name to find its contenthash.\r\n */\nexport default function useENSContentHash(ensName) {\n  _s();\n  var _resolverAddressResul, _contenthash$result$, _contenthash$result;\n  const ensNodeArgument = useMemo(() => {\n    if (!ensName) return [undefined];\n    try {\n      return ensName ? [namehash(ensName)] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [ensName]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddress = (_resolverAddressResul = resolverAddressResult.result) === null || _resolverAddressResul === void 0 ? void 0 : _resolverAddressResul[0];\n  const resolverContract = useENSResolverContract(resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress, false);\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument);\n  return {\n    contenthash: (_contenthash$result$ = (_contenthash$result = contenthash.result) === null || _contenthash$result === void 0 ? void 0 : _contenthash$result[0]) !== null && _contenthash$result$ !== void 0 ? _contenthash$result$ : null,\n    loading: resolverAddressResult.loading || contenthash.loading\n  };\n}\n_s(useENSContentHash, \"20z3dSuAG28I46Mtx7GCgNFB188=\", false, function () {\n  return [useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"names":["namehash","useMemo","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useENSContentHash","ensName","_s","_resolverAddressResul","_contenthash$result$","_contenthash$result","ensNodeArgument","undefined","error","registrarContract","resolverAddressResult","resolverAddress","result","resolverContract","contenthash","loading"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSContentHash.ts"],"sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\n\r\n/**\r\n * Does a lookup for an ENS name to find its contenthash.\r\n */\r\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!ensName) return [undefined]\r\n    try {\r\n      return ensName ? [namehash(ensName)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [ensName])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddress = resolverAddressResult.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\r\n    false,\r\n  )\r\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\r\n\r\n  return {\r\n    contenthash: contenthash.result?.[0] ?? null,\r\n    loading: resolverAddressResult.loading || contenthash.loading,\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,OAAOC,MAAM,MAAM,oBAAoB;AACvC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ,gBAAgB;;AAEhF;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,OAAuB,EAAoD;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,oBAAA,EAAAC,mBAAA;EACnH,MAAMC,eAAe,GAAGX,OAAO,CAAC,MAAM;IACpC,IAAI,CAACM,OAAO,EAAE,OAAO,CAACM,SAAS,CAAC;IAChC,IAAI;MACF,OAAON,OAAO,GAAG,CAACP,QAAQ,CAACO,OAAO,CAAC,CAAC,GAAG,CAACM,SAAS,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,CAACD,SAAS,CAAC;IACpB;EACF,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EACb,MAAMQ,iBAAiB,GAAGX,uBAAuB,CAAC,KAAK,CAAC;EACxD,MAAMY,qBAAqB,GAAGd,mBAAmB,CAACa,iBAAiB,EAAE,UAAU,EAAEH,eAAe,CAAC;EACjG,MAAMK,eAAe,IAAAR,qBAAA,GAAGO,qBAAqB,CAACE,MAAM,cAAAT,qBAAA,uBAA5BA,qBAAA,CAA+B,CAAC,CAAC;EACzD,MAAMU,gBAAgB,GAAGd,sBAAsB,CAC7CY,eAAe,IAAId,MAAM,CAACc,eAAe,CAAC,GAAGJ,SAAS,GAAGI,eAAe,EACxE,KACF,CAAC;EACD,MAAMG,WAAW,GAAGlB,mBAAmB,CAACiB,gBAAgB,EAAE,aAAa,EAAEP,eAAe,CAAC;EAEzF,OAAO;IACLQ,WAAW,GAAAV,oBAAA,IAAAC,mBAAA,GAAES,WAAW,CAACF,MAAM,cAAAP,mBAAA,uBAAlBA,mBAAA,CAAqB,CAAC,CAAC,cAAAD,oBAAA,cAAAA,oBAAA,GAAI,IAAI;IAC5CW,OAAO,EAAEL,qBAAqB,CAACK,OAAO,IAAID,WAAW,CAACC;EACxD,CAAC;AACH;AAACb,EAAA,CAtBuBF,iBAAiB;EAAA,QASbF,uBAAuB,EACnBF,mBAAmB,EAExBG,sBAAsB,EAI3BH,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}