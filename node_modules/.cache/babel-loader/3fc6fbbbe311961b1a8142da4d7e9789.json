{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\UnstakingFeeCountdownRow.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer';\nimport { useCakeVault } from 'state/pools/hooks';\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UnstakingFeeCountdownRow = ({\n  isTableVariant\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    fees: {\n      withdrawalFee,\n      withdrawalFeePeriod\n    }\n  } = useCakeVault();\n  const feeAsDecimal = withdrawalFee / 100 || '-';\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      mb: \"4px\",\n      children: t('Unstaking fee: %fee%%', {\n        fee: feeAsDecimal\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom-start'\n  });\n  const {\n    secondsRemaining,\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares, withdrawalFeePeriod);\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0);\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee;\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase();\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until');\n    }\n    return t('unstaking fee if withdrawn within 72h');\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: isTableVariant ? 'flex-start' : 'center',\n    justifyContent: \"space-between\",\n    flexDirection: isTableVariant ? 'column' : 'row',\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      small: true,\n      children: [noFeeToPay ? '0' : feeAsDecimal, \"% \", getRowText()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), shouldShowTimer && /*#__PURE__*/_jsxDEV(WithdrawalFeeTimer, {\n      secondsRemaining: secondsRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(UnstakingFeeCountdownRow, \"ElUKJD/gE2X+0lkLxA8kuxA2K20=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, useTooltip, useWithdrawalFeeTimer];\n});\n_c = UnstakingFeeCountdownRow;\nexport default UnstakingFeeCountdownRow;\nvar _c;\n$RefreshReg$(_c, \"UnstakingFeeCountdownRow\");","map":{"version":3,"names":["React","Flex","Text","TooltipText","useTooltip","useTranslation","useWeb3React","useWithdrawalFeeTimer","useCakeVault","WithdrawalFeeTimer","jsxDEV","_jsxDEV","Fragment","_Fragment","UnstakingFeeCountdownRow","isTableVariant","_s","t","account","userData","lastDepositedTime","userShares","fees","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","targetRef","tooltip","tooltipVisible","children","bold","mb","fee","fileName","_jsxFileName","lineNumber","columnNumber","placement","secondsRemaining","hasUnstakingFee","parseInt","noFeeToPay","gt","shouldShowTimer","getRowText","toLowerCase","alignItems","justifyContent","flexDirection","ref","small","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}