{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue,\n    noLiquidity\n  }\n}) => {\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n\n\n    return { ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: state.typedValue\n    };\n  }\n\n  return { ...state,\n    independentField: field,\n    typedValue,\n    otherTypedValue: ''\n  };\n}));","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,SAAhC,QAAiD,WAAjD;AAQA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,gBAAgB,EAAEJ,KAAK,CAACK,UADM;AAE9BC,EAAAA,UAAU,EAAE,EAFkB;AAG9BC,EAAAA,eAAe,EAAE;AAHa,CAAhC;AAMA,eAAeR,aAAa,CAAYI,YAAZ,EAA2BK,OAAD,IACpDA,OAAO,CACJC,OADH,CACWR,cADX,EAC2B,MAAME,YADjC,EAEGM,OAFH,CAEWP,SAFX,EAEsB,CAACQ,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASN,IAAAA,UAAT;AAAqBO,IAAAA;AAArB;AAAX,CAAR,KAA4D;AAC9E,MAAIA,WAAJ,EAAiB;AACf;AACA,QAAID,KAAK,KAAKF,KAAK,CAACN,gBAApB,EAAsC;AACpC,aAAO,EACL,GAAGM,KADE;AAELN,QAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,QAAAA;AAHK,OAAP;AAKD,KARc,CASf;;;AAEA,WAAO,EACL,GAAGI,KADE;AAELN,MAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,MAAAA,UAHK;AAILC,MAAAA,eAAe,EAAEG,KAAK,CAACJ;AAJlB,KAAP;AAMD;;AACD,SAAO,EACL,GAAGI,KADE;AAELN,IAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,IAAAA,UAHK;AAILC,IAAAA,eAAe,EAAE;AAJZ,GAAP;AAMD,CA3BH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, resetMintState, typeInput } from './actions'\r\n\r\nexport interface MintState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly otherTypedValue: string // for the case when there's no liquidity\r\n}\r\n\r\nconst initialState: MintState = {\r\n  independentField: Field.CURRENCY_A,\r\n  typedValue: '',\r\n  otherTypedValue: '',\r\n}\r\n\r\nexport default createReducer<MintState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(resetMintState, () => initialState)\r\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\r\n      if (noLiquidity) {\r\n        // they're typing into the field they've last typed in\r\n        if (field === state.independentField) {\r\n          return {\r\n            ...state,\r\n            independentField: field,\r\n            typedValue,\r\n          }\r\n        }\r\n        // they're typing into a new field, store the other value\r\n\r\n        return {\r\n          ...state,\r\n          independentField: field,\r\n          typedValue,\r\n          otherTypedValue: state.typedValue,\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n        otherTypedValue: '',\r\n      }\r\n    }),\r\n)\r\n"]},"metadata":{},"sourceType":"module"}