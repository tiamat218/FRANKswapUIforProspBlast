{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\nconst now = () => new Date().getTime();\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, {\n  payload: {\n    chainId,\n    from,\n    hash,\n    approval,\n    summary,\n    claim\n  }\n}) => {\n  var _transactions$chainId, _transactions$chainId2;\n  if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n    throw Error('Attempted to add existing transaction.');\n  }\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    approval,\n    summary,\n    claim,\n    from,\n    addedTime: now()\n  };\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, {\n  payload: {\n    chainId\n  }\n}) => {\n  if (!transactions[chainId]) return;\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, {\n  payload: {\n    chainId,\n    hash,\n    blockNumber\n  }\n}) => {\n  var _transactions$chainId3;\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n  if (!tx) {\n    return;\n  }\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, {\n  payload: {\n    hash,\n    chainId,\n    receipt\n  }\n}) => {\n  var _transactions$chainId4;\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n  if (!tx) {\n    return;\n  }\n  tx.receipt = receipt;\n  tx.confirmedTime = now();\n}));","map":{"version":3,"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","from","hash","approval","summary","claim","_transactions$chainId","_transactions$chainId2","Error","txs","addedTime","blockNumber","_transactions$chainId3","tx","lastCheckedBlockNumber","Math","max","receipt","_transactions$chainId4","confirmedTime"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/transactions/reducer.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions'\r\n\r\nconst now = () => new Date().getTime()\r\n\r\nexport interface TransactionDetails {\r\n  hash: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n  claim?: { recipient: string }\r\n  receipt?: SerializableTransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  addedTime: number\r\n  confirmedTime?: number\r\n  from: string\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails\r\n  }\r\n}\r\n\r\nexport const initialState: TransactionState = {}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.')\r\n      }\r\n      const txs = transactions[chainId] ?? {}\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\r\n      transactions[chainId] = txs\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return\r\n      transactions[chainId] = {}\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      tx.receipt = receipt\r\n      tx.confirmedTime = now()\r\n    }),\r\n)\r\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SACEC,cAAc,EACdC,kBAAkB,EAClBC,oBAAoB,EACpBC,mBAAmB,QAEd,WAAW;AAElB,MAAMC,GAAG,GAAGA,CAAA,KAAM,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AAoBtC,OAAO,MAAMC,YAA8B,GAAG,CAAC,CAAC;AAEhD,eAAeR,aAAa,CAACQ,YAAY,EAAGC,OAAO,IACjDA,OAAO,CACJC,OAAO,CAACT,cAAc,EAAE,CAACU,YAAY,EAAE;EAAEC,OAAO,EAAE;IAAEC,OAAO;IAAEC,IAAI;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAAM;AAAE,CAAC,KAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EACzG,KAAAD,qBAAA,GAAIR,YAAY,CAACE,OAAO,CAAC,cAAAM,qBAAA,uBAArBA,qBAAA,CAAwBJ,IAAI,CAAC,EAAE;IACjC,MAAMM,KAAK,CAAC,wCAAwC,CAAC;EACvD;EACA,MAAMC,GAAG,IAAAF,sBAAA,GAAGT,YAAY,CAACE,OAAO,CAAC,cAAAO,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC;EACvCE,GAAG,CAACP,IAAI,CAAC,GAAG;IAAEA,IAAI;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,KAAK;IAAEJ,IAAI;IAAES,SAAS,EAAElB,GAAG,CAAC;EAAE,CAAC;EACtEM,YAAY,CAACE,OAAO,CAAC,GAAGS,GAAG;AAC7B,CAAC,CAAC,CACDZ,OAAO,CAACP,oBAAoB,EAAE,CAACQ,YAAY,EAAE;EAAEC,OAAO,EAAE;IAAEC;EAAQ;AAAE,CAAC,KAAK;EACzE,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC,EAAE;EAC5BF,YAAY,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC,CAAC,CACDH,OAAO,CAACR,kBAAkB,EAAE,CAACS,YAAY,EAAE;EAAEC,OAAO,EAAE;IAAEC,OAAO;IAAEE,IAAI;IAAES;EAAY;AAAE,CAAC,KAAK;EAAA,IAAAC,sBAAA;EAC1F,MAAMC,EAAE,IAAAD,sBAAA,GAAGd,YAAY,CAACE,OAAO,CAAC,cAAAY,sBAAA,uBAArBA,sBAAA,CAAwBV,IAAI,CAAC;EACxC,IAAI,CAACW,EAAE,EAAE;IACP;EACF;EACA,IAAI,CAACA,EAAE,CAACC,sBAAsB,EAAE;IAC9BD,EAAE,CAACC,sBAAsB,GAAGH,WAAW;EACzC,CAAC,MAAM;IACLE,EAAE,CAACC,sBAAsB,GAAGC,IAAI,CAACC,GAAG,CAACL,WAAW,EAAEE,EAAE,CAACC,sBAAsB,CAAC;EAC9E;AACF,CAAC,CAAC,CACDjB,OAAO,CAACN,mBAAmB,EAAE,CAACO,YAAY,EAAE;EAAEC,OAAO,EAAE;IAAEG,IAAI;IAAEF,OAAO;IAAEiB;EAAQ;AAAE,CAAC,KAAK;EAAA,IAAAC,sBAAA;EACvF,MAAML,EAAE,IAAAK,sBAAA,GAAGpB,YAAY,CAACE,OAAO,CAAC,cAAAkB,sBAAA,uBAArBA,sBAAA,CAAwBhB,IAAI,CAAC;EACxC,IAAI,CAACW,EAAE,EAAE;IACP;EACF;EACAA,EAAE,CAACI,OAAO,GAAGA,OAAO;EACpBJ,EAAE,CAACM,aAAa,GAAG3B,GAAG,CAAC,CAAC;AAC1B,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}