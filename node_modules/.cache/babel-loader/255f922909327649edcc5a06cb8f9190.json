{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react';\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Image, Heading, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport styled from 'styled-components';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks';\nimport usePersistState from 'hooks/usePersistState';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getFarmApr } from 'utils/apr';\nimport { orderBy } from 'lodash';\nimport isArchivedPid from 'utils/farmHelpers';\nimport { latinise } from 'utils/latinise';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport Loading from 'components/Loading';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Table from './components/FarmTable/FarmTable';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport ToggleView from './components/ToggleView/ToggleView';\nimport { DesktopColumnSchema, ViewMode } from './components/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c = ControlContainer;\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c2 = ToggleWrapper;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c3 = LabelWrapper;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c4 = FilterContainer;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c5 = ViewControls;\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`;\n_c6 = StyledImage;\nconst NUMBER_OF_FARMS_VISIBLE = 12;\n\nconst getDisplayApr = (cakeRewardsApr, lpRewardsApr) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n\n  return null;\n};\n\nconst Farms = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP,\n    userDataLoaded\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const [query, setQuery] = useState('');\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, {\n    localStorageKey: 'pancake_farm_view'\n  });\n  const {\n    account\n  } = useWeb3React();\n  const [sortOption, setSortOption] = useState('hot');\n  const chosenFarmsLength = useRef(0);\n  const isArchived = pathname.includes('archived');\n  const isInactive = pathname.includes('history');\n  const isActive = !isInactive && !isArchived;\n  usePollFarmsData(isArchived); // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const userDataReady = !account || !!account && userDataLoaded;\n  const [stakedOnly, setStakedOnly] = useState(!isActive);\n  useEffect(() => {\n    setStakedOnly(!isActive);\n  }, [isActive]);\n  const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid));\n  const inactiveFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid));\n  const archivedFarms = farmsLP.filter(farm => isArchivedPid(farm.pid));\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedInactiveFarms = inactiveFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedArchivedFarms = archivedFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const farmsList = useCallback(farmsToDisplay => {\n    let farmsToDisplayWithAPR = farmsToDisplay.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n        return farm;\n      }\n\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n      const {\n        cakeRewardsApr,\n        lpRewardsApr\n      } = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]) : {\n        cakeRewardsApr: 0,\n        lpRewardsApr: 0\n      };\n      return { ...farm,\n        apr: cakeRewardsApr,\n        lpRewardsApr,\n        liquidity: totalLiquidity\n      };\n    });\n\n    if (query) {\n      const lowercaseQuery = latinise(query.toLowerCase());\n      farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter(farm => {\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery);\n      });\n    }\n\n    return farmsToDisplayWithAPR;\n  }, [cakePrice, query, isActive]);\n\n  const handleChangeQuery = event => {\n    setQuery(event.target.value);\n  };\n\n  const loadMoreRef = useRef(null);\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = [];\n\n    const sortFarms = farms => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, farm => farm.apr + farm.lpRewardsApr, 'desc');\n\n        case 'multiplier':\n          return orderBy(farms, farm => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc');\n\n        case 'earned':\n          return orderBy(farms, farm => farm.userData ? Number(farm.userData.earnings) : 0, 'desc');\n\n        case 'liquidity':\n          return orderBy(farms, farm => Number(farm.liquidity), 'desc');\n\n        default:\n          return farms;\n      }\n    };\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms);\n    }\n\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms);\n    }\n\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms);\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible);\n  }, [sortOption, activeFarms, farmsList, inactiveFarms, archivedFarms, isActive, isInactive, isArchived, stakedArchivedFarms, stakedInactiveFarms, stakedOnly, stakedOnlyFarms, numberOfFarmsVisible]);\n  chosenFarmsLength.current = chosenFarmsMemoized.length;\n  useEffect(() => {\n    const showMoreFarms = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible(farmsCurrentlyVisible => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE;\n          }\n\n          return farmsCurrentlyVisible;\n        });\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [chosenFarmsMemoized, observerIsSet]);\n  const rowData = chosenFarmsMemoized.map(farm => {\n    const {\n      token,\n      quoteToken\n    } = farm;\n    const tokenAddress = token.address;\n    const quoteTokenAddress = quoteToken.address;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '');\n    const row = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid\n      },\n      liquidity: {\n        liquidity: farm.liquidity\n      },\n      multiplier: {\n        multiplier: farm.multiplier\n      },\n      details: farm\n    };\n    return row;\n  });\n\n  const renderContent = () => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema;\n      const columns = columnSchema.map(column => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a, b) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id;\n\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value);\n              }\n\n              return 0;\n\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings;\n\n            default:\n              return 1;\n          }\n        },\n        sortable: column.sortable\n      }));\n      return /*#__PURE__*/_jsxDEV(Table, {\n        data: rowData,\n        columns: columns,\n        userDataReady: userDataReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: false\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/history`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/archived`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        scale: \"xxl\",\n        color: \"secondary\",\n        mb: \"24px\",\n        children: t('Farms')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"lg\",\n        color: \"text\",\n        children: t('Stake LP tokens to earn.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        activeClassName: \"active\",\n        to: \"/farms/auction\",\n        id: \"lottery-pot-banner\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          p: \"0\",\n          variant: \"text\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            color: \"primary\",\n            bold: true,\n            fontSize: \"16px\",\n            mr: \"4px\",\n            children: t('Community Auctions')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(ControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ViewControls, {\n          children: [/*#__PURE__*/_jsxDEV(ToggleView, {\n            viewMode: viewMode,\n            onToggle: mode => setViewMode(mode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Toggle, {\n              checked: stakedOnly,\n              onChange: () => setStakedOnly(!stakedOnly),\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [\" \", t('Staked only')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n            hasStakeInFinishedFarms: stakedInactiveFarms.length > 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              options: [{\n                label: t('Hot'),\n                value: 'hot'\n              }, {\n                label: t('APR'),\n                value: 'apr'\n              }, {\n                label: t('Multiplier'),\n                value: 'multiplier'\n              }, {\n                label: t('Earned'),\n                value: 'earned'\n              }, {\n                label: t('Liquidity'),\n                value: 'liquidity'\n              }],\n              onChange: handleSortOptionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeQuery,\n              placeholder: \"Search Farms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), renderContent(), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImage, {\n        src: \"/images/decorations/3dpan.png\",\n        alt: \"Pancake illustration\",\n        width: 120,\n        height: 103\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farms, \"0LNkP0LojBoxN7HwGaBd4fv6Ils=\", false, function () {\n  return [useRouteMatch, useLocation, useTranslation, useFarms, usePriceCakeBusd, usePersistState, useWeb3React, usePollFarmsData];\n});\n\n_c7 = Farms;\nexport default Farms;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ControlContainer\");\n$RefreshReg$(_c2, \"ToggleWrapper\");\n$RefreshReg$(_c3, \"LabelWrapper\");\n$RefreshReg$(_c4, \"FilterContainer\");\n$RefreshReg$(_c5, \"ViewControls\");\n$RefreshReg$(_c6, \"StyledImage\");\n$RefreshReg$(_c7, \"Farms\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","useMemo","useRef","Route","useRouteMatch","useLocation","NavLink","BigNumber","useWeb3React","Image","Heading","Toggle","Text","Button","ArrowForwardIcon","Flex","ChainId","styled","FlexLayout","Page","useFarms","usePollFarmsData","usePriceCakeBusd","usePersistState","useTranslation","getBalanceNumber","getFarmApr","orderBy","isArchivedPid","latinise","PageHeader","SearchInput","Select","Loading","FarmCard","Table","FarmTabButtons","ToggleView","DesktopColumnSchema","ViewMode","ControlContainer","div","theme","mediaQueries","sm","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","NUMBER_OF_FARMS_VISIBLE","getDisplayApr","cakeRewardsApr","lpRewardsApr","toLocaleString","maximumFractionDigits","Farms","path","pathname","t","data","farmsLP","userDataLoaded","cakePrice","query","setQuery","viewMode","setViewMode","TABLE","localStorageKey","account","sortOption","setSortOption","chosenFarmsLength","isArchived","includes","isInactive","isActive","userDataReady","stakedOnly","setStakedOnly","activeFarms","filter","farm","pid","multiplier","inactiveFarms","archivedFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","poolWeight","lpAddresses","MAINNET","apr","liquidity","lowercaseQuery","toLowerCase","lpSymbol","handleChangeQuery","event","target","value","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","sortFarms","farms","Number","slice","earnings","current","length","showMoreFarms","entries","entry","isIntersecting","farmsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","rowData","token","tokenAddress","address","quoteTokenAddress","lpLabel","split","toUpperCase","replace","row","originalValue","label","earned","details","renderContent","columnSchema","columns","column","id","name","sort","a","b","original","sortable","handleSortOptionChange","option","mode","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}