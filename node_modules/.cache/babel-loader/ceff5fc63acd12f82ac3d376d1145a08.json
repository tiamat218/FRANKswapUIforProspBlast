{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\History\\\\PnlTab\\\\SummaryRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { formatBnb } from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text'\n};\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: ''\n};\n\nconst SummaryRow = ({\n  type,\n  summary,\n  bnbBusdPrice\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const color = summaryTypeColors[type];\n  const {\n    rounds,\n    amount\n  } = summary[type];\n  const totalRounds = summary.entered.rounds;\n  const roundsInPercents = (rounds * 100 / totalRounds).toFixed(2);\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1);\n  const displayAmount = type === 'won' ? summary[type].payout : amount;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mt: \"16px\",\n      bold: true,\n      color: \"textSubtle\",\n      children: t(typeTranslationKey)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flex: \"2\",\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          fontSize: \"20px\",\n          color: color,\n          children: [rounds, \" \", t('Rounds').toLocaleLowerCase()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        flex: \"3\",\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          fontSize: \"20px\",\n          color: color,\n          children: `${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: `~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SummaryRow, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SummaryRow;\nexport default SummaryRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SummaryRow\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/History/PnlTab/SummaryRow.tsx"],"names":["React","Flex","Text","useTranslation","formatBnb","summaryTypeColors","won","lost","entered","summaryTypeSigns","SummaryRow","type","summary","bnbBusdPrice","t","color","rounds","amount","totalRounds","roundsInPercents","toFixed","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","payout","toLocaleLowerCase","times","toNumber"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n"]},"metadata":{},"sourceType":"module"}