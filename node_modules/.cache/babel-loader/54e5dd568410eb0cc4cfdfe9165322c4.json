{"ast":null,"code":"import{useEffect}from'react';import usePrevious from'hooks/usePreviousValue';import useSwiper from'./useSwiper';/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */const useOnViewChange=(liveSwiperIndex,view)=>{const{swiper}=useSwiper();const prevView=usePrevious(view);useEffect(()=>{if(swiper&&view!==prevView&&swiper.activeIndex!==liveSwiperIndex){swiper.slideTo(liveSwiperIndex,0.1);}},[swiper,prevView,view,liveSwiperIndex]);};export default useOnViewChange;","map":{"version":3,"names":["useEffect","usePrevious","useSwiper","useOnViewChange","liveSwiperIndex","view","swiper","prevView","activeIndex","slideTo"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Predictions/hooks/useOnViewChange.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,MAAO,CAAAC,WAAW,KAAM,wBAAwB,CAChD,MAAO,CAAAC,SAAS,KAAM,aAAa,CAGnC;AACA;AACA,GACA,KAAM,CAAAC,eAAe,CAAGA,CAACC,eAAuB,CAAEC,IAAe,GAAK,CACpE,KAAM,CAAEC,MAAO,CAAC,CAAGJ,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAAK,QAAQ,CAAGN,WAAW,CAACI,IAAI,CAAC,CAElCL,SAAS,CAAC,IAAM,CACd,GAAIM,MAAM,EAAID,IAAI,GAAKE,QAAQ,EAAID,MAAM,CAACE,WAAW,GAAKJ,eAAe,CAAE,CACzEE,MAAM,CAACG,OAAO,CAACL,eAAe,CAAE,GAAG,CAAC,CACtC,CACF,CAAC,CAAE,CAACE,MAAM,CAAEC,QAAQ,CAAEF,IAAI,CAAED,eAAe,CAAC,CAAC,CAC/C,CAAC,CAED,cAAe,CAAAD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}