{"ast":null,"code":"'use strict';\n\nconst {\n  names\n} = require('multibase/src/constants');\nconst {\n  TextEncoder\n} = require('web-encoding');\nconst utf8Encoder = new TextEncoder();\n\n/**\n * Interperets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {String} string The string to turn into an array\n * @returns {Uint8Array}\n */\nfunction asciiStringToUint8Array(string) {\n  const array = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i);\n  }\n  return array;\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString(string) {\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string);\n  }\n  const codec = names[encoding];\n  if (!codec) {\n    throw new Error('Unknown base');\n  }\n  return codec.decode(string);\n}\nmodule.exports = fromString;","map":{"version":3,"names":["names","require","TextEncoder","utf8Encoder","asciiStringToUint8Array","string","array","Uint8Array","length","i","charCodeAt","fromString","encoding","arguments","undefined","encode","codec","Error","decode","module","exports"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/multicodec/node_modules/uint8arrays/from-string.js"],"sourcesContent":["'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextEncoder } = require('web-encoding')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * Interperets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {String} string The string to turn into an array\n * @returns {Uint8Array}\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {String} string\n * @param {String} [encoding=utf8] utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.decode(string)\n}\n\nmodule.exports = fromString\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACpD,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAME,WAAW,GAAG,IAAID,WAAW,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,uBAAuBA,CAAEC,MAAM,EAAE;EACxC,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,MAAM,CAAC;EAE3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCH,KAAK,CAACG,CAAC,CAAC,GAAGJ,MAAM,CAACK,UAAU,CAACD,CAAC,CAAC;EACjC;EAEA,OAAOH,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,UAAUA,CAAEN,MAAM,EAAqB;EAAA,IAAnBO,QAAQ,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,MAAM;EAC5C,IAAID,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,EAAE;IAC/C,OAAOT,WAAW,CAACY,MAAM,CAACV,MAAM,CAAC;EACnC;EAEA,IAAIO,QAAQ,KAAK,OAAO,EAAE;IACxB,OAAOR,uBAAuB,CAACC,MAAM,CAAC;EACxC;EAEA,MAAMW,KAAK,GAAGhB,KAAK,CAACY,QAAQ,CAAC;EAE7B,IAAI,CAACI,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC;EAEA,OAAOD,KAAK,CAACE,MAAM,CAACb,MAAM,CAAC;AAC7B;AAEAc,MAAM,CAACC,OAAO,GAAGT,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script"}