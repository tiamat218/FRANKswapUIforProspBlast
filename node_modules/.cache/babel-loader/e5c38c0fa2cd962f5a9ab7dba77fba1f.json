{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport isArchivedPid from 'utils/farmHelpers';\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps';\nimport fetchFarms from './fetchFarms';\nimport fetchFarmsPrices from './fetchFarmsPrices';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nconst noAccountFarmConfig = farmsConfig.map(farm => ({ ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0'\n  }\n}));\nconst initialState = {\n  data: noAccountFarmConfig,\n  loadArchivedFarmsData: false,\n  userDataLoaded: false\n};\nexport const nonArchivedFarms = farmsConfig.filter(({\n  pid\n}) => !isArchivedPid(pid)); // Async thunks\n\nexport const fetchFarmsPublicDataAsync = createAsyncThunk('farms/fetchFarmsPublicDataAsync', async pids => {\n  const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid)); // Add price helper farms\n\n  const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig);\n  const farms = await fetchFarms(farmsWithPriceHelpers);\n  const farmsWithPrices = await fetchFarmsPrices(farms); // Filter out price helper LP config farms\n\n  const farmsWithoutHelperLps = farmsWithPrices.filter(farm => {\n    return farm.pid || farm.pid === 0;\n  });\n  return farmsWithoutHelperLps;\n});\nexport const fetchFarmUserDataAsync = createAsyncThunk('farms/fetchFarmUserDataAsync', async ({\n  account,\n  pids\n}) => {\n  const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid));\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch);\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch);\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch);\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch);\n  return userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      pid: farmsToFetch[index].pid,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index]\n    };\n  });\n});\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload;\n      state.loadArchivedFarmsData = loadArchivedFarmsData;\n    }\n  },\n  extraReducers: builder => {\n    // Update farms with live data\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\n      state.data = state.data.map(farm => {\n        const liveFarmData = action.payload.find(farmData => farmData.pid === farm.pid);\n        return { ...farm,\n          ...liveFarmData\n        };\n      });\n    }); // Update farms with user data\n\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach(userDataEl => {\n        const {\n          pid\n        } = userDataEl;\n        const index = state.data.findIndex(farm => farm.pid === pid);\n        state.data[index] = { ...state.data[index],\n          userData: userDataEl\n        };\n      });\n      state.userDataLoaded = true;\n    });\n  }\n}); // Actions\n\nexport const {\n  setLoadArchivedFarmsData\n} = farmsSlice.actions;\nexport default farmsSlice.reducer;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/index.ts"],"names":["createAsyncThunk","createSlice","farmsConfig","isArchivedPid","priceHelperLpsConfig","fetchFarms","fetchFarmsPrices","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","noAccountFarmConfig","map","farm","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","filter","pid","fetchFarmsPublicDataAsync","pids","farmsToFetch","farmConfig","includes","farmsWithPriceHelpers","concat","farms","farmsWithPrices","farmsWithoutHelperLps","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","farmsSlice","name","reducers","setLoadArchivedFarmsData","state","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","find","farmData","forEach","userDataEl","findIndex","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      const loadArchivedFarmsData = action.payload\r\n      state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\nexport default farmsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}