{"ast":null,"code":"import{useWeb3React}from'@web3-react/core';import{LotteryStatus}from'config/constants/types';import usePreviousValue from'hooks/usePreviousValue';import{useEffect}from'react';import{useAppDispatch}from'state';import{useLottery}from'state/lottery/hooks';import{fetchPublicLotteries,fetchCurrentLotteryId,fetchUserLotteries}from'state/lottery';const useStatusTransitions=()=>{const{currentLotteryId,isTransitioning,currentRound:{status}}=useLottery();const{account}=useWeb3React();const dispatch=useAppDispatch();const previousStatus=usePreviousValue(status);useEffect(()=>{// Only run if there is a status state change\nif(previousStatus!==status&&currentLotteryId){// Current lottery transitions from CLOSE > CLAIMABLE\nif(previousStatus===LotteryStatus.CLOSE&&status===LotteryStatus.CLAIMABLE){dispatch(fetchPublicLotteries({currentLotteryId}));if(account){dispatch(fetchUserLotteries({account,currentLotteryId}));}}// Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\nif(previousStatus===LotteryStatus.CLAIMABLE&&status===LotteryStatus.OPEN){dispatch(fetchPublicLotteries({currentLotteryId}));if(account){dispatch(fetchUserLotteries({account,currentLotteryId}));}}}},[currentLotteryId,status,previousStatus,account,dispatch]);useEffect(()=>{// Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n// The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\nif(previousStatus===LotteryStatus.CLAIMABLE&&status===LotteryStatus.CLAIMABLE&&isTransitioning){dispatch(fetchCurrentLotteryId());dispatch(fetchPublicLotteries({currentLotteryId}));const interval=setInterval(async()=>{dispatch(fetchCurrentLotteryId());dispatch(fetchPublicLotteries({currentLotteryId}));},10000);return()=>clearInterval(interval);}return()=>null;},[status,previousStatus,isTransitioning,currentLotteryId,dispatch]);};export default useStatusTransitions;","map":{"version":3,"names":["useWeb3React","LotteryStatus","usePreviousValue","useEffect","useAppDispatch","useLottery","fetchPublicLotteries","fetchCurrentLotteryId","fetchUserLotteries","useStatusTransitions","currentLotteryId","isTransitioning","currentRound","status","account","dispatch","previousStatus","CLOSE","CLAIMABLE","OPEN","interval","setInterval","clearInterval"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/hooks/useStatusTransitions.tsx"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\r\n\r\nconst useStatusTransitions = () => {\r\n  const {\r\n    currentLotteryId,\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const previousStatus = usePreviousValue(status)\r\n\r\n  useEffect(() => {\r\n    // Only run if there is a status state change\r\n    if (previousStatus !== status && currentLotteryId) {\r\n      // Current lottery transitions from CLOSE > CLAIMABLE\r\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\r\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n    }\r\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\r\n\r\n  useEffect(() => {\r\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\r\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\r\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\r\n      dispatch(fetchCurrentLotteryId())\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      const interval = setInterval(async () => {\r\n        dispatch(fetchCurrentLotteryId())\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      }, 10000)\r\n      return () => clearInterval(interval)\r\n    }\r\n    return () => null\r\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\r\n}\r\n\r\nexport default useStatusTransitions\r\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,aAAa,KAAQ,wBAAwB,CACtD,MAAO,CAAAC,gBAAgB,KAAM,wBAAwB,CACrD,OAASC,SAAS,KAAQ,OAAO,CACjC,OAASC,cAAc,KAAQ,OAAO,CACtC,OAASC,UAAU,KAAQ,qBAAqB,CAChD,OAASC,oBAAoB,CAAEC,qBAAqB,CAAEC,kBAAkB,KAAQ,eAAe,CAE/F,KAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,CACjC,KAAM,CACJC,gBAAgB,CAChBC,eAAe,CACfC,YAAY,CAAE,CAAEC,MAAO,CACzB,CAAC,CAAGR,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAES,OAAQ,CAAC,CAAGd,YAAY,CAAC,CAAC,CAClC,KAAM,CAAAe,QAAQ,CAAGX,cAAc,CAAC,CAAC,CACjC,KAAM,CAAAY,cAAc,CAAGd,gBAAgB,CAACW,MAAM,CAAC,CAE/CV,SAAS,CAAC,IAAM,CACd;AACA,GAAIa,cAAc,GAAKH,MAAM,EAAIH,gBAAgB,CAAE,CACjD;AACA,GAAIM,cAAc,GAAKf,aAAa,CAACgB,KAAK,EAAIJ,MAAM,GAAKZ,aAAa,CAACiB,SAAS,CAAE,CAChFH,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAiB,CAAC,CAAC,CAAC,CACpD,GAAII,OAAO,CAAE,CACXC,QAAQ,CAACP,kBAAkB,CAAC,CAAEM,OAAO,CAAEJ,gBAAiB,CAAC,CAAC,CAAC,CAC7D,CACF,CACA;AACA,GAAIM,cAAc,GAAKf,aAAa,CAACiB,SAAS,EAAIL,MAAM,GAAKZ,aAAa,CAACkB,IAAI,CAAE,CAC/EJ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAiB,CAAC,CAAC,CAAC,CACpD,GAAII,OAAO,CAAE,CACXC,QAAQ,CAACP,kBAAkB,CAAC,CAAEM,OAAO,CAAEJ,gBAAiB,CAAC,CAAC,CAAC,CAC7D,CACF,CACF,CACF,CAAC,CAAE,CAACA,gBAAgB,CAAEG,MAAM,CAAEG,cAAc,CAAEF,OAAO,CAAEC,QAAQ,CAAC,CAAC,CAEjEZ,SAAS,CAAC,IAAM,CACd;AACA;AACA,GAAIa,cAAc,GAAKf,aAAa,CAACiB,SAAS,EAAIL,MAAM,GAAKZ,aAAa,CAACiB,SAAS,EAAIP,eAAe,CAAE,CACvGI,QAAQ,CAACR,qBAAqB,CAAC,CAAC,CAAC,CACjCQ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAiB,CAAC,CAAC,CAAC,CACpD,KAAM,CAAAU,QAAQ,CAAGC,WAAW,CAAC,SAAY,CACvCN,QAAQ,CAACR,qBAAqB,CAAC,CAAC,CAAC,CACjCQ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAiB,CAAC,CAAC,CAAC,CACtD,CAAC,CAAE,KAAK,CAAC,CACT,MAAO,IAAMY,aAAa,CAACF,QAAQ,CAAC,CACtC,CACA,MAAO,IAAM,IAAI,CACnB,CAAC,CAAE,CAACP,MAAM,CAAEG,cAAc,CAAEL,eAAe,CAAED,gBAAgB,CAAEK,QAAQ,CAAC,CAAC,CAC3E,CAAC,CAED,cAAe,CAAAN,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}