{"ast":null,"code":"var _s = $RefreshSig$();\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport { isAddress } from '../../utils';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\n\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\nexport default function useENSName(address) {\n  _s();\n  var _resolverAddress$resu, _name$result$, _name$result;\n  const debouncedAddress = useDebounce(address, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [debouncedAddress]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  const changed = debouncedAddress !== address;\n  return {\n    ENSName: changed ? null : (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null,\n    loading: changed || resolverAddress.loading || name.loading\n  };\n}\n_s(useENSName, \"8g3MyTb9JnGx6yiMJXxKZlnslKc=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSName","address","_s","_resolverAddress$resu","_name$result$","_name$result","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/hooks/ENS/useENSName.ts"],"sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport { isAddress } from '../../utils'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedAddress])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false,\r\n  )\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\r\n\r\n  const changed = debouncedAddress !== address\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading,\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ,gBAAgB;AAChF,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,OAAgB,EAAgD;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,aAAA,EAAAC,YAAA;EACjG,MAAMC,gBAAgB,GAAGP,WAAW,CAACE,OAAO,EAAE,GAAG,CAAC;EAClD,MAAMM,eAAe,GAAGd,OAAO,CAAC,MAAM;IACpC,IAAI,CAACa,gBAAgB,IAAI,CAACX,SAAS,CAACW,gBAAgB,CAAC,EAAE,OAAO,CAACE,SAAS,CAAC;IACzE,IAAI;MACF,OAAOF,gBAAgB,GAAG,CAACd,QAAQ,CAAC,GAAGc,gBAAgB,CAACG,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,CAACF,SAAS,CAAC;IAChH,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,OAAO,CAACH,SAAS,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,gBAAgB,CAAC,CAAC;EACtB,MAAMM,iBAAiB,GAAGf,uBAAuB,CAAC,KAAK,CAAC;EACxD,MAAMgB,eAAe,GAAGnB,mBAAmB,CAACkB,iBAAiB,EAAE,UAAU,EAAEL,eAAe,CAAC;EAC3F,MAAMO,qBAAqB,IAAAX,qBAAA,GAAGU,eAAe,CAACE,MAAM,cAAAZ,qBAAA,uBAAtBA,qBAAA,CAAyB,CAAC,CAAC;EACzD,MAAMa,gBAAgB,GAAGlB,sBAAsB,CAC7CgB,qBAAqB,IAAI,CAAClB,MAAM,CAACkB,qBAAqB,CAAC,GAAGA,qBAAqB,GAAGN,SAAS,EAC3F,KACF,CAAC;EACD,MAAMS,IAAI,GAAGvB,mBAAmB,CAACsB,gBAAgB,EAAE,MAAM,EAAET,eAAe,CAAC;EAE3E,MAAMW,OAAO,GAAGZ,gBAAgB,KAAKL,OAAO;EAC5C,OAAO;IACLkB,OAAO,EAAED,OAAO,GAAG,IAAI,IAAAd,aAAA,IAAAC,YAAA,GAAGY,IAAI,CAACF,MAAM,cAAAV,YAAA,uBAAXA,YAAA,CAAc,CAAC,CAAC,cAAAD,aAAA,cAAAA,aAAA,GAAI,IAAI;IAClDgB,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAAO,IAAIH,IAAI,CAACG;EACtD,CAAC;AACH;AAAClB,EAAA,CAxBuBF,UAAU;EAAA,QACPD,WAAW,EASVF,uBAAuB,EACzBH,mBAAmB,EAElBI,sBAAsB,EAIlCJ,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}