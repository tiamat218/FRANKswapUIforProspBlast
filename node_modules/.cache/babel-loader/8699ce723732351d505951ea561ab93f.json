{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Voting\\\\Proposal\\\\Results.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box, Text, Flex, Card, CardBody, CardHeader, Heading, Progress, Skeleton, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport times from 'lodash/times';\nimport { VotingStateLoadingStatus } from 'state/types';\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers';\nimport TextEllipsis from '../components/TextEllipsis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Results = ({\n  choices,\n  votes\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const results = calculateVoteResults(votes);\n  const votingStatus = useGetVotingStateLoadingStatus();\n  const {\n    account\n  } = useWeb3React();\n  const totalVotes = getTotalFromVotes(votes);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h3\",\n        scale: \"md\",\n        children: t('Current Results')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [votingStatus === VotingStateLoadingStatus.IDLE && choices.map((choice, index) => {\n        const choiceVotes = results[choice] || [];\n        const totalChoiceVote = getTotalFromVotes(choiceVotes);\n        const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber();\n        const hasVoted = choiceVotes.some(vote => {\n          return account && vote.voter.toLowerCase() === account.toLowerCase();\n        });\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mt: index > 0 ? '24px' : '0px',\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            mb: \"8px\",\n            children: [/*#__PURE__*/_jsxDEV(TextEllipsis, {\n              mb: \"4px\",\n              title: choice,\n              children: choice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this), hasVoted && /*#__PURE__*/_jsxDEV(Tag, {\n              variant: \"success\",\n              outline: true,\n              ml: \"8px\",\n              children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {\n                mr: \"4px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 23\n              }, this), \" \", t('Voted')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mb: \"4px\",\n            children: /*#__PURE__*/_jsxDEV(Progress, {\n              primaryStep: progress,\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: \"textSubtle\",\n              children: t('%total% Votes', {\n                total: totalChoiceVote.toFormat(3)\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [progress.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              }), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, choice, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this);\n      }), votingStatus === VotingStateLoadingStatus.LOADING && times(choices.length).map((count, index) => {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          mt: index > 0 ? '24px' : '0px',\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            height: \"36px\",\n            mb: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, count, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Results, \"lIzrP0ojFpFJhAWtMOaNFkaDF/8=\", false, function () {\n  return [useTranslation, useGetVotingStateLoadingStatus, useWeb3React];\n});\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Voting/Proposal/Results.tsx"],"names":["React","Box","Text","Flex","Card","CardBody","CardHeader","Heading","Progress","Skeleton","Tag","CheckmarkCircleIcon","useWeb3React","times","VotingStateLoadingStatus","useGetVotingStateLoadingStatus","useTranslation","calculateVoteResults","getTotalFromVotes","TextEllipsis","Results","choices","votes","t","results","votingStatus","account","totalVotes","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","eq","div","toNumber","hasVoted","some","vote","voter","toLowerCase","total","toFormat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,OAPF,EAQEC,QARF,EASEC,QATF,EAUEC,GAVF,EAWEC,mBAXF,QAYO,oBAZP;AAaA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAAeC,wBAAf,QAA+C,aAA/C;AACA,SAASC,8BAAT,QAA+C,oBAA/C;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,QAAwD,YAAxD;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;;AAOA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAwB;AAAA;;AAC9D,QAAM;AAAEC,IAAAA;AAAF,MAAQP,cAAc,EAA5B;AACA,QAAMQ,OAAO,GAAGP,oBAAoB,CAACK,KAAD,CAApC;AACA,QAAMG,YAAY,GAAGV,8BAA8B,EAAnD;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcd,YAAY,EAAhC;AACA,QAAMe,UAAU,GAAGT,iBAAiB,CAACI,KAAD,CAApC;AAEA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,UAAD;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,EAAE,EAAC,IAAZ;AAAiB,QAAA,KAAK,EAAC,IAAvB;AAAA,kBACGC,CAAC,CAAC,iBAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,QAAD;AAAA,iBACGE,YAAY,KAAKX,wBAAwB,CAACc,IAA1C,IACCP,OAAO,CAACQ,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7B,cAAMC,WAAW,GAAGR,OAAO,CAACM,MAAD,CAAP,IAAmB,EAAvC;AACA,cAAMG,eAAe,GAAGf,iBAAiB,CAACc,WAAD,CAAzC;AAEA,cAAME,QAAQ,GAAGP,UAAU,CAACQ,EAAX,CAAc,CAAd,IAAmB,CAAnB,GAAuBF,eAAe,CAACG,GAAhB,CAAoBT,UAApB,EAAgCd,KAAhC,CAAsC,GAAtC,EAA2CwB,QAA3C,EAAxC;AACA,cAAMC,QAAQ,GAAGN,WAAW,CAACO,IAAZ,CAAkBC,IAAD,IAAU;AAC1C,iBAAOd,OAAO,IAAIc,IAAI,CAACC,KAAL,CAAWC,WAAX,OAA6BhB,OAAO,CAACgB,WAAR,EAA/C;AACD,SAFgB,CAAjB;AAIA,4BACE,QAAC,GAAD;AAAkB,UAAA,EAAE,EAAEX,KAAK,GAAG,CAAR,GAAY,MAAZ,GAAqB,KAA3C;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,UAAU,EAAC,QAAjB;AAA0B,YAAA,EAAE,EAAC,KAA7B;AAAA,oCACE,QAAC,YAAD;AAAc,cAAA,EAAE,EAAC,KAAjB;AAAuB,cAAA,KAAK,EAAED,MAA9B;AAAA,wBACGA;AADH;AAAA;AAAA;AAAA;AAAA,oBADF,EAIGQ,QAAQ,iBACP,QAAC,GAAD;AAAK,cAAA,OAAO,EAAC,SAAb;AAAuB,cAAA,OAAO,MAA9B;AAA+B,cAAA,EAAE,EAAC,KAAlC;AAAA,sCACE,QAAC,mBAAD;AAAqB,gBAAA,EAAE,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,sBADF,OACoCf,CAAC,CAAC,OAAD,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,KAAR;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,WAAW,EAAEW,QAAvB;AAAiC,cAAA,KAAK,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF,eAcE,QAAC,IAAD;AAAM,YAAA,UAAU,EAAC,QAAjB;AAA0B,YAAA,cAAc,EAAC,eAAzC;AAAA,oCACE,QAAC,IAAD;AAAM,cAAA,KAAK,EAAC,YAAZ;AAAA,wBAA0BX,CAAC,CAAC,eAAD,EAAkB;AAAEoB,gBAAAA,KAAK,EAAEV,eAAe,CAACW,QAAhB,CAAyB,CAAzB;AAAT,eAAlB;AAA3B;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,IAAD;AAAA,yBACGV,QAAQ,CAACW,cAAT,CAAwBC,SAAxB,EAAmC;AAAEC,gBAAAA,qBAAqB,EAAE,CAAzB;AAA4BC,gBAAAA,qBAAqB,EAAE;AAAnD,eAAnC,CADH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA,WAAUlB,MAAV;AAAA;AAAA;AAAA;AAAA,gBADF;AAuBD,OAhCD,CAFJ,EAoCGL,YAAY,KAAKX,wBAAwB,CAACmC,OAA1C,IACCpC,KAAK,CAACQ,OAAO,CAAC6B,MAAT,CAAL,CAAsBrB,GAAtB,CAA0B,CAACsB,KAAD,EAAQpB,KAAR,KAAkB;AAC1C,4BACE,QAAC,GAAD;AAAiB,UAAA,EAAE,EAAEA,KAAK,GAAG,CAAR,GAAY,MAAZ,GAAqB,KAA1C;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,MAAM,EAAC,MAAjB;AAAwB,YAAA,EAAE,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,WAAUoB,KAAV;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OAND,CArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD,CA7DD;;GAAM/B,O;UACUJ,c,EAEOD,8B,EACDH,Y;;;KAJhBQ,O;AA+DN,eAAeA,OAAf","sourcesContent":["import React from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Heading,\r\n  Progress,\r\n  Skeleton,\r\n  Tag,\r\n  CheckmarkCircleIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport times from 'lodash/times'\r\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\r\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\r\nimport TextEllipsis from '../components/TextEllipsis'\r\n\r\ninterface ResultsProps {\r\n  choices: string[]\r\n  votes: Vote[]\r\n}\r\n\r\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\r\n  const { t } = useTranslation()\r\n  const results = calculateVoteResults(votes)\r\n  const votingStatus = useGetVotingStateLoadingStatus()\r\n  const { account } = useWeb3React()\r\n  const totalVotes = getTotalFromVotes(votes)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <Heading as=\"h3\" scale=\"md\">\r\n          {t('Current Results')}\r\n        </Heading>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\r\n          choices.map((choice, index) => {\r\n            const choiceVotes = results[choice] || []\r\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\r\n\r\n            const progress = totalVotes.eq(0) ? 0 : totalChoiceVote.div(totalVotes).times(100).toNumber()\r\n            const hasVoted = choiceVotes.some((vote) => {\r\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\r\n            })\r\n\r\n            return (\r\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\r\n                <Flex alignItems=\"center\" mb=\"8px\">\r\n                  <TextEllipsis mb=\"4px\" title={choice}>\r\n                    {choice}\r\n                  </TextEllipsis>\r\n                  {hasVoted && (\r\n                    <Tag variant=\"success\" outline ml=\"8px\">\r\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\r\n                    </Tag>\r\n                  )}\r\n                </Flex>\r\n                <Box mb=\"4px\">\r\n                  <Progress primaryStep={progress} scale=\"sm\" />\r\n                </Box>\r\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: totalChoiceVote.toFormat(3) })}</Text>\r\n                  <Text>\r\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\r\n                  </Text>\r\n                </Flex>\r\n              </Box>\r\n            )\r\n          })}\r\n\r\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\r\n          times(choices.length).map((count, index) => {\r\n            return (\r\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\r\n                <Skeleton height=\"36px\" mb=\"4px\" />\r\n              </Box>\r\n            )\r\n          })}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Results\r\n"]},"metadata":{},"sourceType":"module"}