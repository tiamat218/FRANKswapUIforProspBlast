{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Profile\\\\ProfileCreation\\\\UserName.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, Heading, Text, Input as UIKitInput, Button, AutoRenewIcon, CheckmarkIcon, Flex, WarningIcon, useModal, Skeleton, Checkbox } from '@pancakeswap/uikit';\nimport { parseISO, formatDistance } from 'date-fns';\nimport { useWeb3React } from '@web3-react/core';\nimport useToast from 'hooks/useToast';\nimport { signMessage } from 'utils/web3React';\nimport useWeb3Provider from 'hooks/useActiveWeb3React';\nimport { useTranslation } from 'contexts/Localization';\nimport useHasCakeBalance from 'hooks/useHasCakeBalance';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport debounce from 'lodash/debounce';\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal';\nimport useProfileCreation from './contexts/hook';\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ExistingUserState;\n\n(function (ExistingUserState) {\n  ExistingUserState[\"IDLE\"] = \"idle\";\n  ExistingUserState[\"CREATED\"] = \"created\";\n  ExistingUserState[\"NEW\"] = \"new\";\n})(ExistingUserState || (ExistingUserState = {}));\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE;\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL);\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`;\n_c = InputWrap;\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`;\n_c2 = Input;\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`;\n_c3 = Indicator;\n\nconst UserName = () => {\n  _s();\n\n  const [isAcknowledged, setIsAcknowledged] = useState(false);\n  const {\n    teamId,\n    selectedNft,\n    userName,\n    actions,\n    minimumCakeRequired,\n    allowance\n  } = useProfileCreation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const {\n    library\n  } = useWeb3Provider();\n  const [existingUserState, setExistingUserState] = useState(ExistingUserState.IDLE);\n  const [isValid, setIsValid] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister);\n  const [onPresentConfirmProfileCreation] = useModal( /*#__PURE__*/_jsxDEV(ConfirmProfileCreationModal, {\n    userName: userName,\n    selectedNft: selectedNft,\n    account: account,\n    teamId: teamId,\n    minimumCakeRequired: minimumCakeRequired,\n    allowance: allowance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), false);\n  const isUserCreated = existingUserState === ExistingUserState.CREATED;\n  const checkUsernameValidity = debounce(async value => {\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`);\n\n      if (res.ok) {\n        setIsValid(true);\n        setMessage('');\n      } else {\n        var _data$error;\n\n        const data = await res.json();\n        setIsValid(false);\n        setMessage(data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, 200);\n\n  const handleChange = event => {\n    const {\n      value\n    } = event.target;\n    actions.setUserName(value);\n    checkUsernameValidity(value);\n  };\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true);\n      const signature = await signMessage(library, account, userName);\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature\n        })\n      });\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED);\n      } else {\n        var _data$error2;\n\n        const data = await response.json();\n        toastError(t('Error'), data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.message);\n      }\n    } catch (error) {\n      toastError((error === null || error === void 0 ? void 0 : error.message) ? error.message : JSON.stringify(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged); // Perform an initial check to see if the wallet has already created a username\n\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`);\n        const data = await response.json();\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date());\n          setMessage(t('Created %dateCreated% ago', {\n            dateCreated\n          }));\n          actions.setUserName(data.username);\n          setExistingUserState(ExistingUserState.CREATED);\n          setIsValid(true);\n        } else {\n          setExistingUserState(ExistingUserState.NEW);\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'));\n      }\n    };\n\n    if (account) {\n      fetchUser();\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: t('Step %num%', {\n        num: 4\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      scale: \"xl\",\n      mb: \"24px\",\n      children: t('Set Your Name')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mb: \"24px\",\n      children: t('This name will be shown in team leaderboards and search results as long as your profile is active.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Set Your Name')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"24px\",\n          children: t('Your name must be at least 3 and at most 15 standard letters and numbers long. You canâ€™t change this once you click Confirm.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), existingUserState === ExistingUserState.IDLE ? /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"40px\",\n          width: \"240px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(InputWrap, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleChange,\n            isWarning: userName && !isValid,\n            isSuccess: userName && isValid,\n            minLength: USERNAME_MIN_LENGTH,\n            maxLength: USERNAME_MAX_LENGTH,\n            disabled: isUserCreated,\n            placeholder: t('Enter your name...'),\n            value: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Indicator, {\n            children: [isLoading && /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n              spin: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 31\n            }, this), !isLoading && isValid && userName && /*#__PURE__*/_jsxDEV(CheckmarkIcon, {\n              color: \"success\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 55\n            }, this), !isLoading && !isValid && userName && /*#__PURE__*/_jsxDEV(WarningIcon, {\n              color: \"failure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          py: \"4px\",\n          mb: \"16px\",\n          style: {\n            minHeight: '30px'\n          },\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"failure\",\n          mb: \"8px\",\n          children: t(\"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          style: {\n            display: 'block',\n            cursor: 'pointer',\n            marginBottom: '24px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                flex: 'none'\n              },\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                id: \"checkbox\",\n                scale: \"sm\",\n                checked: isAcknowledged,\n                onChange: handleAcknowledge\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              ml: \"8px\",\n              children: t('I understand that people can view my wallet if they know my username')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirm,\n          disabled: !isValid || isUserCreated || isLoading || !isAcknowledged,\n          children: t('Confirm')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onPresentConfirmProfileCreation,\n      disabled: !isValid || !isUserCreated,\n      id: \"completeProfileCreation\",\n      children: t('Complete Profile')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), !hasMinimumCakeRequired && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"failure\",\n      mt: \"16px\",\n      children: t('A minimum of %num% CAKE is required', {\n        num: REGISTER_COST\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserName, \"v/GbSA44OzOmcAVinjbAU+YfFd4=\", false, function () {\n  return [useProfileCreation, useTranslation, useWeb3React, useToast, useWeb3Provider, useHasCakeBalance, useModal];\n});\n\n_c4 = UserName;\nexport default UserName;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputWrap\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Indicator\");\n$RefreshReg$(_c4, \"UserName\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Profile/ProfileCreation/UserName.tsx"],"names":["React","useEffect","useState","styled","BigNumber","Card","CardBody","Heading","Text","Input","UIKitInput","Button","AutoRenewIcon","CheckmarkIcon","Flex","WarningIcon","useModal","Skeleton","Checkbox","parseISO","formatDistance","useWeb3React","useToast","signMessage","useWeb3Provider","useTranslation","useHasCakeBalance","DEFAULT_TOKEN_DECIMAL","debounce","ConfirmProfileCreationModal","useProfileCreation","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","REGISTER_COST","ExistingUserState","profileApiUrl","process","env","REACT_APP_API_PROFILE","minimumCakeToRegister","multipliedBy","InputWrap","div","Indicator","UserName","isAcknowledged","setIsAcknowledged","teamId","selectedNft","userName","actions","minimumCakeRequired","allowance","t","account","toastError","library","existingUserState","setExistingUserState","IDLE","isValid","setIsValid","isLoading","setIsLoading","message","setMessage","hasMinimumCakeRequired","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","value","res","fetch","ok","data","json","error","handleChange","event","target","setUserName","handleConfirm","signature","response","method","headers","body","JSON","stringify","address","username","handleAcknowledge","fetchUser","dateCreated","created_at","Date","NEW","num","minHeight","display","cursor","marginBottom","flex"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Text,\r\n  Input as UIKitInput,\r\n  Button,\r\n  AutoRenewIcon,\r\n  CheckmarkIcon,\r\n  Flex,\r\n  WarningIcon,\r\n  useModal,\r\n  Skeleton,\r\n  Checkbox,\r\n} from '@pancakeswap/uikit'\r\nimport { parseISO, formatDistance } from 'date-fns'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useToast from 'hooks/useToast'\r\nimport { signMessage } from 'utils/web3React'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport debounce from 'lodash/debounce'\r\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal'\r\nimport useProfileCreation from './contexts/hook'\r\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\r\n\r\nenum ExistingUserState {\r\n  IDLE = 'idle', // initial state\r\n  CREATED = 'created', // username has already been created\r\n  NEW = 'new', // username has not been created\r\n}\r\n\r\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE\r\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\r\n\r\nconst InputWrap = styled.div`\r\n  position: relative;\r\n  max-width: 240px;\r\n`\r\n\r\nconst Input = styled(UIKitInput)`\r\n  padding-right: 40px;\r\n`\r\n\r\nconst Indicator = styled(Flex)`\r\n  align-items: center;\r\n  height: 24px;\r\n  justify-content: center;\r\n  margin-top: -12px;\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 50%;\r\n  width: 24px;\r\n`\r\n\r\nconst UserName: React.FC = () => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError } = useToast()\r\n  const { library } = useWeb3Provider()\r\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\r\n  const [isValid, setIsValid] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [message, setMessage] = useState('')\r\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister)\r\n  const [onPresentConfirmProfileCreation] = useModal(\r\n    <ConfirmProfileCreationModal\r\n      userName={userName}\r\n      selectedNft={selectedNft}\r\n      account={account}\r\n      teamId={teamId}\r\n      minimumCakeRequired={minimumCakeRequired}\r\n      allowance={allowance}\r\n    />,\r\n    false,\r\n  )\r\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\r\n\r\n  const checkUsernameValidity = debounce(async (value: string) => {\r\n    try {\r\n      setIsLoading(true)\r\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`)\r\n\r\n      if (res.ok) {\r\n        setIsValid(true)\r\n        setMessage('')\r\n      } else {\r\n        const data = await res.json()\r\n        setIsValid(false)\r\n        setMessage(data?.error?.message)\r\n      }\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, 200)\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target\r\n    actions.setUserName(value)\r\n    checkUsernameValidity(value)\r\n  }\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      const signature = await signMessage(library, account, userName)\r\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          address: account,\r\n          username: userName,\r\n          signature,\r\n        }),\r\n      })\r\n\r\n      if (response.ok) {\r\n        setExistingUserState(ExistingUserState.CREATED)\r\n      } else {\r\n        const data = await response.json()\r\n        toastError(t('Error'), data?.error?.message)\r\n      }\r\n    } catch (error) {\r\n      toastError(error?.message ? error.message : JSON.stringify(error))\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  // Perform an initial check to see if the wallet has already created a username\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`)\r\n        const data = await response.json()\r\n\r\n        if (response.ok) {\r\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\r\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\r\n\r\n          actions.setUserName(data.username)\r\n          setExistingUserState(ExistingUserState.CREATED)\r\n          setIsValid(true)\r\n        } else {\r\n          setExistingUserState(ExistingUserState.NEW)\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Unable to verify username'))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchUser()\r\n    }\r\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\r\n\r\n  return (\r\n    <>\r\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\r\n        {t('Step %num%', { num: 4 })}\r\n      </Text>\r\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\r\n        {t('Set Your Name')}\r\n      </Heading>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\r\n      </Text>\r\n      <Card mb=\"24px\">\r\n        <CardBody>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Set Your Name')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t(\r\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You canâ€™t change this once you click Confirm.',\r\n            )}\r\n          </Text>\r\n          {existingUserState === ExistingUserState.IDLE ? (\r\n            <Skeleton height=\"40px\" width=\"240px\" />\r\n          ) : (\r\n            <InputWrap>\r\n              <Input\r\n                onChange={handleChange}\r\n                isWarning={userName && !isValid}\r\n                isSuccess={userName && isValid}\r\n                minLength={USERNAME_MIN_LENGTH}\r\n                maxLength={USERNAME_MAX_LENGTH}\r\n                disabled={isUserCreated}\r\n                placeholder={t('Enter your name...')}\r\n                value={userName}\r\n              />\r\n              <Indicator>\r\n                {isLoading && <AutoRenewIcon spin />}\r\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\r\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\r\n              </Indicator>\r\n            </InputWrap>\r\n          )}\r\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\r\n            {message}\r\n          </Text>\r\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\r\n            {t(\r\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\r\n            )}\r\n          </Text>\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\r\n              </div>\r\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\r\n            </Flex>\r\n          </label>\r\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\r\n            {t('Confirm')}\r\n          </Button>\r\n        </CardBody>\r\n      </Card>\r\n      <Button\r\n        onClick={onPresentConfirmProfileCreation}\r\n        disabled={!isValid || !isUserCreated}\r\n        id=\"completeProfileCreation\"\r\n      >\r\n        {t('Complete Profile')}\r\n      </Button>\r\n      {!hasMinimumCakeRequired && (\r\n        <Text color=\"failure\" mt=\"16px\">\r\n          {t('A minimum of %num% CAKE is required', { num: REGISTER_COST })}\r\n        </Text>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserName\r\n"]},"metadata":{},"sourceType":"module"}