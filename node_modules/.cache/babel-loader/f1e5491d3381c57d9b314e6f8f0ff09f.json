{"ast":null,"code":"import ifosList from'config/constants/ifo';import{campaignMap}from'config/constants/campaigns';import{multicallv2}from'utils/multicall';import{getPointCenterIfoAddress}from'utils/addressHelpers';import pointCenterIfoABI from'config/abi/pointCenterIfo.json';export const getAchievementTitle=campaign=>{switch(campaign.type){case'ifo':return{key:'IFO Shopper: %title%',data:{title:campaign.title}};default:return campaign.title;}};export const getAchievementDescription=campaign=>{switch(campaign.type){case'ifo':return{key:'Committed more than $5 worth of LP in the %title% IFO',data:{title:campaign.title}};default:return campaign.description;}};/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */export const getClaimableIfoData=async account=>{const ifoCampaigns=ifosList.filter(ifoItem=>ifoItem.campaignId!==undefined);// Returns the claim status of every IFO with a campaign ID\nconst claimStatusCalls=ifoCampaigns.map(_ref=>{let{address}=_ref;return{address:getPointCenterIfoAddress(),name:'checkClaimStatus',params:[account,address]};});const claimStatuses=await multicallv2(pointCenterIfoABI,claimStatusCalls,{requireSuccess:false});// Get IFO data for all IFO's that are eligible to claim\nconst claimableIfoData=await multicallv2(pointCenterIfoABI,claimStatuses.reduce((accum,claimStatusArr,index)=>{if(claimStatusArr===null){return accum;}const[claimStatus]=claimStatusArr;if(claimStatus===true){return[...accum,{address:getPointCenterIfoAddress(),name:'ifos',params:[index]}];}return accum;},[]));// Transform response to an Achievement\nreturn claimableIfoData.reduce((accum,claimableIfoDataItem)=>{if(!campaignMap.has(claimableIfoDataItem.campaignId)){return accum;}const campaignMeta=campaignMap.get(claimableIfoDataItem.campaignId);const{address}=ifoCampaigns.find(ifoCampaign=>ifoCampaign.campaignId===claimableIfoDataItem.campaignId);return[...accum,{address,id:claimableIfoDataItem.campaignId,type:'ifo',title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:claimableIfoDataItem.numberPoints.toNumber()}];},[]);};","map":{"version":3,"names":["ifosList","campaignMap","multicallv2","getPointCenterIfoAddress","pointCenterIfoABI","getAchievementTitle","campaign","type","key","data","title","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","claimStatusCalls","map","_ref","address","name","params","claimStatuses","requireSuccess","claimableIfoData","reduce","accum","claimStatusArr","index","claimStatus","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","id","badge","points","numberPoints","toNumber"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/achievements.ts"],"sourcesContent":["import { ethers } from 'ethers'\r\nimport { Campaign } from 'config/constants/types'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement, TranslatableText } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\r\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: ethers.BigNumber\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'IFO Shopper: %title%',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\r\n    return {\r\n      address: getPointCenterIfoAddress(),\r\n      name: 'checkClaimStatus',\r\n      params: [account, address],\r\n    }\r\n  })\r\n\r\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\r\n    | [boolean][]\r\n    | null\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await multicallv2(\r\n    pointCenterIfoABI,\r\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\r\n      if (claimStatusArr === null) {\r\n        return accum\r\n      }\r\n\r\n      const [claimStatus] = claimStatusArr\r\n\r\n      if (claimStatus === true) {\r\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\r\n      }\r\n\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableIfoDataItem.campaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: claimableIfoDataItem.numberPoints.toNumber(),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}