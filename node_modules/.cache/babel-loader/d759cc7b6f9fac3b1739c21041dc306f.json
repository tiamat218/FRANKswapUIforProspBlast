{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { TokenAmount, ETHER } from '@pancakeswap/sdk';\nimport { useCallback, useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { ROUTER_ADDRESS } from '../config/constants';\nimport useTokenAllowance from './useTokenAllowance';\nimport { Field } from '../state/swap/actions';\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks';\nimport { computeSlippageAdjustedAmounts } from '../utils/prices';\nimport { calculateGasMargin } from '../utils';\nimport { useTokenContract } from './useContract';\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nexport function useApproveCallback(amountToApprove, spender) {\n  _s();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined;\n  const currentAllowance = useTokenAllowance(token, account !== null && account !== void 0 ? account : undefined, spender);\n  const pendingApproval = useHasPendingApproval(token === null || token === void 0 ? void 0 : token.address, spender); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN;\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED; // we might not have enough data to know whether or not we need to approve\n\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lessThan(amountToApprove) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [amountToApprove, currentAllowance, pendingApproval, spender]);\n  const tokenContract = useTokenContract(token === null || token === void 0 ? void 0 : token.address);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    if (!token) {\n      console.error('no token');\n      return;\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null');\n      return;\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve');\n      return;\n    }\n\n    if (!spender) {\n      console.error('no spender');\n      return;\n    }\n\n    let useExact = false;\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString());\n    }); // eslint-disable-next-line consistent-return\n\n    return tokenContract.approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\n      gasLimit: calculateGasMargin(estimatedGas)\n    }).then(response => {\n      addTransaction(response, {\n        summary: `Approve ${amountToApprove.currency.symbol}`,\n        approval: {\n          tokenAddress: token.address,\n          spender\n        }\n      });\n    }).catch(error => {\n      console.error('Failed to approve token', error);\n      throw error;\n    });\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction]);\n  return [approvalState, approve];\n} // wraps useApproveCallback in the context of a swap\n\n_s(useApproveCallback, \"plwsGYaNX4d3wLCzJ71NjiUoggk=\", false, function () {\n  return [useActiveWeb3React, useTokenAllowance, useHasPendingApproval, useTokenContract, useTransactionAdder];\n});\n\nexport function useApproveCallbackFromTrade(trade, allowedSlippage = 0) {\n  _s2();\n\n  const amountToApprove = useMemo(() => trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined, [trade, allowedSlippage]);\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS);\n}\n\n_s2(useApproveCallbackFromTrade, \"GmUgVOF70hjek2iOjUgFAqTvTUk=\", false, function () {\n  return [useApproveCallback];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useApproveCallback.ts"],"names":["MaxUint256","TokenAmount","ETHER","useCallback","useMemo","useActiveWeb3React","ROUTER_ADDRESS","useTokenAllowance","Field","useTransactionAdder","useHasPendingApproval","computeSlippageAdjustedAmounts","calculateGasMargin","useTokenContract","ApprovalState","useApproveCallback","amountToApprove","spender","account","token","undefined","currentAllowance","pendingApproval","address","approvalState","UNKNOWN","currency","APPROVED","lessThan","PENDING","NOT_APPROVED","tokenContract","addTransaction","approve","console","error","useExact","estimatedGas","estimateGas","catch","raw","toString","gasLimit","then","response","summary","symbol","approval","tokenAddress","useApproveCallbackFromTrade","trade","allowedSlippage","INPUT"],"mappings":"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","sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { ROUTER_ADDRESS } from '../config/constants'\r\nimport useTokenAllowance from './useTokenAllowance'\r\nimport { Field } from '../state/swap/actions'\r\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\r\nimport { calculateGasMargin } from '../utils'\r\nimport { useTokenContract } from './useContract'\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nexport function useApproveCallback(\r\n  amountToApprove?: CurrencyAmount,\r\n  spender?: string,\r\n): [ApprovalState, () => Promise<void>] {\r\n  const { account } = useActiveWeb3React()\r\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\r\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\r\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\r\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lessThan(amountToApprove)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED\r\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\r\n\r\n  const tokenContract = useTokenContract(token?.address)\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily')\r\n      return\r\n    }\r\n    if (!token) {\r\n      console.error('no token')\r\n      return\r\n    }\r\n\r\n    if (!tokenContract) {\r\n      console.error('tokenContract is null')\r\n      return\r\n    }\r\n\r\n    if (!amountToApprove) {\r\n      console.error('missing amount to approve')\r\n      return\r\n    }\r\n\r\n    if (!spender) {\r\n      console.error('no spender')\r\n      return\r\n    }\r\n\r\n    let useExact = false\r\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\r\n      // general fallback for tokens who restrict approval amounts\r\n      useExact = true\r\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\r\n    })\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    return tokenContract\r\n      .approve(spender, useExact ? amountToApprove.raw.toString() : MaxUint256, {\r\n        gasLimit: calculateGasMargin(estimatedGas),\r\n      })\r\n      .then((response: TransactionResponse) => {\r\n        addTransaction(response, {\r\n          summary: `Approve ${amountToApprove.currency.symbol}`,\r\n          approval: { tokenAddress: token.address, spender },\r\n        })\r\n      })\r\n      .catch((error: Error) => {\r\n        console.error('Failed to approve token', error)\r\n        throw error\r\n      })\r\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction])\r\n\r\n  return [approvalState, approve]\r\n}\r\n\r\n// wraps useApproveCallback in the context of a swap\r\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\r\n  const amountToApprove = useMemo(\r\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\r\n    [trade, allowedSlippage],\r\n  )\r\n\r\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}