{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { TokenAmount, Pair } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport { Interface } from '@ethersproject/abi';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useMultipleContractSingleData } from '../state/multicall/hooks';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI);\nexport let PairState;\n(function (PairState) {\n  PairState[PairState[\"LOADING\"] = 0] = \"LOADING\";\n  PairState[PairState[\"NOT_EXISTS\"] = 1] = \"NOT_EXISTS\";\n  PairState[PairState[\"EXISTS\"] = 2] = \"EXISTS\";\n  PairState[PairState[\"INVALID\"] = 3] = \"INVALID\";\n})(PairState || (PairState = {}));\nexport function usePairs(currencies) {\n  _s();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useMemo(() => currencies.map(([currencyA, currencyB]) => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]), [chainId, currencies]);\n  const pairAddresses = useMemo(() => tokens.map(([tokenA, tokenB]) => {\n    return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined;\n  }), [tokens]);\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves');\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const {\n        result: reserves,\n        loading\n      } = result;\n      const tokenA = tokens[i][0];\n      const tokenB = tokens[i][1];\n      if (loading) return [PairState.LOADING, null];\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null];\n      if (!reserves) return [PairState.NOT_EXISTS, null];\n      const {\n        reserve0,\n        reserve1\n      } = reserves;\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return [PairState.EXISTS, new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))];\n    });\n  }, [results, tokens]);\n}\n_s(usePairs, \"E9gbPqRdveknnYKMKRnUQnOW2SE=\", false, function () {\n  return [useActiveWeb3React, useMultipleContractSingleData];\n});\nexport function usePair(tokenA, tokenB) {\n  _s2();\n  return usePairs([[tokenA, tokenB]])[0];\n}\n_s2(usePair, \"AJtW1Ot38FORoSrNpUliDLrh4e4=\", false, function () {\n  return [usePairs];\n});","map":{"version":3,"names":["TokenAmount","Pair","useMemo","abi","IUniswapV2PairABI","Interface","useActiveWeb3React","useMultipleContractSingleData","wrappedCurrency","PAIR_INTERFACE","PairState","usePairs","currencies","_s","chainId","tokens","map","currencyA","currencyB","pairAddresses","tokenA","tokenB","equals","getAddress","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","token0","token1","sortsBefore","EXISTS","toString","usePair","_s2"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/usePairs.ts"],"sourcesContent":["import { TokenAmount, Pair, Currency } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\n\r\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\r\n\r\nexport enum PairState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID,\r\n}\r\n\r\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const tokens = useMemo(\r\n    () =>\r\n      currencies.map(([currencyA, currencyB]) => [\r\n        wrappedCurrency(currencyA, chainId),\r\n        wrappedCurrency(currencyB, chainId),\r\n      ]),\r\n    [chainId, currencies],\r\n  )\r\n\r\n  const pairAddresses = useMemo(\r\n    () =>\r\n      tokens.map(([tokenA, tokenB]) => {\r\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\r\n      }),\r\n    [tokens],\r\n  )\r\n\r\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\r\n\r\n  return useMemo(() => {\r\n    return results.map((result, i) => {\r\n      const { result: reserves, loading } = result\r\n      const tokenA = tokens[i][0]\r\n      const tokenB = tokens[i][1]\r\n\r\n      if (loading) return [PairState.LOADING, null]\r\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\r\n      if (!reserves) return [PairState.NOT_EXISTS, null]\r\n      const { reserve0, reserve1 } = reserves\r\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return [\r\n        PairState.EXISTS,\r\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString())),\r\n      ]\r\n    })\r\n  }, [results, tokens])\r\n}\r\n\r\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\r\n  return usePairs([[tokenA, tokenB]])[0]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}