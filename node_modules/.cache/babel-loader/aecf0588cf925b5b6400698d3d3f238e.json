{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { simpleRpcProvider } from 'utils/providers';\n\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\nconst useBlockCountdown = blockNumber => {\n  _s();\n  const timer = useRef(null);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  useEffect(() => {\n    const startCountdown = async () => {\n      const currentBlock = await simpleRpcProvider.getBlockNumber();\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME);\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current);\n        }\n        timer.current = setInterval(() => {\n          setSecondsRemaining(prevSecondsRemaining => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current);\n            }\n            return prevSecondsRemaining - 1;\n          });\n        }, 1000);\n      }\n    };\n    startCountdown();\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, [setSecondsRemaining, blockNumber, timer]);\n  return secondsRemaining;\n};\n_s(useBlockCountdown, \"L/8B19HXGe7mB9ThV0OJov/Kjlw=\");\nexport default useBlockCountdown;","map":{"version":3,"names":["useEffect","useRef","useState","BSC_BLOCK_TIME","simpleRpcProvider","useBlockCountdown","blockNumber","_s","timer","secondsRemaining","setSecondsRemaining","startCountdown","currentBlock","getBlockNumber","current","clearInterval","setInterval","prevSecondsRemaining"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useGetBlockCountdown.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,iBAAiB,QAAQ,iBAAiB;;AAEnD;AACA;AACA;AACA,MAAMC,iBAAiB,GAAIC,WAAmB,IAAK;EAAAC,EAAA;EACjD,MAAMC,KAAK,GAAGP,MAAM,CAAgC,IAAI,CAAC;EACzD,MAAM,CAACQ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE3DF,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,YAAY,GAAG,MAAMR,iBAAiB,CAACS,cAAc,CAAC,CAAC;MAE7D,IAAIP,WAAW,GAAGM,YAAY,EAAE;QAC9BF,mBAAmB,CAAC,CAACJ,WAAW,GAAGM,YAAY,IAAIT,cAAc,CAAC;;QAElE;QACA,IAAIK,KAAK,CAACM,OAAO,EAAE;UACjBC,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC;QAC9B;QAEAN,KAAK,CAACM,OAAO,GAAGE,WAAW,CAAC,MAAM;UAChCN,mBAAmB,CAAEO,oBAAoB,IAAK;YAC5C,IAAIA,oBAAoB,KAAK,CAAC,EAAE;cAC9BF,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC;YAC9B;YAEA,OAAOG,oBAAoB,GAAG,CAAC;UACjC,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;IAEDN,cAAc,CAAC,CAAC;IAEhB,OAAO,MAAM;MACXI,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,CAACJ,mBAAmB,EAAEJ,WAAW,EAAEE,KAAK,CAAC,CAAC;EAE7C,OAAOC,gBAAgB;AACzB,CAAC;AAAAF,EAAA,CApCKF,iBAAiB;AAsCvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}