{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\Desktop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Split from 'split-grid';\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit';\nimport debounce from 'lodash/debounce';\nimport delay from 'lodash/delay';\nimport { useAppDispatch } from 'state';\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks';\nimport { setChartPaneState } from 'state/predictions';\nimport { PredictionStatus } from 'state/types';\nimport { useTranslation } from 'contexts/Localization';\nimport TradingView from './components/TradingView';\nimport { ErrorNotification, PauseNotification } from './components/Notification';\nimport History from './History';\nimport Positions from './Positions'; // The value to set the chart when the user clicks the chart tab at the bottom\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr';\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({\n  theme\n}) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({\n  theme\n}) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({\n  theme\n}) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`;\n_c = ExpandChartButton;\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`;\n_c2 = SplitWrapper;\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`;\n_c3 = ChartPane;\nconst HistoryPane = styled.div`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({\n  isHistoryPaneOpen\n}) => isHistoryPaneOpen ? '384px' : 0};\n`;\n_c4 = HistoryPane;\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`;\n_c5 = StyledDesktop;\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`;\n_c6 = PositionPane;\nconst Gutter = styled.div`\n  background: ${({\n  theme\n}) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({\n  theme\n}) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`;\n_c7 = Gutter;\n\nconst Desktop = () => {\n  _s();\n\n  const splitWrapperRef = useRef();\n  const chartRef = useRef();\n  const gutterRef = useRef();\n  const isHistoryPaneOpen = useIsHistoryPaneOpen();\n  const isChartPaneOpen = useIsChartPaneOpen();\n  const dispatch = useAppDispatch();\n  const {\n    t\n  } = useTranslation();\n  const status = useGetPredictionsStatus();\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen;\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms';\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW; // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n\n      delay(() => {\n        splitWrapperRef.current.style.transition = '';\n      }, 150);\n    }\n\n    dispatch(setChartPaneState(newChartPaneState));\n  };\n\n  useEffect(() => {\n    const threshold = 100;\n    const handleDrag = debounce(() => {\n      const {\n        height\n      } = chartRef.current.getBoundingClientRect(); // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n\n      dispatch(setChartPaneState(height > threshold));\n    }, 50);\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [{\n        track: 1,\n        element: gutterRef.current\n      }]\n    });\n    return () => {\n      split.destroy();\n    };\n  }, [gutterRef, chartRef, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isChartPaneOpen && /*#__PURE__*/_jsxDEV(ExpandChartButton, {\n      variant: \"tertiary\",\n      scale: \"sm\",\n      startIcon: isChartPaneOpen ? /*#__PURE__*/_jsxDEV(ArrowDownIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(ChartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 60\n      }, this),\n      onClick: toggleChartPane,\n      children: isChartPaneOpen ? t('Close') : t('Charts')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StyledDesktop, {\n      children: [/*#__PURE__*/_jsxDEV(SplitWrapper, {\n        ref: splitWrapperRef,\n        children: [/*#__PURE__*/_jsxDEV(PositionPane, {\n          children: [status === PredictionStatus.ERROR && /*#__PURE__*/_jsxDEV(ErrorNotification, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 51\n          }, this), status === PredictionStatus.PAUSED && /*#__PURE__*/_jsxDEV(PauseNotification, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 52\n          }, this), status === PredictionStatus.LIVE && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Positions, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Gutter, {\n          ref: gutterRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChartPane, {\n          ref: chartRef,\n          children: /*#__PURE__*/_jsxDEV(TradingView, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HistoryPane, {\n        isHistoryPaneOpen: isHistoryPaneOpen,\n        children: /*#__PURE__*/_jsxDEV(History, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Desktop, \"bjbAJ4AUn+T4Dcai9Ve9kiqxumQ=\", false, function () {\n  return [useIsHistoryPaneOpen, useIsChartPaneOpen, useAppDispatch, useTranslation, useGetPredictionsStatus];\n});\n\n_c8 = Desktop;\nexport default Desktop;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"ExpandChartButton\");\n$RefreshReg$(_c2, \"SplitWrapper\");\n$RefreshReg$(_c3, \"ChartPane\");\n$RefreshReg$(_c4, \"HistoryPane\");\n$RefreshReg$(_c5, \"StyledDesktop\");\n$RefreshReg$(_c6, \"PositionPane\");\n$RefreshReg$(_c7, \"Gutter\");\n$RefreshReg$(_c8, \"Desktop\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/Desktop.tsx"],"names":["React","useEffect","useRef","styled","Split","ArrowDownIcon","Button","ChartIcon","debounce","delay","useAppDispatch","useGetPredictionsStatus","useIsChartPaneOpen","useIsHistoryPaneOpen","setChartPaneState","PredictionStatus","useTranslation","TradingView","ErrorNotification","PauseNotification","History","Positions","GRID_TEMPLATE_ROW","ExpandChartButton","theme","card","background","colors","text","mediaQueries","lg","SplitWrapper","div","ChartPane","HistoryPane","isHistoryPaneOpen","StyledDesktop","PositionPane","Gutter","dropdown","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","dispatch","t","status","toggleChartPane","newChartPaneState","current","style","transition","gridTemplateRows","threshold","handleDrag","height","getBoundingClientRect","split","dragInterval","snapOffset","onDrag","rowGutters","track","element","destroy","ERROR","PAUSED","LIVE"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && (\r\n              <div>\r\n                <Positions />\r\n              </div>\r\n            )}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n"]},"metadata":{},"sourceType":"module"}