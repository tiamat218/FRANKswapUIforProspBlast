{"ast":null,"code":"import{useState,useEffect}from'react';import{fetchCurrentLotteryIdAndMaxBuy,fetchLottery}from'state/lottery/helpers';import useRefresh from'hooks/useRefresh';const useFetchLotteryForPromos=()=>{const{slowRefresh}=useRefresh();const[lotteryId,setLotteryId]=useState(null);const[currentLotteryPrize,setCurrentLotteryPrize]=useState(null);useEffect(()=>{// get current lottery ID\nconst fetchCurrentID=async()=>{const{currentLotteryId}=await fetchCurrentLotteryIdAndMaxBuy();setLotteryId(currentLotteryId);};fetchCurrentID();},[setLotteryId]);useEffect(()=>{// get public data for current lottery\nconst fetchCurrentLotteryPrize=async()=>{const{amountCollectedInCake}=await fetchLottery(lotteryId);setCurrentLotteryPrize(amountCollectedInCake);};if(lotteryId){fetchCurrentLotteryPrize();}},[lotteryId,slowRefresh,setCurrentLotteryPrize]);return{currentLotteryPrize};};export default useFetchLotteryForPromos;","map":{"version":3,"names":["useState","useEffect","fetchCurrentLotteryIdAndMaxBuy","fetchLottery","useRefresh","useFetchLotteryForPromos","slowRefresh","lotteryId","setLotteryId","currentLotteryPrize","setCurrentLotteryPrize","fetchCurrentID","currentLotteryId","fetchCurrentLotteryPrize","amountCollectedInCake"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Home/hooks/useFetchLotteryForPromos.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\r\nimport useRefresh from 'hooks/useRefresh'\r\n\r\nconst useFetchLotteryForPromos = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [lotteryId, setLotteryId] = useState<string>(null)\r\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID\r\n    const fetchCurrentID = async () => {\r\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\r\n      setLotteryId(currentLotteryId)\r\n    }\r\n\r\n    fetchCurrentID()\r\n  }, [setLotteryId])\r\n\r\n  useEffect(() => {\r\n    // get public data for current lottery\r\n    const fetchCurrentLotteryPrize = async () => {\r\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\r\n      setCurrentLotteryPrize(amountCollectedInCake)\r\n    }\r\n\r\n    if (lotteryId) {\r\n      fetchCurrentLotteryPrize()\r\n    }\r\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\r\n\r\n  return { currentLotteryPrize }\r\n}\r\n\r\nexport default useFetchLotteryForPromos\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,8BAA8B,CAAEC,YAAY,KAAQ,uBAAuB,CACpF,MAAO,CAAAC,UAAU,KAAM,kBAAkB,CAEzC,KAAM,CAAAC,wBAAwB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAAEC,WAAY,CAAC,CAAGF,UAAU,CAAC,CAAC,CACpC,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGR,QAAQ,CAAS,IAAI,CAAC,CACxD,KAAM,CAACS,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGV,QAAQ,CAAS,IAAI,CAAC,CAE5EC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAU,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,KAAM,CAAEC,gBAAiB,CAAC,CAAG,KAAM,CAAAV,8BAA8B,CAAC,CAAC,CACnEM,YAAY,CAACI,gBAAgB,CAAC,CAChC,CAAC,CAEDD,cAAc,CAAC,CAAC,CAClB,CAAC,CAAE,CAACH,YAAY,CAAC,CAAC,CAElBP,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAY,wBAAwB,CAAG,KAAAA,CAAA,GAAY,CAC3C,KAAM,CAAEC,qBAAsB,CAAC,CAAG,KAAM,CAAAX,YAAY,CAACI,SAAS,CAAC,CAC/DG,sBAAsB,CAACI,qBAAqB,CAAC,CAC/C,CAAC,CAED,GAAIP,SAAS,CAAE,CACbM,wBAAwB,CAAC,CAAC,CAC5B,CACF,CAAC,CAAE,CAACN,SAAS,CAAED,WAAW,CAAEI,sBAAsB,CAAC,CAAC,CAEpD,MAAO,CAAED,mBAAoB,CAAC,CAChC,CAAC,CAED,cAAe,CAAAJ,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}