{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$(),\n    _s24 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { minBy, orderBy } from 'lodash';\nimport { useAppDispatch } from 'state';\nimport Nfts from 'config/constants/nfts';\nimport { fetchWalletNfts } from './collectibles';\nimport { parseBigNumberObj } from './predictions/helpers'; // /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n// Predictions\n\nexport const useGetRounds = () => {\n  _s();\n\n  const rounds = useSelector(state => state.predictions.rounds);\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return { ...accum,\n      [epoch]: parseBigNumberObj(rounds[epoch])\n    };\n  }, {});\n};\n\n_s(useGetRounds, \"NzcuGjY7/e8ANpMudDUPNEr2P38=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRound = epoch => {\n  _s2();\n\n  const round = useSelector(state => state.predictions.rounds[epoch]);\n  return parseBigNumberObj(round);\n};\n\n_s2(useGetRound, \"I9yr3H2jZEg2pVJJxnbwqUm8+Vg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetSortedRounds = () => {\n  _s3();\n\n  const roundData = useGetRounds();\n  return orderBy(Object.values(roundData), ['epoch'], ['asc']);\n};\n\n_s3(useGetSortedRounds, \"jFCo8rqHdnklGdNQF/awTvojkG0=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetBetByEpoch = (account, epoch) => {\n  _s4();\n\n  const bets = useSelector(state => state.predictions.ledgers);\n\n  if (!bets[account]) {\n    return null;\n  }\n\n  if (!bets[account][epoch]) {\n    return null;\n  }\n\n  return parseBigNumberObj(bets[account][epoch]);\n};\n\n_s4(useGetBetByEpoch, \"l2hU2dIovtccD4bBSsew9DdDw24=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsClaimable = epoch => {\n  _s5();\n\n  const claimableStatuses = useSelector(state => state.predictions.claimableStatuses);\n  return claimableStatuses[epoch] || false;\n};\n/**\r\n * Used to get the range of rounds to poll for\r\n */\n\n_s5(useGetIsClaimable, \"w8QNveyYtGfi9T0Sqff9LkqaoO0=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetEarliestEpoch = () => {\n  _s6();\n\n  return useSelector(state => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch');\n    return earliestRound === null || earliestRound === void 0 ? void 0 : earliestRound.epoch;\n  });\n};\n\n_s6(useGetEarliestEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsHistoryPaneOpen = () => {\n  _s7();\n\n  return useSelector(state => state.predictions.isHistoryPaneOpen);\n};\n\n_s7(useIsHistoryPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsChartPaneOpen = () => {\n  _s8();\n\n  return useSelector(state => state.predictions.isChartPaneOpen);\n};\n\n_s8(useIsChartPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentEpoch = () => {\n  _s9();\n\n  return useSelector(state => state.predictions.currentEpoch);\n};\n\n_s9(useGetCurrentEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIntervalBlocks = () => {\n  _s10();\n\n  return useSelector(state => state.predictions.intervalBlocks);\n};\n\n_s10(useGetIntervalBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetBufferBlocks = () => {\n  _s11();\n\n  return useSelector(state => state.predictions.bufferBlocks);\n};\n\n_s11(useGetBufferBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetTotalIntervalBlocks = () => {\n  _s12();\n\n  const intervalBlocks = useGetIntervalBlocks();\n  const bufferBlocks = useGetBufferBlocks();\n  return intervalBlocks + bufferBlocks;\n};\n\n_s12(useGetTotalIntervalBlocks, \"Tu40sOrNdwBfiHoai7qebXljDAY=\", false, function () {\n  return [useGetIntervalBlocks, useGetBufferBlocks];\n});\n\nexport const useGetCurrentRound = () => {\n  _s13();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  return rounds.find(round => round.epoch === currentEpoch);\n};\n\n_s13(useGetCurrentRound, \"cJlTwdlLYEKE4Qc5JxH6Xhb/WXY=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds];\n});\n\nexport const useGetPredictionsStatus = () => {\n  _s14();\n\n  return useSelector(state => state.predictions.status);\n};\n\n_s14(useGetPredictionsStatus, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryFilter = () => {\n  _s15();\n\n  return useSelector(state => state.predictions.historyFilter);\n};\n\n_s15(useGetHistoryFilter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  _s16();\n\n  return useSelector(state => state.predictions.currentRoundStartBlockNumber);\n};\n\n_s16(useGetCurrentRoundBlockNumber, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetMinBetAmount = () => {\n  _s17();\n\n  const minBetAmount = useSelector(state => state.predictions.minBetAmount);\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount]);\n};\n\n_s17(useGetMinBetAmount, \"0dRfTS7F/4osBkgeEhhyeRmd26g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRewardRate = () => {\n  _s18();\n\n  const rewardRate = useSelector(state => state.predictions.rewardRate);\n  return rewardRate / 100;\n};\n\n_s18(useGetRewardRate, \"lTwF82Fzexvd7Gewn8ORgBHi/OY=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsFetchingHistory = () => {\n  _s19();\n\n  return useSelector(state => state.predictions.isFetchingHistory);\n};\n\n_s19(useGetIsFetchingHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistory = () => {\n  _s20();\n\n  return useSelector(state => state.predictions.history);\n};\n\n_s20(useGetHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryByAccount = account => {\n  _s21();\n\n  const bets = useGetHistory();\n  return bets ? bets[account] : [];\n};\n\n_s21(useGetHistoryByAccount, \"Yrp7yExhLjDp2kAaHnofs1ZdL7U=\", false, function () {\n  return [useGetHistory];\n});\n\nexport const useGetLedgerByRoundId = (account, roundId) => {\n  _s22();\n\n  const ledgers = useSelector(state => state.predictions.ledgers);\n\n  if (!ledgers[account]) {\n    return null;\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null;\n  }\n\n  return ledgers[account][roundId];\n};\n\n_s22(useGetLedgerByRoundId, \"SiwK0RMfROek9ZWxxfWi0Br8aa8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetLastOraclePrice = () => {\n  _s23();\n\n  const lastOraclePrice = useSelector(state => state.predictions.lastOraclePrice);\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice);\n  }, [lastOraclePrice]);\n}; // Collectibles\n\n_s23(useGetLastOraclePrice, \"sP8ZCewbYE0zHEHJigP6zSqhRXs=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCollectibles = () => {\n  _s24();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.collectibles);\n  const identifiers = Object.keys(data);\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account));\n    }\n  }, [isInitialized, account, dispatch]);\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter(nft => identifiers.includes(nft.identifier))\n  };\n};\n\n_s24(useGetCollectibles, \"+OJP6i7Yx7acr6GgAtxV2TRO7fk=\", false, function () {\n  return [useWeb3React, useAppDispatch, useSelector];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/hooks.ts"],"names":["useEffect","useMemo","useWeb3React","useSelector","ethers","minBy","orderBy","useAppDispatch","Nfts","fetchWalletNfts","parseBigNumberObj","useGetRounds","rounds","state","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","account","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetBufferBlocks","bufferBlocks","useGetTotalIntervalBlocks","useGetCurrentRound","find","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","BigNumber","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","useGetLedgerByRoundId","roundId","useGetLastOraclePrice","lastOraclePrice","useGetCollectibles","dispatch","isInitialized","isLoading","data","collectibles","identifiers","tokenIds","nftsInWallet","filter","nft","includes","identifier"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\r\nimport { fetchWalletNfts } from './collectibles'\r\nimport { parseBigNumberObj } from './predictions/helpers'\r\n\r\n// /!\\\r\n// Don't add anything here. These hooks will be moved the the predictions folder\r\n\r\n// Predictions\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.intervalBlocks)\r\n}\r\n\r\nexport const useGetBufferBlocks = () => {\r\n  return useSelector((state: State) => state.predictions.bufferBlocks)\r\n}\r\n\r\nexport const useGetTotalIntervalBlocks = () => {\r\n  const intervalBlocks = useGetIntervalBlocks()\r\n  const bufferBlocks = useGetBufferBlocks()\r\n  return intervalBlocks + bufferBlocks\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  return rounds.find((round) => round.epoch === currentEpoch)\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetCurrentRoundBlockNumber = () => {\r\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetRewardRate = () => {\r\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\r\n  return rewardRate / 100\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\r\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!ledgers[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!ledgers[account][roundId]) {\r\n    return null\r\n  }\r\n\r\n  return ledgers[account][roundId]\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n// Collectibles\r\nexport const useGetCollectibles = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\r\n  const identifiers = Object.keys(data)\r\n\r\n  useEffect(() => {\r\n    // Fetch nfts only if we have not done so already\r\n    if (!isInitialized) {\r\n      dispatch(fetchWalletNfts(account))\r\n    }\r\n  }, [isInitialized, account, dispatch])\r\n\r\n  return {\r\n    isInitialized,\r\n    isLoading,\r\n    tokenIds: data,\r\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}