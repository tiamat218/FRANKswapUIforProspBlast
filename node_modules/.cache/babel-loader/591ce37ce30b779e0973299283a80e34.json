{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\YourHistoryCard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { CardHeader, Card, CardBody, Text, CardFooter, ArrowBackIcon, Flex, Heading, Skeleton, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { LotteryStatus } from 'config/constants/types';\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks';\nimport { fetchLottery } from 'state/lottery/helpers';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport FinishedRoundTable from './FinishedRoundTable';\nimport { WhiteBunny } from '../../svgs';\nimport BuyTicketsButton from '../BuyTicketsButton';\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body';\nimport { processLotteryResponse, getDrawnDate } from '../../helpers';\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`;\n_c = StyledCard;\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 240px;\n`;\n_c2 = StyledCardBody;\n\nconst YourHistoryCard = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false);\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null);\n  const [selectedLotteryId, setSelectedLotteryId] = useState(null);\n  const {\n    isTransitioning,\n    currentRound: {\n      status\n    }\n  } = useLottery();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning;\n\n  const handleHistoryRowClick = async lotteryId => {\n    setShouldShowRoundDetail(true);\n    setSelectedLotteryId(lotteryId);\n    const lotteryData = await fetchLottery(lotteryId);\n    const processedLotteryData = processLotteryResponse(lotteryData);\n    setSelectedLotteryInfo(processedLotteryData);\n  };\n\n  const clearState = () => {\n    setShouldShowRoundDetail(false);\n    setSelectedLotteryInfo(null);\n    setSelectedLotteryId(null);\n  };\n\n  const getHeader = () => {\n    if (shouldShowRoundDetail) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n          cursor: \"pointer\",\n          onClick: () => clearState(),\n          mr: \"20px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: \"column\",\n          alignItems: \"flex-start\",\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            mb: \"4px\",\n            children: [t('Round'), \" \", selectedLotteryId || '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), (selectedLotteryInfo === null || selectedLotteryInfo === void 0 ? void 0 : selectedLotteryInfo.endTime) ? /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            children: [t('Drawn'), \" \", getDrawnDate(selectedLotteryInfo.endTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"185px\",\n            height: \"21px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"md\",\n      children: t('Rounds')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  };\n\n  const getBody = () => {\n    if (shouldShowRoundDetail) {\n      return /*#__PURE__*/_jsxDEV(PreviousRoundCardBody, {\n        lotteryData: selectedLotteryInfo,\n        lotteryId: selectedLotteryId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this);\n    }\n\n    const claimableRounds = userLotteryData === null || userLotteryData === void 0 ? void 0 : userLotteryData.rounds.filter(round => {\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE;\n    });\n\n    if (!account) {\n      return /*#__PURE__*/_jsxDEV(StyledCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          color: \"textSubtle\",\n          mb: \"16px\",\n          children: t('Connect your wallet to check your history')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (claimableRounds.length === 0) {\n      return /*#__PURE__*/_jsxDEV(StyledCardBody, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          maxWidth: \"280px\",\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            mb: \"16px\",\n            children: [/*#__PURE__*/_jsxDEV(WhiteBunny, {\n              height: \"24px\",\n              mr: \"8px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Text, {\n              textAlign: \"left\",\n              children: t('No lottery history found')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            textAlign: \"center\",\n            color: \"textSubtle\",\n            mb: \"16px\",\n            children: t('Buy tickets for the next round!')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BuyTicketsButton, {\n            disabled: ticketBuyIsDisabled,\n            width: \"100%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(FinishedRoundTable, {\n      handleHistoryRowClick: handleHistoryRowClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 12\n    }, this);\n  };\n\n  const getFooter = () => {\n    if (selectedLotteryInfo) {\n      return /*#__PURE__*/_jsxDEV(PreviousRoundCardFooter, {\n        lotteryData: selectedLotteryInfo,\n        lotteryId: selectedLotteryId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(CardFooter, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: t('Only showing data for Lottery V2')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: getHeader()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), getBody(), getFooter()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(YourHistoryCard, \"y6QxHTle/ipuemFgfPkftmnMRN4=\", false, function () {\n  return [useTranslation, useWeb3React, useLottery, useGetUserLotteriesGraphData];\n});\n\n_c3 = YourHistoryCard;\nexport default YourHistoryCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledCardBody\");\n$RefreshReg$(_c3, \"YourHistoryCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/YourHistoryCard/index.tsx"],"names":["React","useState","useWeb3React","styled","CardHeader","Card","CardBody","Text","CardFooter","ArrowBackIcon","Flex","Heading","Skeleton","Box","useTranslation","LotteryStatus","useGetUserLotteriesGraphData","useLottery","fetchLottery","ConnectWalletButton","FinishedRoundTable","WhiteBunny","BuyTicketsButton","PreviousRoundCardBody","processLotteryResponse","getDrawnDate","PreviousRoundCardFooter","StyledCard","theme","mediaQueries","md","StyledCardBody","YourHistoryCard","t","account","shouldShowRoundDetail","setShouldShowRoundDetail","selectedLotteryInfo","setSelectedLotteryInfo","selectedLotteryId","setSelectedLotteryId","isTransitioning","currentRound","status","userLotteryData","ticketBuyIsDisabled","OPEN","handleHistoryRowClick","lotteryId","lotteryData","processedLotteryData","clearState","getHeader","endTime","getBody","claimableRounds","rounds","filter","round","toLowerCase","CLAIMABLE","length","getFooter"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport {\r\n  CardHeader,\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  CardFooter,\r\n  ArrowBackIcon,\r\n  Flex,\r\n  Heading,\r\n  Skeleton,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryRound } from 'state/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport FinishedRoundTable from './FinishedRoundTable'\r\nimport { WhiteBunny } from '../../svgs'\r\nimport BuyTicketsButton from '../BuyTicketsButton'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport { processLotteryResponse, getDrawnDate } from '../../helpers'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 240px;\r\n`\r\n\r\nconst YourHistoryCard = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false)\r\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState<LotteryRound>(null)\r\n  const [selectedLotteryId, setSelectedLotteryId] = useState<string>(null)\r\n\r\n  const {\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  const handleHistoryRowClick = async (lotteryId: string) => {\r\n    setShouldShowRoundDetail(true)\r\n    setSelectedLotteryId(lotteryId)\r\n    const lotteryData = await fetchLottery(lotteryId)\r\n    const processedLotteryData = processLotteryResponse(lotteryData)\r\n    setSelectedLotteryInfo(processedLotteryData)\r\n  }\r\n\r\n  const clearState = () => {\r\n    setShouldShowRoundDetail(false)\r\n    setSelectedLotteryInfo(null)\r\n    setSelectedLotteryId(null)\r\n  }\r\n\r\n  const getHeader = () => {\r\n    if (shouldShowRoundDetail) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <ArrowBackIcon cursor=\"pointer\" onClick={() => clearState()} mr=\"20px\" />\r\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\" justifyContent=\"center\">\r\n            <Heading scale=\"md\" mb=\"4px\">\r\n              {t('Round')} {selectedLotteryId || ''}\r\n            </Heading>\r\n            {selectedLotteryInfo?.endTime ? (\r\n              <Text fontSize=\"14px\">\r\n                {t('Drawn')} {getDrawnDate(selectedLotteryInfo.endTime)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"185px\" height=\"21px\" />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return <Heading scale=\"md\">{t('Rounds')}</Heading>\r\n  }\r\n\r\n  const getBody = () => {\r\n    if (shouldShowRoundDetail) {\r\n      return <PreviousRoundCardBody lotteryData={selectedLotteryInfo} lotteryId={selectedLotteryId} />\r\n    }\r\n\r\n    const claimableRounds = userLotteryData?.rounds.filter((round) => {\r\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\r\n    })\r\n\r\n    if (!account) {\r\n      return (\r\n        <StyledCardBody>\r\n          <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Connect your wallet to check your history')}\r\n          </Text>\r\n          <ConnectWalletButton />\r\n        </StyledCardBody>\r\n      )\r\n    }\r\n    if (claimableRounds.length === 0) {\r\n      return (\r\n        <StyledCardBody>\r\n          <Box maxWidth=\"280px\">\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"16px\">\r\n              <WhiteBunny height=\"24px\" mr=\"8px\" /> <Text textAlign=\"left\">{t('No lottery history found')}</Text>\r\n            </Flex>\r\n            <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\r\n              {t('Buy tickets for the next round!')}\r\n            </Text>\r\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} width=\"100%\" />\r\n          </Box>\r\n        </StyledCardBody>\r\n      )\r\n    }\r\n    return <FinishedRoundTable handleHistoryRowClick={handleHistoryRowClick} />\r\n  }\r\n\r\n  const getFooter = () => {\r\n    if (selectedLotteryInfo) {\r\n      return <PreviousRoundCardFooter lotteryData={selectedLotteryInfo} lotteryId={selectedLotteryId} />\r\n    }\r\n    return (\r\n      <CardFooter>\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {t('Only showing data for Lottery V2')}\r\n          </Text>\r\n        </Flex>\r\n      </CardFooter>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardHeader>{getHeader()}</CardHeader>\r\n      {getBody()}\r\n      {getFooter()}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default YourHistoryCard\r\n"]},"metadata":{},"sourceType":"module"}