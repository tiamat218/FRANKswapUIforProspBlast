{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { getPredictionsContract } from 'utils/contractHelpers';\nconst useIsRefundable = epoch => {\n  _s();\n  const [isRefundable, setIsRefundable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract();\n      const refundable = await predictionsContract.refundable(epoch, account);\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account);\n        setIsRefundable(ledger.claimed === false);\n      } else {\n        setIsRefundable(false);\n      }\n    };\n    if (account) {\n      fetchRefundableStatus();\n    }\n  }, [account, epoch, setIsRefundable]);\n  return {\n    isRefundable,\n    setIsRefundable\n  };\n};\n_s(useIsRefundable, \"bb238Rk90BpggObAKig+6Y0BDz8=\", false, function () {\n  return [useWeb3React];\n});\nexport default useIsRefundable;","map":{"version":3,"names":["useEffect","useState","useWeb3React","getPredictionsContract","useIsRefundable","epoch","_s","isRefundable","setIsRefundable","account","fetchRefundableStatus","predictionsContract","refundable","ledger","claimed"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Predictions/hooks/useIsRefundable.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,sBAAsB,QAAQ,uBAAuB;AAE9D,MAAMC,eAAe,GAAIC,KAAa,IAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM;IAAEQ;EAAQ,CAAC,GAAGP,YAAY,CAAC,CAAC;EAElCF,SAAS,CAAC,MAAM;IACd,MAAMU,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,MAAMC,mBAAmB,GAAGR,sBAAsB,CAAC,CAAC;MACpD,MAAMS,UAAU,GAAG,MAAMD,mBAAmB,CAACC,UAAU,CAACP,KAAK,EAAEI,OAAO,CAAC;MAEvE,IAAIG,UAAU,EAAE;QACd;QACA,MAAMC,MAAM,GAAG,MAAMF,mBAAmB,CAACE,MAAM,CAACR,KAAK,EAAEI,OAAO,CAAC;QAC/DD,eAAe,CAACK,MAAM,CAACC,OAAO,KAAK,KAAK,CAAC;MAC3C,CAAC,MAAM;QACLN,eAAe,CAAC,KAAK,CAAC;MACxB;IACF,CAAC;IAED,IAAIC,OAAO,EAAE;MACXC,qBAAqB,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACD,OAAO,EAAEJ,KAAK,EAAEG,eAAe,CAAC,CAAC;EAErC,OAAO;IAAED,YAAY;IAAEC;EAAgB,CAAC;AAC1C,CAAC;AAAAF,EAAA,CAxBKF,eAAe;EAAA,QAECF,YAAY;AAAA;AAwBlC,eAAeE,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}