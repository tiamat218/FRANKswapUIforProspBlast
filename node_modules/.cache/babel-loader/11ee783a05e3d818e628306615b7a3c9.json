{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{request,gql}from'graphql-request';import{campaignMap}from'config/constants/campaigns';import{GRAPH_API_PROFILE}from'config/constants/endpoints';import{getAchievementTitle,getAchievementDescription}from'utils/achievements';/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */export const getUserPointIncreaseEvents=async account=>{try{const{user}=await request(GRAPH_API_PROFILE,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getUserPointIncreaseEvents($account: ID!) {\\n          user(id: $account) {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"]))),{account:account.toLowerCase()});return user.points;}catch(error){return null;}};/**\r\n * Gets all user point increase events and adds achievement meta\r\n */export const getAchievements=async account=>{const pointIncreaseEvents=await getUserPointIncreaseEvents(account);if(!pointIncreaseEvents){return[];}return pointIncreaseEvents.reduce((accum,userPoint)=>{if(!campaignMap.has(userPoint.campaignId)){return accum;}const campaignMeta=campaignMap.get(userPoint.campaignId);return[...accum,{id:userPoint.campaignId,type:campaignMeta.type,address:userPoint.id,title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(userPoint.points)}];},[]);};","map":{"version":3,"names":["request","gql","campaignMap","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","user","_templateObject","_taggedTemplateLiteral","toLowerCase","points","error","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","has","campaignId","campaignMeta","get","id","type","address","title","description","badge","Number"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/achievements/helpers.ts"],"sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    if (!campaignMap.has(userPoint.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"],"mappings":"2MAAA,OAASA,OAAO,CAAEC,GAAG,KAAQ,iBAAiB,CAC9C,OAASC,WAAW,KAAQ,4BAA4B,CACxD,OAASC,iBAAiB,KAAQ,4BAA4B,CAE9D,OAASC,mBAAmB,CAAEC,yBAAyB,KAAQ,oBAAoB,CAQnF;AACA;AACA,GACA,MAAO,MAAM,CAAAC,0BAA0B,CAAG,KAAO,CAAAC,OAAe,EAAwC,CACtG,GAAI,CACF,KAAM,CAAEC,IAAK,CAAC,CAAG,KAAM,CAAAR,OAAO,CAC5BG,iBAAiB,CACjBF,GAAG,CAAAQ,eAAA,GAAAA,eAAA,CAAAC,sBAAA,2OAWH,CACEH,OAAO,CAAEA,OAAO,CAACI,WAAW,CAAC,CAC/B,CACF,CAAC,CAED,MAAO,CAAAH,IAAI,CAACI,MAAM,CACpB,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAO,CAAAP,OAAe,EAA6B,CAChF,KAAM,CAAAQ,mBAAmB,CAAG,KAAM,CAAAT,0BAA0B,CAACC,OAAO,CAAC,CAErE,GAAI,CAACQ,mBAAmB,CAAE,CACxB,MAAO,EAAE,CACX,CAEA,MAAO,CAAAA,mBAAmB,CAACC,MAAM,CAAC,CAACC,KAAK,CAAEC,SAAS,GAAK,CACtD,GAAI,CAAChB,WAAW,CAACiB,GAAG,CAACD,SAAS,CAACE,UAAU,CAAC,CAAE,CAC1C,MAAO,CAAAH,KAAK,CACd,CAEA,KAAM,CAAAI,YAAY,CAAGnB,WAAW,CAACoB,GAAG,CAACJ,SAAS,CAACE,UAAU,CAAC,CAE1D,MAAO,CACL,GAAGH,KAAK,CACR,CACEM,EAAE,CAAEL,SAAS,CAACE,UAAU,CACxBI,IAAI,CAAEH,YAAY,CAACG,IAAI,CACvBC,OAAO,CAAEP,SAAS,CAACK,EAAE,CACrBG,KAAK,CAAEtB,mBAAmB,CAACiB,YAAY,CAAC,CACxCM,WAAW,CAAEtB,yBAAyB,CAACgB,YAAY,CAAC,CACpDO,KAAK,CAAEP,YAAY,CAACO,KAAK,CACzBhB,MAAM,CAAEiB,MAAM,CAACX,SAAS,CAACN,MAAM,CACjC,CAAC,CACF,CACH,CAAC,CAAE,EAAE,CAAC,CACR,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}