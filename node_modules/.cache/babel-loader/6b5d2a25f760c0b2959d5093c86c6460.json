{"ast":null,"code":"import{useEffect,useReducer,useRef}from'react';import{noop}from'lodash';import{useWeb3React}from'@web3-react/core';import useToast from'hooks/useToast';import{useTranslation}from'contexts/Localization';const initialState={approvalState:'idle',confirmState:'idle'};const reducer=(state,actions)=>{switch(actions.type){case'requires_approval':return{...state,approvalState:'success'};case'approve_sending':return{...state,approvalState:'loading'};case'approve_receipt':return{...state,approvalState:'success'};case'approve_error':return{...state,approvalState:'fail'};case'confirm_sending':return{...state,confirmState:'loading'};case'confirm_receipt':return{...state,confirmState:'success'};case'confirm_error':return{...state,confirmState:'fail'};default:return state;}};const useApproveConfirmTransaction=_ref=>{let{onApprove,onConfirm,onRequiresApproval,onSuccess=noop,onApproveSuccess=noop}=_ref;const{t}=useTranslation();const{account}=useWeb3React();const[state,dispatch]=useReducer(reducer,initialState);const handlePreApprove=useRef(onRequiresApproval);const{toastError}=useToast();// Check if approval is necessary, re-check if account changes\nuseEffect(()=>{if(account&&handlePreApprove.current){handlePreApprove.current().then(result=>{if(result){dispatch({type:'requires_approval'});}});}},[account,handlePreApprove,dispatch]);return{isApproving:state.approvalState==='loading',isApproved:state.approvalState==='success',isConfirming:state.confirmState==='loading',isConfirmed:state.confirmState==='success',handleApprove:async()=>{try{const tx=await onApprove();dispatch({type:'approve_sending'});const receipt=await tx.wait();if(receipt.status){dispatch({type:'approve_receipt'});onApproveSuccess(state);}}catch(error){dispatch({type:'approve_error'});toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));}},handleConfirm:async()=>{dispatch({type:'confirm_sending'});try{const tx=await onConfirm();const receipt=await tx.wait();if(receipt.status){dispatch({type:'confirm_receipt'});onSuccess(state);}}catch(error){dispatch({type:'confirm_error'});toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));}}};};export default useApproveConfirmTransaction;","map":{"version":3,"names":["useEffect","useReducer","useRef","noop","useWeb3React","useToast","useTranslation","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","_ref","onApprove","onConfirm","onRequiresApproval","onSuccess","onApproveSuccess","t","account","dispatch","handlePreApprove","toastError","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","tx","receipt","wait","status","error","handleConfirm"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useApproveConfirmTransaction.ts"],"sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => ethers.providers.TransactionResponse\r\n  onConfirm: () => ethers.providers.TransactionResponse\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: (state: State) => void\r\n  onApproveSuccess?: (state: State) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess(state)\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async () => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm()\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess(state)\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}