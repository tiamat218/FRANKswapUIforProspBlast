{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'; // combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\n\nexport default function useTransactionDeadline() {\n  _s();\n\n  const ttl = useSelector(state => state.user.userDeadline);\n  const blockTimestamp = useCurrentBlockTimestamp();\n  return useMemo(() => {\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl);\n    return undefined;\n  }, [blockTimestamp, ttl]);\n}\n\n_s(useTransactionDeadline, \"YCspSiOEEEhRmWpUH3Wve0i/eXU=\", false, function () {\n  return [useSelector, useCurrentBlockTimestamp];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useTransactionDeadline.ts"],"names":["useMemo","useSelector","useCurrentBlockTimestamp","useTransactionDeadline","ttl","state","user","userDeadline","blockTimestamp","add","undefined"],"mappings":";;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,wBAAP,MAAqC,4BAArC,C,CAEA;;AACA,eAAe,SAASC,sBAAT,GAAyD;AAAA;;AACtE,QAAMC,GAAG,GAAGH,WAAW,CAAoBI,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,YAAzC,CAAvB;AACA,QAAMC,cAAc,GAAGN,wBAAwB,EAA/C;AACA,SAAOF,OAAO,CAAC,MAAM;AACnB,QAAIQ,cAAc,IAAIJ,GAAtB,EAA2B,OAAOI,cAAc,CAACC,GAAf,CAAmBL,GAAnB,CAAP;AAC3B,WAAOM,SAAP;AACD,GAHa,EAGX,CAACF,cAAD,EAAiBJ,GAAjB,CAHW,CAAd;AAID;;GAPuBD,sB;UACVF,W,EACWC,wB","sourcesContent":["import { BigNumber } from 'ethers'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../state'\r\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\r\n\r\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\r\nexport default function useTransactionDeadline(): BigNumber | undefined {\r\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\r\n  const blockTimestamp = useCurrentBlockTimestamp()\r\n  return useMemo(() => {\r\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\r\n    return undefined\r\n  }, [blockTimestamp, ttl])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}