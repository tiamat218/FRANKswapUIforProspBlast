{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import{Card,Text,Skeleton,CardHeader,Box}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useLottery}from'state/lottery/hooks';import{fetchLottery}from'state/lottery/helpers';import{LotteryStatus}from'config/constants/types';import RoundSwitcher from'./RoundSwitcher';import{getDrawnDate,processLotteryResponse}from'../../helpers';import PreviousRoundCardBody from'../PreviousRoundCard/Body';import PreviousRoundCardFooter from'../PreviousRoundCard/Footer';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n\\n  \",\" {\\n    width: 756px;\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.mediaQueries.md;});const StyledCardHeader=styled(CardHeader)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  z-index: 2;\\n  background: none;\\n  border-bottom: 1px \",\" solid;\\n\"])),_ref2=>{let{theme}=_ref2;return theme.colors.cardBorder;});const AllHistoryCard=()=>{const{t}=useTranslation();const{currentLotteryId,currentRound:{status,isLoading}}=useLottery();const[latestRoundId,setLatestRoundId]=useState(null);const[selectedRoundId,setSelectedRoundId]=useState('');const[selectedLotteryInfo,setSelectedLotteryInfo]=useState(null);const timer=useRef(null);useEffect(()=>{if(currentLotteryId){const currentLotteryIdAsInt=currentLotteryId?parseInt(currentLotteryId):null;const mostRecentFinishedRoundId=status===LotteryStatus.CLAIMABLE?currentLotteryIdAsInt:currentLotteryIdAsInt-1;setLatestRoundId(mostRecentFinishedRoundId);setSelectedRoundId(mostRecentFinishedRoundId.toString());}},[currentLotteryId,status]);useEffect(()=>{setSelectedLotteryInfo(null);const fetchLotteryData=async()=>{const lotteryData=await fetchLottery(selectedRoundId);const processedLotteryData=processLotteryResponse(lotteryData);setSelectedLotteryInfo(processedLotteryData);};timer.current=setInterval(()=>{if(selectedRoundId){fetchLotteryData();}clearInterval(timer.current);},1000);return()=>clearInterval(timer.current);},[selectedRoundId]);const handleInputChange=event=>{const{target:{value}}=event;if(value){setSelectedRoundId(value);if(parseInt(value,10)<=0){setSelectedRoundId('');}if(parseInt(value,10)>=latestRoundId){setSelectedRoundId(latestRoundId.toString());}}else{setSelectedRoundId('');}};const handleArrowButonPress=targetRound=>{if(targetRound){setSelectedRoundId(targetRound.toString());}else{// targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\nsetSelectedRoundId('1');}};return/*#__PURE__*/_jsxs(StyledCard,{children:[/*#__PURE__*/_jsxs(StyledCardHeader,{children:[/*#__PURE__*/_jsx(RoundSwitcher,{isLoading:isLoading,selectedRoundId:selectedRoundId,mostRecentRound:latestRoundId,handleInputChange:handleInputChange,handleArrowButonPress:handleArrowButonPress}),/*#__PURE__*/_jsx(Box,{mt:\"8px\",children:(selectedLotteryInfo===null||selectedLotteryInfo===void 0?void 0:selectedLotteryInfo.endTime)?/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",children:[t('Drawn'),\" \",getDrawnDate(selectedLotteryInfo.endTime)]}):/*#__PURE__*/_jsx(Skeleton,{width:\"185px\",height:\"21px\"})})]}),/*#__PURE__*/_jsx(PreviousRoundCardBody,{lotteryData:selectedLotteryInfo,lotteryId:selectedRoundId}),/*#__PURE__*/_jsx(PreviousRoundCardFooter,{lotteryData:selectedLotteryInfo,lotteryId:selectedRoundId})]});};export default AllHistoryCard;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","Card","Text","Skeleton","CardHeader","Box","useTranslation","useLottery","fetchLottery","LotteryStatus","RoundSwitcher","getDrawnDate","processLotteryResponse","PreviousRoundCardBody","PreviousRoundCardFooter","jsx","_jsx","jsxs","_jsxs","StyledCard","_templateObject","_taggedTemplateLiteral","_ref","theme","mediaQueries","md","StyledCardHeader","_templateObject2","_ref2","colors","cardBorder","AllHistoryCard","t","currentLotteryId","currentRound","status","isLoading","latestRoundId","setLatestRoundId","selectedRoundId","setSelectedRoundId","selectedLotteryInfo","setSelectedLotteryInfo","timer","currentLotteryIdAsInt","parseInt","mostRecentFinishedRoundId","CLAIMABLE","toString","fetchLotteryData","lotteryData","processedLotteryData","current","setInterval","clearInterval","handleInputChange","event","target","value","handleArrowButonPress","targetRound","children","mostRecentRound","mt","endTime","fontSize","width","height","lotteryId"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/AllHistoryCard/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport RoundSwitcher from './RoundSwitcher'\r\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardHeader = styled(CardHeader)`\r\n  z-index: 2;\r\n  background: none;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nconst AllHistoryCard = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    currentLotteryId,\r\n    currentRound: { status, isLoading },\r\n  } = useLottery()\r\n  const [latestRoundId, setLatestRoundId] = useState(null)\r\n  const [selectedRoundId, setSelectedRoundId] = useState('')\r\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null)\r\n  const timer = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\r\n      const mostRecentFinishedRoundId =\r\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\r\n      setLatestRoundId(mostRecentFinishedRoundId)\r\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\r\n    }\r\n  }, [currentLotteryId, status])\r\n\r\n  useEffect(() => {\r\n    setSelectedLotteryInfo(null)\r\n\r\n    const fetchLotteryData = async () => {\r\n      const lotteryData = await fetchLottery(selectedRoundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      setSelectedLotteryInfo(processedLotteryData)\r\n    }\r\n\r\n    timer.current = setInterval(() => {\r\n      if (selectedRoundId) {\r\n        fetchLotteryData()\r\n      }\r\n      clearInterval(timer.current)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [selectedRoundId])\r\n\r\n  const handleInputChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    if (value) {\r\n      setSelectedRoundId(value)\r\n      if (parseInt(value, 10) <= 0) {\r\n        setSelectedRoundId('')\r\n      }\r\n      if (parseInt(value, 10) >= latestRoundId) {\r\n        setSelectedRoundId(latestRoundId.toString())\r\n      }\r\n    } else {\r\n      setSelectedRoundId('')\r\n    }\r\n  }\r\n\r\n  const handleArrowButonPress = (targetRound) => {\r\n    if (targetRound) {\r\n      setSelectedRoundId(targetRound.toString())\r\n    } else {\r\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\r\n      setSelectedRoundId('1')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardHeader>\r\n        <RoundSwitcher\r\n          isLoading={isLoading}\r\n          selectedRoundId={selectedRoundId}\r\n          mostRecentRound={latestRoundId}\r\n          handleInputChange={handleInputChange}\r\n          handleArrowButonPress={handleArrowButonPress}\r\n        />\r\n        <Box mt=\"8px\">\r\n          {selectedLotteryInfo?.endTime ? (\r\n            <Text fontSize=\"14px\">\r\n              {t('Drawn')} {getDrawnDate(selectedLotteryInfo.endTime)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton width=\"185px\" height=\"21px\" />\r\n          )}\r\n        </Box>\r\n      </StyledCardHeader>\r\n      <PreviousRoundCardBody lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n      <PreviousRoundCardFooter lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default AllHistoryCard\r\n"],"mappings":"8NAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,IAAI,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,GAAG,KAAQ,oBAAoB,CAC1E,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,UAAU,KAAQ,qBAAqB,CAChD,OAASC,YAAY,KAAQ,uBAAuB,CACpD,OAASC,aAAa,KAAQ,wBAAwB,CACtD,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,OAASC,YAAY,CAAEC,sBAAsB,KAAQ,eAAe,CACpE,MAAO,CAAAC,qBAAqB,KAAM,2BAA2B,CAC7D,MAAO,CAAAC,uBAAuB,KAAM,6BAA6B,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjE,KAAM,CAAAC,UAAU,CAAGnB,MAAM,CAACC,IAAI,CAAC,CAAAmB,eAAA,GAAAA,eAAA,CAAAC,sBAAA,6DAG3BC,IAAA,MAAC,CAAEC,KAAM,CAAC,CAAAD,IAAA,OAAK,CAAAC,KAAK,CAACC,YAAY,CAACC,EAAE,GAGvC,CAED,KAAM,CAAAC,gBAAgB,CAAG1B,MAAM,CAACI,UAAU,CAAC,CAAAuB,gBAAA,GAAAA,gBAAA,CAAAN,sBAAA,+EAGpBO,KAAA,MAAC,CAAEL,KAAM,CAAC,CAAAK,KAAA,OAAK,CAAAL,KAAK,CAACM,MAAM,CAACC,UAAU,GAC5D,CAED,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAEC,CAAE,CAAC,CAAG1B,cAAc,CAAC,CAAC,CAC9B,KAAM,CACJ2B,gBAAgB,CAChBC,YAAY,CAAE,CAAEC,MAAM,CAAEC,SAAU,CACpC,CAAC,CAAG7B,UAAU,CAAC,CAAC,CAChB,KAAM,CAAC8B,aAAa,CAAEC,gBAAgB,CAAC,CAAGzC,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAAC0C,eAAe,CAAEC,kBAAkB,CAAC,CAAG3C,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAAC4C,mBAAmB,CAAEC,sBAAsB,CAAC,CAAG7C,QAAQ,CAAC,IAAI,CAAC,CACpE,KAAM,CAAA8C,KAAK,CAAG7C,MAAM,CAAC,IAAI,CAAC,CAE1BC,SAAS,CAAC,IAAM,CACd,GAAIkC,gBAAgB,CAAE,CACpB,KAAM,CAAAW,qBAAqB,CAAGX,gBAAgB,CAAGY,QAAQ,CAACZ,gBAAgB,CAAC,CAAG,IAAI,CAClF,KAAM,CAAAa,yBAAyB,CAC7BX,MAAM,GAAK1B,aAAa,CAACsC,SAAS,CAAGH,qBAAqB,CAAGA,qBAAqB,CAAG,CAAC,CACxFN,gBAAgB,CAACQ,yBAAyB,CAAC,CAC3CN,kBAAkB,CAACM,yBAAyB,CAACE,QAAQ,CAAC,CAAC,CAAC,CAC1D,CACF,CAAC,CAAE,CAACf,gBAAgB,CAAEE,MAAM,CAAC,CAAC,CAE9BpC,SAAS,CAAC,IAAM,CACd2C,sBAAsB,CAAC,IAAI,CAAC,CAE5B,KAAM,CAAAO,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAA1C,YAAY,CAAC+B,eAAe,CAAC,CACvD,KAAM,CAAAY,oBAAoB,CAAGvC,sBAAsB,CAACsC,WAAW,CAAC,CAChER,sBAAsB,CAACS,oBAAoB,CAAC,CAC9C,CAAC,CAEDR,KAAK,CAACS,OAAO,CAAGC,WAAW,CAAC,IAAM,CAChC,GAAId,eAAe,CAAE,CACnBU,gBAAgB,CAAC,CAAC,CACpB,CACAK,aAAa,CAACX,KAAK,CAACS,OAAO,CAAC,CAC9B,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAME,aAAa,CAACX,KAAK,CAACS,OAAO,CAAC,CAC3C,CAAC,CAAE,CAACb,eAAe,CAAC,CAAC,CAErB,KAAM,CAAAgB,iBAAiB,CAAIC,KAAK,EAAK,CACnC,KAAM,CACJC,MAAM,CAAE,CAAEC,KAAM,CAClB,CAAC,CAAGF,KAAK,CACT,GAAIE,KAAK,CAAE,CACTlB,kBAAkB,CAACkB,KAAK,CAAC,CACzB,GAAIb,QAAQ,CAACa,KAAK,CAAE,EAAE,CAAC,EAAI,CAAC,CAAE,CAC5BlB,kBAAkB,CAAC,EAAE,CAAC,CACxB,CACA,GAAIK,QAAQ,CAACa,KAAK,CAAE,EAAE,CAAC,EAAIrB,aAAa,CAAE,CACxCG,kBAAkB,CAACH,aAAa,CAACW,QAAQ,CAAC,CAAC,CAAC,CAC9C,CACF,CAAC,IAAM,CACLR,kBAAkB,CAAC,EAAE,CAAC,CACxB,CACF,CAAC,CAED,KAAM,CAAAmB,qBAAqB,CAAIC,WAAW,EAAK,CAC7C,GAAIA,WAAW,CAAE,CACfpB,kBAAkB,CAACoB,WAAW,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAC5C,CAAC,IAAM,CACL;AACAR,kBAAkB,CAAC,GAAG,CAAC,CACzB,CACF,CAAC,CAED,mBACEtB,KAAA,CAACC,UAAU,EAAA0C,QAAA,eACT3C,KAAA,CAACQ,gBAAgB,EAAAmC,QAAA,eACf7C,IAAA,CAACN,aAAa,EACZ0B,SAAS,CAAEA,SAAU,CACrBG,eAAe,CAAEA,eAAgB,CACjCuB,eAAe,CAAEzB,aAAc,CAC/BkB,iBAAiB,CAAEA,iBAAkB,CACrCI,qBAAqB,CAAEA,qBAAsB,CAC9C,CAAC,cACF3C,IAAA,CAACX,GAAG,EAAC0D,EAAE,CAAC,KAAK,CAAAF,QAAA,CACV,CAAApB,mBAAmB,SAAnBA,mBAAmB,iBAAnBA,mBAAmB,CAAEuB,OAAO,eAC3B9C,KAAA,CAAChB,IAAI,EAAC+D,QAAQ,CAAC,MAAM,CAAAJ,QAAA,EAClB7B,CAAC,CAAC,OAAO,CAAC,CAAC,GAAC,CAACrB,YAAY,CAAC8B,mBAAmB,CAACuB,OAAO,CAAC,EACnD,CAAC,cAEPhD,IAAA,CAACb,QAAQ,EAAC+D,KAAK,CAAC,OAAO,CAACC,MAAM,CAAC,MAAM,CAAE,CACxC,CACE,CAAC,EACU,CAAC,cACnBnD,IAAA,CAACH,qBAAqB,EAACqC,WAAW,CAAET,mBAAoB,CAAC2B,SAAS,CAAE7B,eAAgB,CAAE,CAAC,cACvFvB,IAAA,CAACF,uBAAuB,EAACoC,WAAW,CAAET,mBAAoB,CAAC2B,SAAS,CAAE7B,eAAgB,CAAE,CAAC,EAC/E,CAAC,CAEjB,CAAC,CAED,cAAe,CAAAR,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}