{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extract_files_1 = require(\"extract-files\");\n\nvar form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\n\n\nvar isExtractableFileEnhanced = function (value) {\n  return extract_files_1.isExtractableFile(value) || value !== null && typeof value === 'object' && typeof value.pipe === 'function';\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\n\n\nfunction createRequestBody(query, variables) {\n  var _a = extract_files_1.extractFiles({\n    query: query,\n    variables: variables\n  }, '', isExtractableFileEnhanced),\n      clone = _a.clone,\n      files = _a.files;\n\n  if (files.size === 0) {\n    return JSON.stringify(clone);\n  }\n\n  var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n  var form = new Form();\n  form.append('operations', JSON.stringify(clone));\n  var map = {};\n  var i = 0;\n  files.forEach(function (paths) {\n    map[++i] = paths;\n  });\n  form.append('map', JSON.stringify(map));\n  i = 0;\n  files.forEach(function (paths, file) {\n    form.append(\"\" + ++i, file);\n  });\n  return form;\n}\n\nexports.default = createRequestBody;","map":{"version":3,"sources":["../src/createRequestBody.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;AAIA;;;AAGG;;;AACH,IAAM,yBAAyB,GAAG,UAAC,KAAD,EAAW;AAC3C,SAAA,eAAA,CAAA,iBAAA,CAAkB,KAAlB,KACC,KAAK,KAAK,IAAV,IAAkB,OAAO,KAAP,KAAiB,QAAnC,IAA+C,OAAO,KAAK,CAAC,IAAb,KAAsB,UADtE;AACiF,CAFnF;AAIA;;;;AAIG;;;AACH,SAAwB,iBAAxB,CAA0C,KAA1C,EAAyD,SAAzD,EAA8E;AACtE,MAAA,EAAA,GAAmB,eAAA,CAAA,YAAA,CAAa;AAAE,IAAA,KAAK,EAAA,KAAP;AAAS,IAAA,SAAS,EAAA;AAAlB,GAAb,EAAmC,EAAnC,EAAuC,yBAAvC,CAAnB;AAAA,MAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,MAAS,KAAK,GAAA,EAAA,CAAA,KAAd;;AAEN,MAAI,KAAK,CAAC,IAAN,KAAe,CAAnB,EAAsB;AACpB,WAAO,IAAI,CAAC,SAAL,CAAe,KAAf,CAAP;AACD;;AAED,MAAM,IAAI,GAAG,OAAO,QAAP,KAAoB,WAApB,GAAkC,WAAA,CAAA,OAAlC,GAAiD,QAA9D;AAEA,MAAM,IAAI,GAAG,IAAI,IAAJ,EAAb;AAEA,EAAA,IAAI,CAAC,MAAL,CAAY,YAAZ,EAA0B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA1B;AAEA,MAAM,GAAG,GAAgC,EAAzC;AACA,MAAI,CAAC,GAAG,CAAR;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,KAAD,EAAM;AAClB,IAAA,GAAG,CAAC,EAAE,CAAH,CAAH,GAAW,KAAX;AACD,GAFD;AAGA,EAAA,IAAI,CAAC,MAAL,CAAY,KAAZ,EAAmB,IAAI,CAAC,SAAL,CAAe,GAAf,CAAnB;AAEA,EAAA,CAAC,GAAG,CAAJ;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,KAAD,EAAQ,IAAR,EAAY;AACxB,IAAA,IAAI,CAAC,MAAL,CAAY,KAAG,EAAE,CAAjB,EAAsB,IAAtB;AACD,GAFD;AAIA,SAAO,IAAP;AACD;;AA1BD,OAAA,CAAA,OAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extract_files_1 = require(\"extract-files\");\nvar form_data_1 = __importDefault(require(\"form-data\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function (value) {\n    return extract_files_1.isExtractableFile(value) ||\n        (value !== null && typeof value === 'object' && typeof value.pipe === 'function');\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables) {\n    var _a = extract_files_1.extractFiles({ query: query, variables: variables }, '', isExtractableFileEnhanced), clone = _a.clone, files = _a.files;\n    if (files.size === 0) {\n        return JSON.stringify(clone);\n    }\n    var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n    var form = new Form();\n    form.append('operations', JSON.stringify(clone));\n    var map = {};\n    var i = 0;\n    files.forEach(function (paths) {\n        map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach(function (paths, file) {\n        form.append(\"\" + ++i, file);\n    });\n    return form;\n}\nexports.default = createRequestBody;\n//# sourceMappingURL=createRequestBody.js.map"]},"metadata":{},"sourceType":"script"}