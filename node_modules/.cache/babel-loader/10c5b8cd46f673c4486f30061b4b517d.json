{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\Modals\\\\StakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport useToast from 'hooks/useToast';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport PercentageButton from './PercentageButton';\nimport useStakePool from '../../../hooks/useStakePool';\nimport useUnstakePool from '../../../hooks/useUnstakePool';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledLink = styled(Link)`\n  width: 100%;\n`;\n_c = StyledLink;\n\nconst StakeModal = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    sousId,\n    stakingToken,\n    userData,\n    stakingLimit,\n    earningToken\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    onStake\n  } = useStakePool(sousId, isBnbPool);\n  const {\n    onUnstake\n  } = useUnstakePool(sousId, pool.enableEmergencyWithdraw);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false);\n  const [percent, setPercent] = useState(0);\n\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance;\n    }\n\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance;\n  };\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber());\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit));\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit]);\n\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals);\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber());\n      setPercent(Math.min(percentage, 100));\n    } else {\n      setPercent(0);\n    }\n\n    setStakeAmount(input);\n  };\n\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n\n    setPercent(sliderPercent);\n  };\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true);\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Unstaked')}!`, t('Your %symbol% earnings have also been harvested to your wallet!', {\n          symbol: earningToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Staked')}!`, t('Your %symbol% funds have been staked in the pool!', {\n          symbol: stakingToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [stakingLimit.gt(0) && !isRemovingStake && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"secondary\",\n      bold: true,\n      mb: \"24px\",\n      style: {\n        textAlign: 'center'\n      },\n      fontSize: \"16px\",\n      children: t('Max stake for this pool: %amount% %token%', {\n        amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${getAddress(stakingToken.address)}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`,\n      isWarning: hasReachedStakeLimit,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), hasReachedStakeLimit && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"failure\",\n      fontSize: \"12px\",\n      style: {\n        textAlign: 'right'\n      },\n      mt: \"4px\",\n      children: t('Maximum total stake: %amount% %token%', {\n        amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(StyledLink, {\n      external: true,\n      href: \"/swap\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mt: \"8px\",\n        variant: \"secondary\",\n        children: t('Get %symbol%', {\n          symbol: stakingToken.symbol\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeModal, \"0ZiXNbWVyyvZIV46E+t4fbK2dqI=\", false, function () {\n  return [useTranslation, useTheme, useStakePool, useUnstakePool, useToast];\n});\n\n_c2 = StakeModal;\nexport default StakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledLink\");\n$RefreshReg$(_c2, \"StakeModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/Modals/StakeModal.tsx"],"names":["React","useEffect","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","Link","useTranslation","useTheme","useToast","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","getAddress","PercentageButton","useStakePool","useUnstakePool","StyledLink","StakeModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","onDismiss","sousId","stakingToken","userData","stakingLimit","earningToken","t","theme","onStake","onUnstake","enableEmergencyWithdraw","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","times","toNumber","fullDecimalStakeAmount","decimals","plus","handleStakeInputChange","input","convertedInput","percentage","Math","floor","dividedBy","multipliedBy","min","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleConfirmClick","symbol","e","colors","gradients","cardHeader","textAlign","amount","token","address","balance","parseFloat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\nimport useUnstakePool from '../../../hooks/useUnstakePool'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\r\n  }\r\n\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stakingLimit.gt(0) && !isRemovingStake && (\r\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n          {t('Max stake for this pool: %amount% %token%', {\r\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\r\n        isWarning={hasReachedStakeLimit}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      {hasReachedStakeLimit && (\r\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n          {t('Maximum total stake: %amount% %token%', {\r\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', {\r\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n        })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n      </Flex>\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <StyledLink external href=\"/swap\">\r\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\r\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n          </Button>\r\n        </StyledLink>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n"]},"metadata":{},"sourceType":"module"}