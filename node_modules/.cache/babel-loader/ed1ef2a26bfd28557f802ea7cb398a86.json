{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\FarmTable\\\\Actions\\\\StakedAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit';\nimport { useLocation } from 'react-router-dom';\nimport { BigNumber } from 'bignumber.js';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport Balance from 'components/Balance';\nimport { useWeb3React } from '@web3-react/core';\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport { BASE_ADD_LIQUIDITY_URL } from 'config';\nimport { useAppDispatch } from 'state';\nimport { getAddress } from 'utils/addressHelpers';\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts';\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms';\nimport DepositModal from '../../DepositModal';\nimport WithdrawModal from '../../WithdrawModal';\nimport useStakeFarms from '../../../hooks/useStakeFarms';\nimport useApproveFarm from '../../../hooks/useApproveFarm';\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`;\n_c = IconButtonWrapper;\n\nconst Staked = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance\n  } = useFarmUser(pid);\n  const {\n    onStake\n  } = useStakeFarms(pid);\n  const {\n    onUnstake\n  } = useUnstakeFarms(pid);\n  const location = useLocation();\n  const lpPrice = useLpTokenPrice(lpSymbol);\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const lpAddress = getAddress(lpAddresses);\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address\n  });\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`;\n\n  const handleStake = async amount => {\n    await onStake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const handleUnstake = async amount => {\n    await onUnstake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance);\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN);\n    }\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString();\n    }\n\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN);\n  }, [stakedBalance]);\n  const [onPresentDeposit] = useModal( /*#__PURE__*/_jsxDEV(DepositModal, {\n    max: tokenBalance,\n    onConfirm: handleStake,\n    tokenName: lpSymbol,\n    addLiquidityUrl: addLiquidityUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this));\n  const [onPresentWithdraw] = useModal( /*#__PURE__*/_jsxDEV(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: handleUnstake,\n    tokenName: lpSymbol\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this));\n  const lpContract = useERC20(lpAddress);\n  const dispatch = useAppDispatch();\n  const {\n    onApprove\n  } = useApproveFarm(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids: [pid]\n      }));\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, dispatch, account, pid]);\n\n  if (!account) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          children: t('Start Farming')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return /*#__PURE__*/_jsxDEV(ActionContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            color: \"secondary\",\n            fontSize: \"12px\",\n            pr: \"4px\",\n            children: lpSymbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            color: \"textSubtle\",\n            fontSize: \"12px\",\n            children: t('Staked')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Earned, {\n              children: displayBalance()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), stakedBalance.gt(0) && lpPrice.gt(0) && /*#__PURE__*/_jsxDEV(Balance, {\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              decimals: 2,\n              value: getBalanceNumber(lpPrice.times(stakedBalance)),\n              unit: \" USD\",\n              prefix: \"~\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              variant: \"secondary\",\n              onClick: onPresentWithdraw,\n              mr: \"6px\",\n              children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n                color: \"primary\",\n                width: \"14px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              variant: \"secondary\",\n              onClick: onPresentDeposit,\n              disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                color: \"primary\",\n                width: \"14px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          pr: \"4px\",\n          children: t('Stake').toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"secondary\",\n          fontSize: \"12px\",\n          children: lpSymbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          onClick: onPresentDeposit,\n          variant: \"secondary\",\n          disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n          children: t('Stake LP')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!userDataReady) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          children: t('Start Farming')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: 180,\n          marginBottom: 28,\n          marginTop: 14\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Enable Farm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        disabled: requestedApproval,\n        onClick: handleApprove,\n        variant: \"secondary\",\n        children: t('Enable')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Staked, \"gjruC51cSwC/N0Ir7OmMDT+5hCs=\", false, function () {\n  return [useTranslation, useWeb3React, useFarmUser, useStakeFarms, useUnstakeFarms, useLocation, useLpTokenPrice, useModal, useModal, useERC20, useAppDispatch, useApproveFarm];\n});\n\n_c2 = Staked;\nexport default Staked;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"Staked\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/FarmTable/Actions/StakedAction.tsx"],"names":["React","useState","useCallback","styled","Button","useModal","IconButton","AddIcon","MinusIcon","Skeleton","Text","useLocation","BigNumber","ConnectWalletButton","Balance","useWeb3React","useFarmUser","useLpTokenPrice","fetchFarmUserDataAsync","useTranslation","useERC20","BASE_ADD_LIQUIDITY_URL","useAppDispatch","getAddress","getLiquidityUrlPathParts","getBalanceAmount","getBalanceNumber","getFullDisplayBalance","useUnstakeFarms","DepositModal","WithdrawModal","useStakeFarms","useApproveFarm","ActionContainer","ActionTitles","ActionContent","Earned","IconButtonWrapper","div","Staked","pid","lpSymbol","lpAddresses","quoteToken","token","userDataReady","t","account","requestedApproval","setRequestedApproval","allowance","tokenBalance","stakedBalance","onStake","onUnstake","location","lpPrice","isApproved","isGreaterThan","lpAddress","liquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","addLiquidityUrl","handleStake","amount","dispatch","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","gt","lt","toFixed","ROUND_DOWN","toLocaleString","onPresentDeposit","onPresentWithdraw","lpContract","onApprove","handleApprove","e","console","error","times","some","item","pathname","includes","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n"]},"metadata":{},"sourceType":"module"}