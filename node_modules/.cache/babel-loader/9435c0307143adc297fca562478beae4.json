{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import styled from'styled-components';import{Flex,Link,Skeleton,Text,TimerIcon}from'@pancakeswap/uikit';import{getBscScanLink}from'utils';import{useBlock}from'state/block/hooks';import Balance from'components/Balance';import{useTranslation}from'contexts/Localization';import{getPoolBlockInfo}from'views/Pools/helpers';import BaseCell,{CellContent}from'./BaseCell';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledCell=styled(BaseCell)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex: 2 0 100px;\\n\"])));const EndsInCell=_ref=>{let{pool}=_ref;const{sousId,totalStaked,startBlock,endBlock,isFinished}=pool;const{currentBlock}=useBlock();const{t}=useTranslation();const{shouldShowBlockCountdown,blocksUntilStart,blocksRemaining,hasPoolStarted,blocksToDisplay}=getPoolBlockInfo(pool,currentBlock);const isCakePool=sousId===0;const renderBlocks=shouldShowBlockCountdown?/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsxs(Flex,{flex:\"1.3\",children:[/*#__PURE__*/_jsx(Balance,{fontSize:\"16px\",value:blocksToDisplay,decimals:0}),/*#__PURE__*/_jsx(Text,{ml:\"4px\",textTransform:\"lowercase\",children:t('Blocks')})]}),/*#__PURE__*/_jsx(Flex,{flex:\"1\",children:/*#__PURE__*/_jsx(Link,{external:true,href:getBscScanLink(hasPoolStarted?endBlock:startBlock,'countdown'),onClick:e=>e.stopPropagation(),children:/*#__PURE__*/_jsx(TimerIcon,{ml:\"4px\"})})})]}):/*#__PURE__*/_jsx(Text,{children:\"-\"});// A bit hacky way to determine if public data is loading relying on totalStaked\n// Opted to go for this since we don't really need a separate publicDataLoaded flag\n// anywhere else\nconst isLoadingPublicData=!totalStaked.gt(0)||!currentBlock||!blocksRemaining&&!blocksUntilStart;const showLoading=isLoadingPublicData&&!isCakePool&&!isFinished;return/*#__PURE__*/_jsx(StyledCell,{role:\"cell\",children:/*#__PURE__*/_jsxs(CellContent,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",textAlign:\"left\",children:hasPoolStarted||!shouldShowBlockCountdown?t('Ends in'):t('Starts in')}),showLoading?/*#__PURE__*/_jsx(Skeleton,{width:\"80px\",height:\"16px\"}):renderBlocks]})});};export default EndsInCell;","map":{"version":3,"names":["React","styled","Flex","Link","Skeleton","Text","TimerIcon","getBscScanLink","useBlock","Balance","useTranslation","getPoolBlockInfo","BaseCell","CellContent","jsx","_jsx","jsxs","_jsxs","StyledCell","_templateObject","_taggedTemplateLiteral","EndsInCell","_ref","pool","sousId","totalStaked","startBlock","endBlock","isFinished","currentBlock","t","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","isCakePool","renderBlocks","alignItems","children","flex","fontSize","value","decimals","ml","textTransform","external","href","onClick","e","stopPropagation","isLoadingPublicData","gt","showLoading","role","color","textAlign","width","height"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/EndsInCell.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n"],"mappings":"6MAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,IAAI,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,IAAI,CAAEC,SAAS,KAAQ,oBAAoB,CAC1E,OAASC,cAAc,KAAQ,OAAO,CAEtC,OAASC,QAAQ,KAAQ,mBAAmB,CAC5C,MAAO,CAAAC,OAAO,KAAM,oBAAoB,CACxC,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,gBAAgB,KAAQ,qBAAqB,CACtD,MAAO,CAAAC,QAAQ,EAAIC,WAAW,KAAQ,YAAY,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAMlD,KAAM,CAAAC,UAAU,CAAGjB,MAAM,CAACW,QAAQ,CAAC,CAAAO,eAAA,GAAAA,eAAA,CAAAC,sBAAA,8BAElC,CAED,KAAM,CAAAC,UAAqC,CAAGC,IAAA,EAAc,IAAb,CAAEC,IAAK,CAAC,CAAAD,IAAA,CACrD,KAAM,CAAEE,MAAM,CAAEC,WAAW,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,UAAW,CAAC,CAAGL,IAAI,CACtE,KAAM,CAAEM,YAAa,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CACnC,KAAM,CAAEsB,CAAE,CAAC,CAAGpB,cAAc,CAAC,CAAC,CAE9B,KAAM,CAAEqB,wBAAwB,CAAEC,gBAAgB,CAAEC,eAAe,CAAEC,cAAc,CAAEC,eAAgB,CAAC,CACpGxB,gBAAgB,CAACY,IAAI,CAAEM,YAAY,CAAC,CAEtC,KAAM,CAAAO,UAAU,CAAGZ,MAAM,GAAK,CAAC,CAE/B,KAAM,CAAAa,YAAY,CAAGN,wBAAwB,cAC3Cd,KAAA,CAACf,IAAI,EAACoC,UAAU,CAAC,QAAQ,CAAAC,QAAA,eACvBtB,KAAA,CAACf,IAAI,EAACsC,IAAI,CAAC,KAAK,CAAAD,QAAA,eACdxB,IAAA,CAACN,OAAO,EAACgC,QAAQ,CAAC,MAAM,CAACC,KAAK,CAAEP,eAAgB,CAACQ,QAAQ,CAAE,CAAE,CAAE,CAAC,cAChE5B,IAAA,CAACV,IAAI,EAACuC,EAAE,CAAC,KAAK,CAACC,aAAa,CAAC,WAAW,CAAAN,QAAA,CACrCT,CAAC,CAAC,QAAQ,CAAC,CACR,CAAC,EACH,CAAC,cACPf,IAAA,CAACb,IAAI,EAACsC,IAAI,CAAC,GAAG,CAAAD,QAAA,cACZxB,IAAA,CAACZ,IAAI,EACH2C,QAAQ,MACRC,IAAI,CAAExC,cAAc,CAAC2B,cAAc,CAAGP,QAAQ,CAAGD,UAAU,CAAE,WAAW,CAAE,CAC1EsB,OAAO,CAAGC,CAAC,EAAKA,CAAC,CAACC,eAAe,CAAC,CAAE,CAAAX,QAAA,cAEpCxB,IAAA,CAACT,SAAS,EAACsC,EAAE,CAAC,KAAK,CAAE,CAAC,CAClB,CAAC,CACH,CAAC,EACH,CAAC,cAEP7B,IAAA,CAACV,IAAI,EAAAkC,QAAA,CAAC,GAAC,CAAM,CACd,CAED;AACA;AACA;AACA,KAAM,CAAAY,mBAAmB,CAAG,CAAC1B,WAAW,CAAC2B,EAAE,CAAC,CAAC,CAAC,EAAI,CAACvB,YAAY,EAAK,CAACI,eAAe,EAAI,CAACD,gBAAiB,CAC1G,KAAM,CAAAqB,WAAW,CAAGF,mBAAmB,EAAI,CAACf,UAAU,EAAI,CAACR,UAAU,CACrE,mBACEb,IAAA,CAACG,UAAU,EAACoC,IAAI,CAAC,MAAM,CAAAf,QAAA,cACrBtB,KAAA,CAACJ,WAAW,EAAA0B,QAAA,eACVxB,IAAA,CAACV,IAAI,EAACoC,QAAQ,CAAC,MAAM,CAACc,KAAK,CAAC,YAAY,CAACC,SAAS,CAAC,MAAM,CAAAjB,QAAA,CACtDL,cAAc,EAAI,CAACH,wBAAwB,CAAGD,CAAC,CAAC,SAAS,CAAC,CAAGA,CAAC,CAAC,WAAW,CAAC,CACxE,CAAC,CACNuB,WAAW,cAAGtC,IAAA,CAACX,QAAQ,EAACqD,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAAE,CAAC,CAAGrB,YAAY,EAC1D,CAAC,CACJ,CAAC,CAEjB,CAAC,CAED,cAAe,CAAAhB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}