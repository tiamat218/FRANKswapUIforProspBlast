{"ast":null,"code":"import Nfts,{IPFS_GATEWAY,nftSources}from'config/constants/nfts';import{getAddress}from'./addressHelpers';import{getErc721Contract}from'./contractHelpers';/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */export const getIdentifierKeyFromAddress=nftAddress=>{const nftSource=Object.values(nftSources).find(nftSourceEntry=>{const address=getAddress(nftSourceEntry.address);return address===nftAddress;});return nftSource?nftSource.identifierKey:null;};/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */export const getTokenUrl=tokenUri=>{if(tokenUri.startsWith('ipfs://')){return\"\".concat(IPFS_GATEWAY,\"/ipfs/\").concat(tokenUri.slice(6));}return tokenUri;};export const getAddressByType=type=>{return getAddress(nftSources[type].address);};export const getTokenUriData=async(nftAddress,tokenId)=>{try{const contract=getErc721Contract(nftAddress);const tokenUri=await contract.tokenURI(tokenId);const uriDataResponse=await fetch(getTokenUrl(tokenUri));if(!uriDataResponse.ok){return null;}const uriData=await uriDataResponse.json();return uriData;}catch(error){console.error('getTokenUriData',error);return null;}};export const getNftByTokenId=async(nftAddress,tokenId)=>{const uriData=await getTokenUriData(nftAddress,tokenId);const identifierKey=getIdentifierKeyFromAddress(nftAddress);// Bail out early if we have no uriData, identifierKey, or the value does not\n// exist in the object\nif(!uriData){return null;}if(!identifierKey){return null;}if(!uriData[identifierKey]){return null;}return Nfts.find(nft=>{return uriData[identifierKey].includes(nft.identifier);});};","map":{"version":3,"names":["Nfts","IPFS_GATEWAY","nftSources","getAddress","getErc721Contract","getIdentifierKeyFromAddress","nftAddress","nftSource","Object","values","find","nftSourceEntry","address","identifierKey","getTokenUrl","tokenUri","startsWith","concat","slice","getAddressByType","type","getTokenUriData","tokenId","contract","tokenURI","uriDataResponse","fetch","ok","uriData","json","error","console","getNftByTokenId","nft","includes","identifier"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/collectibles.ts"],"sourcesContent":["import Nfts, { IPFS_GATEWAY, nftSources } from 'config/constants/nfts'\r\nimport { Nft, NftType } from 'config/constants/types'\r\nimport { getAddress } from './addressHelpers'\r\nimport { getErc721Contract } from './contractHelpers'\r\n\r\n/**\r\n * Gets the identifier key based on the nft address\r\n * Helpful for looking up the key when all you have is the address\r\n */\r\nexport const getIdentifierKeyFromAddress = (nftAddress: string) => {\r\n  const nftSource = Object.values(nftSources).find((nftSourceEntry) => {\r\n    const address = getAddress(nftSourceEntry.address)\r\n    return address === nftAddress\r\n  })\r\n\r\n  return nftSource ? nftSource.identifierKey : null\r\n}\r\n\r\n/**\r\n * Some sources like Pancake do not return HTTP tokenURI's\r\n */\r\nexport const getTokenUrl = (tokenUri: string) => {\r\n  if (tokenUri.startsWith('ipfs://')) {\r\n    return `${IPFS_GATEWAY}/ipfs/${tokenUri.slice(6)}`\r\n  }\r\n\r\n  return tokenUri\r\n}\r\n\r\nexport const getAddressByType = (type: NftType) => {\r\n  return getAddress(nftSources[type].address)\r\n}\r\n\r\nexport const getTokenUriData = async (nftAddress: string, tokenId: number) => {\r\n  try {\r\n    const contract = getErc721Contract(nftAddress)\r\n    const tokenUri = await contract.tokenURI(tokenId)\r\n    const uriDataResponse = await fetch(getTokenUrl(tokenUri))\r\n\r\n    if (!uriDataResponse.ok) {\r\n      return null\r\n    }\r\n\r\n    const uriData = await uriDataResponse.json()\r\n    return uriData\r\n  } catch (error) {\r\n    console.error('getTokenUriData', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const getNftByTokenId = async (nftAddress: string, tokenId: number): Promise<Nft | null> => {\r\n  const uriData = await getTokenUriData(nftAddress, tokenId)\r\n  const identifierKey = getIdentifierKeyFromAddress(nftAddress)\r\n\r\n  // Bail out early if we have no uriData, identifierKey, or the value does not\r\n  // exist in the object\r\n  if (!uriData) {\r\n    return null\r\n  }\r\n\r\n  if (!identifierKey) {\r\n    return null\r\n  }\r\n\r\n  if (!uriData[identifierKey]) {\r\n    return null\r\n  }\r\n\r\n  return Nfts.find((nft) => {\r\n    return uriData[identifierKey].includes(nft.identifier)\r\n  })\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,IAAI,EAAIC,YAAY,CAAEC,UAAU,KAAQ,uBAAuB,CAEtE,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,iBAAiB,KAAQ,mBAAmB,CAErD;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,2BAA2B,CAAIC,UAAkB,EAAK,CACjE,KAAM,CAAAC,SAAS,CAAGC,MAAM,CAACC,MAAM,CAACP,UAAU,CAAC,CAACQ,IAAI,CAAEC,cAAc,EAAK,CACnE,KAAM,CAAAC,OAAO,CAAGT,UAAU,CAACQ,cAAc,CAACC,OAAO,CAAC,CAClD,MAAO,CAAAA,OAAO,GAAKN,UAAU,CAC/B,CAAC,CAAC,CAEF,MAAO,CAAAC,SAAS,CAAGA,SAAS,CAACM,aAAa,CAAG,IAAI,CACnD,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,WAAW,CAAIC,QAAgB,EAAK,CAC/C,GAAIA,QAAQ,CAACC,UAAU,CAAC,SAAS,CAAC,CAAE,CAClC,SAAAC,MAAA,CAAUhB,YAAY,WAAAgB,MAAA,CAASF,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,EAClD,CAEA,MAAO,CAAAH,QAAQ,CACjB,CAAC,CAED,MAAO,MAAM,CAAAI,gBAAgB,CAAIC,IAAa,EAAK,CACjD,MAAO,CAAAjB,UAAU,CAACD,UAAU,CAACkB,IAAI,CAAC,CAACR,OAAO,CAAC,CAC7C,CAAC,CAED,MAAO,MAAM,CAAAS,eAAe,CAAG,KAAAA,CAAOf,UAAkB,CAAEgB,OAAe,GAAK,CAC5E,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAGnB,iBAAiB,CAACE,UAAU,CAAC,CAC9C,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAQ,QAAQ,CAACC,QAAQ,CAACF,OAAO,CAAC,CACjD,KAAM,CAAAG,eAAe,CAAG,KAAM,CAAAC,KAAK,CAACZ,WAAW,CAACC,QAAQ,CAAC,CAAC,CAE1D,GAAI,CAACU,eAAe,CAACE,EAAE,CAAE,CACvB,MAAO,KAAI,CACb,CAEA,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAH,eAAe,CAACI,IAAI,CAAC,CAAC,CAC5C,MAAO,CAAAD,OAAO,CAChB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,MAAO,KAAI,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,eAAe,CAAG,KAAAA,CAAO1B,UAAkB,CAAEgB,OAAe,GAA0B,CACjG,KAAM,CAAAM,OAAO,CAAG,KAAM,CAAAP,eAAe,CAACf,UAAU,CAAEgB,OAAO,CAAC,CAC1D,KAAM,CAAAT,aAAa,CAAGR,2BAA2B,CAACC,UAAU,CAAC,CAE7D;AACA;AACA,GAAI,CAACsB,OAAO,CAAE,CACZ,MAAO,KAAI,CACb,CAEA,GAAI,CAACf,aAAa,CAAE,CAClB,MAAO,KAAI,CACb,CAEA,GAAI,CAACe,OAAO,CAACf,aAAa,CAAC,CAAE,CAC3B,MAAO,KAAI,CACb,CAEA,MAAO,CAAAb,IAAI,CAACU,IAAI,CAAEuB,GAAG,EAAK,CACxB,MAAO,CAAAL,OAAO,CAACf,aAAa,CAAC,CAACqB,QAAQ,CAACD,GAAG,CAACE,UAAU,CAAC,CACxD,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}