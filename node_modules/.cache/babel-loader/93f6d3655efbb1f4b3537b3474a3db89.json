{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\n\nconst useDelayedUnmount = (isMounted, delayTime) => {\n  _s();\n\n  const [shouldRender, setShouldRender] = useState(false);\n  useEffect(() => {\n    let timeoutId;\n\n    if (isMounted && !shouldRender) {\n      setShouldRender(true);\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime);\n    }\n\n    return () => clearTimeout(timeoutId);\n  }, [isMounted, delayTime, shouldRender]);\n  return shouldRender;\n};\n\n_s(useDelayedUnmount, \"Fhs21UGsY73quT1EkyYQ4s17rB8=\");\n\nexport default useDelayedUnmount;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useDelayedUnmount.ts"],"names":["useState","useEffect","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,SAAD,EAAqBC,SAArB,KAA2C;AAAA;;AACnE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,SAAJ;;AACA,QAAIJ,SAAS,IAAI,CAACE,YAAlB,EAAgC;AAC9BC,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAFD,MAEO,IAAI,CAACH,SAAD,IAAcE,YAAlB,EAAgC;AACrCE,MAAAA,SAAS,GAAGC,UAAU,CAAC,MAAMF,eAAe,CAAC,KAAD,CAAtB,EAA+BF,SAA/B,CAAtB;AACD;;AACD,WAAO,MAAMK,YAAY,CAACF,SAAD,CAAzB;AACD,GARQ,EAQN,CAACJ,SAAD,EAAYC,SAAZ,EAAuBC,YAAvB,CARM,CAAT;AASA,SAAOA,YAAP;AACD,CAbD;;GAAMH,iB;;AAeN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n"]},"metadata":{},"sourceType":"module"}