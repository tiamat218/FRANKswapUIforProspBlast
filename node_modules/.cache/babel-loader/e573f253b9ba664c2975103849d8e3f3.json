{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport getProfile from './getProfile';\nconst initialState = {\n  isInitialized: false,\n  isLoading: true,\n  hasRegistered: false,\n  data: null\n};\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    profileFetchStart: state => {\n      state.isLoading = true;\n    },\n    profileFetchSucceeded: (_state, action) => {\n      const {\n        profile,\n        hasRegistered\n      } = action.payload;\n      return {\n        isInitialized: true,\n        isLoading: false,\n        hasRegistered,\n        data: profile\n      };\n    },\n    profileFetchFailed: state => {\n      state.isLoading = false;\n      state.isInitialized = true;\n    },\n    profileClear: () => ({ ...initialState,\n      isLoading: false\n    }),\n    addPoints: (state, action) => {\n      state.data.points += action.payload;\n    }\n  }\n}); // Actions\n\nexport const {\n  profileFetchStart,\n  profileFetchSucceeded,\n  profileFetchFailed,\n  profileClear,\n  addPoints\n} = profileSlice.actions; // Thunks\n// TODO: this should be an AsyncThunk\n\nexport const fetchProfile = address => async dispatch => {\n  try {\n    dispatch(profileFetchStart());\n    const response = await getProfile(address);\n    dispatch(profileFetchSucceeded(response));\n  } catch (error) {\n    dispatch(profileFetchFailed());\n  }\n};\nexport default profileSlice.reducer;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/profile/index.tsx"],"names":["createSlice","getProfile","initialState","isInitialized","isLoading","hasRegistered","data","profileSlice","name","reducers","profileFetchStart","state","profileFetchSucceeded","_state","action","profile","payload","profileFetchFailed","profileClear","addPoints","points","actions","fetchProfile","address","dispatch","response","error","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAGA,OAAOC,UAAP,MAA+C,cAA/C;AAEA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,aAAa,EAAE,KADkB;AAEjCC,EAAAA,SAAS,EAAE,IAFsB;AAGjCC,EAAAA,aAAa,EAAE,KAHkB;AAIjCC,EAAAA,IAAI,EAAE;AAJ2B,CAAnC;AAOA,OAAO,MAAMC,YAAY,GAAGP,WAAW,CAAC;AACtCQ,EAAAA,IAAI,EAAE,SADgC;AAEtCN,EAAAA,YAFsC;AAGtCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAGC,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACP,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRQ,IAAAA,qBAAqB,EAAE,CAACC,MAAD,EAASC,MAAT,KAAuD;AAC5E,YAAM;AAAEC,QAAAA,OAAF;AAAWV,QAAAA;AAAX,UAA6BS,MAAM,CAACE,OAA1C;AAEA,aAAO;AACLb,QAAAA,aAAa,EAAE,IADV;AAELC,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,aAHK;AAILC,QAAAA,IAAI,EAAES;AAJD,OAAP;AAMD,KAbO;AAcRE,IAAAA,kBAAkB,EAAGN,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACR,aAAN,GAAsB,IAAtB;AACD,KAjBO;AAkBRe,IAAAA,YAAY,EAAE,OAAO,EACnB,GAAGhB,YADgB;AAEnBE,MAAAA,SAAS,EAAE;AAFQ,KAAP,CAlBN;AAsBRe,IAAAA,SAAS,EAAE,CAACR,KAAD,EAAQG,MAAR,KAA0C;AACnDH,MAAAA,KAAK,CAACL,IAAN,CAAWc,MAAX,IAAqBN,MAAM,CAACE,OAA5B;AACD;AAxBO;AAH4B,CAAD,CAAhC,C,CA+BP;;AACA,OAAO,MAAM;AAAEN,EAAAA,iBAAF;AAAqBE,EAAAA,qBAArB;AAA4CK,EAAAA,kBAA5C;AAAgEC,EAAAA,YAAhE;AAA8EC,EAAAA;AAA9E,IACXZ,YAAY,CAACc,OADR,C,CAGP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAqB,MAAOC,QAAP,IAAiC;AAChF,MAAI;AACFA,IAAAA,QAAQ,CAACd,iBAAiB,EAAlB,CAAR;AACA,UAAMe,QAAQ,GAAG,MAAMxB,UAAU,CAACsB,OAAD,CAAjC;AACAC,IAAAA,QAAQ,CAACZ,qBAAqB,CAACa,QAAD,CAAtB,CAAR;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdF,IAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;AACD;AACF,CARM;AAUP,eAAeV,YAAY,CAACoB,OAA5B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState } from 'state/types'\r\nimport type { AppDispatch } from 'state'\r\nimport getProfile, { GetProfileResponse } from './getProfile'\r\n\r\nconst initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  hasRegistered: false,\r\n  data: null,\r\n}\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileFetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    profileFetchSucceeded: (_state, action: PayloadAction<GetProfileResponse>) => {\r\n      const { profile, hasRegistered } = action.payload\r\n\r\n      return {\r\n        isInitialized: true,\r\n        isLoading: false,\r\n        hasRegistered,\r\n        data: profile,\r\n      }\r\n    },\r\n    profileFetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    profileClear: () => ({\r\n      ...initialState,\r\n      isLoading: false,\r\n    }),\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, profileClear, addPoints } =\r\n  profileSlice.actions\r\n\r\n// Thunks\r\n// TODO: this should be an AsyncThunk\r\nexport const fetchProfile = (address: string) => async (dispatch: AppDispatch) => {\r\n  try {\r\n    dispatch(profileFetchStart())\r\n    const response = await getProfile(address)\r\n    dispatch(profileFetchSucceeded(response))\r\n  } catch (error) {\r\n    dispatch(profileFetchFailed())\r\n  }\r\n}\r\n\r\nexport default profileSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}