{"ast":null,"code":"import{nanoid}from'@reduxjs/toolkit';import{ChainId}from'@pancakeswap/sdk';import{useCallback}from'react';import{useDispatch}from'react-redux';import useActiveWeb3React from'hooks/useActiveWeb3React';import{fetchTokenList}from'../state/lists/actions';import getTokenList from'../utils/getTokenList';import resolveENSContentHash from'../utils/ENS/resolveENSContentHash';import useWeb3Provider from'./useActiveWeb3React';function useFetchListCallback(){const{library}=useWeb3Provider();const{chainId}=useActiveWeb3React();const dispatch=useDispatch();const ensResolver=useCallback(ensName=>{if(chainId!==ChainId.MAINNET){throw new Error('Could not construct mainnet ENS resolver');}return resolveENSContentHash(ensName,library);},[chainId,library]);// note: prevent dispatch if using for list search or unsupported list\nreturn useCallback(async function(listUrl){let sendDispatch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const requestId=nanoid();if(sendDispatch){dispatch(fetchTokenList.pending({requestId,url:listUrl}));}return getTokenList(listUrl,ensResolver).then(tokenList=>{if(sendDispatch){dispatch(fetchTokenList.fulfilled({url:listUrl,tokenList,requestId}));}return tokenList;}).catch(error=>{console.error(\"Failed to get list at url \".concat(listUrl),error);if(sendDispatch){dispatch(fetchTokenList.rejected({url:listUrl,requestId,errorMessage:error.message}));}throw error;});},[dispatch,ensResolver]);}export default useFetchListCallback;","map":{"version":3,"names":["nanoid","ChainId","useCallback","useDispatch","useActiveWeb3React","fetchTokenList","getTokenList","resolveENSContentHash","useWeb3Provider","useFetchListCallback","library","chainId","dispatch","ensResolver","ensName","MAINNET","Error","listUrl","sendDispatch","arguments","length","undefined","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","concat","rejected","errorMessage","message"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport getTokenList from '../utils/getTokenList'\r\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash'\r\nimport useWeb3Provider from './useActiveWeb3React'\r\n\r\nfunction useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\r\n  const { library } = useWeb3Provider()\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (chainId !== ChainId.MAINNET) {\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library],\r\n  )\r\n\r\n  // note: prevent dispatch if using for list search or unsupported list\r\n  return useCallback(\r\n    async (listUrl: string, sendDispatch = true) => {\r\n      const requestId = nanoid()\r\n      if (sendDispatch) {\r\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      }\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then((tokenList) => {\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          }\r\n          return tokenList\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Failed to get list at url ${listUrl}`, error)\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          }\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver],\r\n  )\r\n}\r\n\r\nexport default useFetchListCallback\r\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,kBAAkB,CACzC,OAASC,OAAO,KAAQ,kBAAkB,CAE1C,OAASC,WAAW,KAAQ,OAAO,CACnC,OAASC,WAAW,KAAQ,aAAa,CACzC,MAAO,CAAAC,kBAAkB,KAAM,0BAA0B,CAEzD,OAASC,cAAc,KAAQ,wBAAwB,CACvD,MAAO,CAAAC,YAAY,KAAM,uBAAuB,CAChD,MAAO,CAAAC,qBAAqB,KAAM,oCAAoC,CACtE,MAAO,CAAAC,eAAe,KAAM,sBAAsB,CAElD,QAAS,CAAAC,oBAAoBA,CAAA,CAAoE,CAC/F,KAAM,CAAEC,OAAQ,CAAC,CAAGF,eAAe,CAAC,CAAC,CACrC,KAAM,CAAEG,OAAQ,CAAC,CAAGP,kBAAkB,CAAC,CAAC,CACxC,KAAM,CAAAQ,QAAQ,CAAGT,WAAW,CAAc,CAAC,CAE3C,KAAM,CAAAU,WAAW,CAAGX,WAAW,CAC5BY,OAAe,EAAK,CACnB,GAAIH,OAAO,GAAKV,OAAO,CAACc,OAAO,CAAE,CAC/B,KAAM,IAAI,CAAAC,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CACA,MAAO,CAAAT,qBAAqB,CAACO,OAAO,CAAEJ,OAAO,CAAC,CAChD,CAAC,CACD,CAACC,OAAO,CAAED,OAAO,CACnB,CAAC,CAED;AACA,MAAO,CAAAR,WAAW,CAChB,eAAOe,OAAe,CAA0B,IAAxB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACzC,KAAM,CAAAG,SAAS,CAAGtB,MAAM,CAAC,CAAC,CAC1B,GAAIkB,YAAY,CAAE,CAChBN,QAAQ,CAACP,cAAc,CAACkB,OAAO,CAAC,CAAED,SAAS,CAAEE,GAAG,CAAEP,OAAQ,CAAC,CAAC,CAAC,CAC/D,CACA,MAAO,CAAAX,YAAY,CAACW,OAAO,CAAEJ,WAAW,CAAC,CACtCY,IAAI,CAAEC,SAAS,EAAK,CACnB,GAAIR,YAAY,CAAE,CAChBN,QAAQ,CAACP,cAAc,CAACsB,SAAS,CAAC,CAAEH,GAAG,CAAEP,OAAO,CAAES,SAAS,CAAEJ,SAAU,CAAC,CAAC,CAAC,CAC5E,CACA,MAAO,CAAAI,SAAS,CAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,EAAK,CAChBC,OAAO,CAACD,KAAK,8BAAAE,MAAA,CAA8Bd,OAAO,EAAIY,KAAK,CAAC,CAC5D,GAAIX,YAAY,CAAE,CAChBN,QAAQ,CAACP,cAAc,CAAC2B,QAAQ,CAAC,CAAER,GAAG,CAAEP,OAAO,CAAEK,SAAS,CAAEW,YAAY,CAAEJ,KAAK,CAACK,OAAQ,CAAC,CAAC,CAAC,CAC7F,CACA,KAAM,CAAAL,KAAK,CACb,CAAC,CAAC,CACN,CAAC,CACD,CAACjB,QAAQ,CAAEC,WAAW,CACxB,CAAC,CACH,CAEA,cAAe,CAAAJ,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}