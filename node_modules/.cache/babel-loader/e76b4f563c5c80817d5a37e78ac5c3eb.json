{"ast":null,"code":"var _s = $RefreshSig$();\nimport { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash';\nimport useWeb3Provider from './useActiveWeb3React';\nfunction useFetchListCallback() {\n  _s();\n  const {\n    library\n  } = useWeb3Provider();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const ensResolver = useCallback(ensName => {\n    if (chainId !== ChainId.MAINNET) {\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]);\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n    if (sendDispatch) {\n      dispatch(fetchTokenList.pending({\n        requestId,\n        url: listUrl\n      }));\n    }\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      if (sendDispatch) {\n        dispatch(fetchTokenList.fulfilled({\n          url: listUrl,\n          tokenList,\n          requestId\n        }));\n      }\n      return tokenList;\n    }).catch(error => {\n      console.error(`Failed to get list at url ${listUrl}`, error);\n      if (sendDispatch) {\n        dispatch(fetchTokenList.rejected({\n          url: listUrl,\n          requestId,\n          errorMessage: error.message\n        }));\n      }\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n_s(useFetchListCallback, \"MrmpIBWI+pMz5zTCa2hLIawnO5g=\", false, function () {\n  return [useWeb3Provider, useActiveWeb3React, useDispatch];\n});\nexport default useFetchListCallback;","map":{"version":3,"names":["nanoid","ChainId","useCallback","useDispatch","useActiveWeb3React","fetchTokenList","getTokenList","resolveENSContentHash","useWeb3Provider","useFetchListCallback","_s","library","chainId","dispatch","ensResolver","ensName","MAINNET","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","rejected","errorMessage","message"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport getTokenList from '../utils/getTokenList'\r\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash'\r\nimport useWeb3Provider from './useActiveWeb3React'\r\n\r\nfunction useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\r\n  const { library } = useWeb3Provider()\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (chainId !== ChainId.MAINNET) {\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library],\r\n  )\r\n\r\n  // note: prevent dispatch if using for list search or unsupported list\r\n  return useCallback(\r\n    async (listUrl: string, sendDispatch = true) => {\r\n      const requestId = nanoid()\r\n      if (sendDispatch) {\r\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      }\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then((tokenList) => {\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          }\r\n          return tokenList\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Failed to get list at url ${listUrl}`, error)\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          }\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver],\r\n  )\r\n}\r\n\r\nexport default useFetchListCallback\r\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,kBAAkB;AACzC,SAASC,OAAO,QAAQ,kBAAkB;AAE1C,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,kBAAkB,MAAM,0BAA0B;AAEzD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,qBAAqB,MAAM,oCAAoC;AACtE,OAAOC,eAAe,MAAM,sBAAsB;AAElD,SAASC,oBAAoBA,CAAA,EAAoE;EAAAC,EAAA;EAC/F,MAAM;IAAEC;EAAQ,CAAC,GAAGH,eAAe,CAAC,CAAC;EACrC,MAAM;IAAEI;EAAQ,CAAC,GAAGR,kBAAkB,CAAC,CAAC;EACxC,MAAMS,QAAQ,GAAGV,WAAW,CAAc,CAAC;EAE3C,MAAMW,WAAW,GAAGZ,WAAW,CAC5Ba,OAAe,IAAK;IACnB,IAAIH,OAAO,KAAKX,OAAO,CAACe,OAAO,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACA,OAAOV,qBAAqB,CAACQ,OAAO,EAAEJ,OAAO,CAAC;EAChD,CAAC,EACD,CAACC,OAAO,EAAED,OAAO,CACnB,CAAC;;EAED;EACA,OAAOT,WAAW,CAChB,OAAOgB,OAAe,EAAEC,YAAY,GAAG,IAAI,KAAK;IAC9C,MAAMC,SAAS,GAAGpB,MAAM,CAAC,CAAC;IAC1B,IAAImB,YAAY,EAAE;MAChBN,QAAQ,CAACR,cAAc,CAACgB,OAAO,CAAC;QAAED,SAAS;QAAEE,GAAG,EAAEJ;MAAQ,CAAC,CAAC,CAAC;IAC/D;IACA,OAAOZ,YAAY,CAACY,OAAO,EAAEJ,WAAW,CAAC,CACtCS,IAAI,CAAEC,SAAS,IAAK;MACnB,IAAIL,YAAY,EAAE;QAChBN,QAAQ,CAACR,cAAc,CAACoB,SAAS,CAAC;UAAEH,GAAG,EAAEJ,OAAO;UAAEM,SAAS;UAAEJ;QAAU,CAAC,CAAC,CAAC;MAC5E;MACA,OAAOI,SAAS;IAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6BT,OAAO,EAAE,EAAES,KAAK,CAAC;MAC5D,IAAIR,YAAY,EAAE;QAChBN,QAAQ,CAACR,cAAc,CAACwB,QAAQ,CAAC;UAAEP,GAAG,EAAEJ,OAAO;UAAEE,SAAS;UAAEU,YAAY,EAAEH,KAAK,CAACI;QAAQ,CAAC,CAAC,CAAC;MAC7F;MACA,MAAMJ,KAAK;IACb,CAAC,CAAC;EACN,CAAC,EACD,CAACd,QAAQ,EAAEC,WAAW,CACxB,CAAC;AACH;AAACJ,EAAA,CAvCQD,oBAAoB;EAAA,QACPD,eAAe,EACfJ,kBAAkB,EACrBD,WAAW;AAAA;AAsC9B,eAAeM,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}