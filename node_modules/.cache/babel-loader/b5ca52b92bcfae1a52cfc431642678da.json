{"ast":null,"code":"import{ethers}from'ethers';/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */export const estimateGas=async(contract,methodName,methodArgs,gasMarginPer10000)=>{if(!contract[methodName]){throw new Error(\"Method \".concat(methodName,\" doesn't exist on \").concat(contract.address));}const rawGasEstimation=await contract.estimateGas[methodName](...methodArgs);// By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\nconst gasEstimation=rawGasEstimation.mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000))).div(ethers.BigNumber.from(10000));return gasEstimation;};/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */export const callWithEstimateGas=async function(contract,methodName){let methodArgs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let gasMarginPer10000=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1000;const gasEstimation=estimateGas(contract,methodName,methodArgs,gasMarginPer10000);const tx=await contract[methodName](...methodArgs,{gasLimit:gasEstimation});return tx;};","map":{"version":3,"names":["ethers","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","Error","concat","address","rawGasEstimation","gasEstimation","mul","BigNumber","from","add","div","callWithEstimateGas","arguments","length","undefined","tx","gasLimit"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/calls/estimateGas.ts"],"sourcesContent":["import { ethers, Contract } from 'ethers'\r\n\r\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const estimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[],\r\n  gasMarginPer10000: number,\r\n) => {\r\n  if (!contract[methodName]) {\r\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\r\n  }\r\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\r\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\r\n  const gasEstimation = rawGasEstimation\r\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\r\n    .div(ethers.BigNumber.from(10000))\r\n  return gasEstimation\r\n}\r\n\r\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const callWithEstimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[] = [],\r\n  gasMarginPer10000 = 1000,\r\n): Promise<ethers.providers.TransactionResponse> => {\r\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\r\n  const tx = await contract[methodName](...methodArgs, {\r\n    gasLimit: gasEstimation,\r\n  })\r\n  return tx\r\n}\r\n"],"mappings":"AAAA,OAASA,MAAM,KAAkB,QAAQ,CAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAAA,CACzBC,QAAkB,CAClBC,UAAkB,CAClBC,UAAiB,CACjBC,iBAAyB,GACtB,CACH,GAAI,CAACH,QAAQ,CAACC,UAAU,CAAC,CAAE,CACzB,KAAM,IAAI,CAAAG,KAAK,WAAAC,MAAA,CAAWJ,UAAU,uBAAAI,MAAA,CAAqBL,QAAQ,CAACM,OAAO,CAAE,CAAC,CAC9E,CACA,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAP,QAAQ,CAACD,WAAW,CAACE,UAAU,CAAC,CAAC,GAAGC,UAAU,CAAC,CAC9E;AACA,KAAM,CAAAM,aAAa,CAAGD,gBAAgB,CACnCE,GAAG,CAACX,MAAM,CAACY,SAAS,CAACC,IAAI,CAAC,KAAK,CAAC,CAACC,GAAG,CAACd,MAAM,CAACY,SAAS,CAACC,IAAI,CAACR,iBAAiB,CAAC,CAAC,CAAC,CAC/EU,GAAG,CAACf,MAAM,CAACY,SAAS,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CACpC,MAAO,CAAAH,aAAa,CACtB,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAM,mBAAmB,CAAG,cAAAA,CACjCd,QAAkB,CAClBC,UAAkB,CAGgC,IAFlD,CAAAC,UAAiB,CAAAa,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IACtB,CAAAZ,iBAAiB,CAAAY,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAExB,KAAM,CAAAP,aAAa,CAAGT,WAAW,CAACC,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAEC,iBAAiB,CAAC,CACtF,KAAM,CAAAe,EAAE,CAAG,KAAM,CAAAlB,QAAQ,CAACC,UAAU,CAAC,CAAC,GAAGC,UAAU,CAAE,CACnDiB,QAAQ,CAAEX,aACZ,CAAC,CAAC,CACF,MAAO,CAAAU,EAAE,CACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}