{"ast":null,"code":"import { BetPosition } from 'state/types';\nimport { formatNumber } from 'utils/formatBalance';\nexport const formatUsd = usd => {\n  return `$${formatNumber(usd || 0, 3, 3)}`;\n};\nexport const formatBnb = bnb => {\n  return bnb ? bnb.toLocaleString(undefined, {\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3\n  }) : '0';\n};\nexport const getMultiplier = (total, amount) => {\n  if (total === 0 || amount === 0) {\n    return 0;\n  }\n  return total / amount;\n};\n\n/**\r\n * Calculates the total payout given a bet\r\n */\nexport const getPayout = (bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0;\n  }\n  const {\n    bullAmount,\n    bearAmount,\n    totalAmount\n  } = bet.round;\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount);\n  return bet.amount * multiplier * rewardRate;\n};\nexport const getNetPayout = (bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0;\n  }\n  const payout = getPayout(bet, rewardRate);\n  return payout - bet.amount;\n};","map":{"version":3,"names":["BetPosition","formatNumber","formatUsd","usd","formatBnb","bnb","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","bet","rewardRate","round","bullAmount","bearAmount","totalAmount","multiplier","position","BULL","getNetPayout","payout"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Predictions/components/History/helpers.ts"],"sourcesContent":["import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n"],"mappings":"AAAA,SAAcA,WAAW,QAAQ,aAAa;AAC9C,SAASC,YAAY,QAAQ,qBAAqB;AAElD,OAAO,MAAMC,SAAS,GAAIC,GAAW,IAAK;EACxC,OAAO,IAAIF,YAAY,CAACE,GAAG,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;AAC3C,CAAC;AAED,OAAO,MAAMC,SAAS,GAAIC,GAAW,IAAK;EACxC,OAAOA,GAAG,GAAGA,GAAG,CAACC,cAAc,CAACC,SAAS,EAAE;IAAEC,qBAAqB,EAAE,CAAC;IAAEC,qBAAqB,EAAE;EAAE,CAAC,CAAC,GAAG,GAAG;AAC1G,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAa,EAAEC,MAAc,KAAK;EAC9D,IAAID,KAAK,KAAK,CAAC,IAAIC,MAAM,KAAK,CAAC,EAAE;IAC/B,OAAO,CAAC;EACV;EAEA,OAAOD,KAAK,GAAGC,MAAM;AACvB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACC,GAAQ,EAAEC,UAAU,GAAG,CAAC,KAAK;EACrD,IAAI,CAACD,GAAG,IAAI,CAACA,GAAG,CAACE,KAAK,EAAE;IACtB,OAAO,CAAC;EACV;EAEA,MAAM;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAGL,GAAG,CAACE,KAAK;EACzD,MAAMI,UAAU,GAAGV,aAAa,CAACS,WAAW,EAAEL,GAAG,CAACO,QAAQ,KAAKrB,WAAW,CAACsB,IAAI,GAAGL,UAAU,GAAGC,UAAU,CAAC;EAC1G,OAAOJ,GAAG,CAACF,MAAM,GAAGQ,UAAU,GAAGL,UAAU;AAC7C,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAGA,CAACT,GAAQ,EAAEC,UAAU,GAAG,CAAC,KAAa;EAChE,IAAI,CAACD,GAAG,IAAI,CAACA,GAAG,CAACE,KAAK,EAAE;IACtB,OAAO,CAAC;EACV;EAEA,MAAMQ,MAAM,GAAGX,SAAS,CAACC,GAAG,EAAEC,UAAU,CAAC;EACzC,OAAOS,MAAM,GAAGV,GAAG,CAACF,MAAM;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}