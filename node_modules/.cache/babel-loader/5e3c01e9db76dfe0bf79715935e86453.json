{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Swap\\\\components\\\\ConfirmSwapModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useMemo } from 'react';\nimport { currencyEquals } from '@pancakeswap/sdk';\nimport { useTranslation } from 'contexts/Localization';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from 'components/TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\n\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\nconst ConfirmSwapModal = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash\n}) => {\n  _s();\n  var _trade$inputAmount$to, _trade$inputAmount, _trade$inputAmount$cu, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount$t, _trade$outputAmount, _trade$outputAmount$c, _trade$outputAmount2, _trade$outputAmount2$;\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const {\n    t\n  } = useTranslation();\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      allowedSlippage: allowedSlippage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade]);\n\n  // text to show while loading\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n    amountA: (_trade$inputAmount$to = trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6)) !== null && _trade$inputAmount$to !== void 0 ? _trade$inputAmount$to : '',\n    symbolA: (_trade$inputAmount$cu = trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol) !== null && _trade$inputAmount$cu !== void 0 ? _trade$inputAmount$cu : '',\n    amountB: (_trade$outputAmount$t = trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6)) !== null && _trade$outputAmount$t !== void 0 ? _trade$outputAmount$t : '',\n    symbolB: (_trade$outputAmount$c = trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol) !== null && _trade$outputAmount$c !== void 0 ? _trade$outputAmount$c : ''\n  });\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n    topContent: modalHeader,\n    bottomContent: modalBottom\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this), [onDismiss, modalBottom, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    title: t('Confirm Swap'),\n    onDismiss: onDismiss,\n    customOnDismiss: customOnDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText,\n    currencyToAdd: trade === null || trade === void 0 ? void 0 : trade.outputAmount.currency\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfirmSwapModal, \"qEvOhHilbCvvUnRd13T6oMb15ik=\", false, function () {\n  return [useTranslation];\n});\n_c = ConfirmSwapModal;\nexport default ConfirmSwapModal;\nvar _c;\n$RefreshReg$(_c, \"ConfirmSwapModal\");","map":{"version":3,"names":["React","useCallback","useMemo","currencyEquals","useTranslation","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","jsxDEV","_jsxDEV","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","customOnDismiss","recipient","swapErrorMessage","attemptingTxn","txHash","_s","_trade$inputAmount$to","_trade$inputAmount","_trade$inputAmount$cu","_trade$inputAmount2","_trade$inputAmount2$c","_trade$outputAmount$t","_trade$outputAmount","_trade$outputAmount$c","_trade$outputAmount2","_trade$outputAmount2$","showAcceptChanges","Boolean","t","modalHeader","fileName","_jsxFileName","lineNumber","columnNumber","modalBottom","disabledConfirm","pendingText","amountA","toSignificant","symbolA","symbol","amountB","symbolB","confirmationContent","message","topContent","bottomContent","title","hash","content","currencyToAdd","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Swap/components/ConfirmSwapModal.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport { currencyEquals, Trade } from '@pancakeswap/sdk'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\ninterface ConfirmSwapModalProps {\r\n  trade?: Trade\r\n  originalTrade?: Trade\r\n  attemptingTxn: boolean\r\n  txHash?: string\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage?: string\r\n  customOnDismiss?: () => void\r\n}\r\n\r\nconst ConfirmSwapModal: React.FC<InjectedModalProps & ConfirmSwapModalProps> = ({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  customOnDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  attemptingTxn,\r\n  txHash,\r\n}) => {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  // text to show while loading\r\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\r\n    amountA: trade?.inputAmount?.toSignificant(6) ?? '',\r\n    symbolA: trade?.inputAmount?.currency?.symbol ?? '',\r\n    amountB: trade?.outputAmount?.toSignificant(6) ?? '',\r\n    symbolB: trade?.outputAmount?.currency?.symbol ?? '',\r\n  })\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage],\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      title={t('Confirm Swap')}\r\n      onDismiss={onDismiss}\r\n      customOnDismiss={customOnDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n      currencyToAdd={trade?.outputAmount.currency}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ConfirmSwapModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}