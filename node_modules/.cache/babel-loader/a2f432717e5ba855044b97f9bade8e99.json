{"ast":null,"code":"'use strict';\n\nconst {\n  names\n} = require('multibase/src/constants');\nconst {\n  TextDecoder\n} = require('web-encoding');\nconst utf8Decoder = new TextDecoder('utf8');\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array The array to turn into a string\n * @returns {String}\n */\nfunction uint8ArrayToAsciiString(array) {\n  let string = '';\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i]);\n  }\n  return string;\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array The array to turn into a string\n * @param {String} [encoding=utf8] The encoding to use\n * @returns {String}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction toString(array) {\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array);\n  }\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array);\n  }\n  const codec = names[encoding];\n  if (!codec) {\n    throw new Error('Unknown base');\n  }\n  return codec.encode(array);\n}\nmodule.exports = toString;","map":{"version":3,"names":["names","require","TextDecoder","utf8Decoder","uint8ArrayToAsciiString","array","string","i","length","String","fromCharCode","toString","encoding","arguments","undefined","decode","codec","Error","encode","module","exports"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/multicodec/node_modules/uint8arrays/to-string.js"],"sourcesContent":["'use strict'\n\nconst { names } = require('multibase/src/constants')\nconst { TextDecoder } = require('web-encoding')\nconst utf8Decoder = new TextDecoder('utf8')\n\n/**\n * Turns a Uint8Array of bytes into a string with each\n * character being the char code of the corresponding byte\n *\n * @param {Uint8Array} array The array to turn into a string\n * @returns {String}\n */\nfunction uint8ArrayToAsciiString (array) {\n  let string = ''\n\n  for (let i = 0; i < array.length; i++) {\n    string += String.fromCharCode(array[i])\n  }\n  return string\n}\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array The array to turn into a string\n * @param {String} [encoding=utf8] The encoding to use\n * @returns {String}\n * @see {@link https://www.npmjs.com/package/multibase|multibase} for supported encodings other than `utf8`\n */\nfunction toString (array, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Decoder.decode(array)\n  }\n\n  if (encoding === 'ascii') {\n    return uint8ArrayToAsciiString(array)\n  }\n\n  const codec = names[encoding]\n\n  if (!codec) {\n    throw new Error('Unknown base')\n  }\n\n  return codec.encode(array)\n}\n\nmodule.exports = toString\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACpD,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAME,WAAW,GAAG,IAAID,WAAW,CAAC,MAAM,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,uBAAuBA,CAAEC,KAAK,EAAE;EACvC,IAAIC,MAAM,GAAG,EAAE;EAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,MAAM,IAAIG,MAAM,CAACC,YAAY,CAACL,KAAK,CAACE,CAAC,CAAC,CAAC;EACzC;EACA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,QAAQA,CAAEN,KAAK,EAAqB;EAAA,IAAnBO,QAAQ,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,MAAM;EACzC,IAAID,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,EAAE;IAC/C,OAAOT,WAAW,CAACY,MAAM,CAACV,KAAK,CAAC;EAClC;EAEA,IAAIO,QAAQ,KAAK,OAAO,EAAE;IACxB,OAAOR,uBAAuB,CAACC,KAAK,CAAC;EACvC;EAEA,MAAMW,KAAK,GAAGhB,KAAK,CAACY,QAAQ,CAAC;EAE7B,IAAI,CAACI,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACjC;EAEA,OAAOD,KAAK,CAACE,MAAM,CAACb,KAAK,CAAC;AAC5B;AAEAc,MAAM,CAACC,OAAO,GAAGT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}