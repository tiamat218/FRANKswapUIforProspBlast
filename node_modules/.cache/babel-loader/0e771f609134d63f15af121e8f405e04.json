{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, {\n  payload: {\n    typedValue,\n    recipient,\n    field,\n    inputCurrencyId,\n    outputCurrencyId\n  }\n}) => {\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    independentField: field,\n    typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, {\n  payload: {\n    currencyId,\n    field\n  }\n}) => {\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return {\n      ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  }\n  // the normal case\n  return {\n    ...state,\n    [field]: {\n      currencyId\n    }\n  };\n}).addCase(switchCurrencies, state => {\n  return {\n    ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue\n  }\n}) => {\n  return {\n    ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, {\n  payload: {\n    recipient\n  }\n}) => {\n  state.recipient = recipient;\n}));","map":{"version":3,"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","builder","addCase","state","payload","field","inputCurrencyId","outputCurrencyId","otherField"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\n\r\nexport interface SwapState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly [Field.INPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  readonly [Field.OUTPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  // the typed recipient address or ENS name, or null if swap should go to sender\r\n  readonly recipient: string | null\r\n}\r\n\r\nconst initialState: SwapState = {\r\n  independentField: Field.INPUT,\r\n  typedValue: '',\r\n  [Field.INPUT]: {\r\n    currencyId: '',\r\n  },\r\n  [Field.OUTPUT]: {\r\n    currencyId: '',\r\n  },\r\n  recipient: null,\r\n}\r\n\r\nexport default createReducer<SwapState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(\r\n      replaceSwapState,\r\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\r\n        return {\r\n          [Field.INPUT]: {\r\n            currencyId: inputCurrencyId,\r\n          },\r\n          [Field.OUTPUT]: {\r\n            currencyId: outputCurrencyId,\r\n          },\r\n          independentField: field,\r\n          typedValue,\r\n          recipient,\r\n        }\r\n      },\r\n    )\r\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\r\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n      if (currencyId === state[otherField].currencyId) {\r\n        // the case where we have to swap the order\r\n        return {\r\n          ...state,\r\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n          [field]: { currencyId },\r\n          [otherField]: { currencyId: state[field].currencyId },\r\n        }\r\n      }\r\n      // the normal case\r\n      return {\r\n        ...state,\r\n        [field]: { currencyId },\r\n      }\r\n    })\r\n    .addCase(switchCurrencies, (state) => {\r\n      return {\r\n        ...state,\r\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\r\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\r\n      }\r\n    })\r\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n      }\r\n    })\r\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\r\n      state.recipient = recipient\r\n    }),\r\n)\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}