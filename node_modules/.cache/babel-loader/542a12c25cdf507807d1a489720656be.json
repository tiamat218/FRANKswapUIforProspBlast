{"ast":null,"code":"var _s = $RefreshSig$();\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport { isAddress } from '../../utils';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\nexport default function useENSName(address) {\n  _s();\n  var _resolverAddress$resu, _name$result$, _name$result;\n  const debouncedAddress = useDebounce(address, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n    try {\n      return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)];\n    } catch (error) {\n      console.error('Invalid address for ENS name lookup:', error);\n      return [undefined];\n    }\n  }, [debouncedAddress]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false);\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult);\n  return {\n    ENSName: isResolverAddressValid ? (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null : null,\n    loading: resolverAddress.loading || name.loading\n  };\n}\n_s(useENSName, \"8g3MyTb9JnGx6yiMJXxKZlnslKc=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSName","address","_s","_resolverAddress$resu","_name$result$","_name$result","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","error","console","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","isResolverAddressValid","ENSName","loading"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSName.ts"],"sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport { isAddress } from '../../utils'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\r\n    try {\r\n      return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)]\r\n    } catch (error) {\r\n      console.error('Invalid address for ENS name lookup:', error)\r\n      return [undefined]\r\n    }\r\n  }, [debouncedAddress])\r\n\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n\r\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false)\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\r\n\r\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult)\r\n\r\n  return {\r\n    ENSName: isResolverAddressValid ? name.result?.[0] ?? null : null,\r\n    loading: resolverAddress.loading || name.loading,\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,SAAS,QAAQ,aAAa;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ,gBAAgB;AAChF,OAAOC,WAAW,MAAM,gBAAgB;AAExC,eAAe,SAASC,UAAUA,CAACC,OAAgB,EAAgD;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,aAAA,EAAAC,YAAA;EACjG,MAAMC,gBAAgB,GAAGP,WAAW,CAACE,OAAO,EAAE,GAAG,CAAC;EAClD,MAAMM,eAAe,GAAGd,OAAO,CAAC,MAAM;IACpC,IAAI,CAACa,gBAAgB,IAAI,CAACX,SAAS,CAACW,gBAAgB,CAAC,EAAE,OAAO,CAACE,SAAS,CAAC;IACzE,IAAI;MACF,OAAO,CAAChB,QAAQ,CAAC,GAAGc,gBAAgB,CAACG,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;IAC/E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,CAACH,SAAS,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,gBAAgB,CAAC,CAAC;EAEtB,MAAMO,iBAAiB,GAAGhB,uBAAuB,CAAC,KAAK,CAAC;EACxD,MAAMiB,eAAe,GAAGpB,mBAAmB,CAACmB,iBAAiB,EAAE,UAAU,EAAEN,eAAe,CAAC;EAC3F,MAAMQ,qBAAqB,IAAAZ,qBAAA,GAAGW,eAAe,CAACE,MAAM,cAAAb,qBAAA,uBAAtBA,qBAAA,CAAyB,CAAC,CAAC;EAEzD,MAAMc,gBAAgB,GAAGnB,sBAAsB,CAACiB,qBAAqB,IAAIP,SAAS,EAAE,KAAK,CAAC;EAC1F,MAAMU,IAAI,GAAGxB,mBAAmB,CAACuB,gBAAgB,EAAE,MAAM,EAAEV,eAAe,CAAC;EAE3E,MAAMY,sBAAsB,GAAGJ,qBAAqB,IAAI,CAACnB,MAAM,CAACmB,qBAAqB,CAAC;EAEtF,OAAO;IACLK,OAAO,EAAED,sBAAsB,IAAAf,aAAA,IAAAC,YAAA,GAAGa,IAAI,CAACF,MAAM,cAAAX,YAAA,uBAAXA,YAAA,CAAc,CAAC,CAAC,cAAAD,aAAA,cAAAA,aAAA,GAAI,IAAI,GAAG,IAAI;IACjEiB,OAAO,EAAEP,eAAe,CAACO,OAAO,IAAIH,IAAI,CAACG;EAC3C,CAAC;AACH;AAACnB,EAAA,CAzBuBF,UAAU;EAAA,QACPD,WAAW,EAWVF,uBAAuB,EACzBH,mBAAmB,EAGlBI,sBAAsB,EAClCJ,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}