{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { harvestFarm } from 'utils/calls';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nimport { DEFAULT_GAS_LIMIT } from 'config';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\nconst harvestPool = async sousChefContract => {\n  const tx = await sousChefContract.deposit('0', options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nconst harvestPoolBnb = async sousChefContract => {\n  const tx = await sousChefContract.deposit({\n    ...options,\n    value: BIG_ZERO\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const sousChefContract = useSousChef(sousId);\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0);\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract);\n    } else {\n      await harvestPool(sousChefContract);\n    }\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n_s(useHarvestPool, \"CZpRWa4Ye7nHR4cIWJtVsGIiaUI=\", false, function () {\n  return [useAppDispatch, useWeb3React, useSousChef, useMasterchef];\n});\nexport default useHarvestPool;","map":{"version":3,"names":["useCallback","useWeb3React","useAppDispatch","updateUserBalance","updateUserPendingReward","harvestFarm","BIG_ZERO","useMasterchef","useSousChef","DEFAULT_GAS_LIMIT","options","gasLimit","harvestPool","sousChefContract","tx","deposit","receipt","wait","status","harvestPoolBnb","value","useHarvestPool","sousId","isUsingBnb","_s","dispatch","account","masterChefContract","handleHarvest","onReward"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Pools/hooks/useHarvestPool.ts"],"sourcesContent":["import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { DEFAULT_GAS_LIMIT } from 'config'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst harvestPool = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit('0', options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst harvestPoolBnb = async (sousChefContract) => {\r\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvestFarm(masterChefContract, 0)\r\n    } else if (isUsingBnb) {\r\n      await harvestPoolBnb(sousChefContract)\r\n    } else {\r\n      await harvestPool(sousChefContract)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestPool\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,iBAAiB,EAAEC,uBAAuB,QAAQ,eAAe;AAC1E,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,aAAa,EAAEC,WAAW,QAAQ,mBAAmB;AAC9D,SAASC,iBAAiB,QAAQ,QAAQ;AAE1C,MAAMC,OAAO,GAAG;EACdC,QAAQ,EAAEF;AACZ,CAAC;AAED,MAAMG,WAAW,GAAG,MAAOC,gBAAgB,IAAK;EAC9C,MAAMC,EAAE,GAAG,MAAMD,gBAAgB,CAACE,OAAO,CAAC,GAAG,EAAEL,OAAO,CAAC;EACvD,MAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAI,CAAC,CAAC;EAC/B,OAAOD,OAAO,CAACE,MAAM;AACvB,CAAC;AAED,MAAMC,cAAc,GAAG,MAAON,gBAAgB,IAAK;EACjD,MAAMC,EAAE,GAAG,MAAMD,gBAAgB,CAACE,OAAO,CAAC;IAAE,GAAGL,OAAO;IAAEU,KAAK,EAAEd;EAAS,CAAC,CAAC;EAC1E,MAAMU,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAI,CAAC,CAAC;EAC/B,OAAOD,OAAO,CAACE,MAAM;AACvB,CAAC;AAED,MAAMG,cAAc,GAAGA,CAACC,MAAM,EAAEC,UAAU,GAAG,KAAK,KAAK;EAAAC,EAAA;EACrD,MAAMC,QAAQ,GAAGvB,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEwB;EAAQ,CAAC,GAAGzB,YAAY,CAAC,CAAC;EAClC,MAAMY,gBAAgB,GAAGL,WAAW,CAACc,MAAM,CAAC;EAC5C,MAAMK,kBAAkB,GAAGpB,aAAa,CAAC,CAAC;EAE1C,MAAMqB,aAAa,GAAG5B,WAAW,CAAC,YAAY;IAC5C,IAAIsB,MAAM,KAAK,CAAC,EAAE;MAChB,MAAMjB,WAAW,CAACsB,kBAAkB,EAAE,CAAC,CAAC;IAC1C,CAAC,MAAM,IAAIJ,UAAU,EAAE;MACrB,MAAMJ,cAAc,CAACN,gBAAgB,CAAC;IACxC,CAAC,MAAM;MACL,MAAMD,WAAW,CAACC,gBAAgB,CAAC;IACrC;IACAY,QAAQ,CAACrB,uBAAuB,CAACkB,MAAM,EAAEI,OAAO,CAAC,CAAC;IAClDD,QAAQ,CAACtB,iBAAiB,CAACmB,MAAM,EAAEI,OAAO,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACA,OAAO,EAAED,QAAQ,EAAEF,UAAU,EAAEI,kBAAkB,EAAEd,gBAAgB,EAAES,MAAM,CAAC,CAAC;EAEjF,OAAO;IAAEO,QAAQ,EAAED;EAAc,CAAC;AACpC,CAAC;AAAAJ,EAAA,CAnBKH,cAAc;EAAA,QACDnB,cAAc,EACXD,YAAY,EACPO,WAAW,EACTD,aAAa;AAAA;AAiB1C,eAAec,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}