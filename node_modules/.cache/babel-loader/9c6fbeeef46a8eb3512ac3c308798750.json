{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\VaultStakeModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useCakeVaultContract } from 'hooks/useContract';\nimport useTheme from 'hooks/useTheme';\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { fetchCakeVaultUserData } from 'state/pools';\nimport { getAddress } from 'utils/addressHelpers';\nimport { convertCakeToShares } from '../../helpers';\nimport FeeSummary from './FeeSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`;\n_c = StyledButton;\nconst callOptions = {\n  gasLimit: 380000\n};\nconst VaultStakeModal = ({\n  pool,\n  stakingMax,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    stakingToken\n  } = pool;\n  const {\n    account\n  } = useWeb3React();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [percent, setPercent] = useState(0);\n  const {\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares);\n  const cakePriceBusd = usePriceCakeBusd();\n  const usdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : '';\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals));\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber());\n      setPercent(percentage > 100 ? 100 : percentage);\n    } else {\n      setPercent(0);\n    }\n    setStakeAmount(input);\n  };\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n    setPercent(sliderPercent);\n  };\n  const handleWithdrawal = async convertedStakeAmount => {\n    setPendingTx(true);\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare);\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000);\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n    if (isWithdrawingAll) {\n      try {\n        const tx = await cakeVaultContract.withdrawAll(callOptions);\n        const receipt = await tx.wait();\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions);\n        const receipt = await tx.wait();\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n  const handleDeposit = async convertedStakeAmount => {\n    setPendingTx(true);\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions);\n      const receipt = await tx.wait();\n      if (receipt.status) {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'));\n        setPendingTx(false);\n        onDismiss();\n        dispatch(fetchCakeVaultUserData({\n          account\n        }));\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setPendingTx(false);\n    }\n  };\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount);\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${getAddress(stakingToken.address)}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mt: \"8px\",\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(stakingMax, stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), isRemovingStake && hasUnstakingFee && /*#__PURE__*/_jsxDEV(FeeSummary, {\n      stakingTokenSymbol: stakingToken.symbol,\n      stakeAmount: stakeAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      as: \"a\",\n      external: true,\n      href: \"/swap\",\n      variant: \"secondary\",\n      children: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(VaultStakeModal, \"Kq8IdUGexXZ1OaXj1Cu+U5BIYzs=\", false, function () {\n  return [useAppDispatch, useWeb3React, useCakeVaultContract, useCakeVault, useTranslation, useTheme, useToast, useWithdrawalFeeTimer, usePriceCakeBusd];\n});\n_c2 = VaultStakeModal;\nexport default VaultStakeModal;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"VaultStakeModal\");","map":{"version":3,"names":["React","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","useTranslation","useWeb3React","useAppDispatch","BIG_TEN","usePriceCakeBusd","useCakeVault","useCakeVaultContract","useTheme","useWithdrawalFeeTimer","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","useToast","fetchCakeVaultUserData","getAddress","convertCakeToShares","FeeSummary","jsxDEV","_jsxDEV","StyledButton","_c","callOptions","gasLimit","VaultStakeModal","pool","stakingMax","isRemovingStake","onDismiss","_s","dispatch","stakingToken","account","cakeVaultContract","userData","lastDepositedTime","userShares","pricePerFullShare","t","theme","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","hasUnstakingFee","parseInt","cakePriceBusd","usdValueStaked","gt","times","toNumber","handleStakeInputChange","input","convertedInput","multipliedBy","pow","decimals","percentage","Math","floor","dividedBy","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","sharesAsBigNumber","isWithdrawingAll","lte","tx","withdrawAll","receipt","wait","status","error","withdraw","toString","handleDeposit","deposit","handleConfirmClick","title","headerBackground","colors","gradients","cardHeader","children","alignItems","justifyContent","mb","bold","fileName","_jsxFileName","lineNumber","columnNumber","minWidth","src","address","width","height","alt","symbol","ml","value","onUserInput","currencyValue","mt","color","fontSize","balance","min","max","onValueChanged","name","valueLabel","step","scale","mx","p","variant","onClick","stakingTokenSymbol","isLoading","endIcon","spin","disabled","parseFloat","as","external","href","_c2","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst callOptions = {\r\n  gasLimit: 380000,\r\n}\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      try {\r\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      try {\r\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    try {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      handleWithdrawal(convertedStakeAmount)\r\n    } else {\r\n      // staking\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href=\"/swap\" variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}