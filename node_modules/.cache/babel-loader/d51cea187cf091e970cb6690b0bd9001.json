{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Swap\\\\components\\\\AdvancedSwapDetails.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TradeType } from '@pancakeswap/sdk';\nimport { Text } from '@pancakeswap/uikit';\nimport { Field } from 'state/swap/actions';\nimport { useUserSlippageTolerance } from 'state/user/hooks';\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from 'utils/prices';\nimport { AutoColumn } from 'components/Layout/Column';\nimport QuestionHelper from 'components/QuestionHelper';\nimport { RowBetween, RowFixed } from 'components/Layout/Row';\nimport FormattedPriceImpact from './FormattedPriceImpact';\nimport SwapRoute from './SwapRoute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TradeSummary({\n  trade,\n  allowedSlippage\n}) {\n  var _ref, _slippageAdjustedAmou, _ref2, _slippageAdjustedAmou2;\n\n  const {\n    priceImpactWithoutFee,\n    realizedLPFee\n  } = computeTradePriceBreakdown(trade);\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT;\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage);\n  return /*#__PURE__*/_jsxDEV(AutoColumn, {\n    style: {\n      padding: '0 16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n      children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"textSubtle\",\n          children: isExactIn ? 'Minimum received' : 'Maximum sold'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: \"Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.\",\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowFixed, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: isExactIn ? (_ref = `${(_slippageAdjustedAmou = slippageAdjustedAmounts[Field.OUTPUT]) === null || _slippageAdjustedAmou === void 0 ? void 0 : _slippageAdjustedAmou.toSignificant(4)} ${trade.outputAmount.currency.symbol}`) !== null && _ref !== void 0 ? _ref : '-' : (_ref2 = `${(_slippageAdjustedAmou2 = slippageAdjustedAmounts[Field.INPUT]) === null || _slippageAdjustedAmou2 === void 0 ? void 0 : _slippageAdjustedAmou2.toSignificant(4)} ${trade.inputAmount.currency.symbol}`) !== null && _ref2 !== void 0 ? _ref2 : '-'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n      children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"textSubtle\",\n          children: \"Price Impact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: \"The difference between the market price and estimated price due to trade size.\",\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormattedPriceImpact, {\n        priceImpact: priceImpactWithoutFee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n      children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"textSubtle\",\n          children: \"Liquidity Provider Fee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              mb: \"12px\",\n              children: \"For each trade a 0.25% fee is paid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: \"- 0.17% to LP token holders\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: \"- 0.03% to the Treasury\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: \"- 0.05% towards CAKE buyback and burn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true),\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"14px\",\n        children: realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_c = TradeSummary;\nexport function AdvancedSwapDetails({\n  trade\n}) {\n  _s();\n\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const showRoute = Boolean(trade && trade.route.path.length > 2);\n  return /*#__PURE__*/_jsxDEV(AutoColumn, {\n    gap: \"0px\",\n    children: trade && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TradeSummary, {\n        trade: trade,\n        allowedSlippage: allowedSlippage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), showRoute && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(RowBetween, {\n          style: {\n            padding: '0 16px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"14px\",\n              color: \"textSubtle\",\n              children: \"Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n              text: \"Routing through these tokens resulted in the best price for your trade.\",\n              ml: \"4px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(SwapRoute, {\n            trade: trade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdvancedSwapDetails, \"H61stQQnrbnQDlNsdLMys3w1hVM=\", false, function () {\n  return [useUserSlippageTolerance];\n});\n\n_c2 = AdvancedSwapDetails;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TradeSummary\");\n$RefreshReg$(_c2, \"AdvancedSwapDetails\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Swap/components/AdvancedSwapDetails.tsx"],"names":["React","TradeType","Text","Field","useUserSlippageTolerance","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","AutoColumn","QuestionHelper","RowBetween","RowFixed","FormattedPriceImpact","SwapRoute","TradeSummary","trade","allowedSlippage","priceImpactWithoutFee","realizedLPFee","isExactIn","tradeType","EXACT_INPUT","slippageAdjustedAmounts","padding","OUTPUT","toSignificant","outputAmount","currency","symbol","INPUT","inputAmount","AdvancedSwapDetails","showRoute","Boolean","route","path","length","display","alignItems"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Trade, TradeType } from '@pancakeswap/sdk'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Field } from 'state/swap/actions'\r\nimport { useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from 'utils/prices'\r\nimport { AutoColumn } from 'components/Layout/Column'\r\nimport QuestionHelper from 'components/QuestionHelper'\r\nimport { RowBetween, RowFixed } from 'components/Layout/Row'\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport SwapRoute from './SwapRoute'\r\n\r\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\r\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\r\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\r\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\r\n\r\n  return (\r\n    <AutoColumn style={{ padding: '0 16px' }}>\r\n      <RowBetween>\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {isExactIn ? 'Minimum received' : 'Maximum sold'}\r\n          </Text>\r\n          <QuestionHelper\r\n            text=\"Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.\"\r\n            ml=\"4px\"\r\n          />\r\n        </RowFixed>\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\">\r\n            {isExactIn\r\n              ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\r\n                '-'\r\n              : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ?? '-'}\r\n          </Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            Price Impact\r\n          </Text>\r\n          <QuestionHelper\r\n            text=\"The difference between the market price and estimated price due to trade size.\"\r\n            ml=\"4px\"\r\n          />\r\n        </RowFixed>\r\n        <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n      </RowBetween>\r\n\r\n      <RowBetween>\r\n        <RowFixed>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            Liquidity Provider Fee\r\n          </Text>\r\n          <QuestionHelper\r\n            text={\r\n              <>\r\n                <Text mb=\"12px\">For each trade a 0.25% fee is paid</Text>\r\n                <Text>- 0.17% to LP token holders</Text>\r\n                <Text>- 0.03% to the Treasury</Text>\r\n                <Text>- 0.05% towards CAKE buyback and burn</Text>\r\n              </>\r\n            }\r\n            ml=\"4px\"\r\n          />\r\n        </RowFixed>\r\n        <Text fontSize=\"14px\">\r\n          {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\r\n        </Text>\r\n      </RowBetween>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\nexport interface AdvancedSwapDetailsProps {\r\n  trade?: Trade\r\n}\r\n\r\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\r\n\r\n  return (\r\n    <AutoColumn gap=\"0px\">\r\n      {trade && (\r\n        <>\r\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\r\n          {showRoute && (\r\n            <>\r\n              <RowBetween style={{ padding: '0 16px' }}>\r\n                <span style={{ display: 'flex', alignItems: 'center' }}>\r\n                  <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                    Route\r\n                  </Text>\r\n                  <QuestionHelper\r\n                    text=\"Routing through these tokens resulted in the best price for your trade.\"\r\n                    ml=\"4px\"\r\n                  />\r\n                </span>\r\n                <SwapRoute trade={trade} />\r\n              </RowBetween>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </AutoColumn>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}