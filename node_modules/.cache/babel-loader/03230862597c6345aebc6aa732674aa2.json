{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useWithdrawalFeeTimer = (lastDepositedTime, userShares, withdrawalFeePeriod = 259200) => {\n  _s();\n\n  const [secondsRemaining, setSecondsRemaining] = useState(null);\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false);\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000));\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod;\n    const secondsRemainingCalc = feeEndTime - currentSeconds;\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0;\n\n    const tick = () => {\n      setCurrentSeconds(prevSeconds => prevSeconds + 1);\n    };\n\n    const timerInterval = setInterval(() => tick(), 1000);\n\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc);\n      setHasUnstakingFee(true);\n    } else {\n      setHasUnstakingFee(false);\n      clearInterval(timerInterval);\n    }\n\n    return () => clearInterval(timerInterval);\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares]);\n  return {\n    hasUnstakingFee,\n    secondsRemaining\n  };\n};\n\n_s(useWithdrawalFeeTimer, \"AKhu/nLNlDI69v08ggl2JO+xkc0=\");\n\nexport default useWithdrawalFeeTimer;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useWithdrawalFeeTimer.ts"],"names":["useEffect","useState","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","currentSeconds","setCurrentSeconds","Math","floor","Date","now","feeEndTime","secondsRemainingCalc","doesUnstakingFeeApply","gt","tick","prevSeconds","timerInterval","setInterval","clearInterval"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,iBAAD,EAA4BC,UAA5B,EAAmDC,mBAAmB,GAAG,MAAzE,KAAoF;AAAA;;AAChH,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAACW,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAD,CAApD;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,UAAU,GAAGb,iBAAiB,GAAGE,mBAAvC;AACA,UAAMY,oBAAoB,GAAGD,UAAU,GAAGN,cAA1C;AACA,UAAMQ,qBAAqB,GAAGd,UAAU,CAACe,EAAX,CAAc,CAAd,KAAoBF,oBAAoB,GAAG,CAAzE;;AAEA,UAAMG,IAAI,GAAG,MAAM;AACjBT,MAAAA,iBAAiB,CAAEU,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAjB;AACD,KAFD;;AAGA,UAAMC,aAAa,GAAGC,WAAW,CAAC,MAAMH,IAAI,EAAX,EAAe,IAAf,CAAjC;;AACA,QAAIF,qBAAJ,EAA2B;AACzBX,MAAAA,mBAAmB,CAACU,oBAAD,CAAnB;AACAR,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAHD,MAGO;AACLA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAe,MAAAA,aAAa,CAACF,aAAD,CAAb;AACD;;AAED,WAAO,MAAME,aAAa,CAACF,aAAD,CAA1B;AACD,GAlBQ,EAkBN,CAACnB,iBAAD,EAAoBE,mBAApB,EAAyCE,mBAAzC,EAA8DG,cAA9D,EAA8EN,UAA9E,CAlBM,CAAT;AAoBA,SAAO;AAAEI,IAAAA,eAAF;AAAmBF,IAAAA;AAAnB,GAAP;AACD,CA1BD;;GAAMJ,qB;;AA4BN,eAAeA,qBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\r\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\r\n\r\n  useEffect(() => {\r\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\r\n    const secondsRemainingCalc = feeEndTime - currentSeconds\r\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\r\n\r\n    const tick = () => {\r\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\r\n    }\r\n    const timerInterval = setInterval(() => tick(), 1000)\r\n    if (doesUnstakingFeeApply) {\r\n      setSecondsRemaining(secondsRemainingCalc)\r\n      setHasUnstakingFee(true)\r\n    } else {\r\n      setHasUnstakingFee(false)\r\n      clearInterval(timerInterval)\r\n    }\r\n\r\n    return () => clearInterval(timerInterval)\r\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\r\n\r\n  return { hasUnstakingFee, secondsRemaining }\r\n}\r\n\r\nexport default useWithdrawalFeeTimer\r\n"]},"metadata":{},"sourceType":"module"}