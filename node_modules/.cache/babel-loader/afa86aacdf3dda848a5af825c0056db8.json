{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Collectibles\\\\components\\\\ClaimNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useWeb3React } from '@web3-react/core';\nimport { Button, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c2 = Actions;\n\nconst ClaimNftModal = ({\n  nft,\n  onSuccess,\n  onClaim,\n  onDismiss\n}) => {\n  _s();\n\n  const [isConfirming, setIsConfirming] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n\n  const handleConfirm = async () => {\n    const tx = await onClaim();\n    setIsConfirming(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'));\n      onDismiss();\n      onSuccess();\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsConfirming(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Claim Collectible'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('You will receive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: t('1x %nftName% Collectible', {\n            nftName: nft.name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        onClick: handleConfirm,\n        disabled: !account,\n        isLoading: isConfirming,\n        endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          color: \"currentColor\",\n          spin: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 35\n        }, this) : null,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimNftModal, \"CPD477JjddhG/nJTCdFd/iLbz5k=\", false, function () {\n  return [useTranslation, useWeb3React, useToast];\n});\n\n_c3 = ClaimNftModal;\nexport default ClaimNftModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalContent\");\n$RefreshReg$(_c2, \"Actions\");\n$RefreshReg$(_c3, \"ClaimNftModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Collectibles/components/ClaimNftModal.tsx"],"names":["React","useState","styled","useWeb3React","Button","Modal","Text","Flex","AutoRenewIcon","useTranslation","useToast","ModalContent","div","Actions","ClaimNftModal","nft","onSuccess","onClaim","onDismiss","isConfirming","setIsConfirming","t","account","toastError","toastSuccess","handleConfirm","tx","receipt","wait","status","nftName","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    const tx = await onClaim()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Successfully claimed!'))\r\n      onDismiss()\r\n      onSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n"]},"metadata":{},"sourceType":"module"}