{"ast":null,"code":"import{useEffect,useState,useCallback}from'react';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{useERC20,useIfoV2Contract}from'hooks/useContract';import useRefresh from'hooks/useRefresh';import{multicallv2}from'utils/multicall';import ifoV2Abi from'config/abi/ifoV2.json';import{getAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';import useIfoAllowance from'../useIfoAllowance';/**\r\n * Gets all data from an IFO related to a wallet\r\n */const useGetWalletIfoData=ifo=>{const{fastRefresh}=useRefresh();const[state,setState]=useState({poolBasic:{amountTokenCommittedInLP:BIG_ZERO,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false},poolUnlimited:{amountTokenCommittedInLP:BIG_ZERO,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false}});const{address,currency}=ifo;const{account}=useWeb3React();const contract=useIfoV2Contract(address);const currencyContract=useERC20(getAddress(currency.address));const allowance=useIfoAllowance(currencyContract,address);const setPendingTx=(status,poolId)=>setState(prevState=>({...prevState,[poolId]:{...prevState[poolId],isPendingTx:status}}));const setIsClaimed=poolId=>{setState(prevState=>({...prevState,[poolId]:{...prevState[poolId],hasClaimed:true}}));};const fetchIfoData=useCallback(async()=>{const ifoCalls=['viewUserInfo','viewUserOfferingAndRefundingAmountsForPools'].map(method=>({address,name:method,params:[account,[0,1]]}));const[userInfo,amounts]=await multicallv2(ifoV2Abi,ifoCalls);setState(prevState=>({...prevState,poolBasic:{...prevState.poolBasic,amountTokenCommittedInLP:new BigNumber(userInfo[0][0].toString()),offeringAmountInToken:new BigNumber(amounts[0][0][0].toString()),refundingAmountInLP:new BigNumber(amounts[0][0][1].toString()),taxAmountInLP:new BigNumber(amounts[0][0][2].toString()),hasClaimed:userInfo[1][0]},poolUnlimited:{...prevState.poolUnlimited,amountTokenCommittedInLP:new BigNumber(userInfo[0][1].toString()),offeringAmountInToken:new BigNumber(amounts[0][1][0].toString()),refundingAmountInLP:new BigNumber(amounts[0][1][1].toString()),taxAmountInLP:new BigNumber(amounts[0][1][2].toString()),hasClaimed:userInfo[1][1]}}));},[account,address]);useEffect(()=>{if(account){fetchIfoData();}},[account,fetchIfoData,fastRefresh]);return{...state,allowance,contract,setPendingTx,setIsClaimed,fetchIfoData};};export default useGetWalletIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","useERC20","useIfoV2Contract","useRefresh","multicallv2","ifoV2Abi","getAddress","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","fastRefresh","state","setState","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","userInfo","amounts","toString"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Ifos/hooks/v2/useGetWalletIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const { fastRefresh } = useRefresh()\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    poolBasic: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n    poolUnlimited: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData, fastRefresh])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}