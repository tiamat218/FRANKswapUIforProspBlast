{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import styled from'styled-components';import{Card,CardBody,Flex,LaurelLeftIcon,LaurelRightIcon,Button,CheckmarkCircleIcon,useWalletModal,useModal}from'@pancakeswap/uikit';import{useHistory}from'react-router-dom';import useAuth from'hooks/useAuth';import{useTranslation}from'contexts/Localization';import{FINISHED,OVER}from'config/constants/trading-competition/easterPhases';import RegisterModal from'../RegisterModal';import ClaimModal from'../ClaimModal';import{Heading2Text}from'../CompetitionHeadingText';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: inline-flex;\\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\\n\\n  svg {\\n    margin-bottom: 6px;\\n    height: 32px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.colors.warning;});const StyledButton=styled(Button)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin: 16px 20px 0;\\n  z-index: 200;\\n\\n  svg {\\n    margin: 0 4px 0 0;\\n    height: 20px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),_ref2=>{let{theme}=_ref2;return theme.colors.textDisabled;});const StyledHeadingText=styled(Heading2Text)(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  white-space: normal;\\n\"])));const BattleCta=_ref3=>{let{userTradingInformation,currentPhase,account,isCompetitionLive,profile,userCanClaimPrizes,finishedAndPrizesClaimed,finishedAndNothingToClaim,isLoading,hasCompetitionEnded,onRegisterSuccess,onClaimSuccess}=_ref3;const history=useHistory();const{t}=useTranslation();const{login,logout}=useAuth();const{onPresentConnectModal}=useWalletModal(login,logout);const[onPresentRegisterModal]=useModal(/*#__PURE__*/_jsx(RegisterModal,{profile:profile,onRegisterSuccess:onRegisterSuccess}),false);const[onPresentClaimModal]=useModal(/*#__PURE__*/_jsx(ClaimModal,{userTradingInformation:userTradingInformation,onClaimSuccess:onClaimSuccess}),false);const{hasRegistered,hasUserClaimed}=userTradingInformation;const registeredAndNotStarted=hasRegistered&&!isCompetitionLive&&!hasCompetitionEnded;const isButtonDisabled=Boolean(isLoading||currentPhase.state===OVER||registeredAndNotStarted||finishedAndPrizesClaimed||finishedAndNothingToClaim);const getHeadingText=()=>{// Competition live\nif(isCompetitionLive){return t('Now Live!');}// Competition finished. Rewards being calculated\nif(currentPhase.state===FINISHED){return\"\".concat(t('Calculating prizes'),\"...\");}// All competition finished states\nif(hasCompetitionEnded){return\"\".concat(t('Finished'),\"!\");}// Competition not started\nreturn t('Starting Soon');};const getButtonText=()=>{// No wallet connected\nif(!account){return t('Connect Wallet');}// User not registered\nif(!hasRegistered){return t('I want to Battle!');}// User registered and competition live\nif(isCompetitionLive){return t('Trade Now');}// User registered and competition finished\nif(hasCompetitionEnded){// Claim period has ended\nif(currentPhase.state===OVER){return t('Claim period over');}// User has prizes to claim\nif(userCanClaimPrizes){return t('Claim prizes');}// User has already claimed prizes\nif(hasUserClaimed){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{}),\" \",t('Prizes Claimed!')]});}// User has nothing to claim\nreturn t('Nothing to claim');}// User registered but competition has not started\nif(!isCompetitionLive){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{}),\" \",t('Registered!')]});}// May be useful for debugging - if somehow none of the above conditions are met\nreturn'Whoopsie';};const handleCtaClick=()=>{// All conditions when button isn't disabled\n// No wallet connected\nif(!account){onPresentConnectModal();}// Wallet connected but user not registered\nif(account&&!hasRegistered){onPresentRegisterModal();}// Registered and competition is live\nif(hasRegistered&&isCompetitionLive){history.push('/swap');}// Registered and competition has finished\nif(hasRegistered&&hasCompetitionEnded){onPresentClaimModal();}};return/*#__PURE__*/_jsx(StyledCard,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(StyledHeadingText,{children:getHeadingText()}),currentPhase.state!==FINISHED&&/*#__PURE__*/_jsxs(Flex,{alignItems:\"flex-end\",children:[/*#__PURE__*/_jsx(LaurelLeftIcon,{}),/*#__PURE__*/_jsx(StyledButton,{disabled:isButtonDisabled,onClick:()=>handleCtaClick(),children:getButtonText()}),/*#__PURE__*/_jsx(LaurelRightIcon,{})]})]})})});};export default BattleCta;","map":{"version":3,"names":["React","styled","Card","CardBody","Flex","LaurelLeftIcon","LaurelRightIcon","Button","CheckmarkCircleIcon","useWalletModal","useModal","useHistory","useAuth","useTranslation","FINISHED","OVER","RegisterModal","ClaimModal","Heading2Text","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","StyledCard","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","warning","StyledButton","_templateObject2","_ref2","textDisabled","StyledHeadingText","_templateObject3","BattleCta","_ref3","userTradingInformation","currentPhase","account","isCompetitionLive","profile","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","isLoading","hasCompetitionEnded","onRegisterSuccess","onClaimSuccess","history","t","login","logout","onPresentConnectModal","onPresentRegisterModal","onPresentClaimModal","hasRegistered","hasUserClaimed","registeredAndNotStarted","isButtonDisabled","Boolean","state","getHeadingText","concat","getButtonText","children","handleCtaClick","push","flexDirection","justifyContent","alignItems","disabled","onClick"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/components/BattleCta/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  LaurelLeftIcon,\r\n  LaurelRightIcon,\r\n  Button,\r\n  CheckmarkCircleIcon,\r\n  useWalletModal,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases'\r\nimport RegisterModal from '../RegisterModal'\r\nimport ClaimModal from '../ClaimModal'\r\nimport { Heading2Text } from '../CompetitionHeadingText'\r\nimport { CompetitionProps } from '../../types'\r\n\r\nconst StyledCard = styled(Card)`\r\n  display: inline-flex;\r\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\r\n\r\n  svg {\r\n    margin-bottom: 6px;\r\n    height: 32px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.warning};\r\n  }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 16px 20px 0;\r\n  z-index: 200;\r\n\r\n  svg {\r\n    margin: 0 4px 0 0;\r\n    height: 20px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledHeadingText = styled(Heading2Text)`\r\n  white-space: normal;\r\n`\r\n\r\nconst BattleCta: React.FC<CompetitionProps> = ({\r\n  userTradingInformation,\r\n  currentPhase,\r\n  account,\r\n  isCompetitionLive,\r\n  profile,\r\n  userCanClaimPrizes,\r\n  finishedAndPrizesClaimed,\r\n  finishedAndNothingToClaim,\r\n  isLoading,\r\n  hasCompetitionEnded,\r\n  onRegisterSuccess,\r\n  onClaimSuccess,\r\n}) => {\r\n  const history = useHistory()\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n  const [onPresentRegisterModal] = useModal(\r\n    <RegisterModal profile={profile} onRegisterSuccess={onRegisterSuccess} />,\r\n    false,\r\n  )\r\n  const [onPresentClaimModal] = useModal(\r\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\r\n    false,\r\n  )\r\n  const { hasRegistered, hasUserClaimed } = userTradingInformation\r\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded\r\n\r\n  const isButtonDisabled = Boolean(\r\n    isLoading ||\r\n      currentPhase.state === OVER ||\r\n      registeredAndNotStarted ||\r\n      finishedAndPrizesClaimed ||\r\n      finishedAndNothingToClaim,\r\n  )\r\n\r\n  const getHeadingText = () => {\r\n    // Competition live\r\n    if (isCompetitionLive) {\r\n      return t('Now Live!')\r\n    }\r\n    // Competition finished. Rewards being calculated\r\n    if (currentPhase.state === FINISHED) {\r\n      return `${t('Calculating prizes')}...`\r\n    }\r\n    // All competition finished states\r\n    if (hasCompetitionEnded) {\r\n      return `${t('Finished')}!`\r\n    }\r\n    // Competition not started\r\n    return t('Starting Soon')\r\n  }\r\n\r\n  const getButtonText = () => {\r\n    // No wallet connected\r\n    if (!account) {\r\n      return t('Connect Wallet')\r\n    }\r\n    // User not registered\r\n    if (!hasRegistered) {\r\n      return t('I want to Battle!')\r\n    }\r\n    // User registered and competition live\r\n    if (isCompetitionLive) {\r\n      return t('Trade Now')\r\n    }\r\n\r\n    // User registered and competition finished\r\n    if (hasCompetitionEnded) {\r\n      // Claim period has ended\r\n      if (currentPhase.state === OVER) {\r\n        return t('Claim period over')\r\n      }\r\n      // User has prizes to claim\r\n      if (userCanClaimPrizes) {\r\n        return t('Claim prizes')\r\n      }\r\n      // User has already claimed prizes\r\n      if (hasUserClaimed) {\r\n        return (\r\n          <>\r\n            <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\r\n          </>\r\n        )\r\n      }\r\n      // User has nothing to claim\r\n      return t('Nothing to claim')\r\n    }\r\n\r\n    // User registered but competition has not started\r\n    if (!isCompetitionLive) {\r\n      return (\r\n        <>\r\n          <CheckmarkCircleIcon /> {t('Registered!')}\r\n        </>\r\n      )\r\n    }\r\n\r\n    // May be useful for debugging - if somehow none of the above conditions are met\r\n    return 'Whoopsie'\r\n  }\r\n\r\n  const handleCtaClick = () => {\r\n    // All conditions when button isn't disabled\r\n\r\n    // No wallet connected\r\n    if (!account) {\r\n      onPresentConnectModal()\r\n    }\r\n    // Wallet connected but user not registered\r\n    if (account && !hasRegistered) {\r\n      onPresentRegisterModal()\r\n    }\r\n    // Registered and competition is live\r\n    if (hasRegistered && isCompetitionLive) {\r\n      history.push('/swap')\r\n    }\r\n    // Registered and competition has finished\r\n    if (hasRegistered && hasCompetitionEnded) {\r\n      onPresentClaimModal()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardBody>\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n          <StyledHeadingText>{getHeadingText()}</StyledHeadingText>\r\n          {/* Hide button if in the pre-claim, FINISHED phase */}\r\n          {currentPhase.state !== FINISHED && (\r\n            <Flex alignItems=\"flex-end\">\r\n              <LaurelLeftIcon />\r\n              <StyledButton disabled={isButtonDisabled} onClick={() => handleCtaClick()}>\r\n                {getButtonText()}\r\n              </StyledButton>\r\n              <LaurelRightIcon />\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default BattleCta\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}