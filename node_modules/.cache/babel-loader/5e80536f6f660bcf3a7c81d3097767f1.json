{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\StyledCardHeader.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { TokenPairImage } from 'components/TokenImage';\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(CardHeader)`\n  background: ${({\n  isFinished,\n  background,\n  theme\n}) => isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({\n  theme\n}) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`;\n_c = Wrapper;\n\nconst StyledCardHeader = ({\n  earningToken,\n  stakingToken,\n  isFinished = false,\n  isAutoVault = false,\n  isStaking = false\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE';\n  const background = isStaking ? 'bubblegum' : 'cardHeader';\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto');\n    }\n\n    if (isCakePool) {\n      // manual cake\n      return t('Manual');\n    } // all other pools\n\n\n    return t('Earn');\n  };\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking');\n    }\n\n    if (isCakePool) {\n      return t('Earn CAKE, stake CAKE');\n    }\n\n    return t('Stake %symbol%', {\n      symbol: stakingToken.symbol\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    isFinished: isFinished,\n    background: background,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          color: isFinished ? 'textDisabled' : 'body',\n          scale: \"lg\",\n          children: `${getHeadingPrefix()} ${earningToken.symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: isFinished ? 'textDisabled' : 'textSubtle',\n          children: getSubHeading()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), isAutoVault ? /*#__PURE__*/_jsxDEV(CakeVaultTokenPairImage, {\n        width: 64,\n        height: 64\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TokenPairImage, {\n        primaryToken: earningToken,\n        secondaryToken: stakingToken,\n        width: 64,\n        height: 64\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StyledCardHeader, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c2 = StyledCardHeader;\nexport default StyledCardHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"StyledCardHeader\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/StyledCardHeader.tsx"],"names":["React","CardHeader","Heading","Text","Flex","styled","useTranslation","TokenPairImage","CakeVaultTokenPairImage","Wrapper","isFinished","background","theme","colors","backgroundDisabled","gradients","radii","card","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","t","isCakePool","symbol","getHeadingPrefix","getSubHeading"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\r\n\r\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\r\n  background: ${({ isFinished, background, theme }) =>\r\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\r\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\r\n`\r\n\r\nconst StyledCardHeader: React.FC<{\r\n  earningToken: Token\r\n  stakingToken: Token\r\n  isAutoVault?: boolean\r\n  isFinished?: boolean\r\n  isStaking?: boolean\r\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\r\n  const { t } = useTranslation()\r\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\r\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\r\n\r\n  const getHeadingPrefix = () => {\r\n    if (isAutoVault) {\r\n      // vault\r\n      return t('Auto')\r\n    }\r\n    if (isCakePool) {\r\n      // manual cake\r\n      return t('Manual')\r\n    }\r\n    // all other pools\r\n    return t('Earn')\r\n  }\r\n\r\n  const getSubHeading = () => {\r\n    if (isAutoVault) {\r\n      return t('Automatic restaking')\r\n    }\r\n    if (isCakePool) {\r\n      return t('Earn CAKE, stake CAKE')\r\n    }\r\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\r\n  }\r\n\r\n  return (\r\n    <Wrapper isFinished={isFinished} background={background}>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Flex flexDirection=\"column\">\r\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\r\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\r\n          </Heading>\r\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\r\n        </Flex>\r\n        {isAutoVault ? (\r\n          <CakeVaultTokenPairImage width={64} height={64} />\r\n        ) : (\r\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\r\n        )}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default StyledCardHeader\r\n"]},"metadata":{},"sourceType":"module"}