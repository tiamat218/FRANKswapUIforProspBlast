{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js';\nimport pools from 'config/constants/pools';\nimport sousChefV2 from 'config/abi/sousChefV2.json';\nimport multicall from '../multicall';\nimport { simpleRpcProvider } from '../providers';\nimport { getAddress } from '../addressHelpers';\n/**\r\n * Returns the total number of pools that were active at a given block\r\n */\n\nexport const getActivePools = async block => {\n  const eligiblePools = pools.filter(pool => pool.sousId !== 0).filter(pool => pool.isFinished === false || pool.isFinished === undefined);\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n  const startBlockCalls = eligiblePools.map(({\n    contractAddress\n  }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock'\n  }));\n  const endBlockCalls = eligiblePools.map(({\n    contractAddress\n  }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock'\n  }));\n  const startBlocks = await multicall(sousChefV2, startBlockCalls);\n  const endBlocks = await multicall(sousChefV2, endBlockCalls);\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null;\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null;\n\n    if (!startBlock || !endBlock) {\n      return accum;\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum;\n    }\n\n    return [...accum, poolCheck];\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/calls/pools.ts"],"names":["BigNumber","pools","sousChefV2","multicall","simpleRpcProvider","getAddress","getActivePools","block","eligiblePools","filter","pool","sousId","isFinished","undefined","blockNumber","getBlockNumber","startBlockCalls","map","contractAddress","address","name","endBlockCalls","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAP,IAA0B;AACtD,QAAMC,aAAa,GAAGP,KAAK,CACxBQ,MADmB,CACXC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgB,CADd,EAEnBF,MAFmB,CAEXC,IAAD,IAAUA,IAAI,CAACE,UAAL,KAAoB,KAApB,IAA6BF,IAAI,CAACE,UAAL,KAAoBC,SAF/C,CAAtB;AAGA,QAAMC,WAAW,GAAGP,KAAK,KAAK,MAAMH,iBAAiB,CAACW,cAAlB,EAAX,CAAzB;AACA,QAAMC,eAAe,GAAGR,aAAa,CAACS,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,MAA0B;AAClEC,IAAAA,OAAO,EAAEd,UAAU,CAACa,eAAD,CAD+C;AAElEE,IAAAA,IAAI,EAAE;AAF4D,GAA1B,CAAlB,CAAxB;AAIA,QAAMC,aAAa,GAAGb,aAAa,CAACS,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,MAA0B;AAChEC,IAAAA,OAAO,EAAEd,UAAU,CAACa,eAAD,CAD6C;AAEhEE,IAAAA,IAAI,EAAE;AAF0D,GAA1B,CAAlB,CAAtB;AAIA,QAAME,WAAW,GAAG,MAAMnB,SAAS,CAACD,UAAD,EAAac,eAAb,CAAnC;AACA,QAAMO,SAAS,GAAG,MAAMpB,SAAS,CAACD,UAAD,EAAamB,aAAb,CAAjC;AAEA,SAAOb,aAAa,CAACgB,MAAd,CAAqB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,KAA6B;AACvD,UAAMC,UAAU,GAAGN,WAAW,CAACK,KAAD,CAAX,GAAqB,IAAI3B,SAAJ,CAAcsB,WAAW,CAACK,KAAD,CAAzB,CAArB,GAAyD,IAA5E;AACA,UAAME,QAAQ,GAAGN,SAAS,CAACI,KAAD,CAAT,GAAmB,IAAI3B,SAAJ,CAAcuB,SAAS,CAACI,KAAD,CAAvB,CAAnB,GAAqD,IAAtE;;AAEA,QAAI,CAACC,UAAD,IAAe,CAACC,QAApB,EAA8B;AAC5B,aAAOJ,KAAP;AACD;;AAED,QAAIG,UAAU,CAACE,GAAX,CAAehB,WAAf,KAA+Be,QAAQ,CAACE,GAAT,CAAajB,WAAb,CAAnC,EAA8D;AAC5D,aAAOW,KAAP;AACD;;AAED,WAAO,CAAC,GAAGA,KAAJ,EAAWC,SAAX,CAAP;AACD,GAbM,EAaJ,EAbI,CAAP;AAcD,CA9BM","sourcesContent":["/* eslint-disable import/prefer-default-export */\r\nimport BigNumber from 'bignumber.js'\r\nimport pools from 'config/constants/pools'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport multicall from '../multicall'\r\nimport { simpleRpcProvider } from '../providers'\r\nimport { getAddress } from '../addressHelpers'\r\n\r\n/**\r\n * Returns the total number of pools that were active at a given block\r\n */\r\nexport const getActivePools = async (block?: number) => {\r\n  const eligiblePools = pools\r\n    .filter((pool) => pool.sousId !== 0)\r\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\r\n    address: getAddress(contractAddress),\r\n    name: 'startBlock',\r\n  }))\r\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\r\n    address: getAddress(contractAddress),\r\n    name: 'bonusEndBlock',\r\n  }))\r\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\r\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\r\n\r\n  return eligiblePools.reduce((accum, poolCheck, index) => {\r\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\r\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\r\n\r\n    if (!startBlock || !endBlock) {\r\n      return accum\r\n    }\r\n\r\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\r\n      return accum\r\n    }\r\n\r\n    return [...accum, poolCheck]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}