{"ast":null,"code":"import React from'react';import{Flex,Text,TooltipText,useTooltip}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useWeb3React}from'@web3-react/core';import useWithdrawalFeeTimer from'views/Pools/hooks/useWithdrawalFeeTimer';import{useCakeVault}from'state/pools/hooks';import WithdrawalFeeTimer from'./WithdrawalFeeTimer';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const UnstakingFeeCountdownRow=_ref=>{let{isTableVariant}=_ref;const{t}=useTranslation();const{account}=useWeb3React();const{userData:{lastDepositedTime,userShares},fees:{withdrawalFee,withdrawalFeePeriod}}=useCakeVault();const feeAsDecimal=withdrawalFee/100||'-';const{targetRef,tooltip,tooltipVisible}=useTooltip(/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{bold:true,mb:\"4px\",children:t('Unstaking fee: %fee%%',{fee:feeAsDecimal})}),/*#__PURE__*/_jsx(Text,{children:t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')})]}),{placement:'bottom-start'});const{secondsRemaining,hasUnstakingFee}=useWithdrawalFeeTimer(parseInt(lastDepositedTime,10),userShares,withdrawalFeePeriod);// The user has made a deposit, but has no fee\nconst noFeeToPay=lastDepositedTime&&!hasUnstakingFee&&userShares.gt(0);// Show the timer if a user is connected, has deposited, and has an unstaking fee\nconst shouldShowTimer=account&&lastDepositedTime&&hasUnstakingFee;const getRowText=()=>{if(noFeeToPay){return t('Unstaking Fee').toLowerCase();}if(shouldShowTimer){return t('unstaking fee until');}return t('unstaking fee if withdrawn within 72h');};return/*#__PURE__*/_jsxs(Flex,{alignItems:isTableVariant?'flex-start':'center',justifyContent:\"space-between\",flexDirection:isTableVariant?'column':'row',children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsxs(TooltipText,{ref:targetRef,small:true,children:[noFeeToPay?'0':feeAsDecimal,\"% \",getRowText()]}),shouldShowTimer&&/*#__PURE__*/_jsx(WithdrawalFeeTimer,{secondsRemaining:secondsRemaining})]});};export default UnstakingFeeCountdownRow;","map":{"version":3,"names":["React","Flex","Text","TooltipText","useTooltip","useTranslation","useWeb3React","useWithdrawalFeeTimer","useCakeVault","WithdrawalFeeTimer","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","UnstakingFeeCountdownRow","_ref","isTableVariant","t","account","userData","lastDepositedTime","userShares","fees","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","targetRef","tooltip","tooltipVisible","children","bold","mb","fee","placement","secondsRemaining","hasUnstakingFee","parseInt","noFeeToPay","gt","shouldShowTimer","getRowText","toLowerCase","alignItems","justifyContent","flexDirection","ref","small"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\r\n\r\ninterface UnstakingFeeCountdownRowProps {\r\n  isTableVariant?: boolean\r\n}\r\n\r\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    fees: { withdrawalFee, withdrawalFeePeriod },\r\n  } = useCakeVault()\r\n  const feeAsDecimal = withdrawalFee / 100 || '-'\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text bold mb=\"4px\">\r\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\r\n      </Text>\r\n      <Text>\r\n        {t(\r\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\r\n        )}\r\n      </Text>\r\n    </>,\r\n    { placement: 'bottom-start' },\r\n  )\r\n\r\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\r\n    parseInt(lastDepositedTime, 10),\r\n    userShares,\r\n    withdrawalFeePeriod,\r\n  )\r\n\r\n  // The user has made a deposit, but has no fee\r\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\r\n\r\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\r\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\r\n\r\n  const getRowText = () => {\r\n    if (noFeeToPay) {\r\n      return t('Unstaking Fee').toLowerCase()\r\n    }\r\n    if (shouldShowTimer) {\r\n      return t('unstaking fee until')\r\n    }\r\n    return t('unstaking fee if withdrawn within 72h')\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\r\n      justifyContent=\"space-between\"\r\n      flexDirection={isTableVariant ? 'column' : 'row'}\r\n    >\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\r\n      </TooltipText>\r\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UnstakingFeeCountdownRow\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,IAAI,CAAEC,IAAI,CAAEC,WAAW,CAAEC,UAAU,KAAQ,oBAAoB,CACxE,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,MAAO,CAAAC,qBAAqB,KAAM,yCAAyC,CAC3E,OAASC,YAAY,KAAQ,mBAAmB,CAChD,MAAO,CAAAC,kBAAkB,KAAM,sBAAsB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAMrD,KAAM,CAAAC,wBAAiE,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CAC3F,KAAM,CAAEE,CAAE,CAAC,CAAGd,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAEe,OAAQ,CAAC,CAAGd,YAAY,CAAC,CAAC,CAClC,KAAM,CACJe,QAAQ,CAAE,CAAEC,iBAAiB,CAAEC,UAAW,CAAC,CAC3CC,IAAI,CAAE,CAAEC,aAAa,CAAEC,mBAAoB,CAC7C,CAAC,CAAGlB,YAAY,CAAC,CAAC,CAClB,KAAM,CAAAmB,YAAY,CAAGF,aAAa,CAAG,GAAG,EAAI,GAAG,CAC/C,KAAM,CAAEG,SAAS,CAAEC,OAAO,CAAEC,cAAe,CAAC,CAAG1B,UAAU,cACvDW,KAAA,CAAAF,SAAA,EAAAkB,QAAA,eACEpB,IAAA,CAACT,IAAI,EAAC8B,IAAI,MAACC,EAAE,CAAC,KAAK,CAAAF,QAAA,CAChBZ,CAAC,CAAC,uBAAuB,CAAE,CAAEe,GAAG,CAAEP,YAAa,CAAC,CAAC,CAC9C,CAAC,cACPhB,IAAA,CAACT,IAAI,EAAA6B,QAAA,CACFZ,CAAC,CACA,+IACF,CAAC,CACG,CAAC,EACP,CAAC,CACH,CAAEgB,SAAS,CAAE,cAAe,CAC9B,CAAC,CAED,KAAM,CAAEC,gBAAgB,CAAEC,eAAgB,CAAC,CAAG9B,qBAAqB,CACjE+B,QAAQ,CAAChB,iBAAiB,CAAE,EAAE,CAAC,CAC/BC,UAAU,CACVG,mBACF,CAAC,CAED;AACA,KAAM,CAAAa,UAAU,CAAGjB,iBAAiB,EAAI,CAACe,eAAe,EAAId,UAAU,CAACiB,EAAE,CAAC,CAAC,CAAC,CAE5E;AACA,KAAM,CAAAC,eAAe,CAAGrB,OAAO,EAAIE,iBAAiB,EAAIe,eAAe,CAEvE,KAAM,CAAAK,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAIH,UAAU,CAAE,CACd,MAAO,CAAApB,CAAC,CAAC,eAAe,CAAC,CAACwB,WAAW,CAAC,CAAC,CACzC,CACA,GAAIF,eAAe,CAAE,CACnB,MAAO,CAAAtB,CAAC,CAAC,qBAAqB,CAAC,CACjC,CACA,MAAO,CAAAA,CAAC,CAAC,uCAAuC,CAAC,CACnD,CAAC,CAED,mBACEJ,KAAA,CAACd,IAAI,EACH2C,UAAU,CAAE1B,cAAc,CAAG,YAAY,CAAG,QAAS,CACrD2B,cAAc,CAAC,eAAe,CAC9BC,aAAa,CAAE5B,cAAc,CAAG,QAAQ,CAAG,KAAM,CAAAa,QAAA,EAEhDD,cAAc,EAAID,OAAO,cAC1Bd,KAAA,CAACZ,WAAW,EAAC4C,GAAG,CAAEnB,SAAU,CAACoB,KAAK,MAAAjB,QAAA,EAC/BQ,UAAU,CAAG,GAAG,CAAGZ,YAAY,CAAC,IAAE,CAACe,UAAU,CAAC,CAAC,EACrC,CAAC,CACbD,eAAe,eAAI9B,IAAA,CAACF,kBAAkB,EAAC2B,gBAAgB,CAAEA,gBAAiB,CAAE,CAAC,EAC1E,CAAC,CAEX,CAAC,CAED,cAAe,CAAApB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}