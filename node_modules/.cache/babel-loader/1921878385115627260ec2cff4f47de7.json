{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\Modals\\\\StakeModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport useToast from 'hooks/useToast';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport PercentageButton from './PercentageButton';\nimport useStakePool from '../../../hooks/useStakePool';\nimport useUnstakePool from '../../../hooks/useUnstakePool';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledLink = styled(Link)`\n  width: 100%;\n`;\n_c = StyledLink;\nconst StakeModal = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n  const {\n    sousId,\n    stakingToken,\n    userData,\n    stakingLimit,\n    earningToken\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    onStake\n  } = useStakePool(sousId, isBnbPool);\n  const {\n    onUnstake\n  } = useUnstakePool(sousId, pool.enableEmergencyWithdraw);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false);\n  const [percent, setPercent] = useState(0);\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance;\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance;\n  };\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber());\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit));\n    }\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit]);\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals);\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber());\n      setPercent(Math.min(percentage, 100));\n    } else {\n      setPercent(0);\n    }\n    setStakeAmount(input);\n  };\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n    setPercent(sliderPercent);\n  };\n  const handleConfirmClick = async () => {\n    setPendingTx(true);\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Unstaked')}!`, t('Your %symbol% earnings have also been harvested to your wallet!', {\n          symbol: earningToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals);\n        toastSuccess(`${t('Staked')}!`, t('Your %symbol% funds have been staked in the pool!', {\n          symbol: stakingToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [stakingLimit.gt(0) && !isRemovingStake && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"secondary\",\n      bold: true,\n      mb: \"24px\",\n      style: {\n        textAlign: 'center'\n      },\n      fontSize: \"16px\",\n      children: t('Max stake for this pool: %amount% %token%', {\n        amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${getAddress(stakingToken.address)}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`,\n      isWarning: hasReachedStakeLimit,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), hasReachedStakeLimit && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"failure\",\n      fontSize: \"12px\",\n      style: {\n        textAlign: 'right'\n      },\n      mt: \"4px\",\n      children: t('Maximum total stake: %amount% %token%', {\n        amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n        token: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PercentageButton, {\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(StyledLink, {\n      external: true,\n      href: \"/swap\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mt: \"8px\",\n        variant: \"secondary\",\n        children: t('Get %symbol%', {\n          symbol: stakingToken.symbol\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(StakeModal, \"0ZiXNbWVyyvZIV46E+t4fbK2dqI=\", false, function () {\n  return [useTranslation, useTheme, useStakePool, useUnstakePool, useToast];\n});\n_c2 = StakeModal;\nexport default StakeModal;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledLink\");\n$RefreshReg$(_c2, \"StakeModal\");","map":{"version":3,"names":["React","useEffect","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","Link","useTranslation","useTheme","useToast","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","getAddress","PercentageButton","useStakePool","useUnstakePool","jsxDEV","_jsxDEV","StyledLink","_c","StakeModal","isBnbPool","pool","stakingTokenBalance","stakingTokenPrice","isRemovingStake","onDismiss","_s","sousId","stakingToken","userData","stakingLimit","earningToken","t","theme","onStake","onUnstake","enableEmergencyWithdraw","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","hasReachedStakeLimit","setHasReachedStakedLimit","percent","setPercent","getCalculatedStakingLimit","stakedBalance","gt","usdValueStaked","times","toNumber","fullDecimalStakeAmount","decimals","plus","handleStakeInputChange","input","convertedInput","percentage","Math","floor","dividedBy","multipliedBy","min","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleConfirmClick","symbol","e","title","headerBackground","colors","gradients","cardHeader","children","color","bold","mb","style","textAlign","fontSize","amount","token","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","justifyContent","minWidth","src","address","width","height","alt","ml","value","onUserInput","currencyValue","isWarning","mt","balance","max","onValueChanged","name","valueLabel","step","onClick","isLoading","endIcon","spin","disabled","parseFloat","external","href","variant","_c2","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/Modals/StakeModal.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport PercentageButton from './PercentageButton'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\nimport useUnstakePool from '../../../hooks/useUnstakePool'\r\n\r\ninterface StakeModalProps {\r\n  isBnbPool: boolean\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakingTokenPrice: number\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n  width: 100%;\r\n`\r\n\r\nconst StakeModal: React.FC<StakeModalProps> = ({\r\n  isBnbPool,\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakingTokenPrice,\r\n  isRemovingStake = false,\r\n  onDismiss,\r\n}) => {\r\n  const { sousId, stakingToken, userData, stakingLimit, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\r\n  const [percent, setPercent] = useState(0)\r\n  const getCalculatedStakingLimit = () => {\r\n    if (isRemovingStake) {\r\n      return userData.stakedBalance\r\n    }\r\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\r\n  }\r\n\r\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\r\n\r\n  useEffect(() => {\r\n    if (stakingLimit.gt(0) && !isRemovingStake) {\r\n      const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\r\n    }\r\n  }, [stakeAmount, stakingLimit, userData, stakingToken, isRemovingStake, setHasReachedStakedLimit])\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\r\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\r\n      setPercent(Math.min(percentage, 100))\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      try {\r\n        await onUnstake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\r\n            symbol: earningToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      try {\r\n        // staking\r\n        await onStake(stakeAmount, stakingToken.decimals)\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          t('Your %symbol% funds have been staked in the pool!', {\r\n            symbol: stakingToken.symbol,\r\n          }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stakingLimit.gt(0) && !isRemovingStake && (\r\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\r\n          {t('Max stake for this pool: %amount% %token%', {\r\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={stakingTokenPrice !== 0 && `~${usdValueStaked || 0} USD`}\r\n        isWarning={hasReachedStakeLimit}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      {hasReachedStakeLimit && (\r\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\r\n          {t('Maximum total stake: %amount% %token%', {\r\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\r\n            token: stakingToken.symbol,\r\n          })}\r\n        </Text>\r\n      )}\r\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', {\r\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\r\n        })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\r\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\r\n      </Flex>\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <StyledLink external href=\"/swap\">\r\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\r\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n          </Button>\r\n        </StyledLink>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StakeModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}