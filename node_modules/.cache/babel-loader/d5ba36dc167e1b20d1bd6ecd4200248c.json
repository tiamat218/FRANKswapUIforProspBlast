{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { useAppDispatch } from 'state';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery';\nconst useNextEventCountdown = nextEventTime => {\n  _s();\n  const dispatch = useAppDispatch();\n  const [secondsRemaining, setSecondsRemaining] = useState(null);\n  const timer = useRef(null);\n  const {\n    currentLotteryId\n  } = useLottery();\n  useEffect(() => {\n    dispatch(setLotteryIsTransitioning({\n      isTransitioning: false\n    }));\n    const currentSeconds = Math.floor(Date.now() / 1000);\n    const secondsRemainingCalc = nextEventTime - currentSeconds;\n    setSecondsRemaining(secondsRemainingCalc);\n    timer.current = setInterval(() => {\n      setSecondsRemaining(prevSecondsRemaining => {\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\n        if (prevSecondsRemaining <= 1) {\n          clearInterval(timer.current);\n          dispatch(setLotteryIsTransitioning({\n            isTransitioning: true\n          }));\n          dispatch(fetchCurrentLottery({\n            currentLotteryId\n          }));\n        }\n        return prevSecondsRemaining - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer.current);\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch]);\n  return secondsRemaining;\n};\n_s(useNextEventCountdown, \"gmkNpyD55+zyj0vzxlz9Jpyq71g=\", false, function () {\n  return [useAppDispatch, useLottery];\n});\nexport default useNextEventCountdown;","map":{"version":3,"names":["useEffect","useState","useRef","useAppDispatch","useLottery","fetchCurrentLottery","setLotteryIsTransitioning","useNextEventCountdown","nextEventTime","_s","dispatch","secondsRemaining","setSecondsRemaining","timer","currentLotteryId","isTransitioning","currentSeconds","Math","floor","Date","now","secondsRemainingCalc","current","setInterval","prevSecondsRemaining","clearInterval"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Lottery/hooks/useNextEventCountdown.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\r\n\r\nconst useNextEventCountdown = (nextEventTime: number): number => {\r\n  const dispatch = useAppDispatch()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const timer = useRef(null)\r\n  const { currentLotteryId } = useLottery()\r\n\r\n  useEffect(() => {\r\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\r\n    const currentSeconds = Math.floor(Date.now() / 1000)\r\n    const secondsRemainingCalc = nextEventTime - currentSeconds\r\n    setSecondsRemaining(secondsRemainingCalc)\r\n\r\n    timer.current = setInterval(() => {\r\n      setSecondsRemaining((prevSecondsRemaining) => {\r\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\r\n        if (prevSecondsRemaining <= 1) {\r\n          clearInterval(timer.current)\r\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\r\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n        }\r\n        return prevSecondsRemaining - 1\r\n      })\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useNextEventCountdown\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,mBAAmB,EAAEC,yBAAyB,QAAQ,eAAe;AAE9E,MAAMC,qBAAqB,GAAIC,aAAqB,IAAa;EAAAC,EAAA;EAC/D,MAAMC,QAAQ,GAAGP,cAAc,CAAC,CAAC;EACjC,MAAM,CAACQ,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMY,KAAK,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAM;IAAEY;EAAiB,CAAC,GAAGV,UAAU,CAAC,CAAC;EAEzCJ,SAAS,CAAC,MAAM;IACdU,QAAQ,CAACJ,yBAAyB,CAAC;MAAES,eAAe,EAAE;IAAM,CAAC,CAAC,CAAC;IAC/D,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACpD,MAAMC,oBAAoB,GAAGb,aAAa,GAAGQ,cAAc;IAC3DJ,mBAAmB,CAACS,oBAAoB,CAAC;IAEzCR,KAAK,CAACS,OAAO,GAAGC,WAAW,CAAC,MAAM;MAChCX,mBAAmB,CAAEY,oBAAoB,IAAK;QAC5C;QACA,IAAIA,oBAAoB,IAAI,CAAC,EAAE;UAC7BC,aAAa,CAACZ,KAAK,CAACS,OAAO,CAAC;UAC5BZ,QAAQ,CAACJ,yBAAyB,CAAC;YAAES,eAAe,EAAE;UAAK,CAAC,CAAC,CAAC;UAC9DL,QAAQ,CAACL,mBAAmB,CAAC;YAAES;UAAiB,CAAC,CAAC,CAAC;QACrD;QACA,OAAOU,oBAAoB,GAAG,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACZ,KAAK,CAACS,OAAO,CAAC;EAC3C,CAAC,EAAE,CAACV,mBAAmB,EAAEJ,aAAa,EAAEM,gBAAgB,EAAED,KAAK,EAAEH,QAAQ,CAAC,CAAC;EAE3E,OAAOC,gBAAgB;AACzB,CAAC;AAAAF,EAAA,CA5BKF,qBAAqB;EAAA,QACRJ,cAAc,EAGFC,UAAU;AAAA;AA0BzC,eAAeG,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}