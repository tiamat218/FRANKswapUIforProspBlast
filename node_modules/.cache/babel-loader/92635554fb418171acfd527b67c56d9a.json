{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\FoldableText\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ExpandableLabel, Flex, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(Flex)`\n  cursor: pointer;\n`;\n_c = Wrapper;\nconst StyledExpandableLabelWrapper = styled(Flex)`\n  button {\n    align-items: center;\n    justify-content: flex-start;\n  }\n`;\n_c2 = StyledExpandableLabelWrapper;\nconst StyledChildrenFlex = styled(Flex)`\n  overflow: hidden;\n  height: ${({\n  isExpanded\n}) => isExpanded ? '100%' : '0px'};\n  padding-bottom: ${({\n  isExpanded\n}) => isExpanded ? '16px' : '0px'};\n  border-bottom: 1px solid ${({\n  theme\n}) => theme.colors.inputSecondary};\n`;\n_c3 = StyledChildrenFlex;\n\nconst FoldableText = ({\n  title,\n  children,\n  ...props\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Wrapper, { ...props,\n    flexDirection: \"column\",\n    onClick: () => setIsExpanded(!isExpanded),\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      pb: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"bold\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledExpandableLabelWrapper, {\n        children: /*#__PURE__*/_jsxDEV(ExpandableLabel, {\n          expanded: isExpanded,\n          onClick: () => setIsExpanded(!isExpanded),\n          children: isExpanded ? t('Hide') : t('Details')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledChildrenFlex, {\n      isExpanded: isExpanded,\n      flexDirection: \"column\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FoldableText, \"Nxl4stc8BYpvdUQlKSP88TMYkts=\", false, function () {\n  return [useTranslation];\n});\n\n_c4 = FoldableText;\nexport default FoldableText;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"StyledExpandableLabelWrapper\");\n$RefreshReg$(_c3, \"StyledChildrenFlex\");\n$RefreshReg$(_c4, \"FoldableText\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/FoldableText/index.tsx"],"names":["React","useState","styled","ExpandableLabel","Flex","Text","useTranslation","Wrapper","StyledExpandableLabelWrapper","StyledChildrenFlex","isExpanded","theme","colors","inputSecondary","FoldableText","title","children","props","t","setIsExpanded"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,eAAT,EAA0BC,IAA1B,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAMA,MAAMC,OAAO,GAAGL,MAAM,CAACE,IAAD,CAAO;AAC7B;AACA,CAFA;KAAMG,O;AAIN,MAAMC,4BAA4B,GAAGN,MAAM,CAACE,IAAD,CAAO;AAClD;AACA;AACA;AACA;AACA,CALA;MAAMI,4B;AAON,MAAMC,kBAAkB,GAAGP,MAAM,CAACE,IAAD,CAAiC;AAClE;AACA,YAAY,CAAC;AAAEM,EAAAA;AAAF,CAAD,KAAqBA,UAAU,GAAG,MAAH,GAAY,KAAO;AAC9D,oBAAoB,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAqBA,UAAU,GAAG,MAAH,GAAY,KAAO;AACtE,6BAA6B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,cAAe;AACxE,CALA;MAAMJ,kB;;AAON,MAAMK,YAAyC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmB,KAAGC;AAAtB,CAAD,KAAmC;AAAA;;AACnF,QAAM;AAAEC,IAAAA;AAAF,MAAQZ,cAAc,EAA5B;AACA,QAAM,CAACI,UAAD,EAAaS,aAAb,IAA8BlB,QAAQ,CAAC,KAAD,CAA5C;AAEA,sBACE,QAAC,OAAD,OAAagB,KAAb;AAAoB,IAAA,aAAa,EAAC,QAAlC;AAA2C,IAAA,OAAO,EAAE,MAAME,aAAa,CAAC,CAACT,UAAF,CAAvE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,cAAc,EAAC,eAArB;AAAqC,MAAA,UAAU,EAAC,QAAhD;AAAyD,MAAA,EAAE,EAAC,MAA5D;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,MAAjB;AAAA,kBAAyBK;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,4BAAD;AAAA,+BACE,QAAC,eAAD;AAAiB,UAAA,QAAQ,EAAEL,UAA3B;AAAuC,UAAA,OAAO,EAAE,MAAMS,aAAa,CAAC,CAACT,UAAF,CAAnE;AAAA,oBACGA,UAAU,GAAGQ,CAAC,CAAC,MAAD,CAAJ,GAAeA,CAAC,CAAC,SAAD;AAD7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,kBAAD;AAAoB,MAAA,UAAU,EAAER,UAAhC;AAA4C,MAAA,aAAa,EAAC,QAA1D;AAAA,gBACGM;AADH;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnBD;;GAAMF,Y;UACUR,c;;;MADVQ,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FoldableTextProps extends FlexProps {\r\n  title?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledExpandableLabelWrapper = styled(Flex)`\r\n  button {\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\r\n  overflow: hidden;\r\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\r\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n`\r\n\r\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  return (\r\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\r\n        <Text fontWeight=\"bold\">{title}</Text>\r\n        <StyledExpandableLabelWrapper>\r\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n            {isExpanded ? t('Hide') : t('Details')}\r\n          </ExpandableLabel>\r\n        </StyledExpandableLabelWrapper>\r\n      </Flex>\r\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\r\n        {children}\r\n      </StyledChildrenFlex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FoldableText\r\n"]},"metadata":{},"sourceType":"module"}