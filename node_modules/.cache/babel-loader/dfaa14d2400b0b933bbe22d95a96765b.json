{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\RewardBrackets.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Flex, Text } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useTranslation } from 'contexts/Localization';\nimport RewardBracketDetail from './RewardBracketDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  flex-direction: column;\n`;\n_c = Wrapper;\nconst RewardsInner = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  row-gap: 16px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n_c2 = RewardsInner;\n\nconst RewardBrackets = ({\n  lotteryData,\n  isHistoricRound\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [state, setState] = useState({\n    isLoading: true,\n    cakeToBurn: BIG_ZERO,\n    rewardsLessTreasuryFee: BIG_ZERO,\n    rewardsBreakdown: null,\n    countWinnersPerBracket: null\n  });\n  useEffect(() => {\n    if (lotteryData) {\n      const {\n        treasuryFee,\n        amountCollectedInCake,\n        rewardsBreakdown,\n        countWinnersPerBracket\n      } = lotteryData;\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100);\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake));\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn);\n      setState({\n        isLoading: false,\n        cakeToBurn,\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\n        rewardsBreakdown,\n        countWinnersPerBracket\n      });\n    } else {\n      setState({\n        isLoading: true,\n        cakeToBurn: BIG_ZERO,\n        rewardsLessTreasuryFee: BIG_ZERO,\n        rewardsBreakdown: null,\n        countWinnersPerBracket: null\n      });\n    }\n  }, [lotteryData]);\n\n  const getCakeRewards = bracket => {\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100);\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage);\n  };\n\n  const {\n    isLoading,\n    countWinnersPerBracket,\n    cakeToBurn\n  } = state;\n  const rewardBrackets = [0, 1, 2, 3, 4, 5];\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"14px\",\n      mb: \"24px\",\n      children: [t('Match the winning number in the same order to share prizes.'), ' ', !isHistoricRound && t('Current prizes up for grabs:')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RewardsInner, {\n      children: [rewardBrackets.map(bracketIndex => /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: bracketIndex,\n        cakeAmount: !isLoading && getCakeRewards(bracketIndex),\n        numberWinners: !isLoading && countWinnersPerBracket[bracketIndex],\n        isHistoricRound: isHistoricRound,\n        isLoading: isLoading\n      }, bracketIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(RewardBracketDetail, {\n        rewardBracket: 0,\n        cakeAmount: cakeToBurn,\n        isBurn: true,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardBrackets, \"SfPTDLwddVKOEX0ynjjVTqTDGM8=\", false, function () {\n  return [useTranslation];\n});\n\n_c3 = RewardBrackets;\nexport default RewardBrackets;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"RewardsInner\");\n$RefreshReg$(_c3, \"RewardBrackets\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/RewardBrackets.tsx"],"names":["React","useState","useEffect","BigNumber","Flex","Text","styled","BIG_ZERO","useTranslation","RewardBracketDetail","Wrapper","RewardsInner","div","theme","mediaQueries","sm","RewardBrackets","lotteryData","isHistoricRound","t","state","setState","isLoading","cakeToBurn","rewardsLessTreasuryFee","rewardsBreakdown","countWinnersPerBracket","treasuryFee","amountCollectedInCake","feeAsPercentage","times","amountLessTreasuryFee","minus","getCakeRewards","bracket","shareAsPercentage","rewardBrackets","map","bracketIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound } from 'state/types'\r\nimport RewardBracketDetail from './RewardBracketDetail'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: 100%;\r\n  flex-direction: column;\r\n`\r\n\r\nconst RewardsInner = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n  row-gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`\r\n\r\ninterface RewardMatchesProps {\r\n  lotteryData: LotteryRound\r\n  isHistoricRound?: boolean\r\n}\r\n\r\ninterface RewardsState {\r\n  isLoading: boolean\r\n  cakeToBurn: BigNumber\r\n  rewardsLessTreasuryFee: BigNumber\r\n  rewardsBreakdown: string[]\r\n  countWinnersPerBracket: string[]\r\n}\r\n\r\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryData, isHistoricRound }) => {\r\n  const { t } = useTranslation()\r\n  const [state, setState] = useState<RewardsState>({\r\n    isLoading: true,\r\n    cakeToBurn: BIG_ZERO,\r\n    rewardsLessTreasuryFee: BIG_ZERO,\r\n    rewardsBreakdown: null,\r\n    countWinnersPerBracket: null,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (lotteryData) {\r\n      const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryData\r\n\r\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100)\r\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\r\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\r\n      setState({\r\n        isLoading: false,\r\n        cakeToBurn,\r\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\r\n        rewardsBreakdown,\r\n        countWinnersPerBracket,\r\n      })\r\n    } else {\r\n      setState({\r\n        isLoading: true,\r\n        cakeToBurn: BIG_ZERO,\r\n        rewardsLessTreasuryFee: BIG_ZERO,\r\n        rewardsBreakdown: null,\r\n        countWinnersPerBracket: null,\r\n      })\r\n    }\r\n  }, [lotteryData])\r\n\r\n  const getCakeRewards = (bracket: number) => {\r\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100)\r\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage)\r\n  }\r\n\r\n  const { isLoading, countWinnersPerBracket, cakeToBurn } = state\r\n\r\n  const rewardBrackets = [0, 1, 2, 3, 4, 5]\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Text fontSize=\"14px\" mb=\"24px\">\r\n        {t('Match the winning number in the same order to share prizes.')}{' '}\r\n        {!isHistoricRound && t('Current prizes up for grabs:')}\r\n      </Text>\r\n      <RewardsInner>\r\n        {rewardBrackets.map((bracketIndex) => (\r\n          <RewardBracketDetail\r\n            key={bracketIndex}\r\n            rewardBracket={bracketIndex}\r\n            cakeAmount={!isLoading && getCakeRewards(bracketIndex)}\r\n            numberWinners={!isLoading && countWinnersPerBracket[bracketIndex]}\r\n            isHistoricRound={isHistoricRound}\r\n            isLoading={isLoading}\r\n          />\r\n        ))}\r\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn isLoading={isLoading} />\r\n      </RewardsInner>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default RewardBrackets\r\n"]},"metadata":{},"sourceType":"module"}