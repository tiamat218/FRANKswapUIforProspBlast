{"ast":null,"code":"// Set of helper functions to facilitate wallet setup\nimport{BASE_BSC_SCAN_URL,BASE_URL}from'config';import{nodes}from'./getRpcUrl';/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */export const setupNetwork=async()=>{const provider=window.ethereum;if(provider){const chainId=parseInt(process.env.REACT_APP_CHAIN_ID,10);try{await provider.request({method:'wallet_addEthereumChain',params:[{chainId:\"0x\".concat(chainId.toString(16)),chainName:'Binance Smart Chain Mainnet',nativeCurrency:{name:'BNB',symbol:'bnb',decimals:18},rpcUrls:nodes,blockExplorerUrls:[\"\".concat(BASE_BSC_SCAN_URL,\"/\")]}]});return true;}catch(error){console.error('Failed to setup the network in Metamask:',error);return false;}}else{console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");return false;}};/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */export const registerToken=async(tokenAddress,tokenSymbol,tokenDecimals)=>{const tokenAdded=await window.ethereum.request({method:'wallet_watchAsset',params:{type:'ERC20',options:{address:tokenAddress,symbol:tokenSymbol,decimals:tokenDecimals,image:\"\".concat(BASE_URL,\"/images/tokens/\").concat(tokenAddress,\".png\")}}});return tokenAdded;};","map":{"version":3,"names":["BASE_BSC_SCAN_URL","BASE_URL","nodes","setupNetwork","provider","window","ethereum","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","request","method","params","concat","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","error","console","registerToken","tokenAddress","tokenSymbol","tokenDecimals","tokenAdded","type","options","address","image"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/wallet.ts"],"sourcesContent":["// Set of helper functions to facilitate wallet setup\r\n\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = window.ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Mainnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error('Failed to setup the network in Metamask:', error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\r\n  const tokenAdded = await window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n"],"mappings":"AAAA;AAEA,OAASA,iBAAiB,CAAEC,QAAQ,KAAQ,QAAQ,CACpD,OAASC,KAAK,KAAQ,aAAa,CAEnC;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAA,GAAY,CACtC,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAChC,GAAIF,QAAQ,CAAE,CACZ,KAAM,CAAAG,OAAO,CAAGC,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAE,EAAE,CAAC,CAC5D,GAAI,CACF,KAAM,CAAAP,QAAQ,CAACQ,OAAO,CAAC,CACrBC,MAAM,CAAE,yBAAyB,CACjCC,MAAM,CAAE,CACN,CACEP,OAAO,MAAAQ,MAAA,CAAOR,OAAO,CAACS,QAAQ,CAAC,EAAE,CAAC,CAAE,CACpCC,SAAS,CAAE,6BAA6B,CACxCC,cAAc,CAAE,CACdC,IAAI,CAAE,KAAK,CACXC,MAAM,CAAE,KAAK,CACbC,QAAQ,CAAE,EACZ,CAAC,CACDC,OAAO,CAAEpB,KAAK,CACdqB,iBAAiB,CAAE,IAAAR,MAAA,CAAIf,iBAAiB,MAC1C,CAAC,CAEL,CAAC,CAAC,CACF,MAAO,KAAI,CACb,CAAE,MAAOwB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAEA,KAAK,CAAC,CAChE,MAAO,MAAK,CACd,CACF,CAAC,IAAM,CACLC,OAAO,CAACD,KAAK,CAAC,8EAA8E,CAAC,CAC7F,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,aAAa,CAAG,KAAAA,CAAOC,YAAoB,CAAEC,WAAmB,CAAEC,aAAqB,GAAK,CACvG,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAzB,MAAM,CAACC,QAAQ,CAACM,OAAO,CAAC,CAC/CC,MAAM,CAAE,mBAAmB,CAC3BC,MAAM,CAAE,CACNiB,IAAI,CAAE,OAAO,CACbC,OAAO,CAAE,CACPC,OAAO,CAAEN,YAAY,CACrBP,MAAM,CAAEQ,WAAW,CACnBP,QAAQ,CAAEQ,aAAa,CACvBK,KAAK,IAAAnB,MAAA,CAAKd,QAAQ,oBAAAc,MAAA,CAAkBY,YAAY,QAClD,CACF,CACF,CAAC,CAAC,CAEF,MAAO,CAAAG,UAAU,CACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}