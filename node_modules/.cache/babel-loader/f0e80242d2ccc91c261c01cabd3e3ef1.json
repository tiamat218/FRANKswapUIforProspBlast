{"ast":null,"code":"import React from'react';import{AutoRenewIcon,Button}from'@pancakeswap/uikit';import{PoolIds}from'config/constants/types';import{useTranslation}from'contexts/Localization';import useToast from'hooks/useToast';import{jsx as _jsx}from\"react/jsx-runtime\";const ClaimButton=_ref=>{let{poolId,ifoVersion,walletIfoData}=_ref;const userPoolCharacteristics=walletIfoData[poolId];const{t}=useTranslation();const{toastError,toastSuccess}=useToast();const setPendingTx=isPending=>walletIfoData.setPendingTx(isPending,poolId);const handleClaim=async()=>{try{setPendingTx(true);if(ifoVersion===1){const tx=await walletIfoData.contract.harvest();await tx.wait();}else{const tx=await walletIfoData.contract.harvestPool(poolId===PoolIds.poolBasic?0:1);await tx.wait();}walletIfoData.setIsClaimed(poolId);toastSuccess(t('Success!'),t('You have successfully claimed your rewards.'));}catch(error){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(error);}finally{setPendingTx(false);}};return/*#__PURE__*/_jsx(Button,{onClick:handleClaim,disabled:userPoolCharacteristics.isPendingTx,width:\"100%\",isLoading:userPoolCharacteristics.isPendingTx,endIcon:userPoolCharacteristics.isPendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,children:t('Claim')});};export default ClaimButton;","map":{"version":3,"names":["React","AutoRenewIcon","Button","PoolIds","useTranslation","useToast","jsx","_jsx","ClaimButton","_ref","poolId","ifoVersion","walletIfoData","userPoolCharacteristics","t","toastError","toastSuccess","setPendingTx","isPending","handleClaim","tx","contract","harvest","wait","harvestPool","poolBasic","setIsClaimed","error","console","onClick","disabled","isPendingTx","width","isLoading","endIcon","spin","color","children"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"sourcesContent":["import React from 'react'\r\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\r\nimport { PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifoVersion: number\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\r\n\r\n  const handleClaim = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n\r\n      if (ifoVersion === 1) {\r\n        const tx = await walletIfoData.contract.harvest()\r\n        await tx.wait()\r\n      } else {\r\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\r\n        await tx.wait()\r\n      }\r\n\r\n      walletIfoData.setIsClaimed(poolId)\r\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'))\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(error)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClaim}\r\n      disabled={userPoolCharacteristics.isPendingTx}\r\n      width=\"100%\"\r\n      isLoading={userPoolCharacteristics.isPendingTx}\r\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n    >\r\n      {t('Claim')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,CAAEC,MAAM,KAAQ,oBAAoB,CAC1D,OAASC,OAAO,KAAQ,wBAAwB,CAEhD,OAASC,cAAc,KAAQ,uBAAuB,CACtD,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,QAAAC,GAAA,IAAAC,IAAA,yBAQrC,KAAM,CAAAC,WAA4B,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,MAAM,CAAEC,UAAU,CAAEC,aAAc,CAAC,CAAAH,IAAA,CACzE,KAAM,CAAAI,uBAAuB,CAAGD,aAAa,CAACF,MAAM,CAAC,CACrD,KAAM,CAAEI,CAAE,CAAC,CAAGV,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAEW,UAAU,CAAEC,YAAa,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAE/C,KAAM,CAAAY,YAAY,CAAIC,SAAkB,EAAKN,aAAa,CAACK,YAAY,CAACC,SAAS,CAAER,MAAM,CAAC,CAE1F,KAAM,CAAAS,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACFF,YAAY,CAAC,IAAI,CAAC,CAElB,GAAIN,UAAU,GAAK,CAAC,CAAE,CACpB,KAAM,CAAAS,EAAE,CAAG,KAAM,CAAAR,aAAa,CAACS,QAAQ,CAACC,OAAO,CAAC,CAAC,CACjD,KAAM,CAAAF,EAAE,CAACG,IAAI,CAAC,CAAC,CACjB,CAAC,IAAM,CACL,KAAM,CAAAH,EAAE,CAAG,KAAM,CAAAR,aAAa,CAACS,QAAQ,CAACG,WAAW,CAACd,MAAM,GAAKP,OAAO,CAACsB,SAAS,CAAG,CAAC,CAAG,CAAC,CAAC,CACzF,KAAM,CAAAL,EAAE,CAACG,IAAI,CAAC,CAAC,CACjB,CAEAX,aAAa,CAACc,YAAY,CAAChB,MAAM,CAAC,CAClCM,YAAY,CAACF,CAAC,CAAC,UAAU,CAAC,CAAEA,CAAC,CAAC,6CAA6C,CAAC,CAAC,CAC/E,CAAE,MAAOa,KAAK,CAAE,CACdZ,UAAU,CAACD,CAAC,CAAC,OAAO,CAAC,CAAEA,CAAC,CAAC,oFAAoF,CAAC,CAAC,CAC/Gc,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACtB,CAAC,OAAS,CACRV,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,mBACEV,IAAA,CAACL,MAAM,EACL2B,OAAO,CAAEV,WAAY,CACrBW,QAAQ,CAAEjB,uBAAuB,CAACkB,WAAY,CAC9CC,KAAK,CAAC,MAAM,CACZC,SAAS,CAAEpB,uBAAuB,CAACkB,WAAY,CAC/CG,OAAO,CAAErB,uBAAuB,CAACkB,WAAW,cAAGxB,IAAA,CAACN,aAAa,EAACkC,IAAI,MAACC,KAAK,CAAC,cAAc,CAAE,CAAC,CAAG,IAAK,CAAAC,QAAA,CAEjGvB,CAAC,CAAC,OAAO,CAAC,CACL,CAAC,CAEb,CAAC,CAED,cAAe,CAAAN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}