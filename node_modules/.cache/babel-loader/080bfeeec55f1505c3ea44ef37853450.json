{"ast":null,"code":"import BigNumber from'bignumber.js';import{getRoi,tokenEarnedPerThousandDollarsCompounding}from'utils/compoundApyHelpers';import{getBalanceNumber,getFullDisplayBalance,getDecimalAmount}from'utils/formatBalance';export const convertSharesToCake=function(shares,cakePerFullShare){let decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;let decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;const sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);const amountInCake=new BigNumber(shares.multipliedBy(sharePriceNumber));const cakeAsNumberBalance=getBalanceNumber(amountInCake,decimals);const cakeAsBigNumber=getDecimalAmount(new BigNumber(cakeAsNumberBalance),decimals);const cakeAsDisplayBalance=getFullDisplayBalance(amountInCake,decimals,decimalsToRound);return{cakeAsNumberBalance,cakeAsBigNumber,cakeAsDisplayBalance};};export const convertCakeToShares=function(cake,cakePerFullShare){let decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;let decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;const sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);const amountInShares=new BigNumber(cake.dividedBy(sharePriceNumber));const sharesAsNumberBalance=getBalanceNumber(amountInShares,decimals);const sharesAsBigNumber=getDecimalAmount(new BigNumber(sharesAsNumberBalance),decimals);const sharesAsDisplayBalance=getFullDisplayBalance(amountInShares,decimals,decimalsToRound);return{sharesAsNumberBalance,sharesAsBigNumber,sharesAsDisplayBalance};};const AUTO_VAULT_COMPOUND_FREQUENCY=288;const MANUAL_POOL_COMPOUND_FREQUENCY=1;export const getAprData=(pool,performanceFee)=>{const{isAutoVault,earningTokenPrice,apr}=pool;// special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\nconst isHighValueToken=Math.round(earningTokenPrice/1000)>0;const roundingDecimals=isHighValueToken?4:2;//   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\nconst compoundFrequency=isAutoVault?AUTO_VAULT_COMPOUND_FREQUENCY:MANUAL_POOL_COMPOUND_FREQUENCY;if(isAutoVault){const oneThousandDollarsWorthOfToken=1000/earningTokenPrice;const tokenEarnedPerThousand365D=tokenEarnedPerThousandDollarsCompounding({numberOfDays:365,farmApr:apr,tokenPrice:earningTokenPrice,roundingDecimals,compoundFrequency,performanceFee});const autoApr=getRoi({amountEarned:tokenEarnedPerThousand365D,amountInvested:oneThousandDollarsWorthOfToken});return{apr:autoApr,isHighValueToken,roundingDecimals,compoundFrequency};}return{apr,isHighValueToken,roundingDecimals,compoundFrequency};};export const getCakeVaultEarnings=(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice)=>{const hasAutoEarnings=account&&cakeAtLastUserAction&&cakeAtLastUserAction.gt(0)&&userShares&&userShares.gt(0);const{cakeAsBigNumber}=convertSharesToCake(userShares,pricePerFullShare);const autoCakeProfit=cakeAsBigNumber.minus(cakeAtLastUserAction);const autoCakeToDisplay=autoCakeProfit.gte(0)?getBalanceNumber(autoCakeProfit,18):0;const autoUsdProfit=autoCakeProfit.times(earningTokenPrice);const autoUsdToDisplay=autoUsdProfit.gte(0)?getBalanceNumber(autoUsdProfit,18):0;return{hasAutoEarnings,autoCakeToDisplay,autoUsdToDisplay};};export const getPoolBlockInfo=(pool,currentBlock)=>{const{startBlock,endBlock,isFinished}=pool;const shouldShowBlockCountdown=Boolean(!isFinished&&startBlock&&endBlock);const blocksUntilStart=Math.max(startBlock-currentBlock,0);const blocksRemaining=Math.max(endBlock-currentBlock,0);const hasPoolStarted=blocksUntilStart===0&&blocksRemaining>0;const blocksToDisplay=hasPoolStarted?blocksRemaining:blocksUntilStart;return{shouldShowBlockCountdown,blocksUntilStart,blocksRemaining,hasPoolStarted,blocksToDisplay};};","map":{"version":3,"names":["BigNumber","getRoi","tokenEarnedPerThousandDollarsCompounding","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","arguments","length","undefined","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","earningTokenPrice","apr","isHighValueToken","Math","round","roundingDecimals","compoundFrequency","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","numberOfDays","farmApr","tokenPrice","autoApr","amountEarned","amountInvested","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Pools/helpers.tsx"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\r\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\r\n\r\nexport const getAprData = (pool: Pool, performanceFee: number) => {\r\n  const { isAutoVault, earningTokenPrice, apr } = pool\r\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\r\n  const roundingDecimals = isHighValueToken ? 4 : 2\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\r\n\r\n  if (isAutoVault) {\r\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\r\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n      numberOfDays: 365,\r\n      farmApr: apr,\r\n      tokenPrice: earningTokenPrice,\r\n      roundingDecimals,\r\n      compoundFrequency,\r\n      performanceFee,\r\n    })\r\n    const autoApr = getRoi({\r\n      amountEarned: tokenEarnedPerThousand365D,\r\n      amountInvested: oneThousandDollarsWorthOfToken,\r\n    })\r\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n  }\r\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}