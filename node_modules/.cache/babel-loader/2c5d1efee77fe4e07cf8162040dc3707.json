{"ast":null,"code":"import { format, parseISO, isValid } from 'date-fns';\nimport { MINIMUM_CHOICES } from './Choices';\nexport const combineDateAndTime = (date, time) => {\n  if (!isValid(date) || !isValid(time)) {\n    return null;\n  }\n  const dateStr = format(date, 'yyyy-MM-dd');\n  const timeStr = format(time, 'HH:mm:ss');\n  return parseISO(`${dateStr}T${timeStr}`).getTime() / 1e3;\n};\nexport const getFormErrors = (formData, t) => {\n  const {\n    name,\n    body,\n    choices,\n    startDate,\n    startTime,\n    endDate,\n    endTime,\n    snapshot\n  } = formData;\n  const errors = {};\n  if (!name) {\n    errors.name = [t('%field% is required', {\n      field: 'Title'\n    })];\n  }\n  if (!body) {\n    errors.body = [t('%field% is required', {\n      field: 'Body'\n    })];\n  }\n  if (choices.length < MINIMUM_CHOICES) {\n    errors.choices = [t('Please create a minimum of %num% choices', {\n      num: MINIMUM_CHOICES\n    })];\n  }\n  const hasEmptyChoice = choices.some(choice => !choice.value);\n  if (choices.length === MINIMUM_CHOICES && hasEmptyChoice) {\n    errors.choices = Array.isArray(errors.choices) ? [...errors.choices, t('Choices must not be empty')] : errors.choices = [t('Choices must not be empty')];\n  }\n  if (!isValid(startDate)) {\n    errors.startDate = [t('Please select a valid date')];\n  }\n  if (!isValid(startTime)) {\n    errors.startTime = [t('Please select a valid time')];\n  }\n  if (!isValid(endDate)) {\n    errors.endDate = [t('Please select a valid date')];\n  }\n  if (!isValid(endTime)) {\n    errors.endTime = [t('Please select a valid time')];\n  }\n  const startDateTimestamp = combineDateAndTime(startDate, startTime);\n  const endDateTimestamp = combineDateAndTime(endDate, endTime);\n  if (endDateTimestamp < startDateTimestamp) {\n    errors.endDate = Array.isArray(errors.endDate) ? [...errors.endDate, t('End date must be after the start date')] : errors.endDate = [t('End date must be after the start date')];\n  }\n  if (snapshot === 0) {\n    errors.snapshot = [t('Invalid snapshot')];\n  }\n  return errors;\n};","map":{"version":3,"names":["format","parseISO","isValid","MINIMUM_CHOICES","combineDateAndTime","date","time","dateStr","timeStr","getTime","getFormErrors","formData","t","name","body","choices","startDate","startTime","endDate","endTime","snapshot","errors","field","length","num","hasEmptyChoice","some","choice","value","Array","isArray","startDateTimestamp","endDateTimestamp"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Voting/CreateProposal/helpers.ts"],"sourcesContent":["import { ContextApi } from 'contexts/Localization/types'\r\nimport { format, parseISO, isValid } from 'date-fns'\r\nimport { MINIMUM_CHOICES } from './Choices'\r\nimport { FormState } from './types'\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n  if (!isValid(date) || !isValid(time)) {\r\n    return null\r\n  }\r\n\r\n  const dateStr = format(date, 'yyyy-MM-dd')\r\n  const timeStr = format(time, 'HH:mm:ss')\r\n\r\n  return parseISO(`${dateStr}T${timeStr}`).getTime() / 1e3\r\n}\r\n\r\nexport const getFormErrors = (formData: FormState, t: ContextApi['t']) => {\r\n  const { name, body, choices, startDate, startTime, endDate, endTime, snapshot } = formData\r\n  const errors: { [key: string]: string[] } = {}\r\n\r\n  if (!name) {\r\n    errors.name = [t('%field% is required', { field: 'Title' })]\r\n  }\r\n\r\n  if (!body) {\r\n    errors.body = [t('%field% is required', { field: 'Body' })]\r\n  }\r\n\r\n  if (choices.length < MINIMUM_CHOICES) {\r\n    errors.choices = [t('Please create a minimum of %num% choices', { num: MINIMUM_CHOICES })]\r\n  }\r\n\r\n  const hasEmptyChoice = choices.some((choice) => !choice.value)\r\n  if (choices.length === MINIMUM_CHOICES && hasEmptyChoice) {\r\n    errors.choices = Array.isArray(errors.choices)\r\n      ? [...errors.choices, t('Choices must not be empty')]\r\n      : (errors.choices = [t('Choices must not be empty')])\r\n  }\r\n\r\n  if (!isValid(startDate)) {\r\n    errors.startDate = [t('Please select a valid date')]\r\n  }\r\n\r\n  if (!isValid(startTime)) {\r\n    errors.startTime = [t('Please select a valid time')]\r\n  }\r\n\r\n  if (!isValid(endDate)) {\r\n    errors.endDate = [t('Please select a valid date')]\r\n  }\r\n\r\n  if (!isValid(endTime)) {\r\n    errors.endTime = [t('Please select a valid time')]\r\n  }\r\n\r\n  const startDateTimestamp = combineDateAndTime(startDate, startTime)\r\n  const endDateTimestamp = combineDateAndTime(endDate, endTime)\r\n\r\n  if (endDateTimestamp < startDateTimestamp) {\r\n    errors.endDate = Array.isArray(errors.endDate)\r\n      ? [...errors.endDate, t('End date must be after the start date')]\r\n      : (errors.endDate = [t('End date must be after the start date')])\r\n  }\r\n\r\n  if (snapshot === 0) {\r\n    errors.snapshot = [t('Invalid snapshot')]\r\n  }\r\n\r\n  return errors\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}