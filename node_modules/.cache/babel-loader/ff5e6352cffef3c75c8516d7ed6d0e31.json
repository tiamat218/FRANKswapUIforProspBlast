{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\AprRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport Balance from 'components/Balance';\nimport ApyCalculatorModal from 'components/ApyCalculatorModal';\nimport { getAprData } from 'views/Pools/helpers';\nimport { getAddress } from 'utils/addressHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AprRow = ({\n  pool,\n  performanceFee = 0\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    stakingToken,\n    earningToken,\n    isFinished,\n    apr,\n    earningTokenPrice,\n    isAutoVault\n  } = pool;\n  const tooltipContent = isAutoVault ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.') : t('This pool’s rewards aren’t compounded automatically, so we show APR');\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(tooltipContent, {\n    placement: 'bottom-start'\n  });\n  const {\n    apr: earningsPercentageToDisplay,\n    roundingDecimals,\n    compoundFrequency\n  } = getAprData(pool, performanceFee);\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap';\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(ApyCalculatorModal, {\n    tokenPrice: earningTokenPrice,\n    apr: apr,\n    linkLabel: t('Get %symbol%', {\n      symbol: stakingToken.symbol\n    }),\n    linkHref: apyModalLink,\n    earningTokenSymbol: earningToken.symbol,\n    roundingDecimals: roundingDecimals,\n    compoundFrequency: compoundFrequency,\n    performanceFee: performanceFee\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      children: isAutoVault ? `${t('APY')}:` : `${t('APR')}:`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), isFinished || !apr ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"82px\",\n      height: \"32px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"16px\",\n        isDisabled: isFinished,\n        value: earningsPercentageToDisplay,\n        decimals: 2,\n        unit: \"%\",\n        bold: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: onPresentApyModal,\n        variant: \"text\",\n        scale: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n          color: \"textSubtle\",\n          width: \"18px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AprRow, \"2uwgmcxU2kGCfbBwkMoDWatU7Kc=\", false, function () {\n  return [useTranslation, useTooltip, useModal];\n});\n\n_c = AprRow;\nexport default AprRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"AprRow\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/AprRow.tsx"],"names":["React","Flex","TooltipText","IconButton","useModal","CalculateIcon","Skeleton","useTooltip","useTranslation","Balance","ApyCalculatorModal","getAprData","getAddress","AprRow","pool","performanceFee","t","stakingToken","earningToken","isFinished","apr","earningTokenPrice","isAutoVault","tooltipContent","targetRef","tooltip","tooltipVisible","placement","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","address","onPresentApyModal","symbol"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { Pool } from 'state/types'\r\nimport { getAprData } from 'views/Pools/helpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\ninterface AprRowProps {\r\n  pool: Pool\r\n  performanceFee?: number\r\n}\r\n\r\nconst AprRow: React.FC<AprRowProps> = ({ pool, performanceFee = 0 }) => {\r\n  const { t } = useTranslation()\r\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, isAutoVault } = pool\r\n\r\n  const tooltipContent = isAutoVault\r\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\r\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n\r\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\r\n\r\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap'\r\n\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      tokenPrice={earningTokenPrice}\r\n      apr={apr}\r\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n      linkHref={apyModalLink}\r\n      earningTokenSymbol={earningToken.symbol}\r\n      roundingDecimals={roundingDecimals}\r\n      compoundFrequency={compoundFrequency}\r\n      performanceFee={performanceFee}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\r\n      {isFinished || !apr ? (\r\n        <Skeleton width=\"82px\" height=\"32px\" />\r\n      ) : (\r\n        <Flex alignItems=\"center\">\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            isDisabled={isFinished}\r\n            value={earningsPercentageToDisplay}\r\n            decimals={2}\r\n            unit=\"%\"\r\n            bold\r\n          />\r\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Flex>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AprRow\r\n"]},"metadata":{},"sourceType":"module"}