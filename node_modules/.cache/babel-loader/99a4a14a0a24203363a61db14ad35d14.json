{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport tokens from 'config/constants/tokens';\nimport { useCakeVault } from 'state/pools/hooks';\nimport AprRow from '../PoolCard/AprRow';\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard';\nimport CardFooter from '../PoolCard/CardFooter';\nimport StyledCardHeader from '../PoolCard/StyledCardHeader';\nimport VaultCardActions from './VaultCardActions';\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow';\nimport RecentCakeProfitRow from './RecentCakeProfitRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCardBody = styled(CardBody)`\n  min-height: ${({\n  isLoading\n}) => isLoading ? '0' : '254px'};\n`;\n_c = StyledCardBody;\n\nconst CakeVaultCard = ({\n  pool,\n  showStakedOnly\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isXl\n  } = useMatchBreakpoints();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      userShares,\n      isLoading: isVaultUserDataLoading\n    },\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault();\n  const accountHasSharesStaked = userShares && userShares.gt(0);\n  const isLoading = !pool.userData || isVaultUserDataLoading;\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    isPromoted: {\n      isDesktop: isXl\n    },\n    children: /*#__PURE__*/_jsxDEV(StyledCardInner, {\n      children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n        isStaking: accountHasSharesStaked,\n        isAutoVault: true,\n        earningToken: tokens.cake,\n        stakingToken: tokens.cake\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledCardBody, {\n        isLoading: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(AprRow, {\n          pool: pool,\n          performanceFee: performanceFeeAsDecimal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"24px\",\n          children: /*#__PURE__*/_jsxDEV(RecentCakeProfitRow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"8px\",\n          children: /*#__PURE__*/_jsxDEV(UnstakingFeeCountdownRow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"32px\",\n          flexDirection: \"column\",\n          children: account ? /*#__PURE__*/_jsxDEV(VaultCardActions, {\n            pool: pool,\n            accountHasSharesStaked: accountHasSharesStaked,\n            isLoading: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              mb: \"10px\",\n              textTransform: \"uppercase\",\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              bold: true,\n              children: t('Start earning')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n        pool: pool,\n        account: account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeVaultCard, \"gw8xFSt3VqMGzXtX1kEDOVsOrPk=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useWeb3React, useCakeVault];\n});\n\n_c2 = CakeVaultCard;\nexport default CakeVaultCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCardBody\");\n$RefreshReg$(_c2, \"CakeVaultCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/CakeVaultCard/index.tsx"],"names":["React","styled","Box","CardBody","Flex","Text","useMatchBreakpoints","useTranslation","useWeb3React","ConnectWalletButton","tokens","useCakeVault","AprRow","StyledCard","StyledCardInner","CardFooter","StyledCardHeader","VaultCardActions","UnstakingFeeCountdownRow","RecentCakeProfitRow","StyledCardBody","isLoading","CakeVaultCard","pool","showStakedOnly","t","isXl","account","userData","userShares","isVaultUserDataLoading","fees","performanceFee","accountHasSharesStaked","gt","performanceFeeAsDecimal","isDesktop","cake"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, CardBody, Flex, Text, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { Pool } from 'state/types'\r\nimport AprRow from '../PoolCard/AprRow'\r\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\r\nimport CardFooter from '../PoolCard/CardFooter'\r\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\r\nimport VaultCardActions from './VaultCardActions'\r\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\r\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\r\n\r\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\r\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\r\n`\r\n\r\ninterface CakeVaultProps {\r\n  pool: Pool\r\n  showStakedOnly: boolean\r\n}\r\n\r\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    userData: { userShares, isLoading: isVaultUserDataLoading },\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n\r\n  const accountHasSharesStaked = userShares && userShares.gt(0)\r\n  const isLoading = !pool.userData || isVaultUserDataLoading\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  if (showStakedOnly && !accountHasSharesStaked) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <StyledCard isPromoted={{ isDesktop: isXl }}>\r\n      <StyledCardInner>\r\n        <StyledCardHeader\r\n          isStaking={accountHasSharesStaked}\r\n          isAutoVault\r\n          earningToken={tokens.cake}\r\n          stakingToken={tokens.cake}\r\n        />\r\n        <StyledCardBody isLoading={isLoading}>\r\n          <AprRow pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n          <Box mt=\"24px\">\r\n            <RecentCakeProfitRow />\r\n          </Box>\r\n          <Box mt=\"8px\">\r\n            <UnstakingFeeCountdownRow />\r\n          </Box>\r\n          <Flex mt=\"32px\" flexDirection=\"column\">\r\n            {account ? (\r\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\r\n            ) : (\r\n              <>\r\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\r\n                  {t('Start earning')}\r\n                </Text>\r\n                <ConnectWalletButton />\r\n              </>\r\n            )}\r\n          </Flex>\r\n        </StyledCardBody>\r\n        <CardFooter pool={pool} account={account} />\r\n      </StyledCardInner>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default CakeVaultCard\r\n"]},"metadata":{},"sourceType":"module"}