{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\AllHistoryCard\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchLottery } from 'state/lottery/helpers';\nimport { LotteryStatus } from 'config/constants/types';\nimport RoundSwitcher from './RoundSwitcher';\nimport { getDrawnDate, processLotteryResponse } from '../../helpers';\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body';\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`;\n_c = StyledCard;\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({\n  theme\n}) => theme.colors.cardBorder} solid;\n`;\n_c2 = StyledCardHeader;\nconst AllHistoryCard = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    currentLotteryId,\n    currentRound: {\n      status,\n      isLoading\n    }\n  } = useLottery();\n  const [latestRoundId, setLatestRoundId] = useState(null);\n  const [selectedRoundId, setSelectedRoundId] = useState('');\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null);\n  const timer = useRef(null);\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null;\n      const mostRecentFinishedRoundId = status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1;\n      setLatestRoundId(mostRecentFinishedRoundId);\n      setSelectedRoundId(mostRecentFinishedRoundId.toString());\n    }\n  }, [currentLotteryId, status]);\n  useEffect(() => {\n    setSelectedLotteryInfo(null);\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId);\n      const processedLotteryData = processLotteryResponse(lotteryData);\n      setSelectedLotteryInfo(processedLotteryData);\n    };\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData();\n      }\n      clearInterval(timer.current);\n    }, 1000);\n    return () => clearInterval(timer.current);\n  }, [selectedRoundId]);\n  const handleInputChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    if (value) {\n      setSelectedRoundId(value);\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('');\n      }\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString());\n      }\n    } else {\n      setSelectedRoundId('');\n    }\n  };\n  const handleArrowButonPress = targetRound => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString());\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n      children: [/*#__PURE__*/_jsxDEV(RoundSwitcher, {\n        isLoading: isLoading,\n        selectedRoundId: selectedRoundId,\n        mostRecentRound: latestRoundId,\n        handleInputChange: handleInputChange,\n        handleArrowButonPress: handleArrowButonPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"8px\",\n        children: (selectedLotteryInfo === null || selectedLotteryInfo === void 0 ? void 0 : selectedLotteryInfo.endTime) ? /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: [t('Drawn'), \" \", getDrawnDate(selectedLotteryInfo.endTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"185px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardBody, {\n      lotteryData: selectedLotteryInfo,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardFooter, {\n      lotteryData: selectedLotteryInfo,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(AllHistoryCard, \"pWPeiBjh/NcmNejhBERykGJ1p+M=\", false, function () {\n  return [useTranslation, useLottery];\n});\n_c3 = AllHistoryCard;\nexport default AllHistoryCard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledCardHeader\");\n$RefreshReg$(_c3, \"AllHistoryCard\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","Card","Text","Skeleton","CardHeader","Box","useTranslation","useLottery","fetchLottery","LotteryStatus","RoundSwitcher","getDrawnDate","processLotteryResponse","PreviousRoundCardBody","PreviousRoundCardFooter","jsxDEV","_jsxDEV","StyledCard","theme","mediaQueries","md","_c","StyledCardHeader","colors","cardBorder","_c2","AllHistoryCard","_s","t","currentLotteryId","currentRound","status","isLoading","latestRoundId","setLatestRoundId","selectedRoundId","setSelectedRoundId","selectedLotteryInfo","setSelectedLotteryInfo","timer","currentLotteryIdAsInt","parseInt","mostRecentFinishedRoundId","CLAIMABLE","toString","fetchLotteryData","lotteryData","processedLotteryData","current","setInterval","clearInterval","handleInputChange","event","target","value","handleArrowButonPress","targetRound","children","mostRecentRound","fileName","_jsxFileName","lineNumber","columnNumber","mt","endTime","fontSize","width","height","lotteryId","_c3","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/AllHistoryCard/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport RoundSwitcher from './RoundSwitcher'\r\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardHeader = styled(CardHeader)`\r\n  z-index: 2;\r\n  background: none;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nconst AllHistoryCard = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    currentLotteryId,\r\n    currentRound: { status, isLoading },\r\n  } = useLottery()\r\n  const [latestRoundId, setLatestRoundId] = useState(null)\r\n  const [selectedRoundId, setSelectedRoundId] = useState('')\r\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null)\r\n  const timer = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\r\n      const mostRecentFinishedRoundId =\r\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\r\n      setLatestRoundId(mostRecentFinishedRoundId)\r\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\r\n    }\r\n  }, [currentLotteryId, status])\r\n\r\n  useEffect(() => {\r\n    setSelectedLotteryInfo(null)\r\n\r\n    const fetchLotteryData = async () => {\r\n      const lotteryData = await fetchLottery(selectedRoundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      setSelectedLotteryInfo(processedLotteryData)\r\n    }\r\n\r\n    timer.current = setInterval(() => {\r\n      if (selectedRoundId) {\r\n        fetchLotteryData()\r\n      }\r\n      clearInterval(timer.current)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [selectedRoundId])\r\n\r\n  const handleInputChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    if (value) {\r\n      setSelectedRoundId(value)\r\n      if (parseInt(value, 10) <= 0) {\r\n        setSelectedRoundId('')\r\n      }\r\n      if (parseInt(value, 10) >= latestRoundId) {\r\n        setSelectedRoundId(latestRoundId.toString())\r\n      }\r\n    } else {\r\n      setSelectedRoundId('')\r\n    }\r\n  }\r\n\r\n  const handleArrowButonPress = (targetRound) => {\r\n    if (targetRound) {\r\n      setSelectedRoundId(targetRound.toString())\r\n    } else {\r\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\r\n      setSelectedRoundId('1')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardHeader>\r\n        <RoundSwitcher\r\n          isLoading={isLoading}\r\n          selectedRoundId={selectedRoundId}\r\n          mostRecentRound={latestRoundId}\r\n          handleInputChange={handleInputChange}\r\n          handleArrowButonPress={handleArrowButonPress}\r\n        />\r\n        <Box mt=\"8px\">\r\n          {selectedLotteryInfo?.endTime ? (\r\n            <Text fontSize=\"14px\">\r\n              {t('Drawn')} {getDrawnDate(selectedLotteryInfo.endTime)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton width=\"185px\" height=\"21px\" />\r\n          )}\r\n        </Box>\r\n      </StyledCardHeader>\r\n      <PreviousRoundCardBody lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n      <PreviousRoundCardFooter lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default AllHistoryCard\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}