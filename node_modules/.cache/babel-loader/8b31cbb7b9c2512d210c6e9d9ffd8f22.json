{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks';\nimport fetchUnclaimedUserRewards from 'state/lottery/fetchUnclaimedUserRewards';\nexport let FetchStatus;\n\n(function (FetchStatus) {\n  FetchStatus[\"NOT_FETCHED\"] = \"not-fetched\";\n  FetchStatus[\"IN_PROGRESS\"] = \"in-progress\";\n  FetchStatus[\"SUCCESS\"] = \"success\";\n})(FetchStatus || (FetchStatus = {}));\n\nconst useGetUnclaimedRewards = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    isTransitioning\n  } = useLottery();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const lotteriesData = useGetLotteriesGraphData();\n  const [unclaimedRewards, setUnclaimedRewards] = useState([]);\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED);\n  useEffect(() => {\n    // Reset on account change and round transition\n    setFetchStatus(FetchStatus.NOT_FETCHED);\n  }, [account, isTransitioning]);\n\n  const fetchAllRewards = async () => {\n    setFetchStatus(FetchStatus.IN_PROGRESS);\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(account, userLotteryData, lotteriesData);\n    setUnclaimedRewards(unclaimedRewardsResponse);\n    setFetchStatus(FetchStatus.SUCCESS);\n  };\n\n  return {\n    fetchAllRewards,\n    unclaimedRewards,\n    fetchStatus\n  };\n};\n\n_s(useGetUnclaimedRewards, \"hBY+uicqD/0Xf1Hv3DsqxZf+qq8=\", false, function () {\n  return [useWeb3React, useLottery, useGetUserLotteriesGraphData, useGetLotteriesGraphData];\n});\n\nexport default useGetUnclaimedRewards;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/hooks/useGetUnclaimedRewards.ts"],"names":["useState","useEffect","useWeb3React","useGetLotteriesGraphData","useGetUserLotteriesGraphData","useLottery","fetchUnclaimedUserRewards","FetchStatus","useGetUnclaimedRewards","account","isTransitioning","userLotteryData","lotteriesData","unclaimedRewards","setUnclaimedRewards","fetchStatus","setFetchStatus","NOT_FETCHED","fetchAllRewards","IN_PROGRESS","unclaimedRewardsResponse","SUCCESS"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,wBAAT,EAAmCC,4BAAnC,EAAiEC,UAAjE,QAAmF,qBAAnF;AACA,OAAOC,yBAAP,MAAsC,yCAAtC;AAEA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAMZ,MAAMC,sBAAsB,GAAG,MAAM;AAAA;;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAcP,YAAY,EAAhC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAsBL,UAAU,EAAtC;AACA,QAAMM,eAAe,GAAGP,4BAA4B,EAApD;AACA,QAAMQ,aAAa,GAAGT,wBAAwB,EAA9C;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAACO,WAAW,CAACU,WAAb,CAA9C;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAe,IAAAA,cAAc,CAACT,WAAW,CAACU,WAAb,CAAd;AACD,GAHQ,EAGN,CAACR,OAAD,EAAUC,eAAV,CAHM,CAAT;;AAKA,QAAMQ,eAAe,GAAG,YAAY;AAClCF,IAAAA,cAAc,CAACT,WAAW,CAACY,WAAb,CAAd;AACA,UAAMC,wBAAwB,GAAG,MAAMd,yBAAyB,CAACG,OAAD,EAAUE,eAAV,EAA2BC,aAA3B,CAAhE;AACAE,IAAAA,mBAAmB,CAACM,wBAAD,CAAnB;AACAJ,IAAAA,cAAc,CAACT,WAAW,CAACc,OAAb,CAAd;AACD,GALD;;AAOA,SAAO;AAAEH,IAAAA,eAAF;AAAmBL,IAAAA,gBAAnB;AAAqCE,IAAAA;AAArC,GAAP;AACD,CArBD;;GAAMP,sB;UACgBN,Y,EACQG,U,EACJD,4B,EACFD,wB;;;AAmBxB,eAAeK,sBAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetLotteriesGraphData, useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\r\nimport fetchUnclaimedUserRewards from 'state/lottery/fetchUnclaimedUserRewards'\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  IN_PROGRESS = 'in-progress',\r\n  SUCCESS = 'success',\r\n}\r\n\r\nconst useGetUnclaimedRewards = () => {\r\n  const { account } = useWeb3React()\r\n  const { isTransitioning } = useLottery()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  const [unclaimedRewards, setUnclaimedRewards] = useState([])\r\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\r\n\r\n  useEffect(() => {\r\n    // Reset on account change and round transition\r\n    setFetchStatus(FetchStatus.NOT_FETCHED)\r\n  }, [account, isTransitioning])\r\n\r\n  const fetchAllRewards = async () => {\r\n    setFetchStatus(FetchStatus.IN_PROGRESS)\r\n    const unclaimedRewardsResponse = await fetchUnclaimedUserRewards(account, userLotteryData, lotteriesData)\r\n    setUnclaimedRewards(unclaimedRewardsResponse)\r\n    setFetchStatus(FetchStatus.SUCCESS)\r\n  }\r\n\r\n  return { fetchAllRewards, unclaimedRewards, fetchStatus }\r\n}\r\n\r\nexport default useGetUnclaimedRewards\r\n"]},"metadata":{},"sourceType":"module"}