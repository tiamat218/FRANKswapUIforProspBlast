{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport useDebounce from 'hooks/useDebounce';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { updateBlockNumber } from './actions';\nexport default function Updater() {\n  _s();\n\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const windowVisible = useIsWindowVisible();\n  const [state, setState] = useState({\n    chainId,\n    blockNumber: null\n  });\n  const blockNumberCallback = useCallback(blockNumber => {\n    setState(prev => {\n      if (chainId === prev.chainId) {\n        if (typeof prev.blockNumber !== 'number') return {\n          chainId,\n          blockNumber\n        };\n        return {\n          chainId,\n          blockNumber: Math.max(blockNumber, prev.blockNumber)\n        };\n      }\n\n      return prev;\n    });\n  }, [chainId, setState]); // attach/detach listeners\n\n  useEffect(() => {\n    if (!library || !chainId || !windowVisible) return undefined;\n    setState({\n      chainId,\n      blockNumber: null\n    });\n    library.getBlockNumber().then(blockNumberCallback).catch(error => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n    library.on('block', blockNumberCallback);\n    return () => {\n      library.removeListener('block', blockNumberCallback);\n    };\n  }, [dispatch, chainId, library, blockNumberCallback, windowVisible]);\n  const debouncedState = useDebounce(state, 100);\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(updateBlockNumber({\n      chainId: debouncedState.chainId,\n      blockNumber: debouncedState.blockNumber\n    }));\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n  return null;\n}\n\n_s(Updater, \"+ELlpgS7uWiL8lBd6ypbInhxaEU=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useIsWindowVisible, useDebounce];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/application/updater.ts"],"names":["useCallback","useEffect","useState","useDispatch","useActiveWeb3React","useDebounce","useIsWindowVisible","updateBlockNumber","Updater","library","chainId","dispatch","windowVisible","state","setState","blockNumber","blockNumberCallback","prev","Math","max","undefined","getBlockNumber","then","catch","error","console","on","removeListener","debouncedState"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,eAAe,SAASC,OAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,kBAAkB,EAA/C;AACA,QAAMO,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,aAAa,GAAGN,kBAAkB,EAAxC;AAEA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAA8D;AAC9FQ,IAAAA,OAD8F;AAE9FK,IAAAA,WAAW,EAAE;AAFiF,GAA9D,CAAlC;AAKA,QAAMC,mBAAmB,GAAGhB,WAAW,CACpCe,WAAD,IAAyB;AACvBD,IAAAA,QAAQ,CAAEG,IAAD,IAAU;AACjB,UAAIP,OAAO,KAAKO,IAAI,CAACP,OAArB,EAA8B;AAC5B,YAAI,OAAOO,IAAI,CAACF,WAAZ,KAA4B,QAAhC,EAA0C,OAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA;AAAX,SAAP;AAC1C,eAAO;AAAEL,UAAAA,OAAF;AAAWK,UAAAA,WAAW,EAAEG,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAsBE,IAAI,CAACF,WAA3B;AAAxB,SAAP;AACD;;AACD,aAAOE,IAAP;AACD,KANO,CAAR;AAOD,GAToC,EAUrC,CAACP,OAAD,EAAUI,QAAV,CAVqC,CAAvC,CAXsC,CAwBtC;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACE,aAA7B,EAA4C,OAAOQ,SAAP;AAE5CN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,OAAF;AAAWK,MAAAA,WAAW,EAAE;AAAxB,KAAD,CAAR;AAEAN,IAAAA,OAAO,CACJY,cADH,GAEGC,IAFH,CAEQN,mBAFR,EAGGO,KAHH,CAGUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,2CAA0Cd,OAAQ,EAAjE,EAAoEc,KAApE,CAHpB;AAKAf,IAAAA,OAAO,CAACiB,EAAR,CAAW,OAAX,EAAoBV,mBAApB;AACA,WAAO,MAAM;AACXP,MAAAA,OAAO,CAACkB,cAAR,CAAuB,OAAvB,EAAgCX,mBAAhC;AACD,KAFD;AAGD,GAdQ,EAcN,CAACL,QAAD,EAAWD,OAAX,EAAoBD,OAApB,EAA6BO,mBAA7B,EAAkDJ,aAAlD,CAdM,CAAT;AAgBA,QAAMgB,cAAc,GAAGvB,WAAW,CAACQ,KAAD,EAAQ,GAAR,CAAlC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC2B,cAAc,CAAClB,OAAhB,IAA2B,CAACkB,cAAc,CAACb,WAA3C,IAA0D,CAACH,aAA/D,EAA8E;AAC9ED,IAAAA,QAAQ,CAACJ,iBAAiB,CAAC;AAAEG,MAAAA,OAAO,EAAEkB,cAAc,CAAClB,OAA1B;AAAmCK,MAAAA,WAAW,EAAEa,cAAc,CAACb;AAA/D,KAAD,CAAlB,CAAR;AACD,GAHQ,EAGN,CAACH,aAAD,EAAgBD,QAAhB,EAA0BiB,cAAc,CAACb,WAAzC,EAAsDa,cAAc,CAAClB,OAArE,CAHM,CAAT;AAKA,SAAO,IAAP;AACD;;GAjDuBF,O;UACOJ,kB,EACZD,W,EAEKG,kB,EAqCCD,W;;;KAzCDG,O","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport useDebounce from 'hooks/useDebounce'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { updateBlockNumber } from './actions'\r\n\r\nexport default function Updater(): null {\r\n  const { library, chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch()\r\n\r\n  const windowVisible = useIsWindowVisible()\r\n\r\n  const [state, setState] = useState<{ chainId: number | undefined; blockNumber: number | null }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  })\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((prev) => {\r\n        if (chainId === prev.chainId) {\r\n          if (typeof prev.blockNumber !== 'number') return { chainId, blockNumber }\r\n          return { chainId, blockNumber: Math.max(blockNumber, prev.blockNumber) }\r\n        }\r\n        return prev\r\n      })\r\n    },\r\n    [chainId, setState],\r\n  )\r\n\r\n  // attach/detach listeners\r\n  useEffect(() => {\r\n    if (!library || !chainId || !windowVisible) return undefined\r\n\r\n    setState({ chainId, blockNumber: null })\r\n\r\n    library\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error))\r\n\r\n    library.on('block', blockNumberCallback)\r\n    return () => {\r\n      library.removeListener('block', blockNumberCallback)\r\n    }\r\n  }, [dispatch, chainId, library, blockNumberCallback, windowVisible])\r\n\r\n  const debouncedState = useDebounce(state, 100)\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return\r\n    dispatch(updateBlockNumber({ chainId: debouncedState.chainId, blockNumber: debouncedState.blockNumber }))\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}