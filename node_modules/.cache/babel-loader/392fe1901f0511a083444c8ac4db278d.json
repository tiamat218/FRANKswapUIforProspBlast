{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { ConnectorNames } from '@pancakeswap/uikit';\nimport { ethers } from 'ethers';\nimport getNodeUrl from './getRpcUrl';\nconst POLLING_INTERVAL = 12000;\nconst rpcUrl = getNodeUrl();\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\nconst injected = new InjectedConnector({\n  supportedChainIds: [chainId]\n});\nconst walletconnect = new WalletConnectConnector({\n  rpc: {\n    [chainId]: rpcUrl\n  },\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\nconst bscConnector = new BscConnector({\n  supportedChainIds: [chainId]\n});\nexport const connectorsByName = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector\n};\nexport const getLibrary = provider => {\n  const library = new ethers.providers.Web3Provider(provider);\n  library.pollingInterval = POLLING_INTERVAL;\n  return library;\n};\n\n/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */\nexport const signMessage = async (provider, account, message) => {\n  var _provider$provider;\n  if (window.BinanceChain) {\n    const {\n      signature\n    } = await window.BinanceChain.bnbSign(account, message);\n    return signature;\n  }\n\n  /**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */\n  if ((_provider$provider = provider.provider) === null || _provider$provider === void 0 ? void 0 : _provider$provider.wc) {\n    var _provider$provider2;\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\n    const signature = await ((_provider$provider2 = provider.provider) === null || _provider$provider2 === void 0 ? void 0 : _provider$provider2.wc.signPersonalMessage([wcMessage, account]));\n    return signature;\n  }\n  return provider.getSigner(account).signMessage(message);\n};","map":{"version":3,"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","ethers","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","connectorsByName","Injected","WalletConnect","BSC","getLibrary","provider","library","providers","Web3Provider","signMessage","account","message","_provider$provider","window","BinanceChain","signature","bnbSign","wc","_provider$provider2","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/utils/web3React.ts"],"sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\r\n  const library = new ethers.providers.Web3Provider(provider)\r\n  library.pollingInterval = POLLING_INTERVAL\r\n  return library\r\n}\r\n\r\n/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */\r\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\r\n  if (window.BinanceChain) {\r\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\r\n    return signature\r\n  }\r\n\r\n  /**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */\r\n  if (provider.provider?.wc) {\r\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\r\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\r\n    return signature\r\n  }\r\n\r\n  return provider.getSigner(account).signMessage(message)\r\n}\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,UAAU,MAAM,aAAa;AAEpC,MAAMC,gBAAgB,GAAG,KAAK;AAC9B,MAAMC,MAAM,GAAGF,UAAU,CAAC,CAAC;AAC3B,MAAMG,OAAO,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,EAAE,EAAE,CAAC;AAE5D,MAAMC,QAAQ,GAAG,IAAIb,iBAAiB,CAAC;EAAEc,iBAAiB,EAAE,CAACN,OAAO;AAAE,CAAC,CAAC;AAExE,MAAMO,aAAa,GAAG,IAAId,sBAAsB,CAAC;EAC/Ce,GAAG,EAAE;IAAE,CAACR,OAAO,GAAGD;EAAO,CAAC;EAC1BU,MAAM,EAAE,+CAA+C;EACvDC,MAAM,EAAE,IAAI;EACZC,eAAe,EAAEb;AACnB,CAAC,CAAC;AAEF,MAAMc,YAAY,GAAG,IAAIlB,YAAY,CAAC;EAAEY,iBAAiB,EAAE,CAACN,OAAO;AAAE,CAAC,CAAC;AAEvE,OAAO,MAAMa,gBAA4D,GAAG;EAC1E,CAAClB,cAAc,CAACmB,QAAQ,GAAGT,QAAQ;EACnC,CAACV,cAAc,CAACoB,aAAa,GAAGR,aAAa;EAC7C,CAACZ,cAAc,CAACqB,GAAG,GAAGJ;AACxB,CAAC;AAED,OAAO,MAAMK,UAAU,GAAIC,QAAQ,IAAoC;EACrE,MAAMC,OAAO,GAAG,IAAIvB,MAAM,CAACwB,SAAS,CAACC,YAAY,CAACH,QAAQ,CAAC;EAC3DC,OAAO,CAACR,eAAe,GAAGb,gBAAgB;EAC1C,OAAOqB,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOJ,QAAa,EAAEK,OAAe,EAAEC,OAAe,KAAsB;EAAA,IAAAC,kBAAA;EACrG,IAAIC,MAAM,CAACC,YAAY,EAAE;IACvB,MAAM;MAAEC;IAAU,CAAC,GAAG,MAAMF,MAAM,CAACC,YAAY,CAACE,OAAO,CAACN,OAAO,EAAEC,OAAO,CAAC;IACzE,OAAOI,SAAS;EAClB;;EAEA;AACF;AACA;AACA;EACE,KAAAH,kBAAA,GAAIP,QAAQ,CAACA,QAAQ,cAAAO,kBAAA,uBAAjBA,kBAAA,CAAmBK,EAAE,EAAE;IAAA,IAAAC,mBAAA;IACzB,MAAMC,SAAS,GAAGpC,MAAM,CAACqC,KAAK,CAACC,OAAO,CAACtC,MAAM,CAACqC,KAAK,CAACE,WAAW,CAACX,OAAO,CAAC,CAAC;IACzE,MAAMI,SAAS,GAAG,QAAAG,mBAAA,GAAMb,QAAQ,CAACA,QAAQ,cAAAa,mBAAA,uBAAjBA,mBAAA,CAAmBD,EAAE,CAACM,mBAAmB,CAAC,CAACJ,SAAS,EAAET,OAAO,CAAC,CAAC;IACvF,OAAOK,SAAS;EAClB;EAEA,OAAOV,QAAQ,CAACmB,SAAS,CAACd,OAAO,CAAC,CAACD,WAAW,CAACE,OAAO,CAAC;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}