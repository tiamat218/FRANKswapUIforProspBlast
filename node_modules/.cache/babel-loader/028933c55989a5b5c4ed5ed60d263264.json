{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.';\nimport { useProcessLotteryResponse } from './helpers';\n\n// Lottery\nexport const useGetCurrentLotteryId = () => {\n  _s();\n  return useSelector(state => state.lottery.currentLotteryId);\n};\n_s(useGetCurrentLotteryId, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport const useGetUserLotteriesGraphData = () => {\n  _s2();\n  return useSelector(state => state.lottery.userLotteryData);\n};\n_s2(useGetUserLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport const useGetUserLotteryGraphRoundById = lotteryId => {\n  _s3();\n  const userLotteriesData = useGetUserLotteriesGraphData();\n  return userLotteriesData.rounds.find(userRound => userRound.lotteryId === lotteryId);\n};\n_s3(useGetUserLotteryGraphRoundById, \"z8N4awSf+GNb6r9G/MrGRF+GqRY=\", false, function () {\n  return [useGetUserLotteriesGraphData];\n});\nexport const useGetLotteriesGraphData = () => {\n  _s4();\n  return useSelector(state => state.lottery.lotteriesData);\n};\n_s4(useGetLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport const useGetLotteryGraphDataById = lotteryId => {\n  _s5();\n  const lotteriesData = useGetLotteriesGraphData();\n  return lotteriesData.find(lottery => lottery.id === lotteryId);\n};\n_s5(useGetLotteryGraphDataById, \"jI7TCRvqCYJcawyD+w3dAwafvtM=\", false, function () {\n  return [useGetLotteriesGraphData];\n});\nexport const useFetchLottery = () => {\n  _s6();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  const currentLotteryId = useGetCurrentLotteryId();\n  useEffect(() => {\n    // get current lottery ID & max ticket buy\n    dispatch(fetchCurrentLotteryId());\n  }, [dispatch]);\n  useEffect(() => {\n    if (currentLotteryId) {\n      // Get historical lottery data from nodes + subgraph\n      dispatch(fetchPublicLotteries({\n        currentLotteryId\n      }));\n      // get public data for current lottery\n      dispatch(fetchCurrentLottery({\n        currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, fastRefresh]);\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId) {\n      dispatch(fetchUserTicketsAndLotteries({\n        account,\n        currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, account]);\n};\n_s6(useFetchLottery, \"J3IdVYsSzHSNha/vHhWZX5SgbmQ=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch, useGetCurrentLotteryId];\n});\nexport const useLottery = () => {\n  _s7();\n  const currentRound = useSelector(state => state.lottery.currentRound);\n  const processedCurrentRound = useProcessLotteryResponse(currentRound);\n  const isTransitioning = useSelector(state => state.lottery.isTransitioning);\n  const currentLotteryId = useGetCurrentLotteryId();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const lotteriesData = useGetLotteriesGraphData();\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(state => state.lottery.maxNumberTicketsPerBuyOrClaim);\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString);\n  }, [maxNumberTicketsPerBuyOrClaimAsString]);\n  return {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    isTransitioning,\n    userLotteryData,\n    lotteriesData,\n    currentRound: processedCurrentRound\n  };\n};\n_s7(useLottery, \"oKkMY3Lc45r20/N2JqtZ+jgRftc=\", false, function () {\n  return [useSelector, useProcessLotteryResponse, useSelector, useGetCurrentLotteryId, useGetUserLotteriesGraphData, useGetLotteriesGraphData, useSelector];\n});","map":{"version":3,"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","useRefresh","fetchCurrentLotteryId","fetchCurrentLottery","fetchUserTicketsAndLotteries","fetchPublicLotteries","useProcessLotteryResponse","useGetCurrentLotteryId","_s","state","lottery","currentLotteryId","useGetUserLotteriesGraphData","_s2","userLotteryData","useGetUserLotteryGraphRoundById","lotteryId","_s3","userLotteriesData","rounds","find","userRound","useGetLotteriesGraphData","_s4","lotteriesData","useGetLotteryGraphDataById","_s5","id","useFetchLottery","_s6","account","fastRefresh","dispatch","useLottery","_s7","currentRound","processedCurrentRound","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/lottery/hooks.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { State } from '../types'\r\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\r\nimport { useProcessLotteryResponse } from './helpers'\r\n\r\n// Lottery\r\nexport const useGetCurrentLotteryId = () => {\r\n  return useSelector((state: State) => state.lottery.currentLotteryId)\r\n}\r\n\r\nexport const useGetUserLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.userLotteryData)\r\n}\r\n\r\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\r\n  const userLotteriesData = useGetUserLotteriesGraphData()\r\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\r\n}\r\n\r\nexport const useGetLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.lotteriesData)\r\n}\r\n\r\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  return lotteriesData.find((lottery) => lottery.id === lotteryId)\r\n}\r\n\r\nexport const useFetchLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID & max ticket buy\r\n    dispatch(fetchCurrentLotteryId())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      // Get historical lottery data from nodes + subgraph\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      // get public data for current lottery\r\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    // get user tickets for current lottery, and user lottery subgraph data\r\n    if (account && currentLotteryId) {\r\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, account])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\r\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\r\n\r\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\r\n\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n\r\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\r\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\r\n  )\r\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\r\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\r\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\r\n\r\n  return {\r\n    currentLotteryId,\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    isTransitioning,\r\n    userLotteryData,\r\n    lotteriesData,\r\n    currentRound: processedCurrentRound,\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}