{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport cakeABI from 'config/abi/cake.json';\nimport wbnbABI from 'config/abi/weth.json';\nimport multicall from 'utils/multicall';\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getSouschefV2Contract } from 'utils/contractHelpers';\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter(p => p.sousId !== 0);\n  const callsStartBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'startBlock'\n    };\n  });\n  const callsEndBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'bonusEndBlock'\n    };\n  });\n  const starts = await multicall(sousChefABI, callsStartBlock);\n  const ends = await multicall(sousChefABI, callsEndBlock);\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index];\n    const endBlock = ends[index];\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON()\n    };\n  });\n};\nexport const fetchPoolsTotalStaking = async () => {\n  const nonBnbPools = poolsConfig.filter(p => p.stakingToken.symbol !== 'BNB');\n  const bnbPool = poolsConfig.filter(p => p.stakingToken.symbol === 'BNB');\n  const callsNonBnbPools = nonBnbPools.map(poolConfig => {\n    return {\n      address: getAddress(poolConfig.stakingToken.address),\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)]\n    };\n  });\n  const callsBnbPools = bnbPool.map(poolConfig => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)]\n    };\n  });\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools);\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools);\n  return [...nonBnbPools.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()\n  })), ...bnbPool.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON()\n  }))];\n};\nexport const fetchPoolStakingLimit = async sousId => {\n  try {\n    const sousContract = getSouschefV2Contract(sousId);\n    const stakingLimit = await sousContract.poolLimitPerUser();\n    return new BigNumber(stakingLimit.toString());\n  } catch (error) {\n    return BIG_ZERO;\n  }\n};\nexport const fetchPoolsStakingLimits = async poolsWithStakingLimit => {\n  const validPools = poolsConfig.filter(p => p.stakingToken.symbol !== 'BNB' && !p.isFinished).filter(p => !poolsWithStakingLimit.includes(p.sousId));\n\n  // Get the staking limit for each valid pool\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\n  const stakingLimitPromises = validPools.map(validPool => fetchPoolStakingLimit(validPool.sousId));\n  const stakingLimits = await Promise.all(stakingLimitPromises);\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\n    return {\n      ...accum,\n      [validPools[index].sousId]: stakingLimit\n    };\n  }, {});\n};","map":{"version":3,"names":["BigNumber","poolsConfig","sousChefABI","cakeABI","wbnbABI","multicall","getAddress","getWbnbAddress","BIG_ZERO","getSouschefV2Contract","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStaking","nonBnbPools","stakingToken","symbol","bnbPool","callsNonBnbPools","params","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked","fetchPoolStakingLimit","sousContract","stakingLimit","poolLimitPerUser","toString","error","fetchPoolsStakingLimits","poolsWithStakingLimit","validPools","isFinished","includes","stakingLimitPromises","validPool","stakingLimits","Promise","all","reduce","accum"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/pools/fetchPools.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getSouschefV2Contract } from 'utils/contractHelpers'\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.contractAddress),\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStaking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: getAddress(poolConfig.stakingToken.address),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [getAddress(poolConfig.contractAddress)],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n\r\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\r\n  try {\r\n    const sousContract = getSouschefV2Contract(sousId)\r\n    const stakingLimit = await sousContract.poolLimitPerUser()\r\n    return new BigNumber(stakingLimit.toString())\r\n  } catch (error) {\r\n    return BIG_ZERO\r\n  }\r\n}\r\n\r\nexport const fetchPoolsStakingLimits = async (\r\n  poolsWithStakingLimit: number[],\r\n): Promise<{ [key: string]: BigNumber }> => {\r\n  const validPools = poolsConfig\r\n    .filter((p) => p.stakingToken.symbol !== 'BNB' && !p.isFinished)\r\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\r\n\r\n  // Get the staking limit for each valid pool\r\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\r\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\r\n  const stakingLimits = await Promise.all(stakingLimitPromises)\r\n\r\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\r\n    return {\r\n      ...accum,\r\n      [validPools[index].sousId]: stakingLimit,\r\n    }\r\n  }, {})\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}