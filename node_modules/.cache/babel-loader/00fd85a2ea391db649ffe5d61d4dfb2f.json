{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\TradingCompetition\\\\components\\\\RegisterModal\\\\RegisterWithProfile.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button, Heading, Text, Flex, Checkbox, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTradingCompetitionContract } from 'hooks/useContract';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCheckbox = styled(Checkbox)`\n  min-width: 24px;\n`;\n_c = StyledCheckbox;\nconst StyledLabel = styled.label`\n  cursor: pointer;\n`;\n_c2 = StyledLabel;\n\nconst RegisterWithProfile = ({\n  profile,\n  onDismiss,\n  onRegisterSuccess\n}) => {\n  _s();\n\n  const [isAcknowledged, setIsAcknowledged] = useState(false);\n  const [isConfirming, setIsConfirming] = useState(false);\n  const tradingCompetitionContract = useTradingCompetitionContract();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n\n  const handleConfirmClick = async () => {\n    const tx = await tradingCompetitionContract.register();\n    setIsConfirming(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      toastSuccess(t('You have registered for the competition!'));\n      onDismiss();\n      onRegisterSuccess();\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsConfirming(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"md\",\n      mb: \"24px\",\n      children: `@${profile.username}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: t('Registering for the competition will make your wallet address publicly visible on the leaderboard.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        mb: \"24px\",\n        children: t('This decision cannot be reversed.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledLabel, {\n        htmlFor: \"acknowledgement\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(StyledCheckbox, {\n            id: \"acknowledgement\",\n            checked: isAcknowledged,\n            onChange: () => setIsAcknowledged(!isAcknowledged),\n            scale: \"sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: \"16px\",\n            children: t('I understand that my address may be displayed publicly throughout the competition.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"24px\",\n      width: \"100%\",\n      onClick: handleConfirmClick,\n      disabled: !isAcknowledged || isConfirming,\n      isLoading: isConfirming,\n      endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }, this) : null,\n      children: t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegisterWithProfile, \"BNngcNiYwyZ8VNNkE84wSFgo6TU=\", false, function () {\n  return [useTradingCompetitionContract, useToast, useTranslation];\n});\n\n_c3 = RegisterWithProfile;\nexport default RegisterWithProfile;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCheckbox\");\n$RefreshReg$(_c2, \"StyledLabel\");\n$RefreshReg$(_c3, \"RegisterWithProfile\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/components/RegisterModal/RegisterWithProfile.tsx"],"names":["React","useState","styled","Button","Heading","Text","Flex","Checkbox","AutoRenewIcon","useTradingCompetitionContract","useTranslation","useToast","StyledCheckbox","StyledLabel","label","RegisterWithProfile","profile","onDismiss","onRegisterSuccess","isAcknowledged","setIsAcknowledged","isConfirming","setIsConfirming","tradingCompetitionContract","toastSuccess","toastError","t","handleConfirmClick","tx","register","receipt","wait","status","username"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Text, Flex, Checkbox, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTradingCompetitionContract } from 'hooks/useContract'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { CompetitionProps } from '../../types'\r\n\r\nconst StyledCheckbox = styled(Checkbox)`\r\n  min-width: 24px;\r\n`\r\n\r\nconst StyledLabel = styled.label`\r\n  cursor: pointer;\r\n`\r\n\r\nconst RegisterWithProfile: React.FC<CompetitionProps> = ({ profile, onDismiss, onRegisterSuccess }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const tradingCompetitionContract = useTradingCompetitionContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirmClick = async () => {\r\n    const tx = await tradingCompetitionContract.register()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('You have registered for the competition!'))\r\n      onDismiss()\r\n      onRegisterSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Heading scale=\"md\" mb=\"24px\">{`@${profile.username}`}</Heading>\r\n      <Flex flexDirection=\"column\">\r\n        <Text bold>\r\n          {t('Registering for the competition will make your wallet address publicly visible on the leaderboard.')}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color=\"textSubtle\" mb=\"24px\">\r\n          {t('This decision cannot be reversed.')}\r\n        </Text>\r\n        <StyledLabel htmlFor=\"acknowledgement\">\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n            <StyledCheckbox\r\n              id=\"acknowledgement\"\r\n              checked={isAcknowledged}\r\n              onChange={() => setIsAcknowledged(!isAcknowledged)}\r\n              scale=\"sm\"\r\n            />\r\n            <Text ml=\"16px\">\r\n              {t('I understand that my address may be displayed publicly throughout the competition.')}\r\n            </Text>\r\n          </Flex>\r\n        </StyledLabel>\r\n      </Flex>\r\n      <Button\r\n        mt=\"24px\"\r\n        width=\"100%\"\r\n        onClick={handleConfirmClick}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RegisterWithProfile\r\n"]},"metadata":{},"sourceType":"module"}