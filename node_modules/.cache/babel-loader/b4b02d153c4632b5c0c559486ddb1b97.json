{"ast":null,"code":"import React,{useState}from'react';import{Button,Skeleton,Text}from'@pancakeswap/uikit';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import Balance from'components/Balance';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{useAppDispatch}from'state';import{fetchFarmUserDataAsync}from'state/farms';import{usePriceCakeBusd}from'state/farms/hooks';import useToast from'hooks/useToast';import{useTranslation}from'contexts/Localization';import useHarvestFarm from'../../../hooks/useHarvestFarm';import{ActionContainer,ActionTitles,ActionContent,Earned}from'./styles';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HarvestAction=_ref=>{let{pid,userData,userDataReady}=_ref;const{toastSuccess,toastError}=useToast();const earningsBigNumber=new BigNumber(userData.earnings);const cakePrice=usePriceCakeBusd();let earnings=BIG_ZERO;let earningsBusd=0;let displayBalance=userDataReady?earnings.toLocaleString():/*#__PURE__*/_jsx(Skeleton,{width:60});// If user didn't connect wallet default balance will be 0\nif(!earningsBigNumber.isZero()){earnings=getBalanceAmount(earningsBigNumber);earningsBusd=earnings.multipliedBy(cakePrice).toNumber();displayBalance=earnings.toFixed(3,BigNumber.ROUND_DOWN);}const[pendingTx,setPendingTx]=useState(false);const{onReward}=useHarvestFarm(pid);const{t}=useTranslation();const dispatch=useAppDispatch();const{account}=useWeb3React();return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsxs(ActionTitles,{children:[/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"secondary\",fontSize:\"12px\",pr:\"4px\",children:\"CAKE\"}),/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"textSubtle\",fontSize:\"12px\",children:t('Earned')})]}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Earned,{children:displayBalance}),earningsBusd>0&&/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",color:\"textSubtle\",decimals:2,value:earningsBusd,unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Button,{disabled:earnings.eq(0)||pendingTx||!userDataReady,onClick:async()=>{setPendingTx(true);try{await onReward();toastSuccess(\"\".concat(t('Harvested'),\"!\"),t('Your %symbol% earnings have been sent to your wallet!',{symbol:'CAKE'}));}catch(e){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(e);}finally{setPendingTx(false);}dispatch(fetchFarmUserDataAsync({account,pids:[pid]}));},ml:\"4px\",children:t('Harvest')})]})]});};export default HarvestAction;","map":{"version":3,"names":["React","useState","Button","Skeleton","Text","BigNumber","useWeb3React","Balance","BIG_ZERO","getBalanceAmount","useAppDispatch","fetchFarmUserDataAsync","usePriceCakeBusd","useToast","useTranslation","useHarvestFarm","ActionContainer","ActionTitles","ActionContent","Earned","jsx","_jsx","jsxs","_jsxs","HarvestAction","_ref","pid","userData","userDataReady","toastSuccess","toastError","earningsBigNumber","earnings","cakePrice","earningsBusd","displayBalance","toLocaleString","width","isZero","multipliedBy","toNumber","toFixed","ROUND_DOWN","pendingTx","setPendingTx","onReward","t","dispatch","account","children","bold","textTransform","color","fontSize","pr","decimals","value","unit","prefix","disabled","eq","onClick","concat","symbol","e","console","error","pids","ml"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,MAAM,CAAEC,QAAQ,CAAEC,IAAI,KAAQ,oBAAoB,CAC3D,MAAO,CAAAC,SAAS,KAAM,cAAc,CACpC,OAASC,YAAY,KAAQ,kBAAkB,CAE/C,MAAO,CAAAC,OAAO,KAAM,oBAAoB,CACxC,OAASC,QAAQ,KAAQ,iBAAiB,CAC1C,OAASC,gBAAgB,KAAQ,qBAAqB,CACtD,OAASC,cAAc,KAAQ,OAAO,CACtC,OAASC,sBAAsB,KAAQ,aAAa,CACpD,OAASC,gBAAgB,KAAQ,mBAAmB,CACpD,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,CACrC,OAASC,cAAc,KAAQ,uBAAuB,CACtD,MAAO,CAAAC,cAAc,KAAM,+BAA+B,CAE1D,OAASC,eAAe,CAAEC,YAAY,CAAEC,aAAa,CAAEC,MAAM,KAAQ,UAAU,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAM/E,KAAM,CAAAC,aAA0D,CAAGC,IAAA,EAAsC,IAArC,CAAEC,GAAG,CAAEC,QAAQ,CAAEC,aAAc,CAAC,CAAAH,IAAA,CAClG,KAAM,CAAEI,YAAY,CAAEC,UAAW,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAC/C,KAAM,CAAAkB,iBAAiB,CAAG,GAAI,CAAA1B,SAAS,CAACsB,QAAQ,CAACK,QAAQ,CAAC,CAC1D,KAAM,CAAAC,SAAS,CAAGrB,gBAAgB,CAAC,CAAC,CACpC,GAAI,CAAAoB,QAAQ,CAAGxB,QAAQ,CACvB,GAAI,CAAA0B,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,cAAc,CAAGP,aAAa,CAAGI,QAAQ,CAACI,cAAc,CAAC,CAAC,cAAGf,IAAA,CAAClB,QAAQ,EAACkC,KAAK,CAAE,EAAG,CAAE,CAAC,CAExF;AACA,GAAI,CAACN,iBAAiB,CAACO,MAAM,CAAC,CAAC,CAAE,CAC/BN,QAAQ,CAAGvB,gBAAgB,CAACsB,iBAAiB,CAAC,CAC9CG,YAAY,CAAGF,QAAQ,CAACO,YAAY,CAACN,SAAS,CAAC,CAACO,QAAQ,CAAC,CAAC,CAC1DL,cAAc,CAAGH,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAEpC,SAAS,CAACqC,UAAU,CAAC,CAC5D,CAEA,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAG3C,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAE4C,QAAS,CAAC,CAAG9B,cAAc,CAACW,GAAG,CAAC,CACxC,KAAM,CAAEoB,CAAE,CAAC,CAAGhC,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAAiC,QAAQ,CAAGrC,cAAc,CAAC,CAAC,CACjC,KAAM,CAAEsC,OAAQ,CAAC,CAAG1C,YAAY,CAAC,CAAC,CAElC,mBACEiB,KAAA,CAACP,eAAe,EAAAiC,QAAA,eACd1B,KAAA,CAACN,YAAY,EAAAgC,QAAA,eACX5B,IAAA,CAACjB,IAAI,EAAC8C,IAAI,MAACC,aAAa,CAAC,WAAW,CAACC,KAAK,CAAC,WAAW,CAACC,QAAQ,CAAC,MAAM,CAACC,EAAE,CAAC,KAAK,CAAAL,QAAA,CAAC,MAEhF,CAAM,CAAC,cACP5B,IAAA,CAACjB,IAAI,EAAC8C,IAAI,MAACC,aAAa,CAAC,WAAW,CAACC,KAAK,CAAC,YAAY,CAACC,QAAQ,CAAC,MAAM,CAAAJ,QAAA,CACpEH,CAAC,CAAC,QAAQ,CAAC,CACR,CAAC,EACK,CAAC,cACfvB,KAAA,CAACL,aAAa,EAAA+B,QAAA,eACZ1B,KAAA,QAAA0B,QAAA,eACE5B,IAAA,CAACF,MAAM,EAAA8B,QAAA,CAAEd,cAAc,CAAS,CAAC,CAChCD,YAAY,CAAG,CAAC,eACfb,IAAA,CAACd,OAAO,EAAC8C,QAAQ,CAAC,MAAM,CAACD,KAAK,CAAC,YAAY,CAACG,QAAQ,CAAE,CAAE,CAACC,KAAK,CAAEtB,YAAa,CAACuB,IAAI,CAAC,MAAM,CAACC,MAAM,CAAC,GAAG,CAAE,CACvG,EACE,CAAC,cACNrC,IAAA,CAACnB,MAAM,EACLyD,QAAQ,CAAE3B,QAAQ,CAAC4B,EAAE,CAAC,CAAC,CAAC,EAAIjB,SAAS,EAAI,CAACf,aAAc,CACxDiC,OAAO,CAAE,KAAAA,CAAA,GAAY,CACnBjB,YAAY,CAAC,IAAI,CAAC,CAClB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAC,CAAC,CAChBhB,YAAY,IAAAiC,MAAA,CACPhB,CAAC,CAAC,WAAW,CAAC,MACjBA,CAAC,CAAC,uDAAuD,CAAE,CAAEiB,MAAM,CAAE,MAAO,CAAC,CAC/E,CAAC,CACH,CAAE,MAAOC,CAAC,CAAE,CACVlC,UAAU,CACRgB,CAAC,CAAC,OAAO,CAAC,CACVA,CAAC,CAAC,oFAAoF,CACxF,CAAC,CACDmB,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC,CAClB,CAAC,OAAS,CACRpB,YAAY,CAAC,KAAK,CAAC,CACrB,CACAG,QAAQ,CAACpC,sBAAsB,CAAC,CAAEqC,OAAO,CAAEmB,IAAI,CAAE,CAACzC,GAAG,CAAE,CAAC,CAAC,CAAC,CAC5D,CAAE,CACF0C,EAAE,CAAC,KAAK,CAAAnB,QAAA,CAEPH,CAAC,CAAC,SAAS,CAAC,CACP,CAAC,EACI,CAAC,EACD,CAAC,CAEtB,CAAC,CAED,cAAe,CAAAtB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}