{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\n/**\r\n * Does a lookup for an ENS name to find its address.\r\n */\n\nexport default function useENSAddress(ensName) {\n  _s();\n\n  var _resolverAddress$resu, _addr$result$, _addr$result;\n\n  const debouncedName = useDebounce(ensName, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined];\n\n    try {\n      return debouncedName ? [namehash(debouncedName)] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [debouncedName]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument);\n  const changed = debouncedName !== ensName;\n  return {\n    address: changed ? null : (_addr$result$ = (_addr$result = addr.result) === null || _addr$result === void 0 ? void 0 : _addr$result[0]) !== null && _addr$result$ !== void 0 ? _addr$result$ : null,\n    loading: changed || resolverAddress.loading || addr.loading\n  };\n}\n\n_s(useENSAddress, \"YwC+kqewI9fPAziK0MJ7H92F1SM=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSAddress.ts"],"names":["namehash","useMemo","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","ensName","debouncedName","ensNodeArgument","undefined","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","addr","changed","address","loading"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,gBAAhE;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,OAAvB,EAA8F;AAAA;;AAAA;;AAC3G,QAAMC,aAAa,GAAGH,WAAW,CAACE,OAAD,EAAU,GAAV,CAAjC;AACA,QAAME,eAAe,GAAGT,OAAO,CAAC,MAAM;AACpC,QAAI,CAACQ,aAAL,EAAoB,OAAO,CAACE,SAAD,CAAP;;AACpB,QAAI;AACF,aAAOF,aAAa,GAAG,CAACT,QAAQ,CAACS,aAAD,CAAT,CAAH,GAA+B,CAACE,SAAD,CAAnD;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd,aAAO,CAACD,SAAD,CAAP;AACD;AACF,GAP8B,EAO5B,CAACF,aAAD,CAP4B,CAA/B;AAQA,QAAMI,iBAAiB,GAAGT,uBAAuB,CAAC,KAAD,CAAjD;AACA,QAAMU,eAAe,GAAGZ,mBAAmB,CAACW,iBAAD,EAAoB,UAApB,EAAgCH,eAAhC,CAA3C;AACA,QAAMK,qBAAqB,4BAAGD,eAAe,CAACE,MAAnB,0DAAG,sBAAyB,CAAzB,CAA9B;AACA,QAAMC,gBAAgB,GAAGZ,sBAAsB,CAC7CU,qBAAqB,IAAI,CAACZ,MAAM,CAACY,qBAAD,CAAhC,GAA0DA,qBAA1D,GAAkFJ,SADrC,EAE7C,KAF6C,CAA/C;AAIA,QAAMO,IAAI,GAAGhB,mBAAmB,CAACe,gBAAD,EAAmB,MAAnB,EAA2BP,eAA3B,CAAhC;AAEA,QAAMS,OAAO,GAAGV,aAAa,KAAKD,OAAlC;AACA,SAAO;AACLY,IAAAA,OAAO,EAAED,OAAO,GAAG,IAAH,oCAAUD,IAAI,CAACF,MAAf,iDAAU,aAAc,CAAd,CAAV,yDAA8B,IADzC;AAELK,IAAAA,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAA3B,IAAsCH,IAAI,CAACG;AAF/C,GAAP;AAID;;GAxBuBd,a;UACAD,W,EASIF,uB,EACFF,mB,EAECG,sB,EAIZH,mB","sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\n/**\r\n * Does a lookup for an ENS name to find its address.\r\n */\r\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\r\n  const debouncedName = useDebounce(ensName, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedName) return [undefined]\r\n    try {\r\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedName])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false,\r\n  )\r\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\r\n\r\n  const changed = debouncedName !== ensName\r\n  return {\r\n    address: changed ? null : addr.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || addr.loading,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}