{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport { isAddress } from '../../utils';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\n\nexport default function useENSName(address) {\n  _s();\n\n  var _resolverAddress$resu, _name$result$, _name$result;\n\n  const debouncedAddress = useDebounce(address, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [debouncedAddress]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  const changed = debouncedAddress !== address;\n  return {\n    ENSName: changed ? null : (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null,\n    loading: changed || resolverAddress.loading || name.loading\n  };\n}\n\n_s(useENSName, \"8g3MyTb9JnGx6yiMJXxKZlnslKc=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSName.ts"],"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSName","address","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,gBAAhE;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAAoF;AAAA;;AAAA;;AACjG,QAAMC,gBAAgB,GAAGH,WAAW,CAACE,OAAD,EAAU,GAAV,CAApC;AACA,QAAME,eAAe,GAAGV,OAAO,CAAC,MAAM;AACpC,QAAI,CAACS,gBAAD,IAAqB,CAACP,SAAS,CAACO,gBAAD,CAAnC,EAAuD,OAAO,CAACE,SAAD,CAAP;;AACvD,QAAI;AACF,aAAOF,gBAAgB,GAAG,CAACV,QAAQ,CAAE,GAAEU,gBAAgB,CAACG,WAAjB,GAA+BC,MAA/B,CAAsC,CAAtC,CAAyC,eAA7C,CAAT,CAAH,GAA4E,CAACF,SAAD,CAAnG;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACd,aAAO,CAACH,SAAD,CAAP;AACD;AACF,GAP8B,EAO5B,CAACF,gBAAD,CAP4B,CAA/B;AAQA,QAAMM,iBAAiB,GAAGX,uBAAuB,CAAC,KAAD,CAAjD;AACA,QAAMY,eAAe,GAAGf,mBAAmB,CAACc,iBAAD,EAAoB,UAApB,EAAgCL,eAAhC,CAA3C;AACA,QAAMO,qBAAqB,4BAAGD,eAAe,CAACE,MAAnB,0DAAG,sBAAyB,CAAzB,CAA9B;AACA,QAAMC,gBAAgB,GAAGd,sBAAsB,CAC7CY,qBAAqB,IAAI,CAACd,MAAM,CAACc,qBAAD,CAAhC,GAA0DA,qBAA1D,GAAkFN,SADrC,EAE7C,KAF6C,CAA/C;AAIA,QAAMS,IAAI,GAAGnB,mBAAmB,CAACkB,gBAAD,EAAmB,MAAnB,EAA2BT,eAA3B,CAAhC;AAEA,QAAMW,OAAO,GAAGZ,gBAAgB,KAAKD,OAArC;AACA,SAAO;AACLc,IAAAA,OAAO,EAAED,OAAO,GAAG,IAAH,oCAAUD,IAAI,CAACF,MAAf,iDAAU,aAAc,CAAd,CAAV,yDAA8B,IADzC;AAELK,IAAAA,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAA3B,IAAsCH,IAAI,CAACG;AAF/C,GAAP;AAID;;GAxBuBhB,U;UACGD,W,EASCF,uB,EACFH,mB,EAECI,sB,EAIZJ,mB","sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport { isAddress } from '../../utils'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\r\n    } catch (error) {\r\n      return [undefined]\r\n    }\r\n  }, [debouncedAddress])\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false,\r\n  )\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\r\n\r\n  const changed = debouncedAddress !== address\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}