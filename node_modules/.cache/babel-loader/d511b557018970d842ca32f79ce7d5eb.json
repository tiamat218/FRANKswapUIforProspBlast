{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber';\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers';\n\nconst getFarmFromTokenSymbol = (farms, tokenSymbol, preferredQuoteTokens) => {\n  const farmsWithTokenSymbol = farms.filter(farm => farm.token.symbol === tokenSymbol);\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens);\n  return filteredFarm;\n};\n\nconst getFarmBaseTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd) => {\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote);\n\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  if (farm.quoteToken.symbol === 'wBNB') {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO;\n  } // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  } // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n\n\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote);\n    return hasTokenPriceVsQuote && quoteTokenInBusd ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote;\n    return hasTokenPriceVsQuote && quoteTokenInBusd ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : BIG_ZERO;\n  } // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\n\n\n  return BIG_ZERO;\n};\n\nconst getFarmQuoteTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd) => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE;\n  }\n\n  if (farm.quoteToken.symbol === 'wBNB') {\n    return bnbPriceBusd;\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  return BIG_ZERO;\n};\n\nconst fetchFarmsPrices = async farms => {\n  const bnbBusdFarm = farms.find(farm => farm.pid === 1);\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO;\n  const farmsWithPrices = farms.map(farm => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol);\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    const token = { ...farm.token,\n      busdPrice: baseTokenPrice.toJSON()\n    };\n    const quoteToken = { ...farm.quoteToken,\n      busdPrice: quoteTokenPrice.toJSON()\n    };\n    return { ...farm,\n      token,\n      quoteToken\n    };\n  });\n  return farmsWithPrices;\n};\n\nexport default fetchFarmsPrices;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/fetchFarmsPrices.ts"],"names":["BigNumber","BIG_ONE","BIG_ZERO","filterFarmsByQuoteToken","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","farm","token","symbol","filteredFarm","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","tokenPriceVsQuote","quoteToken","times","quoteTokenInBusd","getFarmQuoteTokenPrice","fetchFarmsPrices","bnbBusdFarm","find","pid","div","farmsWithPrices","map","baseTokenPrice","quoteTokenPrice","busdPrice","toJSON"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { Farm } from 'state/types'\r\n\r\nconst getFarmFromTokenSymbol = (farms: Farm[], tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\r\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\r\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\nconst getFarmBaseTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\r\n\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'wBNB') {\r\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  // Possible alternative farm quoteTokens:\r\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\r\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\r\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\r\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\r\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\r\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\r\n  return BIG_ZERO\r\n}\r\n\r\nconst getFarmQuoteTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return BIG_ONE\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'wBNB') {\r\n    return bnbPriceBusd\r\n  }\r\n\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  return BIG_ZERO\r\n}\r\n\r\nconst fetchFarmsPrices = async (farms) => {\r\n  const bnbBusdFarm = farms.find((farm: Farm) => farm.pid === 1)\r\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  const farmsWithPrices = farms.map((farm) => {\r\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\r\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const token = { ...farm.token, busdPrice: baseTokenPrice.toJSON() }\r\n    const quoteToken = { ...farm.quoteToken, busdPrice: quoteTokenPrice.toJSON() }\r\n    return { ...farm, token, quoteToken }\r\n  })\r\n\r\n  return farmsWithPrices\r\n}\r\n\r\nexport default fetchFarmsPrices\r\n"]},"metadata":{},"sourceType":"module"}