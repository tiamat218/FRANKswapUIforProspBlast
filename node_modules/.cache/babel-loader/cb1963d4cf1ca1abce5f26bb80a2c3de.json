{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport erc20ABI from 'config/abi/erc20.json';\nimport multicall from 'utils/multicall';\nimport { getMasterchefContract } from 'utils/contractHelpers';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport BigNumber from 'bignumber.js';\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter(p => p.stakingToken.symbol !== 'BNB');\nconst bnbPools = poolsConfig.filter(p => p.stakingToken.symbol === 'BNB');\nconst nonMasterPools = poolsConfig.filter(p => p.sousId !== 0);\nconst masterChefContract = getMasterchefContract();\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'allowance',\n    params: [account, getAddress(p.contractAddress)]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({\n    ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserBalances = async account => {\n  // Non BNB pools\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'balanceOf',\n    params: [account]\n  }));\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  const tokenBalances = nonBnbPools.reduce((acc, pool, index) => ({\n    ...acc,\n    [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON()\n  }), {});\n\n  // BNB pools\n  const bnbBalance = await simpleRpcProvider.getBalance(account);\n  const bnbBalances = bnbPools.reduce((acc, pool) => ({\n    ...acc,\n    [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON()\n  }), {});\n  return {\n    ...tokenBalances,\n    ...bnbBalances\n  };\n};\nexport const fetchUserStakeBalances = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account]\n  }));\n  const userInfo = await multicall(sousChefABI, calls);\n  const stakedBalances = nonMasterPools.reduce((acc, pool, index) => ({\n    ...acc,\n    [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON()\n  }), {});\n\n  // Cake / Cake pool\n  const {\n    amount: masterPoolAmount\n  } = await masterChefContract.userInfo('0', account);\n  return {\n    ...stakedBalances,\n    0: new BigNumber(masterPoolAmount.toString()).toJSON()\n  };\n};\nexport const fetchUserPendingRewards = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account]\n  }));\n  const res = await multicall(sousChefABI, calls);\n  const pendingRewards = nonMasterPools.reduce((acc, pool, index) => ({\n    ...acc,\n    [pool.sousId]: new BigNumber(res[index]).toJSON()\n  }), {});\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.pendingCake('0', account);\n  return {\n    ...pendingRewards,\n    0: new BigNumber(pendingReward.toString()).toJSON()\n  };\n};","map":{"version":3,"names":["poolsConfig","sousChefABI","erc20ABI","multicall","getMasterchefContract","getAddress","simpleRpcProvider","BigNumber","nonBnbPools","filter","p","stakingToken","symbol","bnbPools","nonMasterPools","sousId","masterChefContract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","bnbBalance","getBalance","bnbBalances","toString","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingReward","pendingCake"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/pools/fetchPoolsUser.ts"],"sourcesContent":["import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst masterChefContract = getMasterchefContract()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.pendingCake('0', account)\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,wBAAwB;AAChD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,SAAS,MAAM,cAAc;;AAEpC;AACA;AACA,MAAMC,WAAW,GAAGR,WAAW,CAACS,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,YAAY,CAACC,MAAM,KAAK,KAAK,CAAC;AAC9E,MAAMC,QAAQ,GAAGb,WAAW,CAACS,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,YAAY,CAACC,MAAM,KAAK,KAAK,CAAC;AAC3E,MAAME,cAAc,GAAGd,WAAW,CAACS,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACK,MAAM,KAAK,CAAC,CAAC;AAChE,MAAMC,kBAAkB,GAAGZ,qBAAqB,CAAC,CAAC;AAElD,OAAO,MAAMa,mBAAmB,GAAG,MAAOC,OAAO,IAAK;EACpD,MAAMC,KAAK,GAAGX,WAAW,CAACY,GAAG,CAAEV,CAAC,KAAM;IACpCW,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACC,YAAY,CAACU,OAAO,CAAC;IAC3CC,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAE,CAACL,OAAO,EAAEb,UAAU,CAACK,CAAC,CAACc,eAAe,CAAC;EACjD,CAAC,CAAC,CAAC;EAEH,MAAMC,UAAU,GAAG,MAAMtB,SAAS,CAACD,QAAQ,EAAEiB,KAAK,CAAC;EACnD,OAAOX,WAAW,CAACkB,MAAM,CACvB,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,MAAM;IAAE,GAAGF,GAAG;IAAE,CAACC,IAAI,CAACb,MAAM,GAAG,IAAIR,SAAS,CAACkB,UAAU,CAACI,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC;EAAE,CAAC,CAAC,EAC5F,CAAC,CACH,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOb,OAAO,IAAK;EAClD;EACA,MAAMC,KAAK,GAAGX,WAAW,CAACY,GAAG,CAAEV,CAAC,KAAM;IACpCW,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACC,YAAY,CAACU,OAAO,CAAC;IAC3CC,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAE,CAACL,OAAO;EAClB,CAAC,CAAC,CAAC;EACH,MAAMc,gBAAgB,GAAG,MAAM7B,SAAS,CAACD,QAAQ,EAAEiB,KAAK,CAAC;EACzD,MAAMc,aAAa,GAAGzB,WAAW,CAACkB,MAAM,CACtC,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,MAAM;IAAE,GAAGF,GAAG;IAAE,CAACC,IAAI,CAACb,MAAM,GAAG,IAAIR,SAAS,CAACyB,gBAAgB,CAACH,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC;EAAE,CAAC,CAAC,EAClG,CAAC,CACH,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG,MAAM5B,iBAAiB,CAAC6B,UAAU,CAACjB,OAAO,CAAC;EAC9D,MAAMkB,WAAW,GAAGvB,QAAQ,CAACa,MAAM,CACjC,CAACC,GAAG,EAAEC,IAAI,MAAM;IAAE,GAAGD,GAAG;IAAE,CAACC,IAAI,CAACb,MAAM,GAAG,IAAIR,SAAS,CAAC2B,UAAU,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC;EAAE,CAAC,CAAC,EACzF,CAAC,CACH,CAAC;EAED,OAAO;IAAE,GAAGG,aAAa;IAAE,GAAGG;EAAY,CAAC;AAC7C,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAG,MAAOpB,OAAO,IAAK;EACvD,MAAMC,KAAK,GAAGL,cAAc,CAACM,GAAG,CAAEV,CAAC,KAAM;IACvCW,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACc,eAAe,CAAC;IACtCF,IAAI,EAAE,UAAU;IAChBC,MAAM,EAAE,CAACL,OAAO;EAClB,CAAC,CAAC,CAAC;EACH,MAAMqB,QAAQ,GAAG,MAAMpC,SAAS,CAACF,WAAW,EAAEkB,KAAK,CAAC;EACpD,MAAMqB,cAAc,GAAG1B,cAAc,CAACY,MAAM,CAC1C,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,MAAM;IACrB,GAAGF,GAAG;IACN,CAACC,IAAI,CAACb,MAAM,GAAG,IAAIR,SAAS,CAACgC,QAAQ,CAACV,KAAK,CAAC,CAACY,MAAM,CAACC,IAAI,CAAC,CAACZ,MAAM,CAAC;EACnE,CAAC,CAAC,EACF,CAAC,CACH,CAAC;;EAED;EACA,MAAM;IAAEW,MAAM,EAAEE;EAAiB,CAAC,GAAG,MAAM3B,kBAAkB,CAACuB,QAAQ,CAAC,GAAG,EAAErB,OAAO,CAAC;EAEpF,OAAO;IAAE,GAAGsB,cAAc;IAAE,CAAC,EAAE,IAAIjC,SAAS,CAACoC,gBAAgB,CAACN,QAAQ,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC;EAAE,CAAC;AACtF,CAAC;AAED,OAAO,MAAMc,uBAAuB,GAAG,MAAO1B,OAAO,IAAK;EACxD,MAAMC,KAAK,GAAGL,cAAc,CAACM,GAAG,CAAEV,CAAC,KAAM;IACvCW,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACc,eAAe,CAAC;IACtCF,IAAI,EAAE,eAAe;IACrBC,MAAM,EAAE,CAACL,OAAO;EAClB,CAAC,CAAC,CAAC;EACH,MAAM2B,GAAG,GAAG,MAAM1C,SAAS,CAACF,WAAW,EAAEkB,KAAK,CAAC;EAC/C,MAAM2B,cAAc,GAAGhC,cAAc,CAACY,MAAM,CAC1C,CAACC,GAAG,EAAEC,IAAI,EAAEC,KAAK,MAAM;IACrB,GAAGF,GAAG;IACN,CAACC,IAAI,CAACb,MAAM,GAAG,IAAIR,SAAS,CAACsC,GAAG,CAAChB,KAAK,CAAC,CAAC,CAACC,MAAM,CAAC;EAClD,CAAC,CAAC,EACF,CAAC,CACH,CAAC;;EAED;EACA,MAAMiB,aAAa,GAAG,MAAM/B,kBAAkB,CAACgC,WAAW,CAAC,GAAG,EAAE9B,OAAO,CAAC;EAExE,OAAO;IAAE,GAAG4B,cAAc;IAAE,CAAC,EAAE,IAAIvC,SAAS,CAACwC,aAAa,CAACV,QAAQ,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC;EAAE,CAAC;AACnF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}