{"ast":null,"code":"import{useCallback,useState}from'react';import usePreviousValue from'./usePreviousValue';/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */const useLastUpdated=()=>{const[lastUpdated,setStateLastUpdated]=useState(Date.now());const previousLastUpdated=usePreviousValue(lastUpdated);const setLastUpdated=useCallback(()=>{setStateLastUpdated(Date.now());},[setStateLastUpdated]);return{lastUpdated,previousLastUpdated,setLastUpdated};};export default useLastUpdated;","map":{"version":3,"names":["useCallback","useState","usePreviousValue","useLastUpdated","lastUpdated","setStateLastUpdated","Date","now","previousLastUpdated","setLastUpdated"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useLastUpdated.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAC7C,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CAEjD;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,WAAW,CAAEC,mBAAmB,CAAC,CAAGJ,QAAQ,CAACK,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAC/D,KAAM,CAAAC,mBAAmB,CAAGN,gBAAgB,CAACE,WAAW,CAAC,CAEzD,KAAM,CAAAK,cAAc,CAAGT,WAAW,CAAC,IAAM,CACvCK,mBAAmB,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CACjC,CAAC,CAAE,CAACF,mBAAmB,CAAC,CAAC,CAEzB,MAAO,CAAED,WAAW,CAAEI,mBAAmB,CAAEC,cAAe,CAAC,CAC7D,CAAC,CAED,cAAe,CAAAN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}