{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\nconst useDelayedUnmount = (isMounted, delayTime) => {\n  _s();\n  const [shouldRender, setShouldRender] = useState(false);\n  useEffect(() => {\n    let timeoutId;\n    if (isMounted && !shouldRender) {\n      setShouldRender(true);\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime);\n    }\n    return () => clearTimeout(timeoutId);\n  }, [isMounted, delayTime, shouldRender]);\n  return shouldRender;\n};\n_s(useDelayedUnmount, \"Fhs21UGsY73quT1EkyYQ4s17rB8=\");\nexport default useDelayedUnmount;","map":{"version":3,"names":["useState","useEffect","useDelayedUnmount","isMounted","delayTime","_s","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/hooks/useDelayedUnmount.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAACC,SAAkB,EAAEC,SAAiB,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,IAAIO,SAAwC;IAC5C,IAAIL,SAAS,IAAI,CAACG,YAAY,EAAE;MAC9BC,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM,IAAI,CAACJ,SAAS,IAAIG,YAAY,EAAE;MACrCE,SAAS,GAAGC,UAAU,CAAC,MAAMF,eAAe,CAAC,KAAK,CAAC,EAAEH,SAAS,CAAC;IACjE;IACA,OAAO,MAAMM,YAAY,CAACF,SAAS,CAAC;EACtC,CAAC,EAAE,CAACL,SAAS,EAAEC,SAAS,EAAEE,YAAY,CAAC,CAAC;EACxC,OAAOA,YAAY;AACrB,CAAC;AAAAD,EAAA,CAbKH,iBAAiB;AAevB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}