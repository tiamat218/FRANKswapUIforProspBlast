{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport BigNumber from 'bignumber.js';\nimport poolsConfig from 'config/constants/pools';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getPoolApr } from 'utils/apr';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser';\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic';\nimport fetchVaultUser from './fetchVaultUser';\nimport { getTokenPricesFromFarm } from './helpers';\nconst initialState = {\n  data: [...poolsConfig],\n  userDataLoaded: false,\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null\n    }\n  }\n};\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = currentBlock => async (dispatch, getState) => {\n  const blockLimits = await fetchPoolsBlockLimits();\n  const totalStakings = await fetchPoolsTotalStaking();\n  const prices = getTokenPricesFromFarm(getState().farms.data);\n  const liveData = poolsConfig.map(pool => {\n    const blockLimit = blockLimits.find(entry => entry.sousId === pool.sousId);\n    const totalStaking = totalStakings.find(entry => entry.sousId === pool.sousId);\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false;\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded;\n    const stakingTokenAddress = pool.stakingToken.address ? getAddress(pool.stakingToken.address).toLowerCase() : null;\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0;\n    const earningTokenAddress = pool.earningToken.address ? getAddress(pool.earningToken.address).toLowerCase() : null;\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0;\n    const apr = !isPoolFinished ? getPoolApr(stakingTokenPrice, earningTokenPrice, getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals), parseFloat(pool.tokenPerBlock)) : 0;\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      stakingTokenPrice,\n      earningTokenPrice,\n      apr,\n      isFinished: isPoolFinished\n    };\n  });\n  dispatch(setPoolsPublicData(liveData));\n};\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState().pools.data.filter(({\n    stakingLimit\n  }) => stakingLimit !== null && stakingLimit !== undefined).map(pool => pool.sousId);\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit);\n  const stakingLimitData = poolsConfig.map(pool => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return {\n        sousId: pool.sousId\n      };\n    }\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO;\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON()\n    };\n  });\n  dispatch(setPoolsPublicData(stakingLimitData));\n};\nexport const fetchPoolsUserDataAsync = account => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  const stakingTokenBalances = await fetchUserBalances(account);\n  const stakedBalances = await fetchUserStakeBalances(account);\n  const pendingRewards = await fetchUserPendingRewards(account);\n  const userData = poolsConfig.map(pool => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId]\n  }));\n  dispatch(setPoolsUserData(userData));\n};\nexport const updateUserAllowance = (sousId, account) => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'allowance',\n    value: allowances[sousId]\n  }));\n};\nexport const updateUserBalance = (sousId, account) => async dispatch => {\n  const tokenBalances = await fetchUserBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakingTokenBalance',\n    value: tokenBalances[sousId]\n  }));\n};\nexport const updateUserStakedBalance = (sousId, account) => async dispatch => {\n  const stakedBalances = await fetchUserStakeBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakedBalance',\n    value: stakedBalances[sousId]\n  }));\n};\nexport const updateUserPendingReward = (sousId, account) => async dispatch => {\n  const pendingRewards = await fetchUserPendingRewards(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'pendingReward',\n    value: pendingRewards[sousId]\n  }));\n};\nexport const fetchCakeVaultPublicData = createAsyncThunk('cakeVault/fetchPublicData', async () => {\n  const publicVaultInfo = await fetchPublicVaultData();\n  return publicVaultInfo;\n});\nexport const fetchCakeVaultFees = createAsyncThunk('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees();\n  return vaultFees;\n});\nexport const fetchCakeVaultUserData = createAsyncThunk('cakeVault/fetchUser', async ({\n  account\n}) => {\n  const userData = await fetchVaultUser(account);\n  return userData;\n});\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData = action.payload;\n      state.data = state.data.map(pool => {\n        const livePoolData = livePoolsData.find(entry => entry.sousId === pool.sousId);\n        return {\n          ...pool,\n          ...livePoolData\n        };\n      });\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(pool => {\n        const userPoolData = userData.find(entry => entry.sousId === pool.sousId);\n        return {\n          ...pool,\n          userData: userPoolData\n        };\n      });\n      state.userDataLoaded = true;\n    },\n    updatePoolsUserData: (state, action) => {\n      const {\n        field,\n        value,\n        sousId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.sousId === sousId);\n      if (index >= 0) {\n        state.data[index] = {\n          ...state.data[index],\n          userData: {\n            ...state.data[index].userData,\n            [field]: value\n          }\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action) => {\n      state.cakeVault = {\n        ...state.cakeVault,\n        ...action.payload\n      };\n    });\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action) => {\n      const fees = action.payload;\n      state.cakeVault = {\n        ...state.cakeVault,\n        fees\n      };\n    });\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action) => {\n      const userData = action.payload;\n      userData.isLoading = false;\n      state.cakeVault = {\n        ...state.cakeVault,\n        userData\n      };\n    });\n  }\n});\n\n// Actions\nexport const {\n  setPoolsPublicData,\n  setPoolsUserData,\n  updatePoolsUserData\n} = PoolsSlice.actions;\nexport default PoolsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","BigNumber","poolsConfig","BIG_ZERO","getPoolApr","getBalanceNumber","getAddress","fetchPoolsBlockLimits","fetchPoolsStakingLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","fetchPublicVaultData","fetchVaultFees","fetchVaultUser","getTokenPricesFromFarm","initialState","data","userDataLoaded","cakeVault","totalShares","pricePerFullShare","totalCakeInVault","estimatedCakeBountyReward","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","fetchPoolsPublicDataAsync","currentBlock","dispatch","getState","blockLimits","totalStakings","prices","farms","liveData","map","pool","blockLimit","find","entry","sousId","totalStaking","isPoolEndBlockExceeded","Number","endBlock","isPoolFinished","isFinished","stakingTokenAddress","stakingToken","address","toLowerCase","stakingTokenPrice","earningTokenAddress","earningToken","earningTokenPrice","apr","totalStaked","decimals","parseFloat","tokenPerBlock","setPoolsPublicData","fetchPoolsStakingLimitsAsync","poolsWithStakingLimit","pools","filter","stakingLimit","undefined","stakingLimits","stakingLimitData","includes","toJSON","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","setPoolsUserData","updateUserAllowance","updatePoolsUserData","field","value","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","fetchCakeVaultPublicData","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","PoolsSlice","name","reducers","state","action","livePoolsData","payload","livePoolData","userPoolData","index","findIndex","p","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/pools/index.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { PoolsState, Pool, CakeVault, VaultFees, VaultUser, AppThunk } from 'state/types'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\r\nimport fetchVaultUser from './fetchVaultUser'\r\nimport { getTokenPricesFromFarm } from './helpers'\r\n\r\nconst initialState: PoolsState = {\r\n  data: [...poolsConfig],\r\n  userDataLoaded: false,\r\n  cakeVault: {\r\n    totalShares: null,\r\n    pricePerFullShare: null,\r\n    totalCakeInVault: null,\r\n    estimatedCakeBountyReward: null,\r\n    totalPendingCakeHarvest: null,\r\n    fees: {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    },\r\n    userData: {\r\n      isLoading: true,\r\n      userShares: null,\r\n      cakeAtLastUserAction: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n    },\r\n  },\r\n}\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = (currentBlock: number) => async (dispatch, getState) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n\r\n  const prices = getTokenPricesFromFarm(getState().farms.data)\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\r\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\r\n\r\n    const stakingTokenAddress = pool.stakingToken.address ? getAddress(pool.stakingToken.address).toLowerCase() : null\r\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\r\n\r\n    const earningTokenAddress = pool.earningToken.address ? getAddress(pool.earningToken.address).toLowerCase() : null\r\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\r\n    const apr = !isPoolFinished\r\n      ? getPoolApr(\r\n          stakingTokenPrice,\r\n          earningTokenPrice,\r\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\r\n          parseFloat(pool.tokenPerBlock),\r\n        )\r\n      : 0\r\n\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n      stakingTokenPrice,\r\n      earningTokenPrice,\r\n      apr,\r\n      isFinished: isPoolFinished,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\r\n  const poolsWithStakingLimit = getState()\r\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\r\n    .map((pool) => pool.sousId)\r\n\r\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\r\n\r\n  const stakingLimitData = poolsConfig.map((pool) => {\r\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\r\n      return { sousId: pool.sousId }\r\n    }\r\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\r\n    return {\r\n      sousId: pool.sousId,\r\n      stakingLimit: stakingLimit.toJSON(),\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(stakingLimitData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync =\r\n  (account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    const stakingTokenBalances = await fetchUserBalances(account)\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n    const userData = poolsConfig.map((pool) => ({\r\n      sousId: pool.sousId,\r\n      allowance: allowances[pool.sousId],\r\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n      stakedBalance: stakedBalances[pool.sousId],\r\n      pendingReward: pendingRewards[pool.sousId],\r\n    }))\r\n\r\n    dispatch(setPoolsUserData(userData))\r\n  }\r\n\r\nexport const updateUserAllowance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n  }\r\n\r\nexport const updateUserBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const tokenBalances = await fetchUserBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserStakedBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserPendingReward =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n  }\r\n\r\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\r\n  const publicVaultInfo = await fetchPublicVaultData()\r\n  return publicVaultInfo\r\n})\r\n\r\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\r\n  const vaultFees = await fetchVaultFees()\r\n  return vaultFees\r\n})\r\n\r\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\r\n  'cakeVault/fetchUser',\r\n  async ({ account }) => {\r\n    const userData = await fetchVaultUser(account)\r\n    return userData\r\n  },\r\n)\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n\r\n      if (index >= 0) {\r\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Vault public data that updates frequently\r\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\r\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\r\n    })\r\n    // Vault fees\r\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\r\n      const fees = action.payload\r\n      state.cakeVault = { ...state.cakeVault, fees }\r\n    })\r\n    // Vault user data\r\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\r\n      const userData = action.payload\r\n      userData.isLoading = false\r\n      state.cakeVault = { ...state.cakeVault, userData }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\nexport default PoolsSlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}