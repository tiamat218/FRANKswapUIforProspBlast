{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { BIG_TEN } from './bigNumber';\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\n\nexport const getDecimalAmount = (amount, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals));\n};\nexport const getBalanceAmount = (amount, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals));\n};\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\n\nexport const getBalanceNumber = (balance, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber();\n};\nexport const getFullDisplayBalance = (balance, decimals = 18, displayDecimals) => {\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals);\n};\nexport const formatNumber = (number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision\n  };\n  return number.toLocaleString(undefined, options);\n};\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */\n\nexport const formatBigNumber = (number, displayDecimals = 18, decimals = 18) => {\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals));\n  return formatUnits(number.sub(remainder), decimals);\n};\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */\n\nexport const formatBigNumberToFixed = (number, displayDecimals = 18, decimals = 18) => {\n  const formattedString = formatUnits(number, decimals);\n  return (+formattedString).toFixed(displayDecimals);\n};\n/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */\n\nexport const formatFixedNumber = (number, displayDecimals = 18, decimals = 18) => {\n  // Remove decimal\n  const [leftSide] = number.toString().split('.');\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals);\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/formatBalance.ts"],"names":["BigNumber","ethers","formatUnits","BIG_TEN","getDecimalAmount","amount","decimals","times","pow","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","getFullDisplayBalance","displayDecimals","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined","formatBigNumber","remainder","mod","from","sub","formatBigNumberToFixed","formattedString","formatFixedNumber","leftSide","toString","split"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAAoBC,QAAQ,GAAG,EAA/B,KAAsC;AACpE,SAAO,IAAIN,SAAJ,CAAcK,MAAd,EAAsBE,KAAtB,CAA4BJ,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAA5B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,gBAAgB,GAAG,CAACJ,MAAD,EAAoBC,QAAQ,GAAG,EAA/B,KAAsC;AACpE,SAAO,IAAIN,SAAJ,CAAcK,MAAd,EAAsBK,SAAtB,CAAgCP,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAAhC,CAAP;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMK,gBAAgB,GAAG,CAACC,OAAD,EAAqBN,QAAQ,GAAG,EAAhC,KAAuC;AACrE,SAAOG,gBAAgB,CAACG,OAAD,EAAUN,QAAV,CAAhB,CAAoCO,QAApC,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAG,CAACF,OAAD,EAAqBN,QAAQ,GAAG,EAAhC,EAAoCS,eAApC,KAAiE;AACpG,SAAON,gBAAgB,CAACG,OAAD,EAAUN,QAAV,CAAhB,CAAoCU,OAApC,CAA4CD,eAA5C,CAAP;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACC,MAAD,EAAiBC,YAAY,GAAG,CAAhC,EAAmCC,YAAY,GAAG,CAAlD,KAAwD;AAClF,QAAMC,OAAO,GAAG;AACdC,IAAAA,qBAAqB,EAAEH,YADT;AAEdI,IAAAA,qBAAqB,EAAEH;AAFT,GAAhB;AAIA,SAAOF,MAAM,CAACM,cAAP,CAAsBC,SAAtB,EAAiCJ,OAAjC,CAAP;AACD,CANM;AAQP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,eAAe,GAAG,CAACR,MAAD,EAA2BH,eAAe,GAAG,EAA7C,EAAiDT,QAAQ,GAAG,EAA5D,KAAmE;AAChG,QAAMqB,SAAS,GAAGT,MAAM,CAACU,GAAP,CAAW3B,MAAM,CAACD,SAAP,CAAiB6B,IAAjB,CAAsB,EAAtB,EAA0BrB,GAA1B,CAA8BF,QAAQ,GAAGS,eAAzC,CAAX,CAAlB;AACA,SAAOb,WAAW,CAACgB,MAAM,CAACY,GAAP,CAAWH,SAAX,CAAD,EAAwBrB,QAAxB,CAAlB;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMyB,sBAAsB,GAAG,CAACb,MAAD,EAA2BH,eAAe,GAAG,EAA7C,EAAiDT,QAAQ,GAAG,EAA5D,KAAmE;AACvG,QAAM0B,eAAe,GAAG9B,WAAW,CAACgB,MAAD,EAASZ,QAAT,CAAnC;AACA,SAAO,CAAC,CAAC0B,eAAF,EAAmBhB,OAAnB,CAA2BD,eAA3B,CAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;;AACA,OAAO,MAAMkB,iBAAiB,GAAG,CAACf,MAAD,EAA6BH,eAAe,GAAG,EAA/C,EAAmDT,QAAQ,GAAG,EAA9D,KAAqE;AACpG;AACA,QAAM,CAAC4B,QAAD,IAAahB,MAAM,CAACiB,QAAP,GAAkBC,KAAlB,CAAwB,GAAxB,CAAnB;AACA,SAAOV,eAAe,CAACzB,MAAM,CAACD,SAAP,CAAiB6B,IAAjB,CAAsBK,QAAtB,CAAD,EAAkCnB,eAAlC,EAAmDT,QAAnD,CAAtB;AACD,CAJM","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\r\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */\r\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\r\n  return formatUnits(number.sub(remainder), decimals)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */\r\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const formattedString = formatUnits(number, decimals)\r\n  return (+formattedString).toFixed(displayDecimals)\r\n}\r\n\r\n/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */\r\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\r\n  // Remove decimal\r\n  const [leftSide] = number.toString().split('.')\r\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}