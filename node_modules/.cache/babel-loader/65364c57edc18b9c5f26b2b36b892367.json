{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { simpleRpcProvider } from 'utils/providers';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchCakeVaultPublicData, fetchCakeVaultUserData, fetchCakeVaultFees, fetchPoolsStakingLimitsAsync } from '.';\nimport { transformPool } from './helpers';\nexport const useFetchPublicPoolsData = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber();\n      dispatch(fetchPoolsPublicDataAsync(blockNumber));\n    };\n    fetchPoolsPublicData();\n    dispatch(fetchPoolsStakingLimitsAsync());\n  }, [dispatch, slowRefresh]);\n};\n_s(useFetchPublicPoolsData, \"wXP7/5vEIZ/qynMYpAGvmXRZfss=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\nexport const usePools = account => {\n  _s2();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const {\n    pools,\n    userDataLoaded\n  } = useSelector(state => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded\n  }));\n  return {\n    pools: pools.map(transformPool),\n    userDataLoaded\n  };\n};\n_s2(usePools, \"VWrZ+2b3tUz/gcjLdR//y/C6C5s=\", false, function () {\n  return [useRefresh, useAppDispatch, useSelector];\n});\nexport const useFetchCakeVault = () => {\n  _s3();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData());\n  }, [dispatch, fastRefresh]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({\n      account\n    }));\n  }, [dispatch, fastRefresh, account]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees());\n  }, [dispatch]);\n};\n_s3(useFetchCakeVault, \"pDYnJ+ssV2U9HKPEmASotePCeog=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch];\n});\nexport const useCakeVault = () => {\n  _s4();\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  } = useSelector(state => state.pools.cakeVault);\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString);\n  }, [estimatedCakeBountyRewardAsString]);\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString);\n  }, [totalPendingCakeHarvestAsString]);\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString);\n  }, [totalSharesAsString]);\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString);\n  }, [pricePerFullShareAsString]);\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString);\n  }, [totalCakeInVaultAsString]);\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString);\n  }, [userSharesAsString]);\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString);\n  }, [cakeAtLastUserActionAsString]);\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  };\n};\n_s4(useCakeVault, \"3Vp7zWqsjjE5c9nmSgp2ET0HIxc=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","simpleRpcProvider","useRefresh","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","fetchPoolsStakingLimitsAsync","transformPool","useFetchPublicPoolsData","_s","dispatch","slowRefresh","fetchPoolsPublicData","blockNumber","getBlockNumber","usePools","account","_s2","fastRefresh","pools","userDataLoaded","state","data","map","useFetchCakeVault","_s3","useCakeVault","_s4","totalShares","totalSharesAsString","pricePerFullShare","pricePerFullShareAsString","totalCakeInVault","totalCakeInVaultAsString","estimatedCakeBountyReward","estimatedCakeBountyRewardAsString","totalPendingCakeHarvest","totalPendingCakeHarvestAsString","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","userSharesAsString","cakeAtLastUserAction","cakeAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","cakeVault"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/pools/hooks.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchCakeVaultFees,\r\n  fetchPoolsStakingLimitsAsync,\r\n} from '.'\r\nimport { State, Pool } from '../types'\r\nimport { transformPool } from './helpers'\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolsPublicData = async () => {\r\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\r\n    }\r\n\r\n    fetchPoolsPublicData()\r\n    dispatch(fetchPoolsStakingLimitsAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\r\n    pools: state.pools.data,\r\n    userDataLoaded: state.pools.userDataLoaded,\r\n  }))\r\n  return { pools: pools.map(transformPool), userDataLoaded }\r\n}\r\n\r\nexport const useFetchCakeVault = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultUserData({ account }))\r\n  }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalCakeInVault: totalCakeInVaultAsString,\r\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\r\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.pools.cakeVault)\r\n\r\n  const estimatedCakeBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyRewardAsString)\r\n  }, [estimatedCakeBountyRewardAsString])\r\n\r\n  const totalPendingCakeHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingCakeHarvestAsString)\r\n  }, [totalPendingCakeHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalCakeInVault = useMemo(() => {\r\n    return new BigNumber(totalCakeInVaultAsString)\r\n  }, [totalCakeInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const cakeAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(cakeAtLastUserActionAsString)\r\n  }, [cakeAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      cakeAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n"],"mappings":";;;;AAAA,SAASA,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC1C,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,SACEC,yBAAyB,EACzBC,uBAAuB,EACvBC,wBAAwB,EACxBC,sBAAsB,EACtBC,kBAAkB,EAClBC,4BAA4B,QACvB,GAAG;AAEV,SAASC,aAAa,QAAQ,WAAW;AAEzC,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEa;EAAY,CAAC,GAAGX,UAAU,CAAC,CAAC;EAEpCP,SAAS,CAAC,MAAM;IACd,MAAMmB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,MAAMC,WAAW,GAAG,MAAMd,iBAAiB,CAACe,cAAc,CAAC,CAAC;MAC5DJ,QAAQ,CAACT,yBAAyB,CAACY,WAAW,CAAC,CAAC;IAClD,CAAC;IAEDD,oBAAoB,CAAC,CAAC;IACtBF,QAAQ,CAACJ,4BAA4B,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACI,QAAQ,EAAEC,WAAW,CAAC,CAAC;AAC7B,CAAC;AAAAF,EAAA,CAbYD,uBAAuB;EAAA,QACjBV,cAAc,EACPE,UAAU;AAAA;AAapC,OAAO,MAAMe,QAAQ,GAAIC,OAAO,IAAiD;EAAAC,GAAA;EAC/E,MAAM;IAAEC;EAAY,CAAC,GAAGlB,UAAU,CAAC,CAAC;EACpC,MAAMU,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EACjCL,SAAS,CAAC,MAAM;IACd,IAAIuB,OAAO,EAAE;MACXN,QAAQ,CAACR,uBAAuB,CAACc,OAAO,CAAC,CAAC;IAC5C;EACF,CAAC,EAAE,CAACA,OAAO,EAAEN,QAAQ,EAAEQ,WAAW,CAAC,CAAC;EAEpC,MAAM;IAAEC,KAAK;IAAEC;EAAe,CAAC,GAAGvB,WAAW,CAAEwB,KAAY,KAAM;IAC/DF,KAAK,EAAEE,KAAK,CAACF,KAAK,CAACG,IAAI;IACvBF,cAAc,EAAEC,KAAK,CAACF,KAAK,CAACC;EAC9B,CAAC,CAAC,CAAC;EACH,OAAO;IAAED,KAAK,EAAEA,KAAK,CAACI,GAAG,CAAChB,aAAa,CAAC;IAAEa;EAAe,CAAC;AAC5D,CAAC;AAAAH,GAAA,CAdYF,QAAQ;EAAA,QACKf,UAAU,EACjBF,cAAc,EAOGD,WAAW;AAAA;AAO/C,OAAO,MAAM2B,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrC,MAAM;IAAET;EAAQ,CAAC,GAAGpB,YAAY,CAAC,CAAC;EAClC,MAAM;IAAEsB;EAAY,CAAC,GAAGlB,UAAU,CAAC,CAAC;EACpC,MAAMU,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EAEjCL,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACP,wBAAwB,CAAC,CAAC,CAAC;EACtC,CAAC,EAAE,CAACO,QAAQ,EAAEQ,WAAW,CAAC,CAAC;EAE3BzB,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACN,sBAAsB,CAAC;MAAEY;IAAQ,CAAC,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACN,QAAQ,EAAEQ,WAAW,EAAEF,OAAO,CAAC,CAAC;EAEpCvB,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACL,kBAAkB,CAAC,CAAC,CAAC;EAChC,CAAC,EAAE,CAACK,QAAQ,CAAC,CAAC;AAChB,CAAC;AAAAe,GAAA,CAhBYD,iBAAiB;EAAA,QACR5B,YAAY,EACRI,UAAU,EACjBF,cAAc;AAAA;AAejC,OAAO,MAAM4B,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChC,MAAM;IACJC,WAAW,EAAEC,mBAAmB;IAChCC,iBAAiB,EAAEC,yBAAyB;IAC5CC,gBAAgB,EAAEC,wBAAwB;IAC1CC,yBAAyB,EAAEC,iCAAiC;IAC5DC,uBAAuB,EAAEC,+BAA+B;IACxDC,IAAI,EAAE;MAAEC,cAAc;MAAEC,OAAO;MAAEC,aAAa;MAAEC;IAAoB,CAAC;IACrEC,QAAQ,EAAE;MACRC,SAAS;MACTC,UAAU,EAAEC,kBAAkB;MAC9BC,oBAAoB,EAAEC,4BAA4B;MAClDC,iBAAiB;MACjBC;IACF;EACF,CAAC,GAAGrD,WAAW,CAAEwB,KAAY,IAAKA,KAAK,CAACF,KAAK,CAACgC,SAAS,CAAC;EAExD,MAAMjB,yBAAyB,GAAGxC,OAAO,CAAC,MAAM;IAC9C,OAAO,IAAIC,SAAS,CAACwC,iCAAiC,CAAC;EACzD,CAAC,EAAE,CAACA,iCAAiC,CAAC,CAAC;EAEvC,MAAMC,uBAAuB,GAAG1C,OAAO,CAAC,MAAM;IAC5C,OAAO,IAAIC,SAAS,CAAC0C,+BAA+B,CAAC;EACvD,CAAC,EAAE,CAACA,+BAA+B,CAAC,CAAC;EAErC,MAAMT,WAAW,GAAGlC,OAAO,CAAC,MAAM;IAChC,OAAO,IAAIC,SAAS,CAACkC,mBAAmB,CAAC;EAC3C,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAEzB,MAAMC,iBAAiB,GAAGpC,OAAO,CAAC,MAAM;IACtC,OAAO,IAAIC,SAAS,CAACoC,yBAAyB,CAAC;EACjD,CAAC,EAAE,CAACA,yBAAyB,CAAC,CAAC;EAE/B,MAAMC,gBAAgB,GAAGtC,OAAO,CAAC,MAAM;IACrC,OAAO,IAAIC,SAAS,CAACsC,wBAAwB,CAAC;EAChD,CAAC,EAAE,CAACA,wBAAwB,CAAC,CAAC;EAE9B,MAAMY,UAAU,GAAGnD,OAAO,CAAC,MAAM;IAC/B,OAAO,IAAIC,SAAS,CAACmD,kBAAkB,CAAC;EAC1C,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,MAAMC,oBAAoB,GAAGrD,OAAO,CAAC,MAAM;IACzC,OAAO,IAAIC,SAAS,CAACqD,4BAA4B,CAAC;EACpD,CAAC,EAAE,CAACA,4BAA4B,CAAC,CAAC;EAElC,OAAO;IACLpB,WAAW;IACXE,iBAAiB;IACjBE,gBAAgB;IAChBE,yBAAyB;IACzBE,uBAAuB;IACvBE,IAAI,EAAE;MACJC,cAAc;MACdC,OAAO;MACPC,aAAa;MACbC;IACF,CAAC;IACDC,QAAQ,EAAE;MACRC,SAAS;MACTC,UAAU;MACVE,oBAAoB;MACpBE,iBAAiB;MACjBC;IACF;EACF,CAAC;AACH,CAAC;AAAAvB,GAAA,CAjEYD,YAAY;EAAA,QAenB7B,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}