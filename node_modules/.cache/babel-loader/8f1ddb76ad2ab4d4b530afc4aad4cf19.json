{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\VaultCardActions\\\\VaultStakeActions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal';\nimport VaultStakeModal from '../VaultStakeModal';\nimport HasSharesActions from './HasSharesActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VaultStakeActions = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  isLoading = false\n}) => {\n  _s();\n\n  const {\n    stakingToken\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const [onPresentTokenRequired] = useModal( /*#__PURE__*/_jsxDEV(NotEnoughTokensModal, {\n    tokenSymbol: stakingToken.symbol\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 45\n  }, this));\n  const [onPresentStake] = useModal( /*#__PURE__*/_jsxDEV(VaultStakeModal, {\n    stakingMax: stakingTokenBalance,\n    pool: pool\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 37\n  }, this));\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? /*#__PURE__*/_jsxDEV(HasSharesActions, {\n      pool: pool,\n      stakingTokenBalance: stakingTokenBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      onClick: stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired,\n      children: t('Stake')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: \"52px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 52\n    }, this) : renderStakeAction()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(VaultStakeActions, \"/ub3KyQJj4Wq9GKX5dYAT/NZXzk=\", false, function () {\n  return [useTranslation, useModal, useModal];\n});\n\n_c = VaultStakeActions;\nexport default VaultStakeActions;\n\nvar _c;\n\n$RefreshReg$(_c, \"VaultStakeActions\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx"],"names":["React","Flex","Button","useModal","Skeleton","useTranslation","NotEnoughTokensModal","VaultStakeModal","HasSharesActions","VaultStakeActions","pool","stakingTokenBalance","accountHasSharesStaked","isLoading","stakingToken","t","onPresentTokenRequired","symbol","onPresentStake","renderStakeAction","gt"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,QAAjC,QAAiD,oBAAjD;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,OAAOC,oBAAP,MAAiC,4CAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AASA,MAAMC,iBAAmD,GAAG,CAAC;AAC3DC,EAAAA,IAD2D;AAE3DC,EAAAA,mBAF2D;AAG3DC,EAAAA,sBAH2D;AAI3DC,EAAAA,SAAS,GAAG;AAJ+C,CAAD,KAKtD;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAmBJ,IAAzB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAQV,cAAc,EAA5B;AACA,QAAM,CAACW,sBAAD,IAA2Bb,QAAQ,eAAC,QAAC,oBAAD;AAAsB,IAAA,WAAW,EAAEW,YAAY,CAACG;AAAhD;AAAA;AAAA;AAAA;AAAA,UAAD,CAAzC;AACA,QAAM,CAACC,cAAD,IAAmBf,QAAQ,eAAC,QAAC,eAAD;AAAiB,IAAA,UAAU,EAAEQ,mBAA7B;AAAkD,IAAA,IAAI,EAAED;AAAxD;AAAA;AAAA;AAAA;AAAA,UAAD,CAAjC;;AAEA,QAAMS,iBAAiB,GAAG,MAAM;AAC9B,WAAOP,sBAAsB,gBAC3B,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEF,IAAxB;AAA8B,MAAA,mBAAmB,EAAEC;AAAnD;AAAA;AAAA;AAAA;AAAA,YAD2B,gBAG3B,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,mBAAmB,CAACS,EAApB,CAAuB,CAAvB,IAA4BF,cAA5B,GAA6CF,sBAA9D;AAAA,gBAAuFD,CAAC,CAAC,OAAD;AAAxF;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD,GAND;;AAQA,sBAAO,QAAC,IAAD;AAAM,IAAA,aAAa,EAAC,QAApB;AAAA,cAA8BF,SAAS,gBAAG,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAH,GAA6CM,iBAAiB;AAArG;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApBD;;GAAMV,iB;UAOUJ,c,EACmBF,Q,EACRA,Q;;;KATrBM,iB;AAsBN,eAAeA,iBAAf","sourcesContent":["import React from 'react'\r\nimport { Flex, Button, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Pool } from 'state/types'\r\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\r\nimport VaultStakeModal from '../VaultStakeModal'\r\nimport HasSharesActions from './HasSharesActions'\r\n\r\ninterface VaultStakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  accountHasSharesStaked: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  accountHasSharesStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken } = pool\r\n  const { t } = useTranslation()\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n  const [onPresentStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\r\n\r\n  const renderStakeAction = () => {\r\n    return accountHasSharesStaked ? (\r\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} />\r\n    ) : (\r\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default VaultStakeActions\r\n"]},"metadata":{},"sourceType":"module"}