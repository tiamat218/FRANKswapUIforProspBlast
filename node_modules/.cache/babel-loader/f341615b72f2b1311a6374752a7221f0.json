{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\RoundCard\\\\LiveRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useCountUp } from 'react-countup';\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { BetPosition } from 'state/types';\nimport { BLOCK_PADDING } from 'state/predictions';\nimport { formatBigNumberToFixed } from 'utils/formatBalance';\nimport { useGetLastOraclePrice } from 'state/hooks';\nimport { useBlock } from 'state/block/hooks';\nimport BlockProgress from 'components/BlockProgress';\nimport { formatUsdv2, getPriceDifference } from '../../helpers';\nimport PositionTag from '../PositionTag';\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport Card from './Card';\nimport CardHeader from './CardHeader';\nimport CalculatingCard from './CalculatingCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`;\n_c = GradientBorder;\nconst GradientCard = styled(Card)`\n  background: ${({\n  theme\n}) => theme.colors.gradients.bubblegum};\n`;\n_c2 = GradientCard;\n\nconst LiveRoundCard = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    lockPrice,\n    lockBlock,\n    endBlock,\n    totalAmount\n  } = round;\n  const {\n    currentBlock\n  } = useBlock();\n  const price = useGetLastOraclePrice();\n  const isBull = lockPrice && price.gt(lockPrice);\n  const priceColor = isBull ? 'success' : 'failure';\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING;\n  const priceDifference = getPriceDifference(price, lockPrice);\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8));\n  const {\n    countUp,\n    update\n  } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3\n  });\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom'\n  });\n  const updateRef = useRef(update);\n  useEffect(() => {\n    updateRef.current(priceAsNumber);\n  }, [priceAsNumber, updateRef]);\n\n  if (currentBlock > estimatedEndBlockPlusPadding) {\n    return /*#__PURE__*/_jsxDEV(CalculatingCard, {\n      round: round\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(GradientBorder, {\n    children: [/*#__PURE__*/_jsxDEV(GradientCard, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        status: \"live\",\n        icon: /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          mr: \"4px\",\n          width: \"24px\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this),\n        title: t('Live'),\n        epoch: round.epoch,\n        blockNumber: estimatedEndBlockPlusPadding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockProgress, {\n        variant: \"flat\",\n        scale: \"sm\",\n        startBlock: lockBlock,\n        endBlock: estimatedEndBlockPlusPadding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        p: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bullMultiplier,\n          hasEntered: hasEnteredUp,\n          isActive: isBull\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n          betPosition: isBull ? BetPosition.BULL : BetPosition.BEAR,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            color: \"textSubtle\",\n            fontSize: \"12px\",\n            bold: true,\n            textTransform: \"uppercase\",\n            mb: \"8px\",\n            children: t('Last Price')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            mb: \"16px\",\n            height: \"36px\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: targetRef,\n              children: /*#__PURE__*/_jsxDEV(TooltipText, {\n                bold: true,\n                color: priceColor,\n                fontSize: \"24px\",\n                style: {\n                  minHeight: '36px'\n                },\n                children: price.gt(0) ? `$${countUp}` : /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: \"36px\",\n                  width: \"94px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 50\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(PositionTag, {\n              betPosition: isBull ? BetPosition.BULL : BetPosition.BEAR,\n              children: formatUsdv2(priceDifference)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), lockPrice && /*#__PURE__*/_jsxDEV(LockPriceRow, {\n            lockPrice: lockPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(PrizePoolRow, {\n            totalAmount: totalAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bearMultiplier,\n          betPosition: BetPosition.BEAR,\n          hasEntered: hasEnteredDown,\n          isActive: !isBull\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), tooltipVisible && tooltip]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LiveRoundCard, \"ITNYb0qIlirm7BgLaeFm31i6jx0=\", false, function () {\n  return [useTranslation, useBlock, useGetLastOraclePrice, useCountUp, useTooltip];\n});\n\n_c3 = LiveRoundCard;\nexport default LiveRoundCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GradientBorder\");\n$RefreshReg$(_c2, \"GradientCard\");\n$RefreshReg$(_c3, \"LiveRoundCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/RoundCard/LiveRoundCard.tsx"],"names":["React","useEffect","useRef","styled","useCountUp","CardBody","Flex","PlayCircleOutlineIcon","Skeleton","Text","TooltipText","useTooltip","useTranslation","BetPosition","BLOCK_PADDING","formatBigNumberToFixed","useGetLastOraclePrice","useBlock","BlockProgress","formatUsdv2","getPriceDifference","PositionTag","RoundResultBox","LockPriceRow","PrizePoolRow","MultiplierArrow","Card","CardHeader","CalculatingCard","GradientBorder","div","GradientCard","theme","colors","gradients","bubblegum","LiveRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","t","lockPrice","lockBlock","endBlock","totalAmount","currentBlock","price","isBull","gt","priceColor","estimatedEndBlockPlusPadding","priceDifference","priceAsNumber","parseFloat","countUp","update","start","end","duration","decimals","targetRef","tooltip","tooltipVisible","placement","updateRef","current","epoch","BULL","BEAR","minHeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useCountUp } from 'react-countup'\r\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { BLOCK_PADDING } from 'state/predictions'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport BlockProgress from 'components/BlockProgress'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst GradientBorder = styled.div`\r\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\r\n  border-radius: 16px;\r\n  padding: 1px;\r\n`\r\n\r\nconst GradientCard = styled(Card)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\r\n  const { currentBlock } = useBlock()\r\n  const price = useGetLastOraclePrice()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (currentBlock > estimatedEndBlockPlusPadding) {\r\n    return <CalculatingCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <GradientBorder>\r\n      <GradientCard>\r\n        <CardHeader\r\n          status=\"live\"\r\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n          title={t('Live')}\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedEndBlockPlusPadding}\r\n        />\r\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            hasEntered={hasEnteredUp}\r\n            isActive={isBull}\r\n          />\r\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n              {t('Last Price')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n              <div ref={targetRef}>\r\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n                </TooltipText>\r\n              </div>\r\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n                {formatUsdv2(priceDifference)}\r\n              </PositionTag>\r\n            </Flex>\r\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n            <PrizePoolRow totalAmount={totalAmount} />\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            isActive={!isBull}\r\n          />\r\n        </CardBody>\r\n      </GradientCard>\r\n      {tooltipVisible && tooltip}\r\n    </GradientBorder>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n"]},"metadata":{},"sourceType":"module"}