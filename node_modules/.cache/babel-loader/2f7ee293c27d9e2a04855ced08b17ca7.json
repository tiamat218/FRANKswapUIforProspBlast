{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\nconst varint = require('varint');\nconst uint8ArrayConcat = require('uint8arrays/concat');\nconst util = require('./util');\nconst {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n} = require('./maps');\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix(multicodecStrOrCode, data) {\n  let prefix;\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix(data) {\n  varint.decode( /** @type {Buffer} */data);\n  return data.slice(varint.decode.bytes);\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData(prefixedData) {\n  const code = /** @type {CodecCode} */varint.decode( /** @type {Buffer} */prefixedData);\n  const name = codeToName[code];\n  if (name === undefined) {\n    throw new Error(\"Code \\\"\".concat(code, \"\\\" not found\"));\n  }\n  return name;\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode(codec) {\n  return codeToName[codec];\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName(name) {\n  const code = nameToCode[name];\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n  return code;\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData(prefixedData) {\n  return /** @type {CodecCode} */varint.decode( /** @type {Buffer} */prefixedData);\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName(name) {\n  const code = nameToVarint[name];\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n  return code;\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode(code) {\n  return util.varintEncode(code);\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec(prefixedData) {\n  return getNameFromData(prefixedData);\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName(codec) {\n  return getNameFromCode(codec);\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber(name) {\n  return getCodeFromName(name);\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode(prefixedData) {\n  return getCodeFromData(prefixedData);\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint(name) {\n  return getVarintFromName(name);\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint(code) {\n  return Array.from(getVarintFromCode(code));\n}\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n};","map":{"version":3,"names":["varint","require","uint8ArrayConcat","util","nameToVarint","constantToCode","nameToCode","codeToName","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getNameFromData","prefixedData","code","name","undefined","concat","getNameFromCode","codec","getCodeFromName","getCodeFromData","getVarintFromName","getVarintFromCode","varintEncode","getCodec","getName","getNumber","getCode","getCodeVarint","getVarint","Array","from","module","exports"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/cids/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\n\nconst varint = require('varint')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst util = require('./util')\nconst { nameToVarint, constantToCode, nameToCode, codeToName } = require('./maps')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(/** @type {Buffer} */(data))\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData (prefixedData) {\n  const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n  const name = codeToName[code]\n  if (name === undefined) {\n    throw new Error(`Code \"${code}\" not found`)\n  }\n  return name\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode (codec) {\n  return codeToName[codec]\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName (name) {\n  const code = nameToCode[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData (prefixedData) {\n  return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName (name) {\n  const code = nameToVarint[name]\n  if (code === undefined) {\n    throw new Error(`Codec \"${name}\" not found`)\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode (code) {\n  return util.varintEncode(code)\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  return getNameFromData(prefixedData)\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName (codec) {\n  return getNameFromCode(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber (name) {\n  return getCodeFromName(name)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode (prefixedData) {\n  return getCodeFromData(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (name) {\n  return getVarintFromName(name)\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return Array.from(getVarintFromCode(code))\n}\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getNameFromData,\n  getNameFromCode,\n  getCodeFromName,\n  getCodeFromData,\n  getVarintFromName,\n  getVarintFromCode,\n  // Deprecated\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  // Make the constants top-level constants\n  ...constantToCode,\n  // Export the maps\n  nameToVarint,\n  nameToCode,\n  codeToName\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}