{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { simpleRpcProvider } from 'utils/providers';\nimport useRefresh from './useRefresh';\nimport useLastUpdated from './useLastUpdated';\nexport let FetchStatus;\n(function (FetchStatus) {\n  FetchStatus[\"NOT_FETCHED\"] = \"not-fetched\";\n  FetchStatus[\"SUCCESS\"] = \"success\";\n  FetchStatus[\"FAILED\"] = \"failed\";\n})(FetchStatus || (FetchStatus = {}));\nconst useTokenBalance = tokenAddress => {\n  _s();\n  const {\n    NOT_FETCHED,\n    SUCCESS,\n    FAILED\n  } = FetchStatus;\n  const [balanceState, setBalanceState] = useState({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED\n  });\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress);\n      try {\n        const res = await contract.balanceOf(account);\n        setBalanceState({\n          balance: new BigNumber(res.toString()),\n          fetchStatus: SUCCESS\n        });\n      } catch (e) {\n        console.error(e);\n        setBalanceState(prev => ({\n          ...prev,\n          fetchStatus: FAILED\n        }));\n      }\n    };\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED]);\n  return balanceState;\n};\n_s(useTokenBalance, \"RHmyQGPlmZpMQirAsHUWX/UgLIo=\", false, function () {\n  return [useWeb3React, useRefresh];\n});\nexport const useTotalSupply = () => {\n  _s2();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract();\n      const supply = await cakeContract.totalSupply();\n      setTotalSupply(new BigNumber(supply.toString()));\n    }\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress);\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD');\n      setBalance(new BigNumber(res.toString()));\n    };\n    fetchBalance();\n  }, [tokenAddress, slowRefresh]);\n  return balance;\n};\n_s3(useBurnedBalance, \"4MQotZwd6O1prY/6FmL3ShgL1qM=\", false, function () {\n  return [useRefresh];\n});\nexport const useGetBnbBalance = () => {\n  _s4();\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account);\n      setBalance(new BigNumber(walletBalance.toString()));\n    };\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, lastUpdated, setBalance]);\n  return {\n    balance,\n    refresh: setLastUpdated\n  };\n};\n_s4(useGetBnbBalance, \"Dx/JRrmIN4uzLPrB3qnMhpb+nWs=\", false, function () {\n  return [useWeb3React, useLastUpdated];\n});\nexport default useTokenBalance;","map":{"version":3,"names":["useEffect","useState","BigNumber","useWeb3React","getBep20Contract","getCakeContract","BIG_ZERO","simpleRpcProvider","useRefresh","useLastUpdated","FetchStatus","useTokenBalance","tokenAddress","_s","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","balance","fetchStatus","account","fastRefresh","fetchBalance","contract","res","balanceOf","toString","e","console","error","prev","useTotalSupply","_s2","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","useBurnedBalance","_s3","setBalance","useGetBnbBalance","_s4","lastUpdated","setLastUpdated","walletBalance","getBalance","refresh"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useTokenBalance.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}