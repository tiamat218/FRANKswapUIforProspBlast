{"ast":null,"code":"import BigNumber from'bignumber.js';import{BLOCKS_PER_YEAR,CAKE_PER_YEAR}from'config';import lpAprs from'config/constants/lpAprs.json';/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */export const getPoolApr=(stakingTokenPrice,rewardTokenPrice,totalStaked,tokenPerBlock)=>{const totalRewardPricePerYear=new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);const totalStakingTokenInPool=new BigNumber(stakingTokenPrice).times(totalStaked);const apr=totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);return apr.isNaN()||!apr.isFinite()?null:apr.toNumber();};/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */export const getFarmApr=(poolWeight,cakePriceUsd,poolLiquidityUsd,farmAddress)=>{var _lpAprs$farmAddress$t;const yearlyCakeRewardAllocation=CAKE_PER_YEAR.times(poolWeight);const cakeRewardsApr=yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);let cakeRewardsAprAsNumber=null;if(!cakeRewardsApr.isNaN()&&cakeRewardsApr.isFinite()){cakeRewardsAprAsNumber=cakeRewardsApr.toNumber();}const lpRewardsApr=(_lpAprs$farmAddress$t=lpAprs[farmAddress===null||farmAddress===void 0?void 0:farmAddress.toLocaleLowerCase()])!==null&&_lpAprs$farmAddress$t!==void 0?_lpAprs$farmAddress$t:0;return{cakeRewardsApr:cakeRewardsAprAsNumber,lpRewardsApr};};export default null;","map":{"version":3,"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_YEAR","lpAprs","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmAddress","_lpAprs$farmAddress$t","yearlyCakeRewardAllocation","cakeRewardsApr","cakeRewardsAprAsNumber","lpRewardsApr","toLocaleLowerCase"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/apr.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\r\nimport lpAprs from 'config/constants/lpAprs.json'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  farmAddress: string,\r\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_YEAR.times(poolWeight)\r\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  let cakeRewardsAprAsNumber = null\r\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\r\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\r\n  }\r\n  const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\r\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr }\r\n}\r\n\r\nexport default null\r\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,cAAc,CACpC,OAASC,eAAe,CAAEC,aAAa,KAAQ,QAAQ,CACvD,MAAO,CAAAC,MAAM,KAAM,8BAA8B,CAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAGA,CACxBC,iBAAyB,CACzBC,gBAAwB,CACxBC,WAAmB,CACnBC,aAAqB,GACV,CACX,KAAM,CAAAC,uBAAuB,CAAG,GAAI,CAAAT,SAAS,CAACM,gBAAgB,CAAC,CAACI,KAAK,CAACF,aAAa,CAAC,CAACE,KAAK,CAACT,eAAe,CAAC,CAC3G,KAAM,CAAAU,uBAAuB,CAAG,GAAI,CAAAX,SAAS,CAACK,iBAAiB,CAAC,CAACK,KAAK,CAACH,WAAW,CAAC,CACnF,KAAM,CAAAK,GAAG,CAAGH,uBAAuB,CAACI,GAAG,CAACF,uBAAuB,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAC3E,MAAO,CAAAE,GAAG,CAACE,KAAK,CAAC,CAAC,EAAI,CAACF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAG,IAAI,CAAGH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAC/D,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAGA,CACxBC,UAAqB,CACrBC,YAAuB,CACvBC,gBAA2B,CAC3BC,WAAmB,GACkC,KAAAC,qBAAA,CACrD,KAAM,CAAAC,0BAA0B,CAAGrB,aAAa,CAACQ,KAAK,CAACQ,UAAU,CAAC,CAClE,KAAM,CAAAM,cAAc,CAAGD,0BAA0B,CAACb,KAAK,CAACS,YAAY,CAAC,CAACN,GAAG,CAACO,gBAAgB,CAAC,CAACV,KAAK,CAAC,GAAG,CAAC,CACtG,GAAI,CAAAe,sBAAsB,CAAG,IAAI,CACjC,GAAI,CAACD,cAAc,CAACV,KAAK,CAAC,CAAC,EAAIU,cAAc,CAACT,QAAQ,CAAC,CAAC,CAAE,CACxDU,sBAAsB,CAAGD,cAAc,CAACR,QAAQ,CAAC,CAAC,CACpD,CACA,KAAM,CAAAU,YAAY,EAAAJ,qBAAA,CAAGnB,MAAM,CAACkB,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAEM,iBAAiB,CAAC,CAAC,CAAC,UAAAL,qBAAA,UAAAA,qBAAA,CAAI,CAAC,CAClE,MAAO,CAAEE,cAAc,CAAEC,sBAAsB,CAAEC,YAAa,CAAC,CACjE,CAAC,CAED,cAAe,KAAI","ignoreList":[]},"metadata":{},"sourceType":"module"}