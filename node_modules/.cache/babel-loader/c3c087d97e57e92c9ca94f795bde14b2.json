{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\ContributeModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { useERC20 } from 'hooks/useContract';\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1];\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString();\nconst ContributeModal = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess\n}) => {\n  _s();\n  const publicPoolCharacteristics = publicIfoData[poolId];\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    currency\n  } = ifo;\n  const {\n    limitPerUserInLP\n  } = publicPoolCharacteristics;\n  const {\n    amountTokenCommittedInLP\n  } = userPoolCharacteristics;\n  const {\n    contract\n  } = walletIfoData;\n  const [value, setValue] = useState('');\n  const {\n    account\n  } = useWeb3React();\n  const raisingTokenContract = useERC20(getAddress(currency.address));\n  const {\n    t\n  } = useTranslation();\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address);\n        const currentAllowance = new BigNumber(response.toString());\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, {\n        gasPrice\n      });\n    },\n    onConfirm: () => {\n      return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\n        gasPrice\n      });\n    },\n    onSuccess: async () => {\n      await onSuccess(valueWithTokenDecimals);\n      onDismiss();\n    }\n  });\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance) ? limitPerUserInLP : userCurrencyBalance;\n    }\n    return userCurrencyBalance;\n  })();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Contribute %symbol%', {\n      symbol: currency.symbol\n    }),\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      maxWidth: \"320px\",\n      children: [limitPerUserInLP.isGreaterThan(0) && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Max. LP token entry')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: getBalanceAmount(limitPerUserInLP, currency.decimals).toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('Commit'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexGrow: 1,\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`,\n            width: 24,\n            height: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: currency.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        currencyValue: publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2),\n        onUserInput: setValue,\n        isWarning: valueWithTokenDecimals.isGreaterThan(maximumLpCommitable),\n        decimals: currency.decimals,\n        mb: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        textAlign: \"right\",\n        fontSize: \"12px\",\n        mb: \"16px\",\n        children: t('Balance: %balance%', {\n          balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString()\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: multiplierValues.map((multiplierValue, index) => /*#__PURE__*/_jsxDEV(Button, {\n          scale: \"xs\",\n          variant: \"tertiary\",\n          onClick: () => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString()),\n          mr: index < multiplierValues.length - 1 ? '8px' : 0,\n          children: [multiplierValue * 100, \"%\"]\n        }, multiplierValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        mb: \"24px\",\n        children: t('If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n        isApproveDisabled: isConfirmed || isConfirming || isApproved,\n        isApproving: isApproving,\n        isConfirmDisabled: !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0),\n        isConfirming: isConfirming,\n        onApprove: handleApprove,\n        onConfirm: handleConfirm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ContributeModal, \"b5tF8rkKkmi2l224Pck7j0xVf0A=\", false, function () {\n  return [useWeb3React, useERC20, useTranslation, useApproveConfirmTransaction];\n});\n_c = ContributeModal;\nexport default ContributeModal;\nvar _c;\n$RefreshReg$(_c, \"ContributeModal\");","map":{"version":3,"names":["React","useState","useWeb3React","BigNumber","ethers","Modal","ModalBody","Text","Image","Button","BalanceInput","Flex","PoolIds","useTranslation","getBalanceAmount","getAddress","ApproveConfirmButtons","useApproveConfirmTransaction","DEFAULT_TOKEN_DECIMAL","useERC20","BIG_NINE","BIG_TEN","jsxDEV","_jsxDEV","multiplierValues","gasPrice","times","pow","toString","ContributeModal","poolId","ifo","publicIfoData","walletIfoData","userCurrencyBalance","onDismiss","onSuccess","_s","publicPoolCharacteristics","userPoolCharacteristics","currency","limitPerUserInLP","amountTokenCommittedInLP","contract","value","setValue","account","raisingTokenContract","address","t","valueWithTokenDecimals","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","currentAllowance","gt","error","onApprove","approve","constants","MaxUint256","onConfirm","depositPool","poolBasic","maximumLpCommitable","isGreaterThan","minus","isLessThanOrEqualTo","title","symbol","children","maxWidth","justifyContent","mb","fileName","_jsxFileName","lineNumber","columnNumber","decimals","flexGrow","src","split","toLocaleLowerCase","width","height","currencyValue","currencyPriceInUSD","toFixed","onUserInput","isWarning","color","textAlign","fontSize","balance","map","multiplierValue","index","scale","variant","onClick","mr","length","isApproveDisabled","isConfirmDisabled","isNaN","eq","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  userCurrencyBalance: BigNumber\r\n  onSuccess: (amount: BigNumber) => void\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst ContributeModal: React.FC<Props> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  userCurrencyBalance,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency } = ifo\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { contract } = walletIfoData\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const raisingTokenContract = useERC20(getAddress(currency.address))\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await raisingTokenContract.allowance(account, contract.address)\r\n          const currentAllowance = new BigNumber(response.toString())\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, { gasPrice })\r\n      },\r\n      onConfirm: () => {\r\n        return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\r\n          gasPrice,\r\n        })\r\n      },\r\n      onSuccess: async () => {\r\n        await onSuccess(valueWithTokenDecimals)\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  const maximumLpCommitable = (() => {\r\n    if (limitPerUserInLP.isGreaterThan(0)) {\r\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\r\n        ? limitPerUserInLP\r\n        : userCurrencyBalance\r\n    }\r\n    return userCurrencyBalance\r\n  })()\r\n\r\n  return (\r\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"320px\">\r\n        {limitPerUserInLP.isGreaterThan(0) && (\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            <Text>{t('Max. LP token entry')}</Text>\r\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Commit')}:</Text>\r\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\r\n            <Image\r\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\r\n              width={24}\r\n              height={24}\r\n            />\r\n            <Text>{currency.symbol}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\r\n          onUserInput={setValue}\r\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\r\n          decimals={currency.decimals}\r\n          mb=\"8px\"\r\n        />\r\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Balance: %balance%', {\r\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\r\n          })}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n          {multiplierValues.map((multiplierValue, index) => (\r\n            <Button\r\n              key={multiplierValue}\r\n              scale=\"xs\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\r\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n            >\r\n              {multiplierValue * 100}%\r\n            </Button>\r\n          ))}\r\n        </Flex>\r\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n          {t(\r\n            'If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\r\n          )}\r\n        </Text>\r\n        <ApproveConfirmButtons\r\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n          isApproving={isApproving}\r\n          isConfirmDisabled={\r\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\r\n          }\r\n          isConfirming={isConfirming}\r\n          onApprove={handleApprove}\r\n          onConfirm={handleConfirm}\r\n        />\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}