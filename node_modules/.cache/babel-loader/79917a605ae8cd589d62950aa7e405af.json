{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { PoolIds } from 'config/constants/types';\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV1Abi from 'config/abi/ifoV1.json';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useIfoAllowance from '../useIfoAllowance';\n\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n\n  const [state, setState] = useState({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO // Not used\n\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo;\n  const {\n    poolUnlimited\n  } = state;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoV1Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx);\n\n  const setPendingTx = status => setState(prevState => ({\n    [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n      isPendingTx: status\n    }\n  }));\n\n  const setIsClaimed = () => {\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n        hasClaimed: true\n      }\n    }));\n  };\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map(method => ({\n      address,\n      name: method,\n      params: [account]\n    }));\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls);\n    const parsedUserInfo = userInfoResponse ? {\n      amount: new BigNumber(userInfoResponse.amount.toString()),\n      claimed: userInfoResponse.claimed\n    } : {\n      amount: BIG_ZERO,\n      claimed: false\n    };\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO\n      }\n    }));\n  }, [account, address]);\n  useEffect(() => {\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, fetchIfoData]);\n  return { ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    setIsClaimed,\n    fetchIfoData\n  };\n};\n\n_s(useGetWalletIfoData, \"9EeW4FzjTatTjDEsn/whabTKk94=\", false, function () {\n  return [useWeb3React, useIfoV1Contract, useERC20, useIfoAllowance];\n});\n\nexport default useGetWalletIfoData;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v1/useGetWalletIfoData.ts"],"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","PoolIds","useERC20","useIfoV1Contract","multicallv2","ifoV1Abi","getAddress","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","state","setState","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","amount","toString","claimed"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    [PoolIds.poolUnlimited]: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO, // Not used\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"]},"metadata":{},"sourceType":"module"}