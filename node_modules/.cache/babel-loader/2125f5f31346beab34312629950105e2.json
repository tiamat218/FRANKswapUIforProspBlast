{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { JSBI, Percent, TokenAmount } from '@pancakeswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { usePair } from 'hooks/usePairs';\nimport useTotalSupply from 'hooks/useTotalSupply';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  _s();\n  return useSelector(state => state.burn);\n}\n_s(useBurnState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  _s2();\n  var _pair$liquidityToken$, _pair$liquidityToken;\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState();\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB);\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  };\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100');\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n    const liquidityValue = liquidityValues[independentField];\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n    }\n  }\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\n_s2(useDerivedBurnInfo, \"nXDzgAsCiVcRk2K4cCNCtktw7eI=\", false, function () {\n  return [useActiveWeb3React, useBurnState, usePair, useTokenBalances, useTotalSupply];\n});\nexport function useBurnActionHandlers() {\n  _s3();\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}\n_s3(useBurnActionHandlers, \"lEPT7YuAO+/A5u9H2YSu9Ik8G/0=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","useActiveWeb3React","wrappedCurrency","usePair","useTotalSupply","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","_s","state","burn","useDerivedBurnInfo","currencyA","currencyB","_s2","_pair$liquidityToken$","_pair$liquidityToken","account","chainId","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","_error","useBurnActionHandlers","_s3","dispatch","onUserInput","field"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/burn/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n    const liquidityValue = liquidityValues[independentField]\r\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onUserInput,\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}