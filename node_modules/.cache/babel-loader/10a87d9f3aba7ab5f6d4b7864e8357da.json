{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\Modals\\\\CollectModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal, Text, Button, Heading, Flex, AutoRenewIcon, ButtonMenu, ButtonMenuItem, HelpIcon, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport useToast from 'hooks/useToast';\nimport { formatNumber } from 'utils/formatBalance';\nimport useHarvestPool from '../../../hooks/useHarvestPool';\nimport useStakePool from '../../../hooks/useStakePool';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CollectModal = ({\n  formattedBalance,\n  fullBalance,\n  earningToken,\n  earningsDollarValue,\n  sousId,\n  isBnbPool,\n  isCompoundPool = false,\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    onReward\n  } = useHarvestPool(sousId, isBnbPool);\n  const {\n    onStake\n  } = useStakePool(sousId, isBnbPool);\n  const [pendingTx, setPendingTx] = useState(false);\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool);\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: \"12px\",\n      children: t('Compound: collect and restake CAKE into pool.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('Harvest: collect CAKE and send to wallet')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10]\n  });\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true); // compounding\n\n    if (shouldCompound) {\n      try {\n        await onStake(fullBalance, earningToken.decimals);\n        toastSuccess(`${t('Compounded')}!`, t('Your %symbol% earnings have been re-invested into the pool!', {\n          symbol: earningToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        console.error(e);\n        setPendingTx(false);\n      }\n    } else {\n      // harvesting\n      try {\n        await onReward();\n        toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n          symbol: earningToken.symbol\n        }));\n        setPendingTx(false);\n        onDismiss();\n      } catch (e) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        console.error(e);\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: `${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`,\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [isCompoundPool && /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonMenu, {\n        activeIndex: shouldCompound ? 0 : 1,\n        scale: \"sm\",\n        variant: \"subtle\",\n        onItemClick: index => setShouldCompound(!index),\n        children: [/*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          as: \"button\",\n          children: t('Compound')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          as: \"button\",\n          children: t('Harvest')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        ml: \"10px\",\n        ref: targetRef,\n        children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n          color: \"textSubtle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), tooltipVisible && tooltip]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: [shouldCompound ? t('Compounding') : t('Harvesting'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: [formattedBalance, \" \", earningToken.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), earningsDollarValue > 0 && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: `~${formatNumber(earningsDollarValue)} USD`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      onClick: handleHarvestConfirm,\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 30\n      }, this) : null,\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"text\",\n      onClick: onDismiss,\n      pb: \"0px\",\n      children: t('Close Window')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectModal, \"6iwKDrVL0WzN5iY6nBboaTdCp/8=\", false, function () {\n  return [useTranslation, useTheme, useToast, useHarvestPool, useStakePool, useTooltip];\n});\n\n_c = CollectModal;\nexport default CollectModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/Modals/CollectModal.tsx"],"names":["React","useState","Modal","Text","Button","Heading","Flex","AutoRenewIcon","ButtonMenu","ButtonMenuItem","HelpIcon","useTooltip","useTranslation","useTheme","useToast","formatNumber","useHarvestPool","useStakePool","CollectModal","formattedBalance","fullBalance","earningToken","earningsDollarValue","sousId","isBnbPool","isCompoundPool","onDismiss","t","theme","toastSuccess","toastError","onReward","onStake","pendingTx","setPendingTx","shouldCompound","setShouldCompound","targetRef","tooltip","tooltipVisible","placement","tooltipOffset","handleHarvestConfirm","decimals","symbol","e","console","error","colors","gradients","cardHeader","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Button,\r\n  Heading,\r\n  Flex,\r\n  AutoRenewIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  HelpIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { Token } from 'config/constants/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport useHarvestPool from '../../../hooks/useHarvestPool'\r\nimport useStakePool from '../../../hooks/useStakePool'\r\n\r\ninterface CollectModalProps {\r\n  formattedBalance: string\r\n  fullBalance: string\r\n  earningToken: Token\r\n  earningsDollarValue: number\r\n  sousId: number\r\n  isBnbPool: boolean\r\n  isCompoundPool?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst CollectModal: React.FC<CollectModalProps> = ({\r\n  formattedBalance,\r\n  fullBalance,\r\n  earningToken,\r\n  earningsDollarValue,\r\n  sousId,\r\n  isBnbPool,\r\n  isCompoundPool = false,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { onReward } = useHarvestPool(sousId, isBnbPool)\r\n  const { onStake } = useStakePool(sousId, isBnbPool)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [shouldCompound, setShouldCompound] = useState(isCompoundPool)\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Text mb=\"12px\">{t('Compound: collect and restake CAKE into pool.')}</Text>\r\n      <Text>{t('Harvest: collect CAKE and send to wallet')}</Text>\r\n    </>,\r\n    { placement: 'bottom-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  const handleHarvestConfirm = async () => {\r\n    setPendingTx(true)\r\n    // compounding\r\n    if (shouldCompound) {\r\n      try {\r\n        await onStake(fullBalance, earningToken.decimals)\r\n        toastSuccess(\r\n          `${t('Compounded')}!`,\r\n          t('Your %symbol% earnings have been re-invested into the pool!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // harvesting\r\n      try {\r\n        await onReward()\r\n        toastSuccess(\r\n          `${t('Harvested')}!`,\r\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: earningToken.symbol }),\r\n        )\r\n        setPendingTx(false)\r\n        onDismiss()\r\n      } catch (e) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        console.error(e)\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={`${earningToken.symbol} ${isCompoundPool ? t('Collect') : t('Harvest')}`}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {isCompoundPool && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" mb=\"24px\">\r\n          <ButtonMenu\r\n            activeIndex={shouldCompound ? 0 : 1}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n            onItemClick={(index) => setShouldCompound(!index)}\r\n          >\r\n            <ButtonMenuItem as=\"button\">{t('Compound')}</ButtonMenuItem>\r\n            <ButtonMenuItem as=\"button\">{t('Harvest')}</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Flex ml=\"10px\" ref={targetRef}>\r\n            <HelpIcon color=\"textSubtle\" />\r\n          </Flex>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n      )}\r\n\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Text>{shouldCompound ? t('Compounding') : t('Harvesting')}:</Text>\r\n        <Flex flexDirection=\"column\">\r\n          <Heading>\r\n            {formattedBalance} {earningToken.symbol}\r\n          </Heading>\r\n          {earningsDollarValue > 0 && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">{`~${formatNumber(earningsDollarValue)} USD`}</Text>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <Button\r\n        mt=\"8px\"\r\n        onClick={handleHarvestConfirm}\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectModal\r\n"]},"metadata":{},"sourceType":"module"}