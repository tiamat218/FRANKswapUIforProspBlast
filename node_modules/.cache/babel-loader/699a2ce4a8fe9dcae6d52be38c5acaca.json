{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Predictions\\\\components\\\\RoundCard\\\\SoonRoundCard.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { BetPosition } from 'state/types';\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks';\nimport { formatRoundTime } from '../../helpers';\nimport useRoundCountdown from '../../hooks/useRoundCountdown';\nimport { RoundResultBox } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport Card from './Card';\nimport CardHeader from './CardHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SoonRoundCard = ({\n  round\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const interval = useGetTotalIntervalBlocks();\n  const currentEpoch = useGetCurrentEpoch();\n  const estimatedEndBlock = round.startBlock + interval;\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1);\n  const countdown = formatRoundTime(seconds);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      status: \"soon\",\n      icon: /*#__PURE__*/_jsxDEV(WaitIcon, {\n        mr: \"4px\",\n        width: \"21px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this),\n      title: t('Later'),\n      epoch: round.epoch,\n      blockNumber: estimatedEndBlock\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      p: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        isDisabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            children: t('Entry starts')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"24px\",\n            bold: true,\n            children: `~${countdown}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        betPosition: BetPosition.BEAR,\n        isDisabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(SoonRoundCard, \"nkbYeqB6/jILA7Itdbpzgt/b5K0=\", false, function () {\n  return [useTranslation, useGetTotalIntervalBlocks, useGetCurrentEpoch, useRoundCountdown];\n});\n_c = SoonRoundCard;\nexport default SoonRoundCard;\nvar _c;\n$RefreshReg$(_c, \"SoonRoundCard\");","map":{"version":3,"names":["React","CardBody","Text","WaitIcon","useTranslation","BetPosition","useGetCurrentEpoch","useGetTotalIntervalBlocks","formatRoundTime","useRoundCountdown","RoundResultBox","MultiplierArrow","Card","CardHeader","jsxDEV","_jsxDEV","SoonRoundCard","round","_s","t","interval","currentEpoch","estimatedEndBlock","startBlock","seconds","epoch","countdown","children","status","icon","mr","width","fileName","_jsxFileName","lineNumber","columnNumber","title","blockNumber","p","isDisabled","textAlign","bold","fontSize","betPosition","BEAR","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Predictions/components/RoundCard/SoonRoundCard.tsx"],"sourcesContent":["import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}