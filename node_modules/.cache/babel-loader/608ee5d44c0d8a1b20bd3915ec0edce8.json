{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst is_typedarray_1 = __importDefault(require(\"is-typedarray\"));\nconst typedarray_to_buffer_1 = __importDefault(require(\"typedarray-to-buffer\"));\nconst ENC_HEX = 'hex';\nconst ENC_UTF8 = 'utf8';\nconst ENC_BIN = 'binary';\nconst TYPE_BUFFER = 'buffer';\nconst TYPE_ARRAY = 'array';\nconst TYPE_TYPED_ARRAY = 'typed-array';\nconst TYPE_ARRAY_BUFFER = 'array-buffer';\nconst STRING_ZERO = '0';\nfunction bufferToArray(buf) {\n  return new Uint8Array(buf);\n}\nexports.bufferToArray = bufferToArray;\nfunction bufferToHex(buf) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.bufferToHex = bufferToHex;\nfunction bufferToUtf8(buf) {\n  return buf.toString(ENC_UTF8);\n}\nexports.bufferToUtf8 = bufferToUtf8;\nfunction bufferToNumber(buf) {\n  return buf.readUIntBE(0, buf.length);\n}\nexports.bufferToNumber = bufferToNumber;\nfunction bufferToBinary(buf) {\n  return arrayToBinary(bufferToArray(buf));\n}\nexports.bufferToBinary = bufferToBinary;\nfunction arrayToBuffer(arr) {\n  return typedarray_to_buffer_1.default(arr);\n}\nexports.arrayToBuffer = arrayToBuffer;\nfunction arrayToHex(arr) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\nexports.arrayToHex = arrayToHex;\nfunction arrayToUtf8(arr) {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\nexports.arrayToUtf8 = arrayToUtf8;\nfunction arrayToNumber(arr) {\n  return bufferToNumber(arrayToBuffer(arr));\n}\nexports.arrayToNumber = arrayToNumber;\nfunction arrayToBinary(arr) {\n  return Array.from(arr).map(numberToBinary).join('');\n}\nexports.arrayToBinary = arrayToBinary;\nfunction hexToBuffer(hex) {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\nexports.hexToBuffer = hexToBuffer;\nfunction hexToArray(hex) {\n  return bufferToArray(hexToBuffer(hex));\n}\nexports.hexToArray = hexToArray;\nfunction hexToUtf8(hex) {\n  return bufferToUtf8(hexToBuffer(hex));\n}\nexports.hexToUtf8 = hexToUtf8;\nfunction hexToNumber(hex) {\n  return arrayToNumber(hexToArray(hex));\n}\nexports.hexToNumber = hexToNumber;\nfunction hexToBinary(hex) {\n  return arrayToBinary(hexToArray(hex));\n}\nexports.hexToBinary = hexToBinary;\nfunction utf8ToBuffer(utf8) {\n  return Buffer.from(utf8, ENC_UTF8);\n}\nexports.utf8ToBuffer = utf8ToBuffer;\nfunction utf8ToArray(utf8) {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\nexports.utf8ToArray = utf8ToArray;\nfunction utf8ToHex(utf8) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\nexports.utf8ToHex = utf8ToHex;\nfunction utf8ToNumber(utf8) {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), 'Number can only safely store up to 53 bits');\n  return num;\n}\nexports.utf8ToNumber = utf8ToNumber;\nfunction utf8ToBinary(utf8) {\n  return arrayToBinary(utf8ToArray(utf8));\n}\nexports.utf8ToBinary = utf8ToBinary;\nfunction numberToBuffer(num) {\n  return binaryToBuffer(numberToBinary(num));\n}\nexports.numberToBuffer = numberToBuffer;\nfunction numberToArray(num) {\n  return binaryToArray(numberToBinary(num));\n}\nexports.numberToArray = numberToArray;\nfunction numberToHex(num, prefixed) {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\nexports.numberToHex = numberToHex;\nfunction numberToUtf8(num) {\n  return \"\".concat(num);\n}\nexports.numberToUtf8 = numberToUtf8;\nfunction numberToBinary(num) {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\nexports.numberToBinary = numberToBinary;\nfunction binaryToBuffer(bin) {\n  return arrayToBuffer(binaryToArray(bin));\n}\nexports.binaryToBuffer = binaryToBuffer;\nfunction binaryToArray(bin) {\n  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\nexports.binaryToArray = binaryToArray;\nfunction binaryToHex(bin, prefixed) {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\nexports.binaryToHex = binaryToHex;\nfunction binaryToUtf8(bin) {\n  return arrayToUtf8(binaryToArray(bin));\n}\nexports.binaryToUtf8 = binaryToUtf8;\nfunction binaryToNumber(bin) {\n  return arrayToNumber(binaryToArray(bin));\n}\nexports.binaryToNumber = binaryToNumber;\nfunction isBinaryString(str) {\n  if (typeof str !== 'string' || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n  return true;\n}\nexports.isBinaryString = isBinaryString;\nfunction isHexString(str, length) {\n  if (typeof str !== 'string' || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nexports.isHexString = isHexString;\nfunction isBuffer(val) {\n  return Buffer.isBuffer(val);\n}\nexports.isBuffer = isBuffer;\nfunction isTypedArray(val) {\n  return is_typedarray_1.default.strict(val) && !isBuffer(val);\n}\nexports.isTypedArray = isTypedArray;\nfunction isArrayBuffer(val) {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== 'undefined';\n}\nexports.isArrayBuffer = isArrayBuffer;\nfunction getType(val) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\nexports.getType = getType;\nfunction getEncoding(str) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n  return ENC_UTF8;\n}\nexports.getEncoding = getEncoding;\nfunction concatBuffers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const result = Buffer.concat(args);\n  return result;\n}\nexports.concatBuffers = concatBuffers;\nfunction concatArrays() {\n  let result = [];\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  args.forEach(arg => result = result.concat(Array.from(arg)));\n  return new Uint8Array([...result]);\n}\nexports.concatArrays = concatArrays;\nfunction trimLeft(data, length) {\n  const diff = data.length - length;\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n  return data;\n}\nexports.trimLeft = trimLeft;\nfunction trimRight(data, length) {\n  return data.slice(0, length);\n}\nexports.trimRight = trimRight;\nfunction calcByteLength(length) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nexports.calcByteLength = calcByteLength;\nfunction splitBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const bytes = sanitizeBytes(str).match(new RegExp(\".{\".concat(byteSize, \"}\"), 'gi'));\n  return Array.from(bytes || []);\n}\nexports.splitBytes = splitBytes;\nfunction swapBytes(str) {\n  return splitBytes(str).map(reverseString).join('');\n}\nexports.swapBytes = swapBytes;\nfunction swapHex(str) {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\nexports.swapHex = swapHex;\nfunction sanitizeBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\nexports.sanitizeBytes = sanitizeBytes;\nfunction padLeft(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, true, padding);\n}\nexports.padLeft = padLeft;\nfunction padRight(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, false, padding);\n}\nexports.padRight = padRight;\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\nexports.removeHexPrefix = removeHexPrefix;\nfunction addHexPrefix(hex) {\n  return hex.startsWith('0x') ? hex : \"0x\".concat(hex);\n}\nexports.addHexPrefix = addHexPrefix;\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nexports.sanitizeHex = sanitizeHex;\nfunction removeHexLeadingZeros(hex) {\n  const prefixed = hex.startsWith('0x');\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.removeHexLeadingZeros = removeHexLeadingZeros;\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\nfunction isDefined(value) {\n  return !isUndefined(value);\n}\nfunction assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nfunction padString(str, length, left) {\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STRING_ZERO;\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}","map":{"version":3,"names":["is_typedarray_1","__importDefault","require","typedarray_to_buffer_1","ENC_HEX","ENC_UTF8","ENC_BIN","TYPE_BUFFER","TYPE_ARRAY","TYPE_TYPED_ARRAY","TYPE_ARRAY_BUFFER","STRING_ZERO","bufferToArray","buf","Uint8Array","exports","bufferToHex","prefixed","arguments","length","undefined","hex","toString","addHexPrefix","bufferToUtf8","bufferToNumber","readUIntBE","bufferToBinary","arrayToBinary","arrayToBuffer","arr","default","arrayToHex","arrayToUtf8","arrayToNumber","Array","from","map","numberToBinary","join","hexToBuffer","Buffer","removeHexPrefix","hexToArray","hexToUtf8","hexToNumber","hexToBinary","utf8ToBuffer","utf8","utf8ToArray","utf8ToHex","utf8ToNumber","num","parseInt","assert","isDefined","utf8ToBinary","numberToBuffer","binaryToBuffer","numberToArray","binaryToArray","numberToHex","binaryToHex","numberToUtf8","concat","bin","sanitizeBytes","splitBytes","x","binaryToUtf8","binaryToNumber","isBinaryString","str","RegExp","test","isHexString","match","isBuffer","val","isTypedArray","strict","isArrayBuffer","byteLength","getType","isArray","getEncoding","concatBuffers","_len","args","_key","result","concatArrays","_len2","_key2","forEach","arg","trimLeft","data","diff","slice","trimRight","calcByteLength","byteSize","remainder","bytes","swapBytes","reverseString","swapHex","padding","padLeft","padString","padRight","replace","startsWith","sanitizeHex","removeHexLeadingZeros","substring","isUndefined","value","assertion","errorMessage","Error","split","reverse","left","pad","repeat"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}