{"ast":null,"code":"import React,{useState}from'react';import BigNumber from'bignumber.js';import{Button,Flex,Heading}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useAppDispatch}from'state';import{fetchFarmUserDataAsync}from'state/farms';import useToast from'hooks/useToast';import{getBalanceAmount}from'utils/formatBalance';import{BIG_ZERO}from'utils/bigNumber';import{useWeb3React}from'@web3-react/core';import{usePriceCakeBusd}from'state/farms/hooks';import Balance from'components/Balance';import useHarvestFarm from'../../hooks/useHarvestFarm';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HarvestAction=_ref=>{let{earnings,pid}=_ref;const{account}=useWeb3React();const{toastSuccess,toastError}=useToast();const{t}=useTranslation();const[pendingTx,setPendingTx]=useState(false);const{onReward}=useHarvestFarm(pid);const cakePrice=usePriceCakeBusd();const dispatch=useAppDispatch();const rawEarningsBalance=account?getBalanceAmount(earnings):BIG_ZERO;const displayBalance=rawEarningsBalance.toFixed(3,BigNumber.ROUND_DOWN);const earningsBusd=rawEarningsBalance?rawEarningsBalance.multipliedBy(cakePrice).toNumber():0;return/*#__PURE__*/_jsxs(Flex,{mb:\"8px\",justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",alignItems:\"flex-start\",children:[/*#__PURE__*/_jsx(Heading,{color:rawEarningsBalance.eq(0)?'textDisabled':'text',children:displayBalance}),earningsBusd>0&&/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",color:\"textSubtle\",decimals:2,value:earningsBusd,unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Button,{disabled:rawEarningsBalance.eq(0)||pendingTx,onClick:async()=>{setPendingTx(true);try{await onReward();toastSuccess(\"\".concat(t('Harvested'),\"!\"),t('Your %symbol% earnings have been sent to your wallet!',{symbol:'CAKE'}));}catch(e){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(e);}finally{setPendingTx(false);}dispatch(fetchFarmUserDataAsync({account,pids:[pid]}));},children:t('Harvest')})]});};export default HarvestAction;","map":{"version":3,"names":["React","useState","BigNumber","Button","Flex","Heading","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useToast","getBalanceAmount","BIG_ZERO","useWeb3React","usePriceCakeBusd","Balance","useHarvestFarm","jsx","_jsx","jsxs","_jsxs","HarvestAction","_ref","earnings","pid","account","toastSuccess","toastError","t","pendingTx","setPendingTx","onReward","cakePrice","dispatch","rawEarningsBalance","displayBalance","toFixed","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","mb","justifyContent","alignItems","children","flexDirection","color","eq","fontSize","decimals","value","unit","prefix","disabled","onClick","concat","symbol","e","console","error","pids"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}