{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useReducer, useRef } from 'react';\nimport { noop } from 'lodash';\nimport { useWeb3React } from '@web3-react/core';\nimport useToast from 'hooks/useToast';\nimport { useTranslation } from 'contexts/Localization';\nconst initialState = {\n  approvalState: 'idle',\n  confirmState: 'idle'\n};\nconst reducer = (state, actions) => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success'\n      };\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading'\n      };\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success'\n      };\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail'\n      };\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading'\n      };\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success'\n      };\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail'\n      };\n    default:\n      return state;\n  }\n};\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handlePreApprove = useRef(onRequiresApproval);\n  const {\n    toastError\n  } = useToast();\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then(result => {\n        if (result) {\n          dispatch({\n            type: 'requires_approval'\n          });\n        }\n      });\n    }\n  }, [account, handlePreApprove, dispatch]);\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove();\n        dispatch({\n          type: 'approve_sending'\n        });\n        const receipt = await tx.wait();\n        if (receipt.status) {\n          dispatch({\n            type: 'approve_receipt'\n          });\n          onApproveSuccess(state);\n        }\n      } catch (error) {\n        dispatch({\n          type: 'approve_error'\n        });\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({\n        type: 'confirm_sending'\n      });\n      try {\n        const tx = await onConfirm();\n        const receipt = await tx.wait();\n        if (receipt.status) {\n          dispatch({\n            type: 'confirm_receipt'\n          });\n          onSuccess(state);\n        }\n      } catch (error) {\n        dispatch({\n          type: 'confirm_error'\n        });\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    }\n  };\n};\n_s(useApproveConfirmTransaction, \"Sj6L3+0OG2xsaq8xWJyi9nNrGBI=\", false, function () {\n  return [useTranslation, useWeb3React, useToast];\n});\nexport default useApproveConfirmTransaction;","map":{"version":3,"names":["useEffect","useReducer","useRef","noop","useWeb3React","useToast","useTranslation","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","onApproveSuccess","_s","t","account","dispatch","handlePreApprove","toastError","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","tx","receipt","wait","status","error","handleConfirm"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useApproveConfirmTransaction.ts"],"sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => ethers.providers.TransactionResponse\r\n  onConfirm: () => ethers.providers.TransactionResponse\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: (state: State) => void\r\n  onApproveSuccess?: (state: State) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess(state)\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async () => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm()\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess(state)\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}