{"ast":null,"code":"import React from'react';import{Text,Flex,Box,Skeleton}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{PoolIds}from'config/constants/types';import{getBalanceNumber,formatNumber}from'utils/formatBalance';import{SkeletonCardDetails}from'./Skeletons';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const FooterEntry=_ref=>{let{label,value}=_ref;return/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Text,{small:true,color:\"textSubtle\",children:label}),value?/*#__PURE__*/_jsx(Text,{small:true,textAlign:\"right\",children:value}):/*#__PURE__*/_jsx(Skeleton,{height:21,width:80})]});};const IfoCardDetails=_ref2=>{let{poolId,ifo,publicIfoData}=_ref2;const{t}=useTranslation();const{status,currencyPriceInUSD}=publicIfoData;const poolCharacteristic=publicIfoData[poolId];/* Format start */const maxLpTokens=getBalanceNumber(poolCharacteristic.limitPerUserInLP,ifo.currency.decimals);const taxRate=\"\".concat(poolCharacteristic.taxRate,\"%\");const totalCommittedPercent=poolCharacteristic.totalAmountPool.div(poolCharacteristic.raisingAmountPool).times(100).toFixed(2);const totalLPCommitted=getBalanceNumber(poolCharacteristic.totalAmountPool,ifo.currency.decimals);const totalLPCommittedInUSD=currencyPriceInUSD.times(totalLPCommitted);const totalCommitted=\"~$\".concat(formatNumber(totalLPCommittedInUSD.toNumber(),0,0),\" (\").concat(totalCommittedPercent,\"%)\");/* Format end */const renderBasedOnIfoStatus=()=>{if(status==='coming_soon'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:t('Max. LP token entry'),value:maxLpTokens}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Funds to raise:'),value:ifo[poolId].raiseAmount}),/*#__PURE__*/_jsx(FooterEntry,{label:t('CAKE to burn:'),value:ifo[poolId].cakeToBurn}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Price per %symbol%:',{symbol:ifo.token.symbol}),value:\"$\".concat(ifo.tokenOfferingPrice)})]});}if(status==='live'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:t('Max. LP token entry'),value:maxLpTokens}),poolId===PoolIds.poolUnlimited&&/*#__PURE__*/_jsx(FooterEntry,{label:t('Additional fee:'),value:taxRate}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Total committed:'),value:currencyPriceInUSD.gt(0)?totalCommitted:null})]});}if(status==='finished'){return/*#__PURE__*/_jsxs(_Fragment,{children:[poolId===PoolIds.poolBasic&&/*#__PURE__*/_jsx(FooterEntry,{label:t('Max. LP token entry'),value:maxLpTokens}),poolId===PoolIds.poolUnlimited&&/*#__PURE__*/_jsx(FooterEntry,{label:t('Additional fee:'),value:taxRate}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Total committed:'),value:currencyPriceInUSD.gt(0)?totalCommitted:null}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Funds to raise:'),value:ifo[poolId].raiseAmount}),/*#__PURE__*/_jsx(FooterEntry,{label:t('CAKE to burn:'),value:ifo[poolId].cakeToBurn}),/*#__PURE__*/_jsx(FooterEntry,{label:t('Price per %symbol%:',{symbol:ifo.token.symbol}),value:\"$\".concat(ifo.tokenOfferingPrice?ifo.tokenOfferingPrice:'?')})]});}return/*#__PURE__*/_jsx(SkeletonCardDetails,{});};return/*#__PURE__*/_jsx(Box,{paddingTop:\"24px\",children:renderBasedOnIfoStatus()});};export default IfoCardDetails;","map":{"version":3,"names":["React","Text","Flex","Box","Skeleton","useTranslation","PoolIds","getBalanceNumber","formatNumber","SkeletonCardDetails","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","FooterEntry","_ref","label","value","justifyContent","alignItems","children","small","color","textAlign","height","width","IfoCardDetails","_ref2","poolId","ifo","publicIfoData","t","status","currencyPriceInUSD","poolCharacteristic","maxLpTokens","limitPerUserInLP","currency","decimals","taxRate","concat","totalCommittedPercent","totalAmountPool","div","raisingAmountPool","times","toFixed","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","toNumber","renderBasedOnIfoStatus","poolBasic","raiseAmount","cakeToBurn","symbol","token","tokenOfferingPrice","poolUnlimited","gt","paddingTop"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport { SkeletonCardDetails } from './Skeletons'\r\n\r\nexport interface IfoCardDetailsProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nexport interface FooterEntryProps {\r\n  label: string\r\n  value: string | number\r\n}\r\n\r\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text small color=\"textSubtle\">\r\n        {label}\r\n      </Text>\r\n      {value ? (\r\n        <Text small textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height={21} width={80} />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, currencyPriceInUSD } = publicIfoData\r\n  const poolCharacteristic = publicIfoData[poolId]\r\n\r\n  /* Format start */\r\n  const maxLpTokens = getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\r\n  const taxRate = `${poolCharacteristic.taxRate}%`\r\n\r\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\r\n    .div(poolCharacteristic.raisingAmountPool)\r\n    .times(100)\r\n    .toFixed(2)\r\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\r\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\r\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\r\n\r\n  /* Format end */\r\n\r\n  const renderBasedOnIfoStatus = () => {\r\n    if (status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'live') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'finished') {\r\n      return (\r\n        <>\r\n          {poolId === PoolIds.poolBasic && <FooterEntry label={t('Max. LP token entry')} value={maxLpTokens} />}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    return <SkeletonCardDetails />\r\n  }\r\n\r\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\r\n}\r\n\r\nexport default IfoCardDetails\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}