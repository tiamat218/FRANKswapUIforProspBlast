{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState}from'react';import styled from'styled-components';import{Modal,Button,Flex,AutoRenewIcon,Heading,Text,Image,CrownIcon,TrophyGoldIcon,TeamPlayerIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useTradingCompetitionContract}from'hooks/useContract';import useToast from'hooks/useToast';import{useCompetitionCakeRewards,getRewardGroupAchievements}from'../../helpers';import NftBunnies from'../../pngs/syrup-nft.png';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const ImageWrapper=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  justify-content: center;\\n  width: 100%;\\n  height: fit-content;\\n  img {\\n    border-radius: \",\";\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.radii.default;});const ClaimModal=_ref2=>{let{onDismiss,onClaimSuccess,userTradingInformation}=_ref2;const[isConfirming,setIsConfirming]=useState(false);const tradingCompetitionContract=useTradingCompetitionContract();const{toastSuccess,toastError}=useToast();const{t}=useTranslation();const{userRewardGroup,userCakeRewards,userPointReward,canClaimNFT}=userTradingInformation;const{cakeReward}=useCompetitionCakeRewards(userCakeRewards);const{champion,teamPlayer}=getRewardGroupAchievements(userRewardGroup);const handleClaimClick=async()=>{const tx=await tradingCompetitionContract.claimReward();setIsConfirming(true);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('You have claimed your rewards!'));onDismiss();onClaimSuccess();}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsConfirming(false);}};return/*#__PURE__*/_jsx(Modal,{title:t('Collect Winnings'),onDismiss:onDismiss,children:/*#__PURE__*/_jsxs(Flex,{width:\"100%\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",maxWidth:\"360px\",children:[/*#__PURE__*/_jsxs(Text,{color:\"secondary\",bold:true,fontSize:\"16px\",children:[t('Congratulations! You won'),\":\"]}),/*#__PURE__*/_jsxs(Flex,{mt:\"16px\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(TrophyGoldIcon,{mr:[0,'4px']}),champion&&/*#__PURE__*/_jsx(CrownIcon,{mr:[0,'4px']}),teamPlayer&&/*#__PURE__*/_jsx(TeamPlayerIcon,{mr:[0,'4px']}),/*#__PURE__*/_jsxs(Text,{ml:['4px','8px'],children:[\"+\",userPointReward,\" \",t('Points')]})]}),/*#__PURE__*/_jsxs(Heading,{mt:\"16px\",scale:\"md\",mb:canClaimNFT?'16px':'0px',children:[cakeReward.toFixed(2),\" CAKE\"]}),canClaimNFT?/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",flexDirection:\"column\",width:\"100%\",children:[/*#__PURE__*/_jsx(ImageWrapper,{children:/*#__PURE__*/_jsx(Image,{src:NftBunnies,width:128,height:128})}),/*#__PURE__*/_jsx(Text,{mt:\"8px\",fontSize:\"16px\",children:t('Collectible NFT')})]}):null,/*#__PURE__*/_jsx(Button,{mt:\"24px\",width:\"100%\",onClick:handleClaimClick,disabled:isConfirming,isLoading:isConfirming,endIcon:isConfirming?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,children:t('Confirm')}),/*#__PURE__*/_jsx(Text,{mt:\"24px\",fontSize:\"12px\",color:\"textSubtle\",textAlign:\"center\",children:t('All prizes will be sent directly to your wallet and user account.')})]})});};export default ClaimModal;","map":{"version":3,"names":["React","useState","styled","Modal","Button","Flex","AutoRenewIcon","Heading","Text","Image","CrownIcon","TrophyGoldIcon","TeamPlayerIcon","useTranslation","useTradingCompetitionContract","useToast","useCompetitionCakeRewards","getRewardGroupAchievements","NftBunnies","jsxs","_jsxs","jsx","_jsx","ImageWrapper","_templateObject","_taggedTemplateLiteral","_ref","theme","radii","default","ClaimModal","_ref2","onDismiss","onClaimSuccess","userTradingInformation","isConfirming","setIsConfirming","tradingCompetitionContract","toastSuccess","toastError","t","userRewardGroup","userCakeRewards","userPointReward","canClaimNFT","cakeReward","champion","teamPlayer","handleClaimClick","tx","claimReward","receipt","wait","status","title","children","width","flexDirection","alignItems","justifyContent","maxWidth","color","bold","fontSize","mt","mr","ml","scale","mb","toFixed","src","height","onClick","disabled","isLoading","endIcon","spin","textAlign"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/TradingCompetition/components/ClaimModal/index.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Flex,\r\n  AutoRenewIcon,\r\n  Heading,\r\n  Text,\r\n  Image,\r\n  CrownIcon,\r\n  TrophyGoldIcon,\r\n  TeamPlayerIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useTradingCompetitionContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCompetitionCakeRewards, getRewardGroupAchievements } from '../../helpers'\r\nimport { CompetitionProps } from '../../types'\r\nimport NftBunnies from '../../pngs/syrup-nft.png'\r\n\r\nconst ImageWrapper = styled(Flex)`\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: fit-content;\r\n  img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\nconst ClaimModal: React.FC<CompetitionProps> = ({ onDismiss, onClaimSuccess, userTradingInformation }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const tradingCompetitionContract = useTradingCompetitionContract()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n\r\n  const { userRewardGroup, userCakeRewards, userPointReward, canClaimNFT } = userTradingInformation\r\n  const { cakeReward } = useCompetitionCakeRewards(userCakeRewards)\r\n  const { champion, teamPlayer } = getRewardGroupAchievements(userRewardGroup)\r\n\r\n  const handleClaimClick = async () => {\r\n    const tx = await tradingCompetitionContract.claimReward()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('You have claimed your rewards!'))\r\n      onDismiss()\r\n      onClaimSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Collect Winnings')} onDismiss={onDismiss}>\r\n      <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" maxWidth=\"360px\">\r\n        <Text color=\"secondary\" bold fontSize=\"16px\">\r\n          {t('Congratulations! You won')}:\r\n        </Text>\r\n        <Flex mt=\"16px\" alignItems=\"center\">\r\n          {/* achievements */}\r\n          <TrophyGoldIcon mr={[0, '4px']} />\r\n          {champion && <CrownIcon mr={[0, '4px']} />}\r\n          {teamPlayer && <TeamPlayerIcon mr={[0, '4px']} />}\r\n          <Text ml={['4px', '8px']}>\r\n            +{userPointReward} {t('Points')}\r\n          </Text>\r\n        </Flex>\r\n        {/* cake */}\r\n        <Heading mt=\"16px\" scale=\"md\" mb={canClaimNFT ? '16px' : '0px'}>\r\n          {cakeReward.toFixed(2)} CAKE\r\n        </Heading>\r\n        {/* NFT */}\r\n        {canClaimNFT ? (\r\n          <Flex alignItems=\"center\" flexDirection=\"column\" width=\"100%\">\r\n            <ImageWrapper>\r\n              <Image src={NftBunnies} width={128} height={128} />\r\n            </ImageWrapper>\r\n            <Text mt=\"8px\" fontSize=\"16px\">\r\n              {t('Collectible NFT')}\r\n            </Text>\r\n          </Flex>\r\n        ) : null}\r\n        <Button\r\n          mt=\"24px\"\r\n          width=\"100%\"\r\n          onClick={handleClaimClick}\r\n          disabled={isConfirming}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n          {t('All prizes will be sent directly to your wallet and user account.')}\r\n        </Text>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}