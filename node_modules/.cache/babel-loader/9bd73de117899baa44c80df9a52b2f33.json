{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\BlockProgress.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Progress } from '@pancakeswap/uikit';\nimport { useBlock } from 'state/block/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BlockProgress = ({\n  startBlock,\n  endBlock,\n  ...props\n}) => {\n  _s();\n\n  const {\n    currentBlock\n  } = useBlock();\n  const rawProgress = (currentBlock - startBlock) / (endBlock - startBlock) * 100;\n  const progress = rawProgress <= 100 ? rawProgress : 100;\n  return /*#__PURE__*/_jsxDEV(Progress, {\n    primaryStep: progress,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BlockProgress, \"HbKM3CZ8Q0pjL22Uq3AOnuFHCzo=\", false, function () {\n  return [useBlock];\n});\n\n_c = BlockProgress;\nexport default BlockProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockProgress\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/BlockProgress.tsx"],"names":["React","Progress","useBlock","BlockProgress","startBlock","endBlock","props","currentBlock","rawProgress","progress"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAwC,oBAAxC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;;AAOA,MAAMC,aAA2C,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwB,KAAGC;AAA3B,CAAD,KAAwC;AAAA;;AAC1F,QAAM;AAAEC,IAAAA;AAAF,MAAmBL,QAAQ,EAAjC;AACA,QAAMM,WAAW,GAAI,CAACD,YAAY,GAAGH,UAAhB,KAA+BC,QAAQ,GAAGD,UAA1C,CAAD,GAA0D,GAA9E;AACA,QAAMK,QAAQ,GAAGD,WAAW,IAAI,GAAf,GAAqBA,WAArB,GAAmC,GAApD;AAEA,sBAAO,QAAC,QAAD;AAAU,IAAA,WAAW,EAAEC,QAAvB;AAAA,OAAqCH;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAND;;GAAMH,a;UACqBD,Q;;;KADrBC,a;AAQN,eAAeA,aAAf","sourcesContent":["import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\nimport { useBlock } from 'state/block/hooks'\r\n\r\ninterface BlockProgressProps extends ProgressProps {\r\n  startBlock: number\r\n  endBlock: number\r\n}\r\n\r\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\r\n  const { currentBlock } = useBlock()\r\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default BlockProgress\r\n"]},"metadata":{},"sourceType":"module"}