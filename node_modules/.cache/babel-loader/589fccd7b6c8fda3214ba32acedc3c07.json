{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolTabButtons.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport ToggleView from './ToggleView/ToggleView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c = ToggleWrapper;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c2 = ViewControls;\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`;\n_c3 = Wrapper;\nconst PoolTabButtons = ({\n  stakedOnly,\n  setStakedOnly,\n  hasStakeInFinishedPools,\n  viewMode,\n  setViewMode\n}) => {\n  _s();\n  const {\n    url,\n    isExact\n  } = useRouteMatch();\n  const {\n    t\n  } = useTranslation();\n  const viewModeToggle = /*#__PURE__*/_jsxDEV(ToggleView, {\n    viewMode: viewMode,\n    onToggle: mode => setViewMode(mode)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 26\n  }, this);\n  const liveOrFinishedSwitch = /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      activeIndex: isExact ? 0 : 1,\n      scale: \"sm\",\n      variant: \"subtle\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n        as: Link,\n        to: `${url}`,\n        children: t('Live')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NotificationDot, {\n        show: hasStakeInFinishedPools,\n        children: /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          as: Link,\n          to: `${url}/history`,\n          children: t('Finished')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n  const stakedOnlySwitch = /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Toggle, {\n      checked: stakedOnly,\n      onChange: () => setStakedOnly(!stakedOnly),\n      scale: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: [\" \", t('Staked only')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ViewControls, {\n    children: [viewModeToggle, stakedOnlySwitch, liveOrFinishedSwitch]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(PoolTabButtons, \"ixiA0dnp5h8c0ijUrkwAcI+orxk=\", false, function () {\n  return [useRouteMatch, useTranslation];\n});\n_c4 = PoolTabButtons;\nexport default PoolTabButtons;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ToggleWrapper\");\n$RefreshReg$(_c2, \"ViewControls\");\n$RefreshReg$(_c3, \"Wrapper\");\n$RefreshReg$(_c4, \"PoolTabButtons\");","map":{"version":3,"names":["React","useRouteMatch","Link","styled","ButtonMenu","ButtonMenuItem","Toggle","Text","NotificationDot","useTranslation","ToggleView","jsxDEV","_jsxDEV","ToggleWrapper","div","_c","ViewControls","theme","mediaQueries","sm","_c2","Wrapper","_c3","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","_s","url","isExact","t","viewModeToggle","onToggle","mode","fileName","_jsxFileName","lineNumber","columnNumber","liveOrFinishedSwitch","children","activeIndex","scale","variant","as","to","show","stakedOnlySwitch","checked","onChange","_c4","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolTabButtons.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedPools}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <ToggleWrapper>\r\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n      <Text> {t('Staked only')}</Text>\r\n    </ToggleWrapper>\r\n  )\r\n\r\n  return (\r\n    <ViewControls>\r\n      {viewModeToggle}\r\n      {stakedOnlySwitch}\r\n      {liveOrFinishedSwitch}\r\n    </ViewControls>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}