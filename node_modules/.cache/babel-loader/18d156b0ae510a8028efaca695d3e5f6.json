{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getActivePools } from 'utils/calls';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport BigNumber from 'bignumber.js';\nimport { getVotingPower } from '../helpers';\nconst initialState = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO\n};\nconst useGetVotingPower = (block, isActive = true) => {\n  _s();\n  const {\n    account\n  } = useWeb3React();\n  const [votingPower, setVotingPower] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(!!account);\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true);\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n        const eligiblePools = await getActivePools(blockNumber);\n        const poolAddresses = eligiblePools.map(({\n          contractAddress\n        }) => getAddress(contractAddress));\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash\n        } = await getVotingPower(account, poolAddresses, blockNumber);\n        if (isActive) {\n          setVotingPower(prevVotingPower => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total)\n          }));\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (account && isActive) {\n      fetchVotingPower();\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading]);\n  return {\n    ...votingPower,\n    isLoading\n  };\n};\n_s(useGetVotingPower, \"XT26o7mNPWR21ECToQ3wCkK+Z1E=\", false, function () {\n  return [useWeb3React];\n});\nexport default useGetVotingPower;","map":{"version":3,"names":["useState","useEffect","useWeb3React","BIG_ZERO","getActivePools","getAddress","simpleRpcProvider","BigNumber","getVotingPower","initialState","verificationHash","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","total","useGetVotingPower","block","isActive","_s","account","votingPower","setVotingPower","isLoading","setIsLoading","fetchVotingPower","blockNumber","getBlockNumber","eligiblePools","poolAddresses","map","contractAddress","prevVotingPower"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Voting/hooks/useGetVotingPower.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n  total: BigNumber\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: BIG_ZERO,\r\n  cakeVaultBalance: BIG_ZERO,\r\n  cakePoolBalance: BIG_ZERO,\r\n  poolsBalance: BIG_ZERO,\r\n  cakeBnbLpBalance: BIG_ZERO,\r\n  total: BIG_ZERO,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: new BigNumber(cakeBalance),\r\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\r\n            cakePoolBalance: new BigNumber(cakePoolBalance),\r\n            poolsBalance: new BigNumber(poolsBalance),\r\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\r\n            total: new BigNumber(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,cAAc,QAAQ,YAAY;AAY3C,MAAMC,YAAmB,GAAG;EAC1BC,gBAAgB,EAAE,IAAI;EACtBC,WAAW,EAAER,QAAQ;EACrBS,gBAAgB,EAAET,QAAQ;EAC1BU,eAAe,EAAEV,QAAQ;EACzBW,YAAY,EAAEX,QAAQ;EACtBY,gBAAgB,EAAEZ,QAAQ;EAC1Ba,KAAK,EAAEb;AACT,CAAC;AAED,MAAMc,iBAAiB,GAAGA,CAACC,KAAc,EAAEC,QAAQ,GAAG,IAAI,KAAqC;EAAAC,EAAA;EAC7F,MAAM;IAAEC;EAAQ,CAAC,GAAGnB,YAAY,CAAC,CAAC;EAClC,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAACS,YAAY,CAAC;EAC5D,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAACqB,OAAO,CAAC;EAErDpB,SAAS,CAAC,MAAM;IACd,MAAMyB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCD,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAME,WAAW,GAAGT,KAAK,KAAK,MAAMZ,iBAAiB,CAACsB,cAAc,CAAC,CAAC,CAAC;QACvE,MAAMC,aAAa,GAAG,MAAMzB,cAAc,CAACuB,WAAW,CAAC;QACvD,MAAMG,aAAa,GAAGD,aAAa,CAACE,GAAG,CAAC,CAAC;UAAEC;QAAgB,CAAC,KAAK3B,UAAU,CAAC2B,eAAe,CAAC,CAAC;QAC7F,MAAM;UACJrB,WAAW;UACXI,gBAAgB;UAChBF,eAAe;UACfG,KAAK;UACLF,YAAY;UACZF,gBAAgB;UAChBF;QACF,CAAC,GAAG,MAAMF,cAAc,CAACa,OAAO,EAAES,aAAa,EAAEH,WAAW,CAAC;QAE7D,IAAIR,QAAQ,EAAE;UACZI,cAAc,CAAEU,eAAe,KAAM;YACnC,GAAGA,eAAe;YAClBvB,gBAAgB;YAChBC,WAAW,EAAE,IAAIJ,SAAS,CAACI,WAAW,CAAC;YACvCI,gBAAgB,EAAE,IAAIR,SAAS,CAACQ,gBAAgB,CAAC;YACjDF,eAAe,EAAE,IAAIN,SAAS,CAACM,eAAe,CAAC;YAC/CC,YAAY,EAAE,IAAIP,SAAS,CAACO,YAAY,CAAC;YACzCF,gBAAgB,EAAE,IAAIL,SAAS,CAACK,gBAAgB,CAAC;YACjDI,KAAK,EAAE,IAAIT,SAAS,CAACS,KAAK;UAC5B,CAAC,CAAC,CAAC;QACL;MACF,CAAC,SAAS;QACRS,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAED,IAAIJ,OAAO,IAAIF,QAAQ,EAAE;MACvBO,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACL,OAAO,EAAEH,KAAK,EAAEK,cAAc,EAAEJ,QAAQ,EAAEM,YAAY,CAAC,CAAC;EAE5D,OAAO;IAAE,GAAGH,WAAW;IAAEE;EAAU,CAAC;AACtC,CAAC;AAAAJ,EAAA,CA9CKH,iBAAiB;EAAA,QACDf,YAAY;AAAA;AA+ClC,eAAee,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}