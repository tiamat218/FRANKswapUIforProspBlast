{"ast":null,"code":"import{ChainId}from'@pancakeswap/sdk';import addresses from'config/constants/contracts';import tokens from'config/constants/tokens';export const getAddress=address=>{const chainId=process.env.REACT_APP_CHAIN_ID;return address[chainId]?address[chainId]:address[ChainId.MAINNET];};export const getCakeAddress=()=>{return getAddress(tokens.cake.address);};export const getMasterChefAddress=()=>{return getAddress(addresses.masterChef);};export const getMulticallAddress=()=>{return getAddress(addresses.multiCall);};export const getWbnbAddress=()=>{return getAddress(tokens.wbnb.address);};export const getLotteryV2Address=()=>{return getAddress(addresses.lotteryV2);};export const getPancakeProfileAddress=()=>{return getAddress(addresses.pancakeProfile);};export const getPancakeRabbitsAddress=()=>{return getAddress(addresses.pancakeRabbits);};export const getBunnyFactoryAddress=()=>{return getAddress(addresses.bunnyFactory);};export const getClaimRefundAddress=()=>{return getAddress(addresses.claimRefund);};export const getPointCenterIfoAddress=()=>{return getAddress(addresses.pointCenterIfo);};export const getBunnySpecialAddress=()=>{return getAddress(addresses.bunnySpecial);};export const getTradingCompetitionAddress=()=>{return getAddress(addresses.tradingCompetition);};export const getEasterNftAddress=()=>{return getAddress(addresses.easterNft);};export const getCakeVaultAddress=()=>{return getAddress(addresses.cakeVault);};export const getPredictionsAddress=()=>{return getAddress(addresses.predictions);};export const getChainlinkOracleAddress=()=>{return getAddress(addresses.chainlinkOracle);};export const getBunnySpecialCakeVaultAddress=()=>{return getAddress(addresses.bunnySpecialCakeVault);};export const getBunnySpecialPredictionAddress=()=>{return getAddress(addresses.bunnySpecialPrediction);};","map":{"version":3,"names":["ChainId","addresses","tokens","getAddress","address","chainId","process","env","REACT_APP_CHAIN_ID","MAINNET","getCakeAddress","cake","getMasterChefAddress","masterChef","getMulticallAddress","multiCall","getWbnbAddress","wbnb","getLotteryV2Address","lotteryV2","getPancakeProfileAddress","pancakeProfile","getPancakeRabbitsAddress","pancakeRabbits","getBunnyFactoryAddress","bunnyFactory","getClaimRefundAddress","claimRefund","getPointCenterIfoAddress","pointCenterIfo","getBunnySpecialAddress","bunnySpecial","getTradingCompetitionAddress","tradingCompetition","getEasterNftAddress","easterNft","getCakeVaultAddress","cakeVault","getPredictionsAddress","predictions","getChainlinkOracleAddress","chainlinkOracle","getBunnySpecialCakeVaultAddress","bunnySpecialCakeVault","getBunnySpecialPredictionAddress","bunnySpecialPrediction"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/addressHelpers.ts"],"sourcesContent":["import { ChainId } from '@pancakeswap/sdk'\r\nimport addresses from 'config/constants/contracts'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\r\n}\r\n\r\nexport const getCakeAddress = () => {\r\n  return getAddress(tokens.cake.address)\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef)\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return getAddress(addresses.multiCall)\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return getAddress(tokens.wbnb.address)\r\n}\r\nexport const getLotteryV2Address = () => {\r\n  return getAddress(addresses.lotteryV2)\r\n}\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile)\r\n}\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits)\r\n}\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory)\r\n}\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund)\r\n}\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo)\r\n}\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial)\r\n}\r\nexport const getTradingCompetitionAddress = () => {\r\n  return getAddress(addresses.tradingCompetition)\r\n}\r\nexport const getEasterNftAddress = () => {\r\n  return getAddress(addresses.easterNft)\r\n}\r\nexport const getCakeVaultAddress = () => {\r\n  return getAddress(addresses.cakeVault)\r\n}\r\nexport const getPredictionsAddress = () => {\r\n  return getAddress(addresses.predictions)\r\n}\r\nexport const getChainlinkOracleAddress = () => {\r\n  return getAddress(addresses.chainlinkOracle)\r\n}\r\nexport const getBunnySpecialCakeVaultAddress = () => {\r\n  return getAddress(addresses.bunnySpecialCakeVault)\r\n}\r\nexport const getBunnySpecialPredictionAddress = () => {\r\n  return getAddress(addresses.bunnySpecialPrediction)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}