{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { simpleRpcProvider } from 'utils/providers';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchCakeVaultPublicData, fetchCakeVaultUserData, fetchCakeVaultFees, fetchPoolsStakingLimitsAsync } from '.';\nimport { transformPool } from './helpers';\nexport const useFetchPublicPoolsData = () => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await simpleRpcProvider.getBlockNumber();\n      dispatch(fetchPoolsPublicDataAsync(blockNumber));\n    };\n\n    fetchPoolsPublicData();\n    dispatch(fetchPoolsStakingLimitsAsync());\n  }, [dispatch, slowRefresh]);\n};\n\n_s(useFetchPublicPoolsData, \"wXP7/5vEIZ/qynMYpAGvmXRZfss=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePools = account => {\n  _s2();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const {\n    pools,\n    userDataLoaded\n  } = useSelector(state => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded\n  }));\n  return {\n    pools: pools.map(transformPool),\n    userDataLoaded\n  };\n};\n\n_s2(usePools, \"VWrZ+2b3tUz/gcjLdR//y/C6C5s=\", false, function () {\n  return [useRefresh, useAppDispatch, useSelector];\n});\n\nexport const useFetchCakeVault = () => {\n  _s3();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData());\n  }, [dispatch, fastRefresh]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({\n      account\n    }));\n  }, [dispatch, fastRefresh, account]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees());\n  }, [dispatch]);\n};\n\n_s3(useFetchCakeVault, \"pDYnJ+ssV2U9HKPEmASotePCeog=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch];\n});\n\nexport const useCakeVault = () => {\n  _s4();\n\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  } = useSelector(state => state.pools.cakeVault);\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString);\n  }, [estimatedCakeBountyRewardAsString]);\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString);\n  }, [totalPendingCakeHarvestAsString]);\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString);\n  }, [totalSharesAsString]);\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString);\n  }, [pricePerFullShareAsString]);\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString);\n  }, [totalCakeInVaultAsString]);\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString);\n  }, [userSharesAsString]);\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString);\n  }, [cakeAtLastUserActionAsString]);\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  };\n};\n\n_s4(useCakeVault, \"3Vp7zWqsjjE5c9nmSgp2ET0HIxc=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/pools/hooks.ts"],"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","simpleRpcProvider","useRefresh","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","fetchPoolsStakingLimitsAsync","transformPool","useFetchPublicPoolsData","dispatch","slowRefresh","fetchPoolsPublicData","blockNumber","getBlockNumber","usePools","account","fastRefresh","pools","userDataLoaded","state","data","map","useFetchCakeVault","useCakeVault","totalShares","totalSharesAsString","pricePerFullShare","pricePerFullShareAsString","totalCakeInVault","totalCakeInVaultAsString","estimatedCakeBountyReward","estimatedCakeBountyRewardAsString","totalPendingCakeHarvest","totalPendingCakeHarvestAsString","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","userSharesAsString","cakeAtLastUserAction","cakeAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","cakeVault"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchCakeVaultFees,\r\n  fetchPoolsStakingLimitsAsync,\r\n} from '.'\r\nimport { State, Pool } from '../types'\r\nimport { transformPool } from './helpers'\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolsPublicData = async () => {\r\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\r\n    }\r\n\r\n    fetchPoolsPublicData()\r\n    dispatch(fetchPoolsStakingLimitsAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\r\n    pools: state.pools.data,\r\n    userDataLoaded: state.pools.userDataLoaded,\r\n  }))\r\n  return { pools: pools.map(transformPool), userDataLoaded }\r\n}\r\n\r\nexport const useFetchCakeVault = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultUserData({ account }))\r\n  }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalCakeInVault: totalCakeInVaultAsString,\r\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\r\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.pools.cakeVault)\r\n\r\n  const estimatedCakeBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyRewardAsString)\r\n  }, [estimatedCakeBountyRewardAsString])\r\n\r\n  const totalPendingCakeHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingCakeHarvestAsString)\r\n  }, [totalPendingCakeHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalCakeInVault = useMemo(() => {\r\n    return new BigNumber(totalCakeInVaultAsString)\r\n  }, [totalCakeInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const cakeAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(cakeAtLastUserActionAsString)\r\n  }, [cakeAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      cakeAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}