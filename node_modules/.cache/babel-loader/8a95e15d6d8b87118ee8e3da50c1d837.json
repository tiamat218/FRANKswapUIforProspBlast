{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { LotteryStatus } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { useEffect, useState } from 'react';\n\nconst useGetNextLotteryEvent = (endTime, status) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const vrfRequestTime = 180; // 3 mins\n\n  const secondsBetweenRounds = 300; // 5 mins\n\n  const transactionResolvingBuffer = 30; // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\n\n  const [nextEvent, setNextEvent] = useState({\n    nextEventTime: null,\n    preCountdownText: null,\n    postCountdownText: null\n  });\n  useEffect(() => {\n    // Current lottery is active\n    if (status === LotteryStatus.OPEN) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer,\n        preCountdownText: null,\n        postCountdownText: t('until the draw')\n      });\n    } // Current lottery has finished but not yet claimable\n\n\n    if (status === LotteryStatus.CLOSE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\n        preCountdownText: t('Winners announced in'),\n        postCountdownText: null\n      });\n    } // Current lottery claimable. Next lottery has not yet started\n\n\n    if (status === LotteryStatus.CLAIMABLE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\n        preCountdownText: t('Tickets on sale in'),\n        postCountdownText: null\n      });\n    }\n  }, [status, endTime, t]);\n  return nextEvent;\n};\n\n_s(useGetNextLotteryEvent, \"6aN8GfO3DRkN5ipm+ZxhvVxpKNo=\", false, function () {\n  return [useTranslation];\n});\n\nexport default useGetNextLotteryEvent;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/hooks/useGetNextLotteryEvent.ts"],"names":["LotteryStatus","useTranslation","useEffect","useState","useGetNextLotteryEvent","endTime","status","t","vrfRequestTime","secondsBetweenRounds","transactionResolvingBuffer","nextEvent","setNextEvent","nextEventTime","preCountdownText","postCountdownText","OPEN","CLOSE","CLAIMABLE"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAQA,MAAMC,sBAAsB,GAAG,CAACC,OAAD,EAAkBC,MAAlB,KAA0D;AAAA;;AACvF,QAAM;AAAEC,IAAAA;AAAF,MAAQN,cAAc,EAA5B;AACA,QAAMO,cAAc,GAAG,GAAvB,CAFuF,CAE5D;;AAC3B,QAAMC,oBAAoB,GAAG,GAA7B,CAHuF,CAGtD;;AACjC,QAAMC,0BAA0B,GAAG,EAAnC,CAJuF,CAIjD;;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC;AAAEU,IAAAA,aAAa,EAAE,IAAjB;AAAuBC,IAAAA,gBAAgB,EAAE,IAAzC;AAA+CC,IAAAA,iBAAiB,EAAE;AAAlE,GAAD,CAA1C;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAII,MAAM,KAAKN,aAAa,CAACgB,IAA7B,EAAmC;AACjCJ,MAAAA,YAAY,CAAC;AACXC,QAAAA,aAAa,EAAER,OAAO,GAAGK,0BADd;AAEXI,QAAAA,gBAAgB,EAAE,IAFP;AAGXC,QAAAA,iBAAiB,EAAER,CAAC,CAAC,gBAAD;AAHT,OAAD,CAAZ;AAKD,KARa,CASd;;;AACA,QAAID,MAAM,KAAKN,aAAa,CAACiB,KAA7B,EAAoC;AAClCL,MAAAA,YAAY,CAAC;AACXC,QAAAA,aAAa,EAAER,OAAO,GAAGK,0BAAV,GAAuCF,cAD3C;AAEXM,QAAAA,gBAAgB,EAAEP,CAAC,CAAC,sBAAD,CAFR;AAGXQ,QAAAA,iBAAiB,EAAE;AAHR,OAAD,CAAZ;AAKD,KAhBa,CAiBd;;;AACA,QAAIT,MAAM,KAAKN,aAAa,CAACkB,SAA7B,EAAwC;AACtCN,MAAAA,YAAY,CAAC;AACXC,QAAAA,aAAa,EAAER,OAAO,GAAGK,0BAAV,GAAuCD,oBAD3C;AAEXK,QAAAA,gBAAgB,EAAEP,CAAC,CAAC,oBAAD,CAFR;AAGXQ,QAAAA,iBAAiB,EAAE;AAHR,OAAD,CAAZ;AAKD;AACF,GAzBQ,EAyBN,CAACT,MAAD,EAASD,OAAT,EAAkBE,CAAlB,CAzBM,CAAT;AA2BA,SAAOI,SAAP;AACD,CAnCD;;GAAMP,sB;UACUH,c;;;AAoChB,eAAeG,sBAAf","sourcesContent":["import { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface LotteryEvent {\r\n  nextEventTime: number\r\n  postCountdownText?: string\r\n  preCountdownText?: string\r\n}\r\n\r\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\r\n  const { t } = useTranslation()\r\n  const vrfRequestTime = 180 // 3 mins\r\n  const secondsBetweenRounds = 300 // 5 mins\r\n  const transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\r\n  const [nextEvent, setNextEvent] = useState({ nextEventTime: null, preCountdownText: null, postCountdownText: null })\r\n\r\n  useEffect(() => {\r\n    // Current lottery is active\r\n    if (status === LotteryStatus.OPEN) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer,\r\n        preCountdownText: null,\r\n        postCountdownText: t('until the draw'),\r\n      })\r\n    }\r\n    // Current lottery has finished but not yet claimable\r\n    if (status === LotteryStatus.CLOSE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\r\n        preCountdownText: t('Winners announced in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n    // Current lottery claimable. Next lottery has not yet started\r\n    if (status === LotteryStatus.CLAIMABLE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\r\n        preCountdownText: t('Tickets on sale in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n  }, [status, endTime, t])\r\n\r\n  return nextEvent\r\n}\r\n\r\nexport default useGetNextLotteryEvent\r\n"]},"metadata":{},"sourceType":"module"}