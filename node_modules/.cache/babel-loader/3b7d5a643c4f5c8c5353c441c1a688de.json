{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\nexport default function useDebouncedChangeHandler(value, onChange, debouncedMs = 100) {\n  _s();\n  const [inner, setInner] = useState(() => value);\n  const timer = useRef();\n  const onChangeInner = useCallback(newValue => {\n    setInner(newValue);\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = setTimeout(() => {\n      onChange(newValue);\n      timer.current = undefined;\n    }, debouncedMs);\n  }, [debouncedMs, onChange]);\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n      timer.current = undefined;\n    }\n    setInner(value);\n  }, [value]);\n  return [inner, onChangeInner];\n}\n_s(useDebouncedChangeHandler, \"hMxW3E4LWgKh3jKpAjrpeYPhb3U=\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useDebouncedChangeHandler","value","onChange","debouncedMs","_s","inner","setInner","timer","onChangeInner","newValue","current","clearTimeout","setTimeout","undefined"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useDebouncedChangeHandler.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,yBAAyBA,CAC/CC,KAAQ,EACRC,QAA+B,EAC/BC,WAAW,GAAG,GAAG,EACQ;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAI,MAAME,KAAK,CAAC;EAClD,MAAMM,KAAK,GAAGT,MAAM,CAAgC,CAAC;EAErD,MAAMU,aAAa,GAAGZ,WAAW,CAC9Ba,QAAW,IAAK;IACfH,QAAQ,CAACG,QAAQ,CAAC;IAClB,IAAIF,KAAK,CAACG,OAAO,EAAE;MACjBC,YAAY,CAACJ,KAAK,CAACG,OAAO,CAAC;IAC7B;IACAH,KAAK,CAACG,OAAO,GAAGE,UAAU,CAAC,MAAM;MAC/BV,QAAQ,CAACO,QAAQ,CAAC;MAClBF,KAAK,CAACG,OAAO,GAAGG,SAAS;IAC3B,CAAC,EAAEV,WAAW,CAAC;EACjB,CAAC,EACD,CAACA,WAAW,EAAED,QAAQ,CACxB,CAAC;EAEDL,SAAS,CAAC,MAAM;IACd,IAAIU,KAAK,CAACG,OAAO,EAAE;MACjBC,YAAY,CAACJ,KAAK,CAACG,OAAO,CAAC;MAC3BH,KAAK,CAACG,OAAO,GAAGG,SAAS;IAC3B;IACAP,QAAQ,CAACL,KAAK,CAAC;EACjB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,OAAO,CAACI,KAAK,EAAEG,aAAa,CAAC;AAC/B;AAACJ,EAAA,CA/BuBJ,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module"}