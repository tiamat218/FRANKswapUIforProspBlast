{"ast":null,"code":"'use strict';\n\nconst {\n  encodeText\n} = require('./util');\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor(name, code, factory, alphabet) {\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode(buf) {\n    return this.codec.encode(buf);\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode(string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n      }\n    }\n    return this.codec.decode(string);\n  }\n}\nmodule.exports = Base;","map":{"version":3,"names":["encodeText","require","Base","constructor","name","code","factory","alphabet","codeBuf","codec","encode","buf","decode","string","char","indexOf","Error","concat","module","exports"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/uint8arrays/node_modules/multibase/src/base.js"],"sourcesContent":["'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACT;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAC1C,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,OAAO,GAAGR,UAAU,CAAC,IAAI,CAACK,IAAI,CAAC;IACpC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,KAAK,GAAGH,OAAO,CAACC,QAAQ,CAAC;EAChC;;EAEA;AACF;AACA;AACA;EACEG,MAAMA,CAAEC,GAAG,EAAE;IACX,OAAO,IAAI,CAACF,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;EACEC,MAAMA,CAAEC,MAAM,EAAE;IACd,KAAK,MAAMC,IAAI,IAAID,MAAM,EAAE;MACzB,IAAI,IAAI,CAACN,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACQ,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC,EAAE;QACpD,MAAM,IAAIE,KAAK,uBAAAC,MAAA,CAAuBH,IAAI,YAAAG,MAAA,CAASJ,MAAM,MAAG,CAAC;MAC/D;IACF;IACA,OAAO,IAAI,CAACJ,KAAK,CAACG,MAAM,CAACC,MAAM,CAAC;EAClC;AACF;AAEAK,MAAM,CAACC,OAAO,GAAGjB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script"}