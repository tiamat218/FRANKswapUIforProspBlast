{"ast":null,"code":"var _s = $RefreshSig$();\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport easterPrizes from 'config/constants/trading-competition/easter';\nimport BigNumber from 'bignumber.js';\nexport const localiseTradingVolume = (value, decimals = 0) => {\n  return value.toLocaleString('en-US', {\n    maximumFractionDigits: decimals\n  });\n};\nexport const useCompetitionCakeRewards = userCakeReward => {\n  _s();\n  const cakeAsBigNumber = new BigNumber(userCakeReward);\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber);\n  const cakePriceBusd = usePriceCakeBusd();\n  return {\n    cakeReward: cakeBalance,\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null\n  };\n};\n\n// 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\n_s(useCompetitionCakeRewards, \"hGPUHk7pPJtm2wPjLczWbuCpA0k=\", false, function () {\n  return [usePriceCakeBusd];\n});\nexport const getRewardGroupAchievements = (userRewardGroup, teamRank = 1) => {\n  const userGroup = easterPrizes[teamRank].filter(prizeGroup => {\n    return prizeGroup.group === userRewardGroup;\n  })[0];\n  const userAchievements = userGroup && userGroup.achievements;\n  return userAchievements;\n};\nexport default localiseTradingVolume;","map":{"version":3,"names":["usePriceCakeBusd","getBalanceNumber","easterPrizes","BigNumber","localiseTradingVolume","value","decimals","toLocaleString","maximumFractionDigits","useCompetitionCakeRewards","userCakeReward","_s","cakeAsBigNumber","cakeBalance","cakePriceBusd","cakeReward","dollarValueOfCakeReward","gt","toNumber","getRewardGroupAchievements","userRewardGroup","teamRank","userGroup","filter","prizeGroup","group","userAchievements","achievements"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/TradingCompetition/helpers.ts"],"sourcesContent":["import { ReactText } from 'react'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport easterPrizes from 'config/constants/trading-competition/easter'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nexport const localiseTradingVolume = (value: number, decimals = 0) => {\r\n  return value.toLocaleString('en-US', { maximumFractionDigits: decimals })\r\n}\r\n\r\nexport const useCompetitionCakeRewards = (userCakeReward: ReactText) => {\r\n  const cakeAsBigNumber = new BigNumber(userCakeReward as string)\r\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  return {\r\n    cakeReward: cakeBalance,\r\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null,\r\n  }\r\n}\r\n\r\n// 1 is a reasonable teamRank default: accessing the first team in the config.\r\n// We use the smart contract userPointReward to get a users' points\r\n// Achievement keys are consistent across different teams regardless of team team rank\r\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\r\nexport const getRewardGroupAchievements = (userRewardGroup: string, teamRank = 1) => {\r\n  const userGroup = easterPrizes[teamRank].filter((prizeGroup) => {\r\n    return prizeGroup.group === userRewardGroup\r\n  })[0]\r\n  const userAchievements = userGroup && userGroup.achievements\r\n  return userAchievements\r\n}\r\n\r\nexport default localiseTradingVolume\r\n"],"mappings":";AACA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,OAAOC,YAAY,MAAM,6CAA6C;AACtE,OAAOC,SAAS,MAAM,cAAc;AAEpC,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,KAAa,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACpE,OAAOD,KAAK,CAACE,cAAc,CAAC,OAAO,EAAE;IAAEC,qBAAqB,EAAEF;EAAS,CAAC,CAAC;AAC3E,CAAC;AAED,OAAO,MAAMG,yBAAyB,GAAIC,cAAyB,IAAK;EAAAC,EAAA;EACtE,MAAMC,eAAe,GAAG,IAAIT,SAAS,CAACO,cAAwB,CAAC;EAC/D,MAAMG,WAAW,GAAGZ,gBAAgB,CAACW,eAAe,CAAC;EACrD,MAAME,aAAa,GAAGd,gBAAgB,CAAC,CAAC;EACxC,OAAO;IACLe,UAAU,EAAEF,WAAW;IACvBG,uBAAuB,EAAEF,aAAa,CAACG,EAAE,CAAC,CAAC,CAAC,GAAGJ,WAAW,GAAGC,aAAa,CAACI,QAAQ,CAAC,CAAC,GAAG;EAC1F,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AAAAP,EAAA,CAbaF,yBAAyB;EAAA,QAGdT,gBAAgB;AAAA;AAWxC,OAAO,MAAMmB,0BAA0B,GAAGA,CAACC,eAAuB,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACnF,MAAMC,SAAS,GAAGpB,YAAY,CAACmB,QAAQ,CAAC,CAACE,MAAM,CAAEC,UAAU,IAAK;IAC9D,OAAOA,UAAU,CAACC,KAAK,KAAKL,eAAe;EAC7C,CAAC,CAAC,CAAC,CAAC,CAAC;EACL,MAAMM,gBAAgB,GAAGJ,SAAS,IAAIA,SAAS,CAACK,YAAY;EAC5D,OAAOD,gBAAgB;AACzB,CAAC;AAED,eAAetB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}