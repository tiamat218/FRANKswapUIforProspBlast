{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\nconst varint = require('varint');\nconst intTable = require('./int-table');\nconst codecNameToCodeVarint = require('./varint-table');\nconst util = require('./util');\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix(multicodecStrOrCode, data) {\n  let prefix;\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix(data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n}\n\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec(prefixedData) {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n  return codecName;\n}\n\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\nfunction getName(codec) {\n  return intTable.get(codec);\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\nfunction getNumber(name) {\n  const code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return varint.decode(code);\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\nfunction getCode(prefixedData) {\n  return varint.decode(prefixedData);\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\nfunction getCodeVarint(codecName) {\n  const code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\nfunction getVarint(code) {\n  return varint.encode(code);\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants');\n\n// Human friendly names for printing, e.g. in error messages\nconst print = require('./print');\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  print,\n  ...constants\n};","map":{"version":3,"names":["varint","require","intTable","codecNameToCodeVarint","util","uint8ArrayConcat","addPrefix","multicodecStrOrCode","data","prefix","Uint8Array","varintUint8ArrayEncode","Error","length","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","concat","getName","codec","getNumber","name","getCode","getCodeVarint","getVarint","encode","constants","print","module","exports"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\nfunction getName (codec) {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\nfunction getNumber (name) {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return varint.decode(code)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\nfunction getCode (prefixedData) {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (codecName) {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\n\n// Human friendly names for printing, e.g. in error messages\nconst print = require('./print')\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  print,\n  ...constants\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}