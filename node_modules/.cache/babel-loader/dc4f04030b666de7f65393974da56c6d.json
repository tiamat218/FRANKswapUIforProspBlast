{"ast":null,"code":"var _s = $RefreshSig$();\nimport { LotteryStatus } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { useEffect, useState } from 'react';\nconst useGetNextLotteryEvent = (endTime, status) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const vrfRequestTime = 180; // 3 mins\n  const secondsBetweenRounds = 300; // 5 mins\n  const transactionResolvingBuffer = 30; // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\n  const [nextEvent, setNextEvent] = useState({\n    nextEventTime: null,\n    preCountdownText: null,\n    postCountdownText: null\n  });\n  useEffect(() => {\n    // Current lottery is active\n    if (status === LotteryStatus.OPEN) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer,\n        preCountdownText: null,\n        postCountdownText: t('until the draw')\n      });\n    }\n    // Current lottery has finished but not yet claimable\n    if (status === LotteryStatus.CLOSE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\n        preCountdownText: t('Winners announced in'),\n        postCountdownText: null\n      });\n    }\n    // Current lottery claimable. Next lottery has not yet started\n    if (status === LotteryStatus.CLAIMABLE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\n        preCountdownText: t('Tickets on sale in'),\n        postCountdownText: null\n      });\n    }\n  }, [status, endTime, t]);\n  return nextEvent;\n};\n_s(useGetNextLotteryEvent, \"6aN8GfO3DRkN5ipm+ZxhvVxpKNo=\", false, function () {\n  return [useTranslation];\n});\nexport default useGetNextLotteryEvent;","map":{"version":3,"names":["LotteryStatus","useTranslation","useEffect","useState","useGetNextLotteryEvent","endTime","status","_s","t","vrfRequestTime","secondsBetweenRounds","transactionResolvingBuffer","nextEvent","setNextEvent","nextEventTime","preCountdownText","postCountdownText","OPEN","CLOSE","CLAIMABLE"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Lottery/hooks/useGetNextLotteryEvent.ts"],"sourcesContent":["import { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface LotteryEvent {\r\n  nextEventTime: number\r\n  postCountdownText?: string\r\n  preCountdownText?: string\r\n}\r\n\r\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\r\n  const { t } = useTranslation()\r\n  const vrfRequestTime = 180 // 3 mins\r\n  const secondsBetweenRounds = 300 // 5 mins\r\n  const transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\r\n  const [nextEvent, setNextEvent] = useState({ nextEventTime: null, preCountdownText: null, postCountdownText: null })\r\n\r\n  useEffect(() => {\r\n    // Current lottery is active\r\n    if (status === LotteryStatus.OPEN) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer,\r\n        preCountdownText: null,\r\n        postCountdownText: t('until the draw'),\r\n      })\r\n    }\r\n    // Current lottery has finished but not yet claimable\r\n    if (status === LotteryStatus.CLOSE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\r\n        preCountdownText: t('Winners announced in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n    // Current lottery claimable. Next lottery has not yet started\r\n    if (status === LotteryStatus.CLAIMABLE) {\r\n      setNextEvent({\r\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\r\n        preCountdownText: t('Tickets on sale in'),\r\n        postCountdownText: null,\r\n      })\r\n    }\r\n  }, [status, endTime, t])\r\n\r\n  return nextEvent\r\n}\r\n\r\nexport default useGetNextLotteryEvent\r\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,wBAAwB;AACtD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAQ3C,MAAMC,sBAAsB,GAAGA,CAACC,OAAe,EAAEC,MAAqB,KAAmB;EAAAC,EAAA;EACvF,MAAM;IAAEC;EAAE,CAAC,GAAGP,cAAc,CAAC,CAAC;EAC9B,MAAMQ,cAAc,GAAG,GAAG,EAAC;EAC3B,MAAMC,oBAAoB,GAAG,GAAG,EAAC;EACjC,MAAMC,0BAA0B,GAAG,EAAE,EAAC;EACtC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC;IAAEW,aAAa,EAAE,IAAI;IAAEC,gBAAgB,EAAE,IAAI;IAAEC,iBAAiB,EAAE;EAAK,CAAC,CAAC;EAEpHd,SAAS,CAAC,MAAM;IACd;IACA,IAAII,MAAM,KAAKN,aAAa,CAACiB,IAAI,EAAE;MACjCJ,YAAY,CAAC;QACXC,aAAa,EAAET,OAAO,GAAGM,0BAA0B;QACnDI,gBAAgB,EAAE,IAAI;QACtBC,iBAAiB,EAAER,CAAC,CAAC,gBAAgB;MACvC,CAAC,CAAC;IACJ;IACA;IACA,IAAIF,MAAM,KAAKN,aAAa,CAACkB,KAAK,EAAE;MAClCL,YAAY,CAAC;QACXC,aAAa,EAAET,OAAO,GAAGM,0BAA0B,GAAGF,cAAc;QACpEM,gBAAgB,EAAEP,CAAC,CAAC,sBAAsB,CAAC;QAC3CQ,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;IACA;IACA,IAAIV,MAAM,KAAKN,aAAa,CAACmB,SAAS,EAAE;MACtCN,YAAY,CAAC;QACXC,aAAa,EAAET,OAAO,GAAGM,0BAA0B,GAAGD,oBAAoB;QAC1EK,gBAAgB,EAAEP,CAAC,CAAC,oBAAoB,CAAC;QACzCQ,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACV,MAAM,EAAED,OAAO,EAAEG,CAAC,CAAC,CAAC;EAExB,OAAOI,SAAS;AAClB,CAAC;AAAAL,EAAA,CAnCKH,sBAAsB;EAAA,QACZH,cAAc;AAAA;AAoC9B,eAAeG,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module"}