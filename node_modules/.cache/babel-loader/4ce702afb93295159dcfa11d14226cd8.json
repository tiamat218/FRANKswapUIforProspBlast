{"ast":null,"code":"import { currencyEquals } from '@pancakeswap/sdk';\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index';\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(tradeA, tradeB, minimumDelta = ZERO_PERCENT) {\n  if (tradeA && !tradeB) return false;\n  if (tradeB && !tradeA) return true;\n  if (!tradeA || !tradeB) return undefined;\n  if (tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)) {\n    throw new Error('Trades are not comparable');\n  }\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\n  }\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\n}\nexport default isTradeBetter;","map":{"version":3,"names":["currencyEquals","ZERO_PERCENT","ONE_HUNDRED_PERCENT","isTradeBetter","tradeA","tradeB","minimumDelta","undefined","tradeType","inputAmount","currency","outputAmount","Error","equalTo","executionPrice","lessThan","raw","multiply","add"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/utils/trades.ts"],"sourcesContent":["import { Trade, Percent, currencyEquals } from '@pancakeswap/sdk'\r\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index'\r\n\r\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\r\nexport function isTradeBetter(\r\n  tradeA: Trade | undefined | null,\r\n  tradeB: Trade | undefined | null,\r\n  minimumDelta: Percent = ZERO_PERCENT,\r\n): boolean | undefined {\r\n  if (tradeA && !tradeB) return false\r\n  if (tradeB && !tradeA) return true\r\n  if (!tradeA || !tradeB) return undefined\r\n\r\n  if (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\r\n  ) {\r\n    throw new Error('Trades are not comparable')\r\n  }\r\n\r\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\r\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\r\n  }\r\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\r\n}\r\n\r\nexport default isTradeBetter\r\n"],"mappings":"AAAA,SAAyBA,cAAc,QAAQ,kBAAkB;AACjE,SAASC,YAAY,EAAEC,mBAAmB,QAAQ,2BAA2B;;AAE7E;AACA,OAAO,SAASC,aAAaA,CAC3BC,MAAgC,EAChCC,MAAgC,EAChCC,YAAqB,GAAGL,YAAY,EACf;EACrB,IAAIG,MAAM,IAAI,CAACC,MAAM,EAAE,OAAO,KAAK;EACnC,IAAIA,MAAM,IAAI,CAACD,MAAM,EAAE,OAAO,IAAI;EAClC,IAAI,CAACA,MAAM,IAAI,CAACC,MAAM,EAAE,OAAOE,SAAS;EAExC,IACEH,MAAM,CAACI,SAAS,KAAKH,MAAM,CAACG,SAAS,IACrC,CAACR,cAAc,CAACI,MAAM,CAACK,WAAW,CAACC,QAAQ,EAAEL,MAAM,CAACI,WAAW,CAACC,QAAQ,CAAC,IACzE,CAACV,cAAc,CAACK,MAAM,CAACM,YAAY,CAACD,QAAQ,EAAEL,MAAM,CAACM,YAAY,CAACD,QAAQ,CAAC,EAC3E;IACA,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAIN,YAAY,CAACO,OAAO,CAACZ,YAAY,CAAC,EAAE;IACtC,OAAOG,MAAM,CAACU,cAAc,CAACC,QAAQ,CAACV,MAAM,CAACS,cAAc,CAAC;EAC9D;EACA,OAAOV,MAAM,CAACU,cAAc,CAACE,GAAG,CAACC,QAAQ,CAACX,YAAY,CAACY,GAAG,CAAChB,mBAAmB,CAAC,CAAC,CAACa,QAAQ,CAACV,MAAM,CAACS,cAAc,CAAC;AAClH;AAEA,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}