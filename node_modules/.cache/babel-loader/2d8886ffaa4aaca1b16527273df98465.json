{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { merge } from 'lodash';\nimport { ProposalState, VotingStateLoadingStatus } from 'state/types';\nimport { getAllVotes, getProposal, getProposals, getVoteVerificationStatuses } from './helpers';\nconst initialState = {\n  proposalLoadingStatus: VotingStateLoadingStatus.INITIAL,\n  proposals: {},\n  voteLoadingStatus: VotingStateLoadingStatus.INITIAL,\n  votes: {}\n}; // Thunks\n\nexport const fetchProposals = createAsyncThunk('voting/fetchProposals', async ({\n  first,\n  skip = 0,\n  state = ProposalState.ACTIVE\n}) => {\n  const response = await getProposals(first, skip, state);\n  return response;\n});\nexport const fetchProposal = createAsyncThunk('voting/fetchProposal', async proposalId => {\n  const response = await getProposal(proposalId);\n  return response;\n});\nexport const fetchVotes = createAsyncThunk('voting/fetchVotes', async ({\n  proposalId,\n  block\n}) => {\n  const response = await getAllVotes(proposalId, block);\n  return {\n    votes: response,\n    proposalId\n  };\n});\nexport const verifyVotes = createAsyncThunk('voting/verifyVotes', async ({\n  proposalId,\n  snapshot\n}, {\n  getState\n}) => {\n  const state = getState();\n  const proposalVotes = state.voting.votes[proposalId];\n  const response = await getVoteVerificationStatuses(proposalVotes, Number(snapshot));\n  return {\n    results: response,\n    proposalId\n  };\n});\nexport const votingSlice = createSlice({\n  name: 'voting',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // Verify Votes\n    builder.addCase(verifyVotes.fulfilled, (state, action) => {\n      const {\n        proposalId,\n        results\n      } = action.payload;\n\n      if (state.votes[proposalId]) {\n        state.votes[proposalId] = state.votes[proposalId].map(vote => {\n          return { ...vote,\n            _inValid: results[vote.id] === false\n          };\n        });\n      }\n    }); // Fetch Proposals\n\n    builder.addCase(fetchProposals.pending, state => {\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING;\n    });\n    builder.addCase(fetchProposals.fulfilled, (state, action) => {\n      const proposals = action.payload.reduce((accum, proposal) => {\n        return { ...accum,\n          [proposal.id]: proposal\n        };\n      }, {});\n      state.proposals = merge({}, state.proposals, proposals);\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE;\n    }); // Fetch Proposal\n\n    builder.addCase(fetchProposal.pending, state => {\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING;\n    });\n    builder.addCase(fetchProposal.fulfilled, (state, action) => {\n      state.proposals[action.payload.id] = action.payload;\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE;\n    }); // Fetch Votes\n\n    builder.addCase(fetchVotes.pending, state => {\n      state.voteLoadingStatus = VotingStateLoadingStatus.LOADING;\n    });\n    builder.addCase(fetchVotes.fulfilled, (state, action) => {\n      const {\n        votes,\n        proposalId\n      } = action.payload;\n      state.votes = { ...state.votes,\n        [proposalId]: votes\n      };\n      state.voteLoadingStatus = VotingStateLoadingStatus.IDLE;\n    });\n  }\n});\nexport default votingSlice.reducer;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/voting/index.tsx"],"names":["createAsyncThunk","createSlice","merge","ProposalState","VotingStateLoadingStatus","getAllVotes","getProposal","getProposals","getVoteVerificationStatuses","initialState","proposalLoadingStatus","INITIAL","proposals","voteLoadingStatus","votes","fetchProposals","first","skip","state","ACTIVE","response","fetchProposal","proposalId","fetchVotes","block","verifyVotes","snapshot","getState","proposalVotes","voting","Number","results","votingSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","map","vote","_inValid","id","pending","LOADING","reduce","accum","proposal","IDLE","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { merge } from 'lodash'\r\nimport { Proposal, ProposalState, VotingStateLoadingStatus, VotingState, Vote, State } from 'state/types'\r\nimport { getAllVotes, getProposal, getProposals, getVoteVerificationStatuses } from './helpers'\r\n\r\nconst initialState: VotingState = {\r\n  proposalLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  proposals: {},\r\n  voteLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  votes: {},\r\n}\r\n\r\n// Thunks\r\nexport const fetchProposals = createAsyncThunk<Proposal[], { first?: number; skip?: number; state?: ProposalState }>(\r\n  'voting/fetchProposals',\r\n  async ({ first, skip = 0, state = ProposalState.ACTIVE }) => {\r\n    const response = await getProposals(first, skip, state)\r\n    return response\r\n  },\r\n)\r\n\r\nexport const fetchProposal = createAsyncThunk<Proposal, string>('voting/fetchProposal', async (proposalId) => {\r\n  const response = await getProposal(proposalId)\r\n  return response\r\n})\r\n\r\nexport const fetchVotes = createAsyncThunk<\r\n  { votes: Vote[]; proposalId: string },\r\n  { proposalId: string; block?: number }\r\n>('voting/fetchVotes', async ({ proposalId, block }) => {\r\n  const response = await getAllVotes(proposalId, block)\r\n  return { votes: response, proposalId }\r\n})\r\n\r\nexport const verifyVotes = createAsyncThunk<\r\n  { results: { [key: string]: boolean }; proposalId: string },\r\n  { proposalId: string; snapshot?: string },\r\n  { state: State }\r\n>('voting/verifyVotes', async ({ proposalId, snapshot }, { getState }) => {\r\n  const state = getState()\r\n  const proposalVotes = state.voting.votes[proposalId]\r\n  const response = await getVoteVerificationStatuses(proposalVotes, Number(snapshot))\r\n  return { results: response, proposalId }\r\n})\r\n\r\nexport const votingSlice = createSlice({\r\n  name: 'voting',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Verify Votes\r\n    builder.addCase(verifyVotes.fulfilled, (state, action) => {\r\n      const { proposalId, results } = action.payload\r\n\r\n      if (state.votes[proposalId]) {\r\n        state.votes[proposalId] = state.votes[proposalId].map((vote) => {\r\n          return {\r\n            ...vote,\r\n            _inValid: results[vote.id] === false,\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    // Fetch Proposals\r\n    builder.addCase(fetchProposals.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposals.fulfilled, (state, action) => {\r\n      const proposals = action.payload.reduce((accum, proposal) => {\r\n        return {\r\n          ...accum,\r\n          [proposal.id]: proposal,\r\n        }\r\n      }, {})\r\n\r\n      state.proposals = merge({}, state.proposals, proposals)\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Proposal\r\n    builder.addCase(fetchProposal.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposal.fulfilled, (state, action) => {\r\n      state.proposals[action.payload.id] = action.payload\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Votes\r\n    builder.addCase(fetchVotes.pending, (state) => {\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchVotes.fulfilled, (state, action) => {\r\n      const { votes, proposalId } = action.payload\r\n\r\n      state.votes = {\r\n        ...state.votes,\r\n        [proposalId]: votes,\r\n      }\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n  },\r\n})\r\n\r\nexport default votingSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}