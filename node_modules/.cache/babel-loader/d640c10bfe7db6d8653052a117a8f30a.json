{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { ProposalType } from 'state/types';\nimport { simpleRpcProvider } from 'utils/providers';\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config';\nexport const isCoreProposal = proposal => {\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase();\n};\nexport const filterProposalsByType = (proposals, proposalType) => {\n  switch (proposalType) {\n    case ProposalType.COMMUNITY:\n      return proposals.filter(proposal => !isCoreProposal(proposal));\n\n    case ProposalType.CORE:\n      return proposals.filter(proposal => isCoreProposal(proposal));\n\n    case ProposalType.ALL:\n    default:\n      return proposals;\n  }\n};\nexport const filterProposalsByState = (proposals, state) => {\n  return proposals.filter(proposal => proposal.state === state);\n};\n\n/**\r\n * Generates metadata required by snapshot to validate payload\r\n */\nexport const generateMetaData = () => {\n  return {\n    plugins: {},\n    network: 56,\n    strategies: [{\n      name: 'cake',\n      params: {\n        symbol: 'CAKE',\n        address: getCakeAddress(),\n        decimals: 18\n      }\n    }]\n  };\n};\n/**\r\n * Returns data that is required on all snapshot payloads\r\n */\n\nexport const generatePayloadData = () => {\n  return {\n    version: SNAPSHOT_VERSION,\n    timestamp: (Date.now() / 1e3).toFixed(),\n    space: PANCAKE_SPACE\n  };\n};\n/**\r\n * General function to send commands to the snapshot api\r\n */\n\nexport const sendSnaphotData = async message => {\n  const response = await fetch(SNAPSHOT_HUB_API, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(message)\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error === null || error === void 0 ? void 0 : error.error_description);\n  }\n\n  const data = await response.json();\n  return data;\n};\nexport const getVotingPower = async (account, poolAddresses, block) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      address: account,\n      block: blockNumber,\n      poolAddresses\n    })\n  });\n  const data = await response.json();\n  return data.data;\n};\nexport const calculateVoteResults = votes => {\n  return votes.reduce((accum, vote) => {\n    const choiceText = vote.proposal.choices[vote.choice - 1];\n    return { ...accum,\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote]\n    };\n  }, {});\n};\nexport const getTotalFromVotes = votes => {\n  return votes.reduce((accum, vote) => {\n    var _vote$metadata;\n\n    const power = new BigNumber((_vote$metadata = vote.metadata) === null || _vote$metadata === void 0 ? void 0 : _vote$metadata.votingPower);\n    return accum.plus(power);\n  }, BIG_ZERO);\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Voting/helpers.ts"],"names":["BigNumber","getCakeAddress","SNAPSHOT_HUB_API","SNAPSHOT_VOTING_API","BIG_ZERO","ProposalType","simpleRpcProvider","ADMIN_ADDRESS","PANCAKE_SPACE","SNAPSHOT_VERSION","isCoreProposal","proposal","author","toLowerCase","filterProposalsByType","proposals","proposalType","COMMUNITY","filter","CORE","ALL","filterProposalsByState","state","generateMetaData","plugins","network","strategies","name","params","symbol","address","decimals","generatePayloadData","version","timestamp","Date","now","toFixed","space","sendSnaphotData","message","response","fetch","method","headers","Accept","body","JSON","stringify","ok","error","json","Error","error_description","data","getVotingPower","account","poolAddresses","block","blockNumber","getBlockNumber","calculateVoteResults","votes","reduce","accum","vote","choiceText","choices","choice","getTotalFromVotes","power","metadata","votingPower","plus"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,4BAAtD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAAkCC,YAAlC,QAA4D,aAA5D;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,gBAAvC,QAA+D,UAA/D;AAEA,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAwB;AACpD,SAAOA,QAAQ,CAACC,MAAT,CAAgBC,WAAhB,OAAkCN,aAAa,CAACM,WAAd,EAAzC;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAG,CAACC,SAAD,EAAwBC,YAAxB,KAAuD;AAC1F,UAAQA,YAAR;AACE,SAAKX,YAAY,CAACY,SAAlB;AACE,aAAOF,SAAS,CAACG,MAAV,CAAkBP,QAAD,IAAc,CAACD,cAAc,CAACC,QAAD,CAA9C,CAAP;;AACF,SAAKN,YAAY,CAACc,IAAlB;AACE,aAAOJ,SAAS,CAACG,MAAV,CAAkBP,QAAD,IAAcD,cAAc,CAACC,QAAD,CAA7C,CAAP;;AACF,SAAKN,YAAY,CAACe,GAAlB;AACA;AACE,aAAOL,SAAP;AAPJ;AASD,CAVM;AAYP,OAAO,MAAMM,sBAAsB,GAAG,CAACN,SAAD,EAAwBO,KAAxB,KAAiD;AACrF,SAAOP,SAAS,CAACG,MAAV,CAAkBP,QAAD,IAAcA,QAAQ,CAACW,KAAT,KAAmBA,KAAlD,CAAP;AACD,CAFM;;AAUP;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACLC,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLC,IAAAA,UAAU,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,OAAO,EAAE7B,cAAc,EAAzC;AAA6C8B,QAAAA,QAAQ,EAAE;AAAvD;AAAxB,KAAD;AAHP,GAAP;AAKD,CANM;AAQP;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLC,IAAAA,OAAO,EAAExB,gBADJ;AAELyB,IAAAA,SAAS,EAAE,CAACC,IAAI,CAACC,GAAL,KAAa,GAAd,EAAmBC,OAAnB,EAFN;AAGLC,IAAAA,KAAK,EAAE9B;AAHF,GAAP;AAKD,CANM;AAQP;AACA;AACA;;AACA,OAAO,MAAM+B,eAAe,GAAG,MAAOC,OAAP,IAA4B;AACzD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACxC,gBAAD,EAAmB;AAC7CyC,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFoC;AAM7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AANuC,GAAnB,CAA5B;;AASA,MAAI,CAACC,QAAQ,CAACQ,EAAd,EAAkB;AAChB,UAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAApB;AACA,UAAM,IAAIC,KAAJ,CAAUF,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEG,iBAAjB,CAAN;AACD;;AAED,QAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAT,EAAnB;AACA,SAAOG,IAAP;AACD,CAjBM;AAmBP,OAAO,MAAMC,cAAc,GAAG,OAAOC,OAAP,EAAwBC,aAAxB,EAAiDC,KAAjD,KAAoE;AAChG,QAAMC,WAAW,GAAGD,KAAK,KAAK,MAAMpD,iBAAiB,CAACsD,cAAlB,EAAX,CAAzB;AACA,QAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEvC,mBAAoB,QAAxB,EAAiC;AAC3DwC,IAAAA,MAAM,EAAE,MADmD;AAE3DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFkD;AAK3DE,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBlB,MAAAA,OAAO,EAAE0B,OADU;AAEnBE,MAAAA,KAAK,EAAEC,WAFY;AAGnBF,MAAAA;AAHmB,KAAf;AALqD,GAAjC,CAA5B;AAWA,QAAMH,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAT,EAAnB;AACA,SAAOG,IAAI,CAACA,IAAZ;AACD,CAfM;AAiBP,OAAO,MAAMO,oBAAoB,GAAIC,KAAD,IAA8C;AAChF,SAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACnC,UAAMC,UAAU,GAAGD,IAAI,CAACtD,QAAL,CAAcwD,OAAd,CAAsBF,IAAI,CAACG,MAAL,GAAc,CAApC,CAAnB;AAEA,WAAO,EACL,GAAGJ,KADE;AAEL,OAACE,UAAD,GAAcF,KAAK,CAACE,UAAD,CAAL,GAAoB,CAAC,GAAGF,KAAK,CAACE,UAAD,CAAT,EAAuBD,IAAvB,CAApB,GAAmD,CAACA,IAAD;AAF5D,KAAP;AAID,GAPM,EAOJ,EAPI,CAAP;AAQD,CATM;AAWP,OAAO,MAAMI,iBAAiB,GAAIP,KAAD,IAAmB;AAClD,SAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AACnC,UAAMK,KAAK,GAAG,IAAItE,SAAJ,mBAAciE,IAAI,CAACM,QAAnB,mDAAc,eAAeC,WAA7B,CAAd;AACA,WAAOR,KAAK,CAACS,IAAN,CAAWH,KAAX,CAAP;AACD,GAHM,EAGJlE,QAHI,CAAP;AAID,CALM","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { SNAPSHOT_HUB_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { Proposal, ProposalState, ProposalType, Vote } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { ADMIN_ADDRESS, PANCAKE_SPACE, SNAPSHOT_VERSION } from './config'\r\n\r\nexport const isCoreProposal = (proposal: Proposal) => {\r\n  return proposal.author.toLowerCase() === ADMIN_ADDRESS.toLowerCase()\r\n}\r\n\r\nexport const filterProposalsByType = (proposals: Proposal[], proposalType: ProposalType) => {\r\n  switch (proposalType) {\r\n    case ProposalType.COMMUNITY:\r\n      return proposals.filter((proposal) => !isCoreProposal(proposal))\r\n    case ProposalType.CORE:\r\n      return proposals.filter((proposal) => isCoreProposal(proposal))\r\n    case ProposalType.ALL:\r\n    default:\r\n      return proposals\r\n  }\r\n}\r\n\r\nexport const filterProposalsByState = (proposals: Proposal[], state: ProposalState) => {\r\n  return proposals.filter((proposal) => proposal.state === state)\r\n}\r\n\r\nexport interface Message {\r\n  address: string\r\n  msg: string\r\n  sig: string\r\n}\r\n\r\n/**\r\n * Generates metadata required by snapshot to validate payload\r\n */\r\nexport const generateMetaData = () => {\r\n  return {\r\n    plugins: {},\r\n    network: 56,\r\n    strategies: [{ name: 'cake', params: { symbol: 'CAKE', address: getCakeAddress(), decimals: 18 } }],\r\n  }\r\n}\r\n\r\n/**\r\n * Returns data that is required on all snapshot payloads\r\n */\r\nexport const generatePayloadData = () => {\r\n  return {\r\n    version: SNAPSHOT_VERSION,\r\n    timestamp: (Date.now() / 1e3).toFixed(),\r\n    space: PANCAKE_SPACE,\r\n  }\r\n}\r\n\r\n/**\r\n * General function to send commands to the snapshot api\r\n */\r\nexport const sendSnaphotData = async (message: Message) => {\r\n  const response = await fetch(SNAPSHOT_HUB_API, {\r\n    method: 'post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json()\r\n    throw new Error(error?.error_description)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getVotingPower = async (account: string, poolAddresses: string[], block?: number) => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/power`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      address: account,\r\n      block: blockNumber,\r\n      poolAddresses,\r\n    }),\r\n  })\r\n  const data = await response.json()\r\n  return data.data\r\n}\r\n\r\nexport const calculateVoteResults = (votes: Vote[]): { [key: string]: Vote[] } => {\r\n  return votes.reduce((accum, vote) => {\r\n    const choiceText = vote.proposal.choices[vote.choice - 1]\r\n\r\n    return {\r\n      ...accum,\r\n      [choiceText]: accum[choiceText] ? [...accum[choiceText], vote] : [vote],\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getTotalFromVotes = (votes: Vote[]) => {\r\n  return votes.reduce((accum, vote) => {\r\n    const power = new BigNumber(vote.metadata?.votingPower)\r\n    return accum.plus(power)\r\n  }, BIG_ZERO)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}