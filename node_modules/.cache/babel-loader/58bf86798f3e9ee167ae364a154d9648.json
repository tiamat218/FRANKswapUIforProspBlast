{"ast":null,"code":"/* eslint-disable no-continue */\n/* eslint-disable no-await-in-loop */\n\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './ENS/parseENSAddress';\nimport uriToHttp from './uriToHttp';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\nconst TARGET_CHAIN_ID = 81457;\n\n/**\r\n * Filters tokens based on the TARGET_CHAIN_ID\r\n * @param list TokenList\r\n */\nconst filterTokensByChainId = list => {\n  const filteredTokens = list.tokens.filter(token => token.chainId === TARGET_CHAIN_ID);\n  return {\n    ...list,\n    tokens: filteredTokens\n  };\n};\n\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  const parsedENS = parseENSAddress(listUrl);\n  let urls;\n  if (parsedENS) {\n    var _parsedENS$ensPath;\n    let contentHashUri;\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n    let translatedUri;\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.error('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n    urls = uriToHttp(`${translatedUri}${(_parsedENS$ensPath = parsedENS.ensPath) !== null && _parsedENS$ensPath !== void 0 ? _parsedENS$ensPath : ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.error('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      continue;\n    }\n    const json = await response.json();\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n      const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n    const filteredList = filterTokensByChainId(json);\n    return filteredList;\n  }\n  throw new Error('Unrecognized list URL protocol.');\n}","map":{"version":3,"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","tokenListValidator","allErrors","compile","TARGET_CHAIN_ID","filterTokensByChainId","list","filteredTokens","tokens","filter","token","chainId","getTokenList","listUrl","resolveENSContentHash","parsedENS","urls","_parsedENS$ensPath","contentHashUri","ensName","error","console","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","dataPath","message","filteredList"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/getTokenList.ts"],"sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-await-in-loop */\r\nimport { TokenList, TokenInfo } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './ENS/parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\nconst TARGET_CHAIN_ID = 81457\r\n\r\n/**\r\n * Filters tokens based on the TARGET_CHAIN_ID\r\n * @param list TokenList\r\n */\r\nconst filterTokensByChainId = (list: TokenList): TokenList => {\r\n  const filteredTokens = list.tokens.filter((token: TokenInfo) => token.chainId === TARGET_CHAIN_ID)\r\n  return { ...list, tokens: filteredTokens }\r\n}\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>,\r\n): Promise<TokenList> {\r\n  const parsedENS = parseENSAddress(listUrl)\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${(error as any).dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    const filteredList = filterTokensByChainId(json as TokenList)\r\n    return filteredList\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}