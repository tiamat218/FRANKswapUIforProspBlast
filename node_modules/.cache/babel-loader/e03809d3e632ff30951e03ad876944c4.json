{"ast":null,"code":"import{useEffect}from'react';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{farmsConfig}from'config/constants';import useRefresh from'hooks/useRefresh';import{fetchFarmsPublicDataAsync,fetchFarmUserDataAsync,nonArchivedFarms}from'.';export const usePollFarmsData=function(){let includeArchive=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const dispatch=useAppDispatch();const{slowRefresh}=useRefresh();const{account}=useWeb3React();useEffect(()=>{const farmsToFetch=includeArchive?farmsConfig:nonArchivedFarms;const pids=farmsToFetch.map(farmToFetch=>farmToFetch.pid);dispatch(fetchFarmsPublicDataAsync(pids));if(account){dispatch(fetchFarmUserDataAsync({account,pids}));}},[includeArchive,dispatch,slowRefresh,account]);};/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */export const usePollCoreFarmData=()=>{const dispatch=useAppDispatch();const{fastRefresh}=useRefresh();useEffect(()=>{dispatch(fetchFarmsPublicDataAsync([0,1]));// pool ids for token BNB and token USD pool \n},[dispatch,fastRefresh]);};export const useFarms=()=>{const farms=useSelector(state=>state.farms);return farms;};export const useFarmFromPid=pid=>{const farm=useSelector(state=>state.farms.data.find(f=>f.pid===pid));return farm;};export const useFarmFromLpSymbol=lpSymbol=>{const farm=useSelector(state=>state.farms.data.find(f=>f.lpSymbol===lpSymbol));return farm;};export const useFarmUser=pid=>{const farm=useFarmFromPid(pid);return{allowance:farm.userData?new BigNumber(farm.userData.allowance):BIG_ZERO,tokenBalance:farm.userData?new BigNumber(farm.userData.tokenBalance):BIG_ZERO,stakedBalance:farm.userData?new BigNumber(farm.userData.stakedBalance):BIG_ZERO,earnings:farm.userData?new BigNumber(farm.userData.earnings):BIG_ZERO};};// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid=pid=>{const farm=useFarmFromPid(pid);return farm&&new BigNumber(farm.token.busdPrice);};export const useLpTokenPrice=symbol=>{const farm=useFarmFromLpSymbol(symbol);const farmTokenPriceInUsd=useBusdPriceFromPid(farm.pid);let lpTokenPrice=BIG_ZERO;if(farm.lpTotalSupply&&farm.lpTotalInQuoteToken){// Total value of base token in LP\nconst valueOfBaseTokenInFarm=farmTokenPriceInUsd.times(farm.tokenAmountTotal);// Double it to get overall value in LP\nconst overallValueOfAllTokensInFarm=valueOfBaseTokenInFarm.times(2);// Divide total value of all tokens, by the number of LP tokens\nconst totalLpTokens=getBalanceAmount(new BigNumber(farm.lpTotalSupply));lpTokenPrice=overallValueOfAllTokensInFarm.div(totalLpTokens);}return lpTokenPrice;};// /!\\ Deprecated , use the BUSD hook in /hooks\nexport const usePriceBnbBusd=()=>{// const bnbBusdFarm = useFarmFromPid(252)\nreturn new BigNumber(500);};export const usePriceCakeBusd=()=>{// const cakeBnbFarm = useFarmFromPid(251)\nreturn new BigNumber(100);};","map":{"version":3,"names":["useEffect","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","arguments","length","undefined","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","usePriceCakeBusd"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/hooks.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\r\nimport { State, Farm, FarmsState } from '../types'\r\n\r\nexport const usePollFarmsData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 251 = CAKE-BNB LP\r\n * 252 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([0, 1]))  // pool ids for token BNB and token USD pool \r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\r\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// /!\\ Deprecated , use the BUSD hook in /hooks\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n // const bnbBusdFarm = useFarmFromPid(252)\r\n  return new BigNumber(500)\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n // const cakeBnbFarm = useFarmFromPid(251)\r\n  return new BigNumber(100)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}