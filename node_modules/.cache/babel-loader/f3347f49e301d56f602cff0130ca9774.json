{"ast":null,"code":"/* eslint-disable no-continue */ /* eslint-disable no-await-in-loop */import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import contenthashToUri from'./contenthashToUri';import{parseENSAddress}from'./ENS/parseENSAddress';import uriToHttp from'./uriToHttp';const tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */export default async function getTokenList(listUrl,resolveENSContentHash){const parsedENS=parseENSAddress(listUrl);let urls;if(parsedENS){var _parsedENS$ensPath;let contentHashUri;try{contentHashUri=await resolveENSContentHash(parsedENS.ensName);}catch(error){console.error(\"Failed to resolve ENS name: \".concat(parsedENS.ensName),error);throw new Error(\"Failed to resolve ENS name: \".concat(parsedENS.ensName));}let translatedUri;try{translatedUri=contenthashToUri(contentHashUri);}catch(error){console.error('Failed to translate contenthash to URI',contentHashUri);throw new Error(\"Failed to translate contenthash to URI: \".concat(contentHashUri));}urls=uriToHttp(\"\".concat(translatedUri).concat((_parsedENS$ensPath=parsedENS.ensPath)!==null&&_parsedENS$ensPath!==void 0?_parsedENS$ensPath:''));}else{urls=uriToHttp(listUrl);}for(let i=0;i<urls.length;i++){const url=urls[i];const isLast=i===urls.length-1;let response;try{response=await fetch(url);}catch(error){console.error('Failed to fetch list',listUrl,error);if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}if(!response.ok){if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}const json=await response.json();if(!tokenListValidator(json)){var _tokenListValidator$e,_tokenListValidator$e2;const validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce((memo,error)=>{var _error$message;const add=\"\".concat(error.dataPath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));}return json;}throw new Error('Unrecognized list URL protocol.');}","map":{"version":3,"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","urls","_parsedENS$ensPath","contentHashUri","ensName","error","console","concat","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","dataPath","message"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/getTokenList.ts"],"sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-await-in-loop */\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './ENS/parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>,\r\n): Promise<TokenList> {\r\n  const parsedENS = parseENSAddress(listUrl)\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${(error as any).dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json as TokenList\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"],"mappings":"AAAA,iCACA,qCAEA,MAAO,CAAAA,MAAM,KAAM,gDAAgD,CACnE,MAAO,CAAAC,GAAG,KAAM,KAAK,CACrB,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,OAASC,eAAe,KAAQ,uBAAuB,CACvD,MAAO,CAAAC,SAAS,KAAM,aAAa,CAEnC,KAAM,CAAAC,kBAAkB,CAAG,GAAI,CAAAJ,GAAG,CAAC,CAAEK,SAAS,CAAE,IAAK,CAAC,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,CAEvE;AACA;AACA;AACA;AACA,GACA,cAAe,eAAe,CAAAQ,YAAYA,CACxCC,OAAe,CACfC,qBAA2D,CACvC,CACpB,KAAM,CAAAC,SAAS,CAAGR,eAAe,CAACM,OAAO,CAAC,CAC1C,GAAI,CAAAG,IAAc,CAClB,GAAID,SAAS,CAAE,KAAAE,kBAAA,CACb,GAAI,CAAAC,cAAc,CAClB,GAAI,CACFA,cAAc,CAAG,KAAM,CAAAJ,qBAAqB,CAACC,SAAS,CAACI,OAAO,CAAC,CACjE,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,gCAAAE,MAAA,CAAgCP,SAAS,CAACI,OAAO,EAAIC,KAAK,CAAC,CACxE,KAAM,IAAI,CAAAG,KAAK,gCAAAD,MAAA,CAAgCP,SAAS,CAACI,OAAO,CAAE,CAAC,CACrE,CACA,GAAI,CAAAK,aAAa,CACjB,GAAI,CACFA,aAAa,CAAGlB,gBAAgB,CAACY,cAAc,CAAC,CAClD,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAEF,cAAc,CAAC,CACvE,KAAM,IAAI,CAAAK,KAAK,4CAAAD,MAAA,CAA4CJ,cAAc,CAAE,CAAC,CAC9E,CACAF,IAAI,CAAGR,SAAS,IAAAc,MAAA,CAAIE,aAAa,EAAAF,MAAA,EAAAL,kBAAA,CAAGF,SAAS,CAACU,OAAO,UAAAR,kBAAA,UAAAA,kBAAA,CAAI,EAAE,CAAE,CAAC,CAChE,CAAC,IAAM,CACLD,IAAI,CAAGR,SAAS,CAACK,OAAO,CAAC,CAC3B,CACA,IAAK,GAAI,CAAAa,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,IAAI,CAACW,MAAM,CAAED,CAAC,EAAE,CAAE,CACpC,KAAM,CAAAE,GAAG,CAAGZ,IAAI,CAACU,CAAC,CAAC,CACnB,KAAM,CAAAG,MAAM,CAAGH,CAAC,GAAKV,IAAI,CAACW,MAAM,CAAG,CAAC,CACpC,GAAI,CAAAG,QAAQ,CACZ,GAAI,CACFA,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAC,CAC7B,CAAE,MAAOR,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEP,OAAO,CAAEO,KAAK,CAAC,CACrD,GAAIS,MAAM,CAAE,KAAM,IAAI,CAAAN,KAAK,4BAAAD,MAAA,CAA4BT,OAAO,CAAE,CAAC,CACjE,SACF,CAEA,GAAI,CAACiB,QAAQ,CAACE,EAAE,CAAE,CAChB,GAAIH,MAAM,CAAE,KAAM,IAAI,CAAAN,KAAK,4BAAAD,MAAA,CAA4BT,OAAO,CAAE,CAAC,CACjE,SACF,CAEA,KAAM,CAAAoB,IAAI,CAAG,KAAM,CAAAH,QAAQ,CAACG,IAAI,CAAC,CAAC,CAClC,GAAI,CAACxB,kBAAkB,CAACwB,IAAI,CAAC,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CAC7B,KAAM,CAAAC,gBAAwB,EAAAF,qBAAA,EAAAC,sBAAA,CAC5B1B,kBAAkB,CAAC4B,MAAM,UAAAF,sBAAA,iBAAzBA,sBAAA,CAA2BG,MAAM,CAAS,CAACC,IAAI,CAAEnB,KAAK,GAAK,KAAAoB,cAAA,CACzD,KAAM,CAAAC,GAAG,IAAAnB,MAAA,CAAOF,KAAK,CAASsB,QAAQ,MAAApB,MAAA,EAAAkB,cAAA,CAAIpB,KAAK,CAACuB,OAAO,UAAAH,cAAA,UAAAA,cAAA,CAAI,EAAE,CAAE,CAC/D,MAAO,CAAAD,IAAI,CAACZ,MAAM,CAAG,CAAC,IAAAL,MAAA,CAAMiB,IAAI,OAAAjB,MAAA,CAAKmB,GAAG,KAAAnB,MAAA,CAAQmB,GAAG,CAAE,CACvD,CAAC,CAAE,EAAE,CAAC,UAAAP,qBAAA,UAAAA,qBAAA,CAAI,eAAe,CAC3B,KAAM,IAAI,CAAAX,KAAK,kCAAAD,MAAA,CAAkCc,gBAAgB,CAAE,CAAC,CACtE,CACA,MAAO,CAAAH,IAAI,CACb,CACA,KAAM,IAAI,CAAAV,KAAK,CAAC,iCAAiC,CAAC,CACpD","ignoreList":[]},"metadata":{},"sourceType":"module"}