{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString();\n\n  if (pid === 0) {\n    const tx = await masterChefContract.enterStaking(value, options);\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.deposit(pid, value, options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString();\n\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking(value, options);\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.withdraw(pid, value, options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const harvestFarm = async (masterChefContract, pid) => {\n  if (pid === 0) {\n    const tx = await await masterChefContract.leaveStaking('0', options);\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.deposit(pid, '0', options);\n  const receipt = await tx.wait();\n  return receipt.status;\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/calls/farms.ts"],"names":["BigNumber","DEFAULT_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","options","gasLimit","stakeFarm","masterChefContract","pid","amount","value","times","toString","tx","enterStaking","receipt","wait","status","deposit","unstakeFarm","leaveStaking","withdraw","harvestFarm"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,QAAzD;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAEH;AADI,CAAhB;AAIA,OAAO,MAAMI,SAAS,GAAG,OAAOC,kBAAP,EAA2BC,GAA3B,EAAgCC,MAAhC,KAA2C;AAClE,QAAMC,KAAK,GAAG,IAAIT,SAAJ,CAAcQ,MAAd,EAAsBE,KAAtB,CAA4BR,qBAA5B,EAAmDS,QAAnD,EAAd;;AACA,MAAIJ,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMK,EAAE,GAAG,MAAMN,kBAAkB,CAACO,YAAnB,CAAgCJ,KAAhC,EAAuCN,OAAvC,CAAjB;AACA,UAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMN,kBAAkB,CAACW,OAAnB,CAA2BV,GAA3B,EAAgCE,KAAhC,EAAuCN,OAAvC,CAAjB;AACA,QAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAXM;AAaP,OAAO,MAAME,WAAW,GAAG,OAAOZ,kBAAP,EAA2BC,GAA3B,EAAgCC,MAAhC,KAA2C;AACpE,QAAMC,KAAK,GAAG,IAAIT,SAAJ,CAAcQ,MAAd,EAAsBE,KAAtB,CAA4BR,qBAA5B,EAAmDS,QAAnD,EAAd;;AACA,MAAIJ,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMK,EAAE,GAAG,MAAMN,kBAAkB,CAACa,YAAnB,CAAgCV,KAAhC,EAAuCN,OAAvC,CAAjB;AACA,UAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMN,kBAAkB,CAACc,QAAnB,CAA4Bb,GAA5B,EAAiCE,KAAjC,EAAwCN,OAAxC,CAAjB;AACA,QAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAXM;AAaP,OAAO,MAAMK,WAAW,GAAG,OAAOf,kBAAP,EAA2BC,GAA3B,KAAmC;AAC5D,MAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMK,EAAE,GAAG,MAAM,MAAMN,kBAAkB,CAACa,YAAnB,CAAgC,GAAhC,EAAqChB,OAArC,CAAvB;AACA,UAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMN,kBAAkB,CAACW,OAAnB,CAA2BV,GAA3B,EAAgC,GAAhC,EAAqCJ,OAArC,CAAjB;AACA,QAAMW,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAVM","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\r\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  if (pid === 0) {\r\n    const tx = await masterChefContract.enterStaking(value, options)\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.deposit(pid, value, options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\r\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  if (pid === 0) {\r\n    const tx = await masterChefContract.leaveStaking(value, options)\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.withdraw(pid, value, options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n  if (pid === 0) {\r\n    const tx = await await masterChefContract.leaveStaking('0', options)\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }\r\n\r\n  const tx = await masterChefContract.deposit(pid, '0', options)\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n"]},"metadata":{},"sourceType":"module"}