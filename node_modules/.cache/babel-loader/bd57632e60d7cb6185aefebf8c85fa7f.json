{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\StakeAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit';\nimport { useLocation } from 'react-router-dom';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport DepositModal from '../DepositModal';\nimport WithdrawModal from '../WithdrawModal';\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms';\nimport useStakeFarms from '../../hooks/useStakeFarms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`;\n_c = IconButtonWrapper;\n\nconst StakeAction = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    onStake\n  } = useStakeFarms(pid);\n  const {\n    onUnstake\n  } = useUnstakeFarms(pid);\n  const location = useLocation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const lpPrice = useLpTokenPrice(tokenName);\n\n  const handleStake = async amount => {\n    await onStake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const handleUnstake = async amount => {\n    await onUnstake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance);\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN);\n    }\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString();\n    }\n\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN);\n  }, [stakedBalance]);\n  const [onPresentDeposit] = useModal( /*#__PURE__*/_jsxDEV(DepositModal, {\n    max: tokenBalance,\n    onConfirm: handleStake,\n    tokenName: tokenName,\n    addLiquidityUrl: addLiquidityUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this));\n  const [onPresentWithdraw] = useModal( /*#__PURE__*/_jsxDEV(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: handleUnstake,\n    tokenName: tokenName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this));\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onPresentDeposit,\n      disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n      children: t('Stake LP')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentWithdraw,\n        mr: \"6px\",\n        children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentDeposit,\n        disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: stakedBalance.eq(0) ? 'textDisabled' : 'text',\n        children: displayBalance()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), stakedBalance.gt(0) && lpPrice.gt(0) && /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        decimals: 2,\n        value: getBalanceNumber(lpPrice.times(stakedBalance)),\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), renderStakingButtons()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeAction, \"7PKyBWVDeUcIcK2UlnMkot7+hCg=\", false, function () {\n  return [useTranslation, useStakeFarms, useUnstakeFarms, useLocation, useAppDispatch, useWeb3React, useLpTokenPrice, useModal, useModal];\n});\n\n_c2 = StakeAction;\nexport default StakeAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"StakeAction\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/FarmCard/StakeAction.tsx"],"names":["React","useCallback","useWeb3React","styled","BigNumber","Button","Flex","Heading","IconButton","AddIcon","MinusIcon","useModal","useLocation","Balance","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useLpTokenPrice","getBalanceAmount","getBalanceNumber","getFullDisplayBalance","DepositModal","WithdrawModal","useUnstakeFarms","useStakeFarms","IconButtonWrapper","div","StakeAction","stakedBalance","tokenBalance","tokenName","pid","addLiquidityUrl","t","onStake","onUnstake","location","dispatch","account","lpPrice","handleStake","amount","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","gt","lt","toFixed","ROUND_DOWN","toLocaleString","onPresentDeposit","onPresentWithdraw","renderStakingButtons","eq","some","item","pathname","includes","times"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n"]},"metadata":{},"sourceType":"module"}