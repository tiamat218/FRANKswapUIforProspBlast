{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\Lottery\\\\components\\\\ClaimPrizesModal\\\\ClaimPrizesInner.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { callWithEstimateGas } from 'utils/calls';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchUserLotteries } from 'state/lottery';\nimport { useAppDispatch } from 'state';\nimport Balance from 'components/Balance';\nimport useToast from 'hooks/useToast';\nimport { useLotteryV2Contract } from 'hooks/useContract';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ClaimInnerContainer = ({\n  onSuccess,\n  roundsToClaim\n}) => {\n  _s();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId\n  } = useLottery();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0);\n  const [pendingTx, setPendingTx] = useState(false);\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber()));\n  const lotteryContract = useLotteryV2Contract();\n  const activeClaimData = roundsToClaim[activeClaimIndex];\n  const cakePriceBusd = usePriceCakeBusd();\n  const cakeReward = activeClaimData.cakeTotal;\n  const dollarReward = cakeReward.times(cakePriceBusd);\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber();\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber();\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards, lotteryId) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.id;\n    });\n    const brackets = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.rewardBracket;\n    });\n    return {\n      lotteryId,\n      ticketIds,\n      brackets\n    };\n  };\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards, activeClaimData.roundId);\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1);\n      dispatch(fetchUserLotteries({\n        account,\n        currentLotteryId\n      }));\n    } else {\n      onSuccess();\n    }\n  };\n  const getTicketBatches = (ticketIds, brackets) => {\n    const requests = [];\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber();\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i);\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i);\n      requests.push({\n        ticketIds: ticketIdsSlice,\n        brackets: bracketsSlice\n      });\n    }\n    return requests;\n  };\n  const handleClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    setPendingTx(true);\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets]);\n      const receipt = await tx.wait();\n      if (receipt.status) {\n        toastSuccess(t('Prizes Collected!'), t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n          lotteryId\n        }));\n        setPendingTx(false);\n        handleProgressToNextClaim();\n      }\n    } catch (error) {\n      console.error(error);\n      toastError(t('Error'), t('%error% - Please try again.', {\n        error: error.message\n      }));\n      setPendingTx(false);\n    }\n  };\n  const handleBatchClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    const ticketBatches = getTicketBatches(ticketIds, brackets);\n    const transactionsToFire = ticketBatches.length;\n    const receipts = [];\n    setPendingTx(true);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets]);\n        const receipt = await tx.wait();\n        /* eslint-enable no-await-in-loop */\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt);\n          setPendingBatchClaims(transactionsToFire - receipts.length);\n\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(t('Prizes Collected!'), t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation', {\n              claimNum: receipts.length,\n              claimTotal: transactionsToFire,\n              lotteryId\n            }));\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        setPendingTx(false);\n        toastError(t('Error'), t('%error% - Please try again.', {\n          error: error.message\n        }));\n        break;\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false);\n      toastSuccess(t('Prizes Collected!'), t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n        lotteryId\n      }));\n      handleProgressToNextClaim();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mb: \"4px\",\n        textAlign: ['center', null, 'left'],\n        children: t('You won')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: ['flex-start', null, 'center'],\n        justifyContent: ['flex-start', null, 'space-between'],\n        flexDirection: ['column', null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Balance, {\n          textAlign: ['center', null, 'left'],\n          lineHeight: \"1.1\",\n          value: rewardAsBalance,\n          fontSize: \"44px\",\n          bold: true,\n          color: \"secondary\",\n          unit: \" CAKE!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PresentWonIcon, {\n          ml: ['0', null, '12px'],\n          width: \"64px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        mt: ['12px', null, '0'],\n        textAlign: ['center', null, 'left'],\n        value: dollarRewardAsBalance,\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        mt: \"8px\",\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: [t('Round'), \" #\", activeClaimData.roundId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        isLoading: pendingTx,\n        endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 32\n        }, this) : null,\n        mt: \"20px\",\n        width: \"100%\",\n        onClick: () => shouldBatchRequest ? handleBatchClaim() : handleClaim(),\n        children: [pendingTx ? t('Claiming') : t('Claim'), \" \", pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ClaimInnerContainer, \"Bb7sgeFB6KrFV59qAZykihmBOH8=\", false, function () {\n  return [useWeb3React, useTranslation, useAppDispatch, useLottery, useToast, useLotteryV2Contract, usePriceCakeBusd];\n});\n_c = ClaimInnerContainer;\nexport default ClaimInnerContainer;\nvar _c;\n$RefreshReg$(_c, \"ClaimInnerContainer\");","map":{"version":3,"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","usePriceCakeBusd","useLottery","fetchUserLotteries","useAppDispatch","Balance","useToast","useLotteryV2Contract","jsxDEV","_jsxDEV","Fragment","_Fragment","ClaimInnerContainer","onSuccess","roundsToClaim","_s","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","currentLotteryId","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","pendingBatchClaims","setPendingBatchClaims","Math","ceil","ticketsWithUnclaimedRewards","length","toNumber","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","receipt","wait","status","error","console","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal","children","flexDirection","mb","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","justifyContent","lineHeight","value","fontSize","bold","color","unit","ml","width","mt","prefix","isLoading","endIcon","spin","onClick","_c","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { callWithEstimateGas } from 'utils/calls'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserLotteries } from 'state/lottery'\r\nimport { useAppDispatch } from 'state'\r\nimport Balance from 'components/Balance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useLotteryV2Contract } from 'hooks/useContract'\r\n\r\ninterface ClaimInnerProps {\r\n  roundsToClaim: LotteryTicketClaimData[]\r\n  onSuccess?: () => void\r\n}\r\n\r\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\r\n    Math.ceil(\r\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\r\n    ),\r\n  )\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const activeClaimData = roundsToClaim[activeClaimIndex]\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const cakeReward = activeClaimData.cakeTotal\r\n  const dollarReward = cakeReward.times(cakePriceBusd)\r\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\r\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\r\n\r\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\r\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.id\r\n    })\r\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.rewardBracket\r\n    })\r\n    return { lotteryId, ticketIds, brackets }\r\n  }\r\n\r\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\r\n    activeClaimData.ticketsWithUnclaimedRewards,\r\n    activeClaimData.roundId,\r\n  )\r\n\r\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\r\n\r\n  const handleProgressToNextClaim = () => {\r\n    if (roundsToClaim.length > activeClaimIndex + 1) {\r\n      // If there are still rounds to claim, move onto the next claim\r\n      setActiveClaimIndex(activeClaimIndex + 1)\r\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n    } else {\r\n      onSuccess()\r\n    }\r\n  }\r\n\r\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\r\n    const requests = []\r\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\r\n\r\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\r\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\r\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\r\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\r\n    }\r\n\r\n    return requests\r\n  }\r\n\r\n  const handleClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets])\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Prizes Collected!'),\r\n          t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n        )\r\n        setPendingTx(false)\r\n        handleProgressToNextClaim()\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleBatchClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\r\n    const transactionsToFire = ticketBatches.length\r\n    const receipts = []\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const ticketBatch of ticketBatches) {\r\n      try {\r\n        /* eslint-disable no-await-in-loop */\r\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [\r\n          lotteryId,\r\n          ticketBatch.ticketIds,\r\n          ticketBatch.brackets,\r\n        ])\r\n        const receipt = await tx.wait()\r\n        /* eslint-enable no-await-in-loop */\r\n        if (receipt.status) {\r\n          // One transaction within batch has succeeded\r\n          receipts.push(receipt)\r\n          setPendingBatchClaims(transactionsToFire - receipts.length)\r\n\r\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\r\n          if (receipts.length !== transactionsToFire) {\r\n            toastSuccess(\r\n              t('Prizes Collected!'),\r\n              t(\r\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',\r\n                {\r\n                  claimNum: receipts.length,\r\n                  claimTotal: transactionsToFire,\r\n                  lotteryId,\r\n                },\r\n              ),\r\n            )\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setPendingTx(false)\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        break\r\n      }\r\n    }\r\n\r\n    // Batch is finished\r\n    if (receipts.length === transactionsToFire) {\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        t('Prizes Collected!'),\r\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n      )\r\n      handleProgressToNextClaim()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex flexDirection=\"column\">\r\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\r\n          {t('You won')}\r\n        </Text>\r\n        <Flex\r\n          alignItems={['flex-start', null, 'center']}\r\n          justifyContent={['flex-start', null, 'space-between']}\r\n          flexDirection={['column', null, 'row']}\r\n        >\r\n          <Balance\r\n            textAlign={['center', null, 'left']}\r\n            lineHeight=\"1.1\"\r\n            value={rewardAsBalance}\r\n            fontSize=\"44px\"\r\n            bold\r\n            color=\"secondary\"\r\n            unit=\" CAKE!\"\r\n          />\r\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\r\n        </Flex>\r\n        <Balance\r\n          mt={['12px', null, '0']}\r\n          textAlign={['center', null, 'left']}\r\n          value={dollarRewardAsBalance}\r\n          fontSize=\"12px\"\r\n          color=\"textSubtle\"\r\n          unit=\" USD\"\r\n          prefix=\"~\"\r\n        />\r\n      </Flex>\r\n\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Round')} #{activeClaimData.roundId}\r\n        </Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          mt=\"20px\"\r\n          width=\"100%\"\r\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\r\n        >\r\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ClaimInnerContainer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}