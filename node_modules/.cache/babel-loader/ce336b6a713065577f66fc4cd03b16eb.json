{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { PoolIds } from 'config/constants/types';\nimport { useBlock } from 'state/block/hooks';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV1Abi from 'config/abi/ifoV1.json';\nimport { getStatus } from '../helpers';\n/**\r\n * Gets all public data of an IFO\r\n */\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      // Not know\n      limitPerUserInLP: BIG_ZERO,\n      //  Not used\n      taxRate: 0,\n      //  Not used\n      sumTaxesOverflow: BIG_ZERO //  Not used\n\n    }\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map(method => ({\n      address,\n      name: method\n    }));\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls);\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0;\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0;\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: { ...prev.poolUnlimited,\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO\n      }\n    }));\n  }, [address, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n\n_s(useGetPublicIfoData, \"POVO37wzRNe4d50dRPrXVTTSJDA=\", false, function () {\n  return [useLpTokenPrice, useBlock];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v1/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","BIG_ZERO","multicallv2","ifoV1Abi","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","currentBlock","fetchIfoData","ifoCalls","map","method","name","startBlock","endBlock","raisingAmount","totalAmount","toNumber","totalBlocks","prev","currencyPriceInUSD","toString"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAAyBC,OAAzB,QAAwC,wBAAxC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,SAASC,SAAT,QAA0B,YAA1B;AAEA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAIC,GAAD,IAA6B;AAAA;;AACvD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAkCF,GAAxC;AACA,QAAMG,iBAAiB,GAAGT,eAAe,CAACM,GAAG,CAACI,QAAJ,CAAaC,MAAd,CAAzC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC;AACjCoB,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,eAAe,EAAE,CAFgB;AAGjCC,IAAAA,iBAAiB,EAAE,CAHc;AAIjCC,IAAAA,QAAQ,EAAE,CAJuB;AAKjCC,IAAAA,eAAe,EAAE,CALgB;AAMjCC,IAAAA,aAAa,EAAE,CANkB;AAOjCC,IAAAA,WAAW,EAAE,CAPoB;AAQjCC,IAAAA,YAAY,EAAE,IARmB;AASjC,KAACvB,OAAO,CAACwB,aAAT,GAAyB;AACvBC,MAAAA,iBAAiB,EAAEtB,QADI;AAEvBuB,MAAAA,eAAe,EAAEvB,QAFM;AAGvBwB,MAAAA,kBAAkB,EAAExB,QAHG;AAGO;AAC9ByB,MAAAA,gBAAgB,EAAEzB,QAJK;AAIK;AAC5B0B,MAAAA,OAAO,EAAE,CALc;AAKX;AACZC,MAAAA,gBAAgB,EAAE3B,QANK,CAMK;;AANL;AATQ,GAAD,CAAlC;AAkBA,QAAM;AAAE4B,IAAAA;AAAF,MAAmB9B,QAAQ,EAAjC;AACA,QAAM+B,YAAY,GAAGnC,WAAW,CAAC,YAAY;AAC3C,UAAMoC,QAAQ,GAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,eAA3B,EAA4C,aAA5C,EAA2DC,GAA3D,CAAgEC,MAAD,KAAa;AAC3F1B,MAAAA,OAD2F;AAE3F2B,MAAAA,IAAI,EAAED;AAFqF,KAAb,CAA/D,CAAjB;AAKA,UAAM,CAACE,UAAD,EAAaC,QAAb,EAAuBC,aAAvB,EAAsCC,WAAtC,IAAqD,MAAMpC,WAAW,CAACC,QAAD,EAAW4B,QAAX,CAA5E;AAEA,UAAMZ,aAAa,GAAGgB,UAAU,GAAGA,UAAU,CAAC,CAAD,CAAV,CAAcI,QAAd,EAAH,GAA8B,CAA9D;AACA,UAAMnB,WAAW,GAAGgB,QAAQ,GAAGA,QAAQ,CAAC,CAAD,CAAR,CAAYG,QAAZ,EAAH,GAA4B,CAAxD;AAEA,UAAMzB,MAAM,GAAGV,SAAS,CAACyB,YAAD,EAAeV,aAAf,EAA8BC,WAA9B,CAAxB;AACA,UAAMoB,WAAW,GAAGpB,WAAW,GAAGD,aAAlC;AACA,UAAMJ,eAAe,GAAGK,WAAW,GAAGS,YAAtC,CAb2C,CAe3C;;AACA,UAAMZ,QAAQ,GACZY,YAAY,GAAGV,aAAf,GACK,CAACU,YAAY,GAAGV,aAAhB,IAAiCqB,WAAlC,GAAiD,GADrD,GAEK,CAACX,YAAY,GAAGrB,kBAAhB,KAAuCW,aAAa,GAAGX,kBAAvD,CAAD,GAA+E,GAHrF;AAKAK,IAAAA,QAAQ,CAAE4B,IAAD,KAAW;AAClB3B,MAAAA,MADkB;AAElBC,MAAAA,eAFkB;AAGlBC,MAAAA,iBAAiB,EAAE,CAACG,aAAa,GAAGU,YAAjB,IAAiChC,cAHlC;AAIlBoB,MAAAA,QAJkB;AAKlBC,MAAAA,eAAe,EAAEH,eAAe,GAAGlB,cALjB;AAMlBsB,MAAAA,aANkB;AAOlBC,MAAAA,WAPkB;AAQlBsB,MAAAA,kBAAkB,EAAE,IARF;AASlBrB,MAAAA,YAAY,EAAE,IATI;AAUlB,OAACvB,OAAO,CAACwB,aAAT,GAAyB,EACvB,GAAGmB,IAAI,CAACnB,aADe;AAEvBC,QAAAA,iBAAiB,EAAEc,aAAa,GAAG,IAAIzC,SAAJ,CAAcyC,aAAa,CAAC,CAAD,CAAb,CAAiBM,QAAjB,EAAd,CAAH,GAAgD1C,QAFzD;AAGvBuB,QAAAA,eAAe,EAAEc,WAAW,GAAG,IAAI1C,SAAJ,CAAc0C,WAAW,CAAC,CAAD,CAAX,CAAeK,QAAf,EAAd,CAAH,GAA8C1C;AAHnD;AAVP,KAAX,CAAD,CAAR;AAgBD,GArC+B,EAqC7B,CAACM,OAAD,EAAUsB,YAAV,EAAwBrB,kBAAxB,CArC6B,CAAhC;AAuCAf,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA,SAAO,EAAE,GAAGlB,KAAL;AAAY8B,IAAAA,kBAAkB,EAAEjC,iBAAhC;AAAmDqB,IAAAA;AAAnD,GAAP;AACD,CAlED;;GAAMzB,mB;UAEsBL,e,EAmBDD,Q;;;AA+C3B,eAAeM,mBAAf","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const { currentBlock } = useBlock()\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n    }))\r\n\r\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      status,\r\n      blocksRemaining,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      progress,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      currencyPriceInUSD: null,\r\n      numberPoints: null,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prev.poolUnlimited,\r\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n"]},"metadata":{},"sourceType":"module"}