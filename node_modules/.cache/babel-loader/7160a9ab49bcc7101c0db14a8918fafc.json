{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useAppDispatch } from 'state';\nimport { setLastOraclePrice } from 'state/predictions';\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice';\n\nconst usePollOraclePrice = (seconds = 30) => {\n  _s();\n\n  const {\n    price,\n    refresh\n  } = useGetLatestOraclePrice();\n  const dispatch = useAppDispatch(); // Poll for the oracle price\n\n  useEffect(() => {\n    refresh();\n    const timer = setInterval(() => {\n      refresh();\n    }, seconds * 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [seconds, refresh]); // If the price changed update global state\n\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()));\n  }, [price, dispatch]);\n};\n\n_s(usePollOraclePrice, \"QQTmLiJ8UGoiRYPW7n/jfZ5Xr4M=\", false, function () {\n  return [useGetLatestOraclePrice, useAppDispatch];\n});\n\nexport default usePollOraclePrice;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/hooks/usePollOraclePrice.ts"],"names":["useEffect","useAppDispatch","setLastOraclePrice","useGetLatestOraclePrice","usePollOraclePrice","seconds","price","refresh","dispatch","timer","setInterval","clearInterval","toJSON"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,OAAOC,uBAAP,MAAoC,2BAApC;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AAAA;;AAC3C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBJ,uBAAuB,EAAlD;AACA,QAAMK,QAAQ,GAAGP,cAAc,EAA/B,CAF2C,CAI3C;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO;AACP,UAAME,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BH,MAAAA,OAAO;AACR,KAFwB,EAEtBF,OAAO,GAAG,IAFY,CAAzB;AAIA,WAAO,MAAM;AACXM,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACJ,OAAD,EAAUE,OAAV,CATM,CAAT,CAL2C,CAgB3C;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACN,kBAAkB,CAACI,KAAK,CAACM,MAAN,EAAD,CAAnB,CAAR;AACD,GAFQ,EAEN,CAACN,KAAD,EAAQE,QAAR,CAFM,CAAT;AAGD,CApBD;;GAAMJ,kB;UACuBD,uB,EACVF,c;;;AAoBnB,eAAeG,kBAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n"]},"metadata":{},"sourceType":"module"}