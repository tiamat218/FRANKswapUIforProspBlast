{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\PoolRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { useCakeVault } from 'state/pools/hooks';\nimport useDelayedUnmount from 'hooks/useDelayedUnmount';\nimport NameCell from './Cells/NameCell';\nimport EarningsCell from './Cells/EarningsCell';\nimport AprCell from './Cells/AprCell';\nimport TotalStakedCell from './Cells/TotalStakedCell';\nimport EndsInCell from './Cells/EndsInCell';\nimport ExpandActionCell from './Cells/ExpandActionCell';\nimport ActionPanel from './ActionPanel/ActionPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`;\n_c = StyledRow;\n\nconst PoolRow = ({\n  pool,\n  account,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    isXs,\n    isSm,\n    isMd,\n    isLg,\n    isXl\n  } = useMatchBreakpoints();\n  const [expanded, setExpanded] = useState(false);\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300);\n\n  const toggleExpanded = () => {\n    setExpanded(prev => !prev);\n  };\n\n  const {\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault();\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledRow, {\n      role: \"row\",\n      onClick: toggleExpanded,\n      children: [/*#__PURE__*/_jsxDEV(NameCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EarningsCell, {\n        pool: pool,\n        account: account,\n        userDataLoaded: userDataLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AprCell, {\n        pool: pool,\n        performanceFee: performanceFeeAsDecimal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), (isLg || isXl) && /*#__PURE__*/_jsxDEV(TotalStakedCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 28\n      }, this), isXl && /*#__PURE__*/_jsxDEV(EndsInCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(ExpandActionCell, {\n        expanded: expanded,\n        isFullLayout: isMd || isLg || isXl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), shouldRenderActionPanel && /*#__PURE__*/_jsxDEV(ActionPanel, {\n      account: account,\n      pool: pool,\n      userDataLoaded: userDataLoaded,\n      expanded: expanded,\n      breakpoints: {\n        isXs,\n        isSm,\n        isMd,\n        isLg,\n        isXl\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PoolRow, \"AVkLBqL6QlKmQ5CF72MGiDexeYs=\", false, function () {\n  return [useMatchBreakpoints, useDelayedUnmount, useCakeVault];\n});\n\n_c2 = PoolRow;\nexport default PoolRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledRow\");\n$RefreshReg$(_c2, \"PoolRow\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/PoolRow.tsx"],"names":["React","useState","styled","useMatchBreakpoints","useCakeVault","useDelayedUnmount","NameCell","EarningsCell","AprCell","TotalStakedCell","EndsInCell","ExpandActionCell","ActionPanel","StyledRow","div","PoolRow","pool","account","userDataLoaded","isXs","isSm","isMd","isLg","isXl","expanded","setExpanded","shouldRenderActionPanel","toggleExpanded","prev","fees","performanceFee","performanceFeeAsDecimal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport NameCell from './Cells/NameCell'\r\nimport EarningsCell from './Cells/EarningsCell'\r\nimport AprCell from './Cells/AprCell'\r\nimport TotalStakedCell from './Cells/TotalStakedCell'\r\nimport EndsInCell from './Cells/EndsInCell'\r\nimport ExpandActionCell from './Cells/ExpandActionCell'\r\nimport ActionPanel from './ActionPanel/ActionPanel'\r\n\r\ninterface PoolRowProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledRow = styled.div`\r\n  background-color: transparent;\r\n  display: flex;\r\n  cursor: pointer;\r\n`\r\n\r\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { isXs, isSm, isMd, isLg, isXl } = useMatchBreakpoints()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\r\n\r\n  const toggleExpanded = () => {\r\n    setExpanded((prev) => !prev)\r\n  }\r\n\r\n  const {\r\n    fees: { performanceFee },\r\n  } = useCakeVault()\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  return (\r\n    <>\r\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\r\n        <NameCell pool={pool} />\r\n        <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\r\n        <AprCell pool={pool} performanceFee={performanceFeeAsDecimal} />\r\n        {(isLg || isXl) && <TotalStakedCell pool={pool} />}\r\n        {isXl && <EndsInCell pool={pool} />}\r\n        <ExpandActionCell expanded={expanded} isFullLayout={isMd || isLg || isXl} />\r\n      </StyledRow>\r\n      {shouldRenderActionPanel && (\r\n        <ActionPanel\r\n          account={account}\r\n          pool={pool}\r\n          userDataLoaded={userDataLoaded}\r\n          expanded={expanded}\r\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl }}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PoolRow\r\n"]},"metadata":{},"sourceType":"module"}