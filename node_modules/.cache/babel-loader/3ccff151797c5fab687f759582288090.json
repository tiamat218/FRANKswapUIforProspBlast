{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Home\\\\components\\\\EarnAPRCard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport max from 'lodash/max';\nimport { NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks';\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms';\nimport { getFarmApr } from 'utils/apr';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`;\n_c = StyledFarmStakingCard;\nconst CardMidContent = styled(Heading).attrs({\n  scale: 'xl'\n})`\n  line-height: 44px;\n`;\n_c2 = CardMidContent;\nconst EarnAPRCard = () => {\n  _s();\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true);\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver();\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map(nonArchivedFarm => nonArchivedFarm.pid)));\n      } finally {\n        setIsFetchingFarmData(false);\n      }\n    };\n    if (isIntersecting) {\n      fetchFarmData();\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting]);\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map(farm => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n          const {\n            cakeRewardsApr,\n            lpRewardsApr\n          } = getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]);\n          return cakeRewardsApr + lpRewardsApr;\n        }\n        return null;\n      });\n      const maxApr = max(aprs);\n      return maxApr === null || maxApr === void 0 ? void 0 : maxApr.toLocaleString('en-US', {\n        maximumFractionDigits: 2\n      });\n    }\n    return null;\n  }, [cakePrice, farmsLP]);\n  const aprText = highestApr || '-';\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', {\n    highestApr: aprText\n  });\n  const [earnUpTo, InFarms] = earnAprText.split(aprText);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(NavLink, {\n      exact: true,\n      activeClassName: \"active\",\n      to: \"/farms\",\n      id: \"farm-apr-cta\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          color: \"contrast\",\n          scale: \"lg\",\n          children: earnUpTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardMidContent, {\n          color: \"#7645d9\",\n          children: highestApr && !isFetchingFarmData ? `${highestApr}%` : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"pulse\",\n              variant: \"rect\",\n              height: \"44px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: observerRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            color: \"contrast\",\n            scale: \"lg\",\n            children: InFarms\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            mt: 30,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(EarnAPRCard, \"/kgnGbmL5bEfzmHNXp5e7u2dOCk=\", false, function () {\n  return [useTranslation, useFarms, usePriceCakeBusd, useAppDispatch, useIntersectionObserver];\n});\n_c3 = EarnAPRCard;\nexport default EarnAPRCard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"CardMidContent\");\n$RefreshReg$(_c3, \"EarnAPRCard\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","styled","Heading","Card","CardBody","Flex","ArrowForwardIcon","Skeleton","ChainId","max","NavLink","BigNumber","useTranslation","useAppDispatch","useFarms","usePriceCakeBusd","fetchFarmsPublicDataAsync","nonArchivedFarms","getFarmApr","useIntersectionObserver","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledFarmStakingCard","theme","mediaQueries","lg","_c","CardMidContent","attrs","scale","_c2","EarnAPRCard","_s","isFetchingFarmData","setIsFetchingFarmData","t","data","farmsLP","cakePrice","dispatch","observerRef","isIntersecting","fetchFarmData","map","nonArchivedFarm","pid","highestApr","gt","aprs","farm","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","cakeRewardsApr","lpRewardsApr","poolWeight","lpAddresses","MAINNET","maxApr","toLocaleString","maximumFractionDigits","aprText","earnAprText","earnUpTo","InFarms","split","children","exact","activeClassName","to","id","color","fileName","_jsxFileName","lineNumber","columnNumber","animation","variant","height","ref","justifyContent","mt","_c3","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Home/components/EarnAPRCard.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport max from 'lodash/max'\r\nimport { NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n\r\n  transition: opacity 200ms;\r\n  &:hover {\r\n    opacity: 0.65;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPRCard = () => {\r\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n\r\n  // Fetch farm data once to get the max APR\r\n  useEffect(() => {\r\n    const fetchFarmData = async () => {\r\n      try {\r\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\r\n      } finally {\r\n        setIsFetchingFarmData(false)\r\n      }\r\n    }\r\n\r\n    if (isIntersecting) {\r\n      fetchFarmData()\r\n    }\r\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\r\n\r\n  const highestApr = useMemo(() => {\r\n    if (cakePrice.gt(0)) {\r\n      const aprs = farmsLP.map((farm) => {\r\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\r\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\r\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\r\n            new BigNumber(farm.poolWeight),\r\n            cakePrice,\r\n            totalLiquidity,\r\n            farm.lpAddresses[ChainId.MAINNET],\r\n          )\r\n          return cakeRewardsApr + lpRewardsApr\r\n        }\r\n        return null\r\n      })\r\n\r\n      const maxApr = max(aprs)\r\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n    }\r\n    return null\r\n  }, [cakePrice, farmsLP])\r\n\r\n  const aprText = highestApr || '-'\r\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\r\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\r\n        <CardBody>\r\n          <Heading color=\"contrast\" scale=\"lg\">\r\n            {earnUpTo}\r\n          </Heading>\r\n          <CardMidContent color=\"#7645d9\">\r\n            {highestApr && !isFetchingFarmData ? (\r\n              `${highestApr}%`\r\n            ) : (\r\n              <>\r\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n                <div ref={observerRef} />\r\n              </>\r\n            )}\r\n          </CardMidContent>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Heading color=\"contrast\" scale=\"lg\">\r\n              {InFarms}\r\n            </Heading>\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </Flex>\r\n        </CardBody>\r\n      </NavLink>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPRCard\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}