{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Collectibles\\\\components\\\\TransferNftModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ethers } from 'ethers';\nimport { useWeb3React } from '@web3-react/core';\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit';\nimport { getAddressByType } from 'utils/collectibles';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { useERC721 } from 'hooks/useContract';\nimport InfoRow from './InfoRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n_c = Value;\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c3 = Actions;\nconst Label = styled.label`\n  color: ${({\n  theme\n}) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`;\n_c4 = Label;\nconst TransferNftModal = ({\n  nft,\n  tokenIds,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState(null);\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const contract = useERC721(getAddressByType(nft.type));\n  const {\n    toastSuccess\n  } = useToast();\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value);\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'));\n      } else {\n        const tx = await contract.transferFrom(account, value, tokenIds[0]);\n        setIsLoading(true);\n        const receipt = await tx.wait();\n        if (receipt.status) {\n          onDismiss();\n          onSuccess();\n          toastSuccess(t('NFT successfully transferred!'));\n        } else {\n          setError(t('Unable to transfer NFT'));\n          setIsLoading(false);\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err);\n    }\n  };\n  const handleChange = evt => {\n    const {\n      value: inputValue\n    } = evt.target;\n    setValue(inputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Transfer NFT'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"8px\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('Transferring'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: t('1x %nftName% NFT', {\n            nftName: nft.name\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"transferAddress\",\n        children: [t('Receiving address'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"transferAddress\",\n        name: \"address\",\n        type: \"text\",\n        placeholder: t('Paste address'),\n        value: value,\n        onChange: handleChange,\n        isWarning: error,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        onClick: handleConfirm,\n        disabled: !account || isLoading || !value,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(TransferNftModal, \"agjo0ZZzcxJ0txajmXQFIYXtANE=\", false, function () {\n  return [useTranslation, useWeb3React, useERC721, useToast];\n});\n_c5 = TransferNftModal;\nexport default TransferNftModal;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Value\");\n$RefreshReg$(_c2, \"ModalContent\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"TransferNftModal\");","map":{"version":3,"names":["React","useState","styled","ethers","useWeb3React","Button","Input","Modal","Text","getAddressByType","useTranslation","useToast","useERC721","InfoRow","jsxDEV","_jsxDEV","Value","_c","ModalContent","div","_c2","Actions","_c3","Label","label","theme","colors","text","_c4","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","_s","isLoading","setIsLoading","value","setValue","error","setError","t","account","contract","type","toastSuccess","handleConfirm","isValidAddress","utils","isAddress","tx","transferFrom","receipt","wait","status","err","console","handleChange","evt","inputValue","target","title","children","color","mb","fileName","_jsxFileName","lineNumber","columnNumber","nftName","name","htmlFor","id","placeholder","onChange","isWarning","disabled","width","variant","onClick","_c5","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Collectibles/components/TransferNftModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap/uikit'\r\nimport { getAddressByType } from 'utils/collectibles'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC721 } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const contract = useERC721(getAddressByType(nft.type))\r\n  const { toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = ethers.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(t('Please enter a valid wallet address'))\r\n      } else {\r\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\r\n        setIsLoading(true)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          onDismiss()\r\n          onSuccess()\r\n          toastSuccess(t('NFT successfully transferred!'))\r\n        } else {\r\n          setError(t('Unable to transfer NFT'))\r\n          setIsLoading(false)\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{t('Transferring')}:</Text>\r\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={t('Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}