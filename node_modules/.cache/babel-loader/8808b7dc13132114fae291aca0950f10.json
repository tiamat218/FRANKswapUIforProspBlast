{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks';\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions';\nimport { PredictionStatus } from 'state/types';\nimport { range } from 'lodash';\nconst POLL_TIME_IN_SECONDS = 10;\n\nconst usePollPredictions = () => {\n  _s();\n\n  const timer = useRef(null);\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const currentEpoch = useGetCurrentEpoch();\n  const earliestEpoch = useGetEarliestEpoch();\n  const status = useGetPredictionsStatus();\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current);\n    }\n\n    if (status === PredictionStatus.LIVE) {\n      timer.current = setInterval(async () => {\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1];\n        dispatch(fetchRounds(liveAndCurrent));\n        dispatch(fetchMarketData());\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1);\n          dispatch(fetchLedgerData({\n            account,\n            epochs: epochRange\n          }));\n          dispatch(fetchClaimableStatuses({\n            account,\n            epochs: epochRange\n          }));\n        }\n      }, POLL_TIME_IN_SECONDS * 1000);\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current);\n      }\n    };\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch]);\n};\n\n_s(usePollPredictions, \"sAiLuXKdkhZzAd6Cgh04o+cp2N4=\", false, function () {\n  return [useAppDispatch, useWeb3React, useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus];\n});\n\nexport default usePollPredictions;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/hooks/usePollPredictions.ts"],"names":["useEffect","useRef","useWeb3React","useAppDispatch","useGetCurrentEpoch","useGetEarliestEpoch","useGetPredictionsStatus","fetchClaimableStatuses","fetchLedgerData","fetchMarketData","fetchRounds","PredictionStatus","range","POLL_TIME_IN_SECONDS","usePollPredictions","timer","dispatch","account","currentEpoch","earliestEpoch","status","current","clearInterval","LIVE","setInterval","liveAndCurrent","epochRange","epochs"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,uBAAlD,QAAiF,aAAjF;AACA,SAASC,sBAAT,EAAiCC,eAAjC,EAAkDC,eAAlD,EAAmEC,WAAnE,QAAsF,mBAAtF;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,MAAMC,oBAAoB,GAAG,EAA7B;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,KAAK,GAAGd,MAAM,CAAiB,IAAjB,CAApB;AACA,QAAMe,QAAQ,GAAGb,cAAc,EAA/B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAcf,YAAY,EAAhC;AACA,QAAMgB,YAAY,GAAGd,kBAAkB,EAAvC;AACA,QAAMe,aAAa,GAAGd,mBAAmB,EAAzC;AACA,QAAMe,MAAM,GAAGd,uBAAuB,EAAtC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIe,KAAK,CAACM,OAAV,EAAmB;AACjBC,MAAAA,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb;AACD;;AAED,QAAID,MAAM,KAAKT,gBAAgB,CAACY,IAAhC,EAAsC;AACpCR,MAAAA,KAAK,CAACM,OAAN,GAAgBG,WAAW,CAAC,YAAY;AACtC,cAAMC,cAAc,GAAG,CAACP,YAAD,EAAeA,YAAY,GAAG,CAA9B,CAAvB;AAEAF,QAAAA,QAAQ,CAACN,WAAW,CAACe,cAAD,CAAZ,CAAR;AACAT,QAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;;AAEA,YAAIQ,OAAJ,EAAa;AACX,gBAAMS,UAAU,GAAGd,KAAK,CAACO,aAAD,EAAgBD,YAAY,GAAG,CAA/B,CAAxB;AACAF,UAAAA,QAAQ,CAACR,eAAe,CAAC;AAAES,YAAAA,OAAF;AAAWU,YAAAA,MAAM,EAAED;AAAnB,WAAD,CAAhB,CAAR;AACAV,UAAAA,QAAQ,CAACT,sBAAsB,CAAC;AAAEU,YAAAA,OAAF;AAAWU,YAAAA,MAAM,EAAED;AAAnB,WAAD,CAAvB,CAAR;AACD;AACF,OAX0B,EAWxBb,oBAAoB,GAAG,IAXC,CAA3B;AAYD;;AAED,WAAO,MAAM;AACX,UAAIE,KAAK,CAACM,OAAV,EAAmB;AACjBC,QAAAA,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb;AACD;AACF,KAJD;AAKD,GA1BQ,EA0BN,CAACN,KAAD,EAAQE,OAAR,EAAiBG,MAAjB,EAAyBF,YAAzB,EAAuCC,aAAvC,EAAsDH,QAAtD,CA1BM,CAAT;AA2BD,CAnCD;;GAAMF,kB;UAEaX,c,EACGD,Y,EACCE,kB,EACCC,mB,EACPC,uB;;;AA+BjB,eAAeQ,kBAAf","sourcesContent":["import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status === PredictionStatus.LIVE) {\r\n      timer.current = setInterval(async () => {\r\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\r\n\r\n        dispatch(fetchRounds(liveAndCurrent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n"]},"metadata":{},"sourceType":"module"}