{"ast":null,"code":"// chunks array into chunks of maximum size\n// evenly distributes items among the chunks\nexport default function chunkArray(items, maxChunkSize) {\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1');\n  if (items.length <= maxChunkSize) return [items];\n  const numChunks = Math.ceil(items.length / maxChunkSize);\n  const chunkSize = Math.ceil(items.length / numChunks);\n  return [...Array(numChunks).keys()].map(ix => items.slice(ix * chunkSize, ix * chunkSize + chunkSize));\n}","map":{"version":3,"names":["chunkArray","items","maxChunkSize","Error","length","numChunks","Math","ceil","chunkSize","Array","keys","map","ix","slice"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/multicall/chunkArray.ts"],"sourcesContent":["// chunks array into chunks of maximum size\r\n// evenly distributes items among the chunks\r\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\r\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1')\r\n  if (items.length <= maxChunkSize) return [items]\r\n\r\n  const numChunks: number = Math.ceil(items.length / maxChunkSize)\r\n  const chunkSize = Math.ceil(items.length / numChunks)\r\n\r\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize))\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,eAAe,SAASA,UAAUA,CAAIC,KAAU,EAAEC,YAAoB,EAAS;EAC7E,IAAIA,YAAY,GAAG,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EACnE,IAAIF,KAAK,CAACG,MAAM,IAAIF,YAAY,EAAE,OAAO,CAACD,KAAK,CAAC;EAEhD,MAAMI,SAAiB,GAAGC,IAAI,CAACC,IAAI,CAACN,KAAK,CAACG,MAAM,GAAGF,YAAY,CAAC;EAChE,MAAMM,SAAS,GAAGF,IAAI,CAACC,IAAI,CAACN,KAAK,CAACG,MAAM,GAAGC,SAAS,CAAC;EAErD,OAAO,CAAC,GAAGI,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,EAAE,IAAKX,KAAK,CAACY,KAAK,CAACD,EAAE,GAAGJ,SAAS,EAAEI,EAAE,GAAGJ,SAAS,GAAGA,SAAS,CAAC,CAAC;AAC1G","ignoreList":[]},"metadata":{},"sourceType":"module"}