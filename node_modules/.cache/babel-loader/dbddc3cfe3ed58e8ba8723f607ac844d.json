{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from 'react';\nimport { parseRetreivedNumber } from '../../helpers';\nimport generateTicketNumbers from './generateTicketNumbers';\n\nconst getInitialState = ({\n  amount,\n  userCurrentTickets\n}) => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets);\n  const randomTicketsAsStringArray = randomTickets.map(ticket => parseRetreivedNumber(ticket.toString()).split(''));\n  const tickets = Array.from({\n    length: amount\n  }, (_, i) => i + 1).map(index => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true\n  }));\n  return {\n    tickets,\n    allComplete: true\n  };\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'updateTicket':\n      {\n        const tickets = [...state.tickets];\n        const {\n          ticketId,\n          newNumbers\n        } = action.payload;\n        const newDuplicates = state.tickets.filter(ticket => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join('')); // If ticket was duplicate but not duplicate anymore with this update\n        // go through previously considered duplicates and remove id of this ticket\n        // from their duplicateWith array\n\n        const prevDuplicates = tickets[ticketId - 1].duplicateWith;\n        prevDuplicates.forEach(prevTicketId => {\n          if (!newDuplicates.map(({\n            id\n          }) => id).includes(prevTicketId)) {\n            const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith];\n            const indexToRemvoe = dupsToUpdate.findIndex(id => id === ticketId);\n            dupsToUpdate.splice(indexToRemvoe, 1);\n            tickets[prevTicketId - 1] = { ...tickets[prevTicketId - 1],\n              duplicateWith: dupsToUpdate\n            };\n          }\n        }); // If found duplicates - update their duplicateWith array\n\n        if (newDuplicates.length !== 0) {\n          newDuplicates.forEach(duplicate => {\n            tickets[duplicate.id - 1] = { ...duplicate,\n              duplicateWith: [...duplicate.duplicateWith, ticketId]\n            };\n          });\n        }\n\n        const updatedTicket = {\n          id: ticketId,\n          numbers: newNumbers,\n          duplicateWith: newDuplicates.map(ticket => ticket.id),\n          isComplete: newNumbers.join('').length === 6\n        };\n        tickets[ticketId - 1] = updatedTicket; // Check if all tickets are filled\n\n        const allComplete = tickets.every(ticket => ticket.isComplete);\n        return {\n          tickets,\n          allComplete\n        };\n      }\n\n    case 'reset':\n      return getInitialState({\n        amount: action.payload.amount,\n        userCurrentTickets: action.payload.userCurrentTickets\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const useTicketsReducer = (amount, userCurrentTickets) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    amount,\n    userCurrentTickets\n  }, getInitialState);\n  useEffect(() => {\n    dispatch({\n      type: 'reset',\n      payload: {\n        amount,\n        userCurrentTickets\n      }\n    });\n  }, [amount, userCurrentTickets]);\n\n  const updateTicket = (ticketId, newNumbers) => {\n    dispatch({\n      type: 'updateTicket',\n      payload: {\n        ticketId,\n        newNumbers\n      }\n    });\n  };\n\n  const randomize = () => {\n    dispatch({\n      type: 'reset',\n      payload: {\n        amount,\n        userCurrentTickets\n      }\n    });\n  };\n\n  const getTicketsForPurchase = () => {\n    return state.tickets.map(ticket => {\n      const reversedTicket = [...ticket.numbers].map(num => parseInt(num, 10)).reverse();\n      reversedTicket.unshift(1);\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10);\n      return ticketAsNumber;\n    });\n  };\n\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase];\n};\n\n_s(useTicketsReducer, \"tOc7EycRfjCpzL+Fsypf13hPhwA=\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx"],"names":["useEffect","useReducer","parseRetreivedNumber","generateTicketNumbers","getInitialState","amount","userCurrentTickets","randomTickets","randomTicketsAsStringArray","map","ticket","toString","split","tickets","Array","from","length","_","i","index","id","numbers","duplicateWith","isComplete","allComplete","reducer","state","action","type","ticketId","newNumbers","payload","newDuplicates","filter","join","prevDuplicates","forEach","prevTicketId","includes","dupsToUpdate","indexToRemvoe","findIndex","splice","duplicate","updatedTicket","every","Error","useTicketsReducer","dispatch","updateTicket","randomize","getTicketsForPurchase","reversedTicket","num","parseInt","reverse","unshift","ticketAsNumber"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAcA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,MADuB;AAEvBC,EAAAA;AAFuB,CAAD,KAMJ;AAClB,QAAMC,aAAa,GAAGJ,qBAAqB,CAACE,MAAD,EAASC,kBAAT,CAA3C;AACA,QAAME,0BAA0B,GAAGD,aAAa,CAACE,GAAd,CAAmBC,MAAD,IAAYR,oBAAoB,CAACQ,MAAM,CAACC,QAAP,EAAD,CAApB,CAAwCC,KAAxC,CAA8C,EAA9C,CAA9B,CAAnC;AACA,QAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEX;AAAV,GAAX,EAA+B,CAACY,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAA7C,EAAgDT,GAAhD,CAAqDU,KAAD,KAAY;AAC9EC,IAAAA,EAAE,EAAED,KAD0E;AAE9EE,IAAAA,OAAO,EAAEb,0BAA0B,CAACW,KAAK,GAAG,CAAT,CAF2C;AAG9EG,IAAAA,aAAa,EAAE,EAH+D;AAI9EC,IAAAA,UAAU,EAAE;AAJkE,GAAZ,CAApD,CAAhB;AAMA,SAAO;AACLV,IAAAA,OADK;AAELW,IAAAA,WAAW,EAAE;AAFR,GAAP;AAID,CAnBD;;AAqBA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAsBC,MAAtB,KAAsC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,cAAMf,OAAO,GAAG,CAAC,GAAGa,KAAK,CAACb,OAAV,CAAhB;AACA,cAAM;AAAEgB,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAA2BH,MAAM,CAACI,OAAxC;AAEA,cAAMC,aAAa,GAAGN,KAAK,CAACb,OAAN,CAAcoB,MAAd,CACnBvB,MAAD,IAAYA,MAAM,CAACU,EAAP,KAAcS,QAAd,IAA0BnB,MAAM,CAACa,UAAjC,IAA+Cb,MAAM,CAACW,OAAP,CAAea,IAAf,CAAoB,EAApB,MAA4BJ,UAAU,CAACI,IAAX,CAAgB,EAAhB,CADnE,CAAtB,CAJmB,CAQnB;AACA;AACA;;AACA,cAAMC,cAAc,GAAGtB,OAAO,CAACgB,QAAQ,GAAG,CAAZ,CAAP,CAAsBP,aAA7C;AACAa,QAAAA,cAAc,CAACC,OAAf,CAAwBC,YAAD,IAAkB;AACvC,cAAI,CAACL,aAAa,CAACvB,GAAd,CAAkB,CAAC;AAAEW,YAAAA;AAAF,WAAD,KAAYA,EAA9B,EAAkCkB,QAAlC,CAA2CD,YAA3C,CAAL,EAA+D;AAC7D,kBAAME,YAAY,GAAG,CAAC,GAAG1B,OAAO,CAACwB,YAAY,GAAG,CAAhB,CAAP,CAA0Bf,aAA9B,CAArB;AACA,kBAAMkB,aAAa,GAAGD,YAAY,CAACE,SAAb,CAAwBrB,EAAD,IAAQA,EAAE,KAAKS,QAAtC,CAAtB;AACAU,YAAAA,YAAY,CAACG,MAAb,CAAoBF,aAApB,EAAmC,CAAnC;AACA3B,YAAAA,OAAO,CAACwB,YAAY,GAAG,CAAhB,CAAP,GAA4B,EAC1B,GAAGxB,OAAO,CAACwB,YAAY,GAAG,CAAhB,CADgB;AAE1Bf,cAAAA,aAAa,EAAEiB;AAFW,aAA5B;AAID;AACF,SAVD,EAZmB,CAwBnB;;AACA,YAAIP,aAAa,CAAChB,MAAd,KAAyB,CAA7B,EAAgC;AAC9BgB,UAAAA,aAAa,CAACI,OAAd,CAAuBO,SAAD,IAAe;AACnC9B,YAAAA,OAAO,CAAC8B,SAAS,CAACvB,EAAV,GAAe,CAAhB,CAAP,GAA4B,EAC1B,GAAGuB,SADuB;AAE1BrB,cAAAA,aAAa,EAAE,CAAC,GAAGqB,SAAS,CAACrB,aAAd,EAA6BO,QAA7B;AAFW,aAA5B;AAID,WALD;AAMD;;AAED,cAAMe,aAAa,GAAG;AACpBxB,UAAAA,EAAE,EAAES,QADgB;AAEpBR,UAAAA,OAAO,EAAES,UAFW;AAGpBR,UAAAA,aAAa,EAAEU,aAAa,CAACvB,GAAd,CAAmBC,MAAD,IAAYA,MAAM,CAACU,EAArC,CAHK;AAIpBG,UAAAA,UAAU,EAAEO,UAAU,CAACI,IAAX,CAAgB,EAAhB,EAAoBlB,MAApB,KAA+B;AAJvB,SAAtB;AAMAH,QAAAA,OAAO,CAACgB,QAAQ,GAAG,CAAZ,CAAP,GAAwBe,aAAxB,CAxCmB,CA0CnB;;AACA,cAAMpB,WAAW,GAAGX,OAAO,CAACgC,KAAR,CAAenC,MAAD,IAAYA,MAAM,CAACa,UAAjC,CAApB;AAEA,eAAO;AACLV,UAAAA,OADK;AAELW,UAAAA;AAFK,SAAP;AAID;;AACD,SAAK,OAAL;AACE,aAAOpB,eAAe,CAAC;AAAEC,QAAAA,MAAM,EAAEsB,MAAM,CAACI,OAAP,CAAe1B,MAAzB;AAAiCC,QAAAA,kBAAkB,EAAEqB,MAAM,CAACI,OAAP,CAAezB;AAApE,OAAD,CAAtB;;AACF;AACE,YAAM,IAAIwC,KAAJ,EAAN;AAtDJ;AAwDD,CAzDD;;AA6DA,OAAO,MAAMC,iBAAiB,GAAG,CAC/B1C,MAD+B,EAE/BC,kBAF+B,KAGyC;AAAA;;AACxE,QAAM,CAACoB,KAAD,EAAQsB,QAAR,IAAoB/C,UAAU,CAACwB,OAAD,EAAU;AAAEpB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAV,EAA0CF,eAA1C,CAApC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdgD,IAAAA,QAAQ,CAAC;AAAEpB,MAAAA,IAAI,EAAE,OAAR;AAAiBG,MAAAA,OAAO,EAAE;AAAE1B,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAA1B,KAAD,CAAR;AACD,GAFQ,EAEN,CAACD,MAAD,EAASC,kBAAT,CAFM,CAAT;;AAIA,QAAM2C,YAAY,GAAG,CAACpB,QAAD,EAAmBC,UAAnB,KAA4C;AAC/DkB,IAAAA,QAAQ,CAAC;AAAEpB,MAAAA,IAAI,EAAE,cAAR;AAAwBG,MAAAA,OAAO,EAAE;AAAEF,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAAjC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMoB,SAAS,GAAG,MAAM;AACtBF,IAAAA,QAAQ,CAAC;AAAEpB,MAAAA,IAAI,EAAE,OAAR;AAAiBG,MAAAA,OAAO,EAAE;AAAE1B,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAA1B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAM6C,qBAAqB,GAAG,MAAM;AAClC,WAAOzB,KAAK,CAACb,OAAN,CAAcJ,GAAd,CAAmBC,MAAD,IAAY;AACnC,YAAM0C,cAAc,GAAG,CAAC,GAAG1C,MAAM,CAACW,OAAX,EAAoBZ,GAApB,CAAyB4C,GAAD,IAASC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAAzC,EAAoDE,OAApD,EAAvB;AACAH,MAAAA,cAAc,CAACI,OAAf,CAAuB,CAAvB;AACA,YAAMC,cAAc,GAAGH,QAAQ,CAACF,cAAc,CAAClB,IAAf,CAAoB,EAApB,CAAD,EAA0B,EAA1B,CAA/B;AACA,aAAOuB,cAAP;AACD,KALM,CAAP;AAMD,GAPD;;AASA,SAAO,CAACR,YAAD,EAAeC,SAAf,EAA0BxB,KAAK,CAACb,OAAhC,EAAyCa,KAAK,CAACF,WAA/C,EAA4D2B,qBAA5D,CAAP;AACD,CA5BM;;GAAMJ,iB","sourcesContent":["import { LotteryTicket } from 'config/constants/types'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { parseRetreivedNumber } from '../../helpers'\r\nimport generateTicketNumbers from './generateTicketNumbers'\r\n\r\nexport interface Ticket {\r\n  id: number\r\n  numbers: string[]\r\n  duplicateWith: number[]\r\n  isComplete: boolean\r\n}\r\n\r\nexport interface TicketsState {\r\n  tickets: Ticket[]\r\n  allComplete: boolean\r\n}\r\n\r\nconst getInitialState = ({\r\n  amount,\r\n  userCurrentTickets,\r\n}: {\r\n  amount: number\r\n  userCurrentTickets: LotteryTicket[]\r\n}): TicketsState => {\r\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\r\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetreivedNumber(ticket.toString()).split(''))\r\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\r\n    id: index,\r\n    numbers: randomTicketsAsStringArray[index - 1],\r\n    duplicateWith: [],\r\n    isComplete: true,\r\n  }))\r\n  return {\r\n    tickets,\r\n    allComplete: true,\r\n  }\r\n}\r\n\r\nconst reducer = (state: TicketsState, action: any) => {\r\n  switch (action.type) {\r\n    case 'updateTicket': {\r\n      const tickets = [...state.tickets]\r\n      const { ticketId, newNumbers } = action.payload\r\n\r\n      const newDuplicates = state.tickets.filter(\r\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\r\n      )\r\n\r\n      // If ticket was duplicate but not duplicate anymore with this update\r\n      // go through previously considered duplicates and remove id of this ticket\r\n      // from their duplicateWith array\r\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\r\n      prevDuplicates.forEach((prevTicketId) => {\r\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\r\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\r\n          const indexToRemvoe = dupsToUpdate.findIndex((id) => id === ticketId)\r\n          dupsToUpdate.splice(indexToRemvoe, 1)\r\n          tickets[prevTicketId - 1] = {\r\n            ...tickets[prevTicketId - 1],\r\n            duplicateWith: dupsToUpdate,\r\n          }\r\n        }\r\n      })\r\n\r\n      // If found duplicates - update their duplicateWith array\r\n      if (newDuplicates.length !== 0) {\r\n        newDuplicates.forEach((duplicate) => {\r\n          tickets[duplicate.id - 1] = {\r\n            ...duplicate,\r\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\r\n          }\r\n        })\r\n      }\r\n\r\n      const updatedTicket = {\r\n        id: ticketId,\r\n        numbers: newNumbers,\r\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\r\n        isComplete: newNumbers.join('').length === 6,\r\n      }\r\n      tickets[ticketId - 1] = updatedTicket\r\n\r\n      // Check if all tickets are filled\r\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\r\n\r\n      return {\r\n        tickets,\r\n        allComplete,\r\n      }\r\n    }\r\n    case 'reset':\r\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\r\n\r\nexport const useTicketsReducer = (\r\n  amount: number,\r\n  userCurrentTickets: LotteryTicket[],\r\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\r\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }, [amount, userCurrentTickets])\r\n\r\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\r\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\r\n  }\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }\r\n\r\n  const getTicketsForPurchase = () => {\r\n    return state.tickets.map((ticket) => {\r\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\r\n      reversedTicket.unshift(1)\r\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\r\n      return ticketAsNumber\r\n    })\r\n  }\r\n\r\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}