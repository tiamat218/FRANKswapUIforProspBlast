{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { LotteryStatus } from 'config/constants/types';\nimport usePreviousValue from 'hooks/usePreviousValue';\nimport { useEffect } from 'react';\nimport { useAppDispatch } from 'state';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery';\nconst useStatusTransitions = () => {\n  _s();\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound: {\n      status\n    }\n  } = useLottery();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const previousStatus = usePreviousValue(status);\n  useEffect(() => {\n    // Only run if there is a status state change\n    if (previousStatus !== status && currentLotteryId) {\n      // Current lottery transitions from CLOSE > CLAIMABLE\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n        if (account) {\n          dispatch(fetchUserLotteries({\n            account,\n            currentLotteryId\n          }));\n        }\n      }\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n        if (account) {\n          dispatch(fetchUserLotteries({\n            account,\n            currentLotteryId\n          }));\n        }\n      }\n    }\n  }, [currentLotteryId, status, previousStatus, account, dispatch]);\n  useEffect(() => {\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\n      dispatch(fetchCurrentLotteryId());\n      dispatch(fetchPublicLotteries({\n        currentLotteryId\n      }));\n      const interval = setInterval(async () => {\n        dispatch(fetchCurrentLotteryId());\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n    return () => null;\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch]);\n};\n_s(useStatusTransitions, \"wcLdGya9oVB3uOdWCc+Sx2dP9bI=\", false, function () {\n  return [useLottery, useWeb3React, useAppDispatch, usePreviousValue];\n});\nexport default useStatusTransitions;","map":{"version":3,"names":["useWeb3React","LotteryStatus","usePreviousValue","useEffect","useAppDispatch","useLottery","fetchPublicLotteries","fetchCurrentLotteryId","fetchUserLotteries","useStatusTransitions","_s","currentLotteryId","isTransitioning","currentRound","status","account","dispatch","previousStatus","CLOSE","CLAIMABLE","OPEN","interval","setInterval","clearInterval"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/hooks/useStatusTransitions.tsx"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\r\n\r\nconst useStatusTransitions = () => {\r\n  const {\r\n    currentLotteryId,\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const previousStatus = usePreviousValue(status)\r\n\r\n  useEffect(() => {\r\n    // Only run if there is a status state change\r\n    if (previousStatus !== status && currentLotteryId) {\r\n      // Current lottery transitions from CLOSE > CLAIMABLE\r\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\r\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n    }\r\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\r\n\r\n  useEffect(() => {\r\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\r\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\r\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\r\n      dispatch(fetchCurrentLotteryId())\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      const interval = setInterval(async () => {\r\n        dispatch(fetchCurrentLotteryId())\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      }, 10000)\r\n      return () => clearInterval(interval)\r\n    }\r\n    return () => null\r\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\r\n}\r\n\r\nexport default useStatusTransitions\r\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,aAAa,QAAQ,wBAAwB;AACtD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,oBAAoB,EAAEC,qBAAqB,EAAEC,kBAAkB,QAAQ,eAAe;AAE/F,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IACJC,gBAAgB;IAChBC,eAAe;IACfC,YAAY,EAAE;MAAEC;IAAO;EACzB,CAAC,GAAGT,UAAU,CAAC,CAAC;EAEhB,MAAM;IAAEU;EAAQ,CAAC,GAAGf,YAAY,CAAC,CAAC;EAClC,MAAMgB,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EACjC,MAAMa,cAAc,GAAGf,gBAAgB,CAACY,MAAM,CAAC;EAE/CX,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,cAAc,KAAKH,MAAM,IAAIH,gBAAgB,EAAE;MACjD;MACA,IAAIM,cAAc,KAAKhB,aAAa,CAACiB,KAAK,IAAIJ,MAAM,KAAKb,aAAa,CAACkB,SAAS,EAAE;QAChFH,QAAQ,CAACV,oBAAoB,CAAC;UAAEK;QAAiB,CAAC,CAAC,CAAC;QACpD,IAAII,OAAO,EAAE;UACXC,QAAQ,CAACR,kBAAkB,CAAC;YAAEO,OAAO;YAAEJ;UAAiB,CAAC,CAAC,CAAC;QAC7D;MACF;MACA;MACA,IAAIM,cAAc,KAAKhB,aAAa,CAACkB,SAAS,IAAIL,MAAM,KAAKb,aAAa,CAACmB,IAAI,EAAE;QAC/EJ,QAAQ,CAACV,oBAAoB,CAAC;UAAEK;QAAiB,CAAC,CAAC,CAAC;QACpD,IAAII,OAAO,EAAE;UACXC,QAAQ,CAACR,kBAAkB,CAAC;YAAEO,OAAO;YAAEJ;UAAiB,CAAC,CAAC,CAAC;QAC7D;MACF;IACF;EACF,CAAC,EAAE,CAACA,gBAAgB,EAAEG,MAAM,EAAEG,cAAc,EAAEF,OAAO,EAAEC,QAAQ,CAAC,CAAC;EAEjEb,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAIc,cAAc,KAAKhB,aAAa,CAACkB,SAAS,IAAIL,MAAM,KAAKb,aAAa,CAACkB,SAAS,IAAIP,eAAe,EAAE;MACvGI,QAAQ,CAACT,qBAAqB,CAAC,CAAC,CAAC;MACjCS,QAAQ,CAACV,oBAAoB,CAAC;QAAEK;MAAiB,CAAC,CAAC,CAAC;MACpD,MAAMU,QAAQ,GAAGC,WAAW,CAAC,YAAY;QACvCN,QAAQ,CAACT,qBAAqB,CAAC,CAAC,CAAC;QACjCS,QAAQ,CAACV,oBAAoB,CAAC;UAAEK;QAAiB,CAAC,CAAC,CAAC;MACtD,CAAC,EAAE,KAAK,CAAC;MACT,OAAO,MAAMY,aAAa,CAACF,QAAQ,CAAC;IACtC;IACA,OAAO,MAAM,IAAI;EACnB,CAAC,EAAE,CAACP,MAAM,EAAEG,cAAc,EAAEL,eAAe,EAAED,gBAAgB,EAAEK,QAAQ,CAAC,CAAC;AAC3E,CAAC;AAAAN,EAAA,CA7CKD,oBAAoB;EAAA,QAKpBJ,UAAU,EAEML,YAAY,EACfI,cAAc,EACRF,gBAAgB;AAAA;AAsCzC,eAAeO,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module"}