{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Swap\\\\components\\\\ConfirmSwapModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { currencyEquals } from '@pancakeswap/sdk';\nimport { useTranslation } from 'contexts/Localization';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from 'components/TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\n\nconst ConfirmSwapModal = ({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  customOnDismiss,\n  recipient,\n  swapErrorMessage,\n  attemptingTxn,\n  txHash\n}) => {\n  _s();\n\n  var _trade$inputAmount$to, _trade$inputAmount, _trade$inputAmount$cu, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount$t, _trade$outputAmount, _trade$outputAmount$c, _trade$outputAmount2, _trade$outputAmount2$;\n\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const {\n    t\n  } = useTranslation();\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      allowedSlippage: allowedSlippage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade]); // text to show while loading\n\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\n    amountA: (_trade$inputAmount$to = trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6)) !== null && _trade$inputAmount$to !== void 0 ? _trade$inputAmount$to : '',\n    symbolA: (_trade$inputAmount$cu = trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol) !== null && _trade$inputAmount$cu !== void 0 ? _trade$inputAmount$cu : '',\n    amountB: (_trade$outputAmount$t = trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6)) !== null && _trade$outputAmount$t !== void 0 ? _trade$outputAmount$t : '',\n    symbolB: (_trade$outputAmount$c = trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol) !== null && _trade$outputAmount$c !== void 0 ? _trade$outputAmount$c : ''\n  });\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n    topContent: modalHeader,\n    bottomContent: modalBottom\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this), [onDismiss, modalBottom, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    title: t('Confirm Swap'),\n    onDismiss: onDismiss,\n    customOnDismiss: customOnDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText,\n    currencyToAdd: trade === null || trade === void 0 ? void 0 : trade.outputAmount.currency\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfirmSwapModal, \"qEvOhHilbCvvUnRd13T6oMb15ik=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ConfirmSwapModal;\nexport default ConfirmSwapModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfirmSwapModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Swap/components/ConfirmSwapModal.tsx"],"names":["React","useCallback","useMemo","currencyEquals","useTranslation","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","customOnDismiss","recipient","swapErrorMessage","attemptingTxn","txHash","showAcceptChanges","Boolean","t","modalHeader","modalBottom","pendingText","amountA","toSignificant","symbolA","symbol","amountB","symbolB","confirmationContent"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport { currencyEquals, Trade } from '@pancakeswap/sdk'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\ninterface ConfirmSwapModalProps {\r\n  trade?: Trade\r\n  originalTrade?: Trade\r\n  attemptingTxn: boolean\r\n  txHash?: string\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage?: string\r\n  customOnDismiss?: () => void\r\n}\r\n\r\nconst ConfirmSwapModal: React.FC<InjectedModalProps & ConfirmSwapModalProps> = ({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  customOnDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  attemptingTxn,\r\n  txHash,\r\n}) => {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  // text to show while loading\r\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\r\n    amountA: trade?.inputAmount?.toSignificant(6) ?? '',\r\n    symbolA: trade?.inputAmount?.currency?.symbol ?? '',\r\n    amountB: trade?.outputAmount?.toSignificant(6) ?? '',\r\n    symbolB: trade?.outputAmount?.currency?.symbol ?? '',\r\n  })\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage],\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      title={t('Confirm Swap')}\r\n      onDismiss={onDismiss}\r\n      customOnDismiss={customOnDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n      currencyToAdd={trade?.outputAmount.currency}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ConfirmSwapModal\r\n"]},"metadata":{},"sourceType":"module"}