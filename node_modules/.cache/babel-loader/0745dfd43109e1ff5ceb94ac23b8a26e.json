{"ast":null,"code":"import { ChainId, JSBI, Percent, WETH } from '@pancakeswap/sdk';\nimport { BUSD, BTCB, CAKE, WBNB } from './tokens';\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E';\n\n// a list of tokens by chain\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\n\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\nexport const ADDITIONAL_BASES = {\n  [ChainId.MAINNET]: {}\n};\n\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {}\n};\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES = {\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], BUSD[ChainId.MAINNET]],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[CAKE[ChainId.MAINNET], WBNB], [BUSD[ChainId.MAINNET], WBNB], [BTCB, WBNB]]\n};\nexport const NetworkContextName = 'NETWORK';\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 50;\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\nexport const BIG_INT_ZERO = JSBI.BigInt(0);\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000);\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport const MIN_BNB = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 BNB\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000));\nexport const ZERO_PERCENT = new Percent('0');\nexport const ONE_HUNDRED_PERCENT = new Percent('1');\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES = [];\nexport { default as farmsConfig } from './farms';\nexport { default as poolsConfig } from './pools';\nexport { default as ifosConfig } from './ifo';","map":{"version":3,"names":["ChainId","JSBI","Percent","WETH","BUSD","BTCB","CAKE","WBNB","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","TESTNET","ADDITIONAL_BASES","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_BNB","exponentiate","BETTER_TRADE_LESS_HOPS_THRESHOLD","ZERO_PERCENT","ONE_HUNDRED_PERCENT","BLOCKED_ADDRESSES","default","farmsConfig","poolsConfig","ifosConfig"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/config/constants/index.ts"],"sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap/sdk'\r\nimport { BUSD, BTCB, CAKE, WBNB } from './tokens'\r\n\r\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], BTCB],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\r\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET],  BUSD[ChainId.MAINNET], ],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [CAKE[ChainId.MAINNET], WBNB],\r\n    [BUSD[ChainId.MAINNET], WBNB],\r\n    [BTCB, WBNB],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much BNB so they end up with <.01\r\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\r\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\r\n\r\nexport const ZERO_PERCENT = new Percent('0')\r\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\r\n\r\n// SDN OFAC addresses\r\nexport const BLOCKED_ADDRESSES: string[] = [\r\n]\r\n\r\nexport { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}