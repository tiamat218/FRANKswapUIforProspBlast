{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract';\nimport useRefresh from 'hooks/useRefresh';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV2Abi from 'config/abi/ifoV2.json';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useIfoAllowance from '../useIfoAllowance';\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoV2Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address);\n  const setPendingTx = (status, poolId) => setState(prevState => ({\n    ...prevState,\n    [poolId]: {\n      ...prevState[poolId],\n      isPendingTx: status\n    }\n  }));\n  const setIsClaimed = poolId => {\n    setState(prevState => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true\n      }\n    }));\n  };\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map(method => ({\n      address,\n      name: method,\n      params: [account, [0, 1]]\n    }));\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls);\n    setState(prevState => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0]\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1]\n      }\n    }));\n  }, [account, address]);\n  useEffect(() => {\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, fetchIfoData, fastRefresh]);\n  return {\n    ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    setIsClaimed,\n    fetchIfoData\n  };\n};\n_s(useGetWalletIfoData, \"epHhSIDgaSsGsXmQ/JCA5FwjNa4=\", false, function () {\n  return [useRefresh, useWeb3React, useIfoV2Contract, useERC20, useIfoAllowance];\n});\nexport default useGetWalletIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","useERC20","useIfoV2Contract","useRefresh","multicallv2","ifoV2Abi","getAddress","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","_s","fastRefresh","state","setState","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","userInfo","amounts","toString"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Ifos/hooks/v2/useGetWalletIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const { fastRefresh } = useRefresh()\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    poolBasic: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n    poolUnlimited: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData, fastRefresh])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}