{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useEffect,useState,useMemo,useCallback}from'react';import styled from'styled-components';import BigNumber from'bignumber.js';import{ethers}from'ethers';import{Modal,Text,Flex,HelpIcon,BalanceInput,Ticket,useTooltip,Skeleton,Button,ArrowForwardIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useWeb3React}from'@web3-react/core';import{getFullDisplayBalance}from'utils/formatBalance';import{getCakeAddress}from'utils/addressHelpers';import{BIG_ZERO,ethersToBigNumber}from'utils/bigNumber';import{useAppDispatch}from'state';import{usePriceCakeBusd}from'state/farms/hooks';import{useLottery}from'state/lottery/hooks';import{fetchUserTicketsAndLotteries}from'state/lottery';import useTheme from'hooks/useTheme';import useTokenBalance,{FetchStatus}from'hooks/useTokenBalance';import useApproveConfirmTransaction from'hooks/useApproveConfirmTransaction';import{useCake,useLotteryV2Contract}from'hooks/useContract';import useToast from'hooks/useToast';import ConnectWalletButton from'components/ConnectWalletButton';import ApproveConfirmButtons,{ButtonArrangement}from'views/Profile/components/ApproveConfirmButtons';import NumTicketsToBuyButton from'./NumTicketsToBuyButton';import EditNumbersModal from'./EditNumbersModal';import{useTicketsReducer}from'./useTicketsReducer';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledModal=styled(Modal)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  min-width: 280px;\\n  max-width: 320px;\\n\"])));const ShortcutButtonsWrapper=styled(Flex)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  justify-content: space-between;\\n  margin-top: 8px;\\n  margin-bottom: 24px;\\n  display: \",\";\\n\"])),_ref=>{let{isVisible}=_ref;return isVisible?'flex':'none';});var BuyingStage;(function(BuyingStage){BuyingStage[\"BUY\"]=\"Buy\";BuyingStage[\"EDIT\"]=\"Edit\";})(BuyingStage||(BuyingStage={}));const BuyTicketsModal=_ref2=>{let{onDismiss}=_ref2;const{account}=useWeb3React();const{t}=useTranslation();const{theme}=useTheme();const{maxNumberTicketsPerBuyOrClaim,currentLotteryId,currentRound:{priceTicketInCake,discountDivisor,userTickets:{tickets:userCurrentTickets}}}=useLottery();const[ticketsToBuy,setTicketsToBuy]=useState('');const[discountValue,setDiscountValue]=useState('');const[totalCost,setTotalCost]=useState('');const[ticketCostBeforeDiscount,setTicketCostBeforeDiscount]=useState('');const[buyingStage,setBuyingStage]=useState(BuyingStage.BUY);const[maxPossibleTicketPurchase,setMaxPossibleTicketPurchase]=useState(BIG_ZERO);const[maxTicketPurchaseExceeded,setMaxTicketPurchaseExceeded]=useState(false);const[userNotEnoughCake,setUserNotEnoughCake]=useState(false);const lotteryContract=useLotteryV2Contract();const cakeContract=useCake();const{toastSuccess}=useToast();const{balance:userCake,fetchStatus}=useTokenBalance(getCakeAddress());// balance from useTokenBalance causes rerenders in effects as a new BigNumber is instanciated on each render, hence memoising it using the stringified value below.\nconst stringifiedUserCake=userCake.toJSON();const memoisedUserCake=useMemo(()=>new BigNumber(stringifiedUserCake),[stringifiedUserCake]);const cakePriceBusd=usePriceCakeBusd();const dispatch=useAppDispatch();const hasFetchedBalance=fetchStatus===FetchStatus.SUCCESS;const userCakeDisplayBalance=getFullDisplayBalance(userCake,18,3);const TooltipComponent=()=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{mb:\"16px\",children:t('Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:')}),/*#__PURE__*/_jsx(Text,{children:t('2 tickets: 0.05%')}),/*#__PURE__*/_jsx(Text,{children:t('50 tickets: 2.45%')}),/*#__PURE__*/_jsx(Text,{children:t('100 tickets: 4.95%')})]});const{targetRef,tooltip,tooltipVisible}=useTooltip(/*#__PURE__*/_jsx(TooltipComponent,{}),{placement:'bottom-end',tooltipOffset:[20,10]});const limitNumberByMaxTicketsPerBuy=useCallback(number=>{return number.gt(maxNumberTicketsPerBuyOrClaim)?maxNumberTicketsPerBuyOrClaim:number;},[maxNumberTicketsPerBuyOrClaim]);const getTicketCostAfterDiscount=useCallback(numberTickets=>{const totalAfterDiscount=priceTicketInCake.times(numberTickets).times(discountDivisor.plus(1).minus(numberTickets)).div(discountDivisor);return totalAfterDiscount;},[discountDivisor,priceTicketInCake]);const getMaxTicketBuyWithDiscount=useCallback(numberTickets=>{const costAfterDiscount=getTicketCostAfterDiscount(numberTickets);const costBeforeDiscount=priceTicketInCake.times(numberTickets);const discountAmount=costBeforeDiscount.minus(costAfterDiscount);const ticketsBoughtWithDiscount=discountAmount.div(priceTicketInCake);const overallTicketBuy=numberTickets.plus(ticketsBoughtWithDiscount);return{overallTicketBuy,ticketsBoughtWithDiscount};},[getTicketCostAfterDiscount,priceTicketInCake]);const validateInput=useCallback(inputNumber=>{const limitedNumberTickets=limitNumberByMaxTicketsPerBuy(inputNumber);const cakeCostAfterDiscount=getTicketCostAfterDiscount(limitedNumberTickets);if(cakeCostAfterDiscount.gt(userCake)){setUserNotEnoughCake(true);}else if(limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)){setMaxTicketPurchaseExceeded(true);}else{setUserNotEnoughCake(false);setMaxTicketPurchaseExceeded(false);}},[limitNumberByMaxTicketsPerBuy,getTicketCostAfterDiscount,maxNumberTicketsPerBuyOrClaim,userCake]);useEffect(()=>{const getMaxPossiblePurchase=()=>{const maxBalancePurchase=memoisedUserCake.div(priceTicketInCake);const limitedMaxPurchase=limitNumberByMaxTicketsPerBuy(maxBalancePurchase);let maxPurchase;// If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\nif(limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)){// Get max tickets purchaseble with the users' balance, as well as using the discount to buy tickets\nconst{overallTicketBuy:maxPlusDiscountTickets}=getMaxTicketBuyWithDiscount(limitedMaxPurchase);// Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\nconst{ticketsBoughtWithDiscount:secondTicketDiscountBuy}=getMaxTicketBuyWithDiscount(maxPlusDiscountTickets);// Add the additional tickets that can be bought with the discount, to the original max purchase\nmaxPurchase=limitedMaxPurchase.plus(secondTicketDiscountBuy);}else{maxPurchase=limitedMaxPurchase;}if(hasFetchedBalance&&maxPurchase.lt(1)){setUserNotEnoughCake(true);}else{setUserNotEnoughCake(false);}setMaxPossibleTicketPurchase(maxPurchase);};getMaxPossiblePurchase();},[maxNumberTicketsPerBuyOrClaim,priceTicketInCake,memoisedUserCake,limitNumberByMaxTicketsPerBuy,getTicketCostAfterDiscount,getMaxTicketBuyWithDiscount,hasFetchedBalance]);useEffect(()=>{const numberOfTicketsToBuy=new BigNumber(ticketsToBuy);const costAfterDiscount=getTicketCostAfterDiscount(numberOfTicketsToBuy);const costBeforeDiscount=priceTicketInCake.times(numberOfTicketsToBuy);const discountBeingApplied=costBeforeDiscount.minus(costAfterDiscount);setTicketCostBeforeDiscount(costBeforeDiscount.gt(0)?getFullDisplayBalance(costBeforeDiscount):'0');setTotalCost(costAfterDiscount.gt(0)?getFullDisplayBalance(costAfterDiscount):'0');setDiscountValue(discountBeingApplied.gt(0)?getFullDisplayBalance(discountBeingApplied,18,5):'0');},[ticketsToBuy,priceTicketInCake,discountDivisor,getTicketCostAfterDiscount]);const getNumTicketsByPercentage=percentage=>{const percentageOfMaxTickets=maxPossibleTicketPurchase.gt(0)?maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage)):BIG_ZERO;return Math.floor(percentageOfMaxTickets.toNumber());};const tenPercentOfBalance=getNumTicketsByPercentage(10);const twentyFivePercentOfBalance=getNumTicketsByPercentage(25);const fiftyPercentOfBalance=getNumTicketsByPercentage(50);const oneHundredPercentOfBalance=getNumTicketsByPercentage(100);const handleInputChange=input=>{// Force input to integer\nconst inputAsInt=parseInt(input,10);const inputAsBN=new BigNumber(inputAsInt);const limitedNumberTickets=limitNumberByMaxTicketsPerBuy(inputAsBN);validateInput(inputAsBN);setTicketsToBuy(inputAsInt?limitedNumberTickets.toString():'');};const handleNumberButtonClick=number=>{setTicketsToBuy(number.toFixed());setUserNotEnoughCake(false);setMaxTicketPurchaseExceeded(false);};const[updateTicket,randomize,tickets,allComplete,getTicketsForPurchase]=useTicketsReducer(parseInt(ticketsToBuy,10),userCurrentTickets);const{isApproving,isApproved,isConfirmed,isConfirming,handleApprove,handleConfirm}=useApproveConfirmTransaction({onRequiresApproval:async()=>{try{const response=await cakeContract.allowance(account,lotteryContract.address);const currentAllowance=ethersToBigNumber(response);return currentAllowance.gt(0);}catch(error){return false;}},onApprove:()=>{return cakeContract.approve(lotteryContract.address,ethers.constants.MaxUint256);},onApproveSuccess:async()=>{toastSuccess(t('Contract enabled - you can now purchase tickets'));},onConfirm:()=>{const ticketsForPurchase=getTicketsForPurchase();return lotteryContract.buyTickets(currentLotteryId,ticketsForPurchase);},onSuccess:async()=>{onDismiss();dispatch(fetchUserTicketsAndLotteries({account,currentLotteryId}));toastSuccess(t('Lottery tickets purchased!'));}});const getErrorMessage=()=>{if(userNotEnoughCake)return t('Insufficient CAKE balance');return t('The maximum number of tickets you can buy in one transaction is %maxTickets%',{maxTickets:maxNumberTicketsPerBuyOrClaim.toString()});};const percentageDiscount=()=>{const percentageAsBn=new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100);if(percentageAsBn.isNaN()||percentageAsBn.eq(0)){return 0;}return percentageAsBn.toNumber().toFixed(2);};const disableBuying=!isApproved||isConfirmed||userNotEnoughCake||!ticketsToBuy||new BigNumber(ticketsToBuy).lte(0)||getTicketsForPurchase().length!==parseInt(ticketsToBuy,10);if(buyingStage===BuyingStage.EDIT){return/*#__PURE__*/_jsx(EditNumbersModal,{totalCost:totalCost,updateTicket:updateTicket,randomize:randomize,tickets:tickets,allComplete:allComplete,onConfirm:handleConfirm,isConfirming:isConfirming,onDismiss:()=>setBuyingStage(BuyingStage.BUY)});}return/*#__PURE__*/_jsxs(StyledModal,{title:t('Buy Tickets'),onDismiss:onDismiss,headerBackground:theme.colors.gradients.cardHeader,children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mb:\"8px\",children:[/*#__PURE__*/_jsxs(Text,{color:\"textSubtle\",children:[t('Buy'),\":\"]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",minWidth:\"70px\",children:[/*#__PURE__*/_jsx(Text,{mr:\"4px\",bold:true,children:t('Tickets')}),/*#__PURE__*/_jsx(Ticket,{})]})]}),/*#__PURE__*/_jsx(BalanceInput,{isWarning:userNotEnoughCake||maxTicketPurchaseExceeded,placeholder:\"0\",value:ticketsToBuy,onUserInput:handleInputChange,currencyValue:cakePriceBusd.gt(0)&&\"~\".concat(ticketsToBuy?getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))):'0.00',\" CAKE\")}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"flex-end\",mt:\"4px\",mb:\"12px\",children:/*#__PURE__*/_jsxs(Flex,{justifyContent:\"flex-end\",flexDirection:\"column\",children:[(userNotEnoughCake||maxTicketPurchaseExceeded)&&/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"failure\",children:getErrorMessage()}),/*#__PURE__*/_jsxs(Flex,{justifyContent:\"flex-end\",children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"12px\",color:\"textSubtle\",mr:\"4px\",children:[\"CAKE \",t('Balance'),\":\"]}),hasFetchedBalance?/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",children:userCakeDisplayBalance}):/*#__PURE__*/_jsx(Skeleton,{width:50,height:12})]})]})}),!hasFetchedBalance?/*#__PURE__*/_jsx(Skeleton,{width:\"100%\",height:20,mt:\"8px\",mb:\"24px\"}):/*#__PURE__*/_jsxs(ShortcutButtonsWrapper,{isVisible:hasFetchedBalance&&oneHundredPercentOfBalance>=1,children:[tenPercentOfBalance>=1&&/*#__PURE__*/_jsx(NumTicketsToBuyButton,{onClick:()=>handleNumberButtonClick(tenPercentOfBalance),children:hasFetchedBalance?tenPercentOfBalance:\"\"}),twentyFivePercentOfBalance>=1&&/*#__PURE__*/_jsx(NumTicketsToBuyButton,{onClick:()=>handleNumberButtonClick(twentyFivePercentOfBalance),children:hasFetchedBalance?twentyFivePercentOfBalance:\"\"}),fiftyPercentOfBalance>=1&&/*#__PURE__*/_jsx(NumTicketsToBuyButton,{onClick:()=>handleNumberButtonClick(fiftyPercentOfBalance),children:hasFetchedBalance?fiftyPercentOfBalance:\"\"}),oneHundredPercentOfBalance>=1&&/*#__PURE__*/_jsx(NumTicketsToBuyButton,{onClick:()=>handleNumberButtonClick(oneHundredPercentOfBalance),children:\"MAX\"})]}),/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsxs(Flex,{mb:\"8px\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Text,{color:\"textSubtle\",fontSize:\"14px\",children:[t('Cost'),\" (CAKE)\"]}),/*#__PURE__*/_jsxs(Text,{color:\"textSubtle\",fontSize:\"14px\",children:[priceTicketInCake&&getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy||0)),\" CAKE\"]})]}),/*#__PURE__*/_jsxs(Flex,{mb:\"8px\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Flex,{children:[/*#__PURE__*/_jsxs(Text,{display:\"inline\",bold:true,fontSize:\"14px\",mr:\"4px\",children:[discountValue&&totalCost?percentageDiscount():0,\"%\"]}),/*#__PURE__*/_jsx(Text,{display:\"inline\",color:\"textSubtle\",fontSize:\"14px\",children:t('Bulk discount')}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",ref:targetRef,children:/*#__PURE__*/_jsx(HelpIcon,{ml:\"4px\",width:\"14px\",height:\"14px\",color:\"textSubtle\"})})]}),/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",color:\"textSubtle\",children:[\"~\",discountValue,\" CAKE\"]})]}),/*#__PURE__*/_jsxs(Flex,{borderTop:\"1px solid \".concat(theme.colors.cardBorder),pt:\"8px\",mb:\"24px\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Text,{color:\"textSubtle\",fontSize:\"16px\",children:t('You pay')}),/*#__PURE__*/_jsxs(Text,{fontSize:\"16px\",bold:true,children:[\"~\",totalCost,\" CAKE\"]})]}),account?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ApproveConfirmButtons,{isApproveDisabled:isApproved,isApproving:isApproving,isConfirmDisabled:disableBuying,isConfirming:isConfirming,onApprove:handleApprove,onConfirm:handleConfirm,buttonArrangement:ButtonArrangement.SEQUENTIAL,confirmLabel:t('Buy Instantly')}),isApproved&&/*#__PURE__*/_jsx(Button,{id:\"lottery_buy_ins_\".concat(ticketsToBuy),variant:\"secondary\",mt:\"8px\",disabled:disableBuying||isConfirming,onClick:()=>{setBuyingStage(BuyingStage.EDIT);},children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[t('View/Edit Numbers'),' ',/*#__PURE__*/_jsx(ArrowForwardIcon,{mt:\"2px\",color:disableBuying||isConfirming?'disabled':'primary',height:\"24px\",width:\"24px\"})]})})]}):/*#__PURE__*/_jsx(ConnectWalletButton,{}),/*#__PURE__*/_jsx(Text,{mt:\"24px\",fontSize:\"12px\",color:\"textSubtle\",children:t('\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.')})]})]});};export default BuyTicketsModal;","map":{"version":3,"names":["React","useEffect","useState","useMemo","useCallback","styled","BigNumber","ethers","Modal","Text","Flex","HelpIcon","BalanceInput","Ticket","useTooltip","Skeleton","Button","ArrowForwardIcon","useTranslation","useWeb3React","getFullDisplayBalance","getCakeAddress","BIG_ZERO","ethersToBigNumber","useAppDispatch","usePriceCakeBusd","useLottery","fetchUserTicketsAndLotteries","useTheme","useTokenBalance","FetchStatus","useApproveConfirmTransaction","useCake","useLotteryV2Contract","useToast","ConnectWalletButton","ApproveConfirmButtons","ButtonArrangement","NumTicketsToBuyButton","EditNumbersModal","useTicketsReducer","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","StyledModal","_templateObject","_taggedTemplateLiteral","ShortcutButtonsWrapper","_templateObject2","_ref","isVisible","BuyingStage","BuyTicketsModal","_ref2","onDismiss","account","t","theme","maxNumberTicketsPerBuyOrClaim","currentLotteryId","currentRound","priceTicketInCake","discountDivisor","userTickets","tickets","userCurrentTickets","ticketsToBuy","setTicketsToBuy","discountValue","setDiscountValue","totalCost","setTotalCost","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","buyingStage","setBuyingStage","BUY","maxPossibleTicketPurchase","setMaxPossibleTicketPurchase","maxTicketPurchaseExceeded","setMaxTicketPurchaseExceeded","userNotEnoughCake","setUserNotEnoughCake","lotteryContract","cakeContract","toastSuccess","balance","userCake","fetchStatus","stringifiedUserCake","toJSON","memoisedUserCake","cakePriceBusd","dispatch","hasFetchedBalance","SUCCESS","userCakeDisplayBalance","TooltipComponent","children","mb","targetRef","tooltip","tooltipVisible","placement","tooltipOffset","limitNumberByMaxTicketsPerBuy","number","gt","getTicketCostAfterDiscount","numberTickets","totalAfterDiscount","times","plus","minus","div","getMaxTicketBuyWithDiscount","costAfterDiscount","costBeforeDiscount","discountAmount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","cakeCostAfterDiscount","eq","getMaxPossiblePurchase","maxBalancePurchase","limitedMaxPurchase","maxPurchase","lt","maxPlusDiscountTickets","secondTicketDiscountBuy","numberOfTicketsToBuy","discountBeingApplied","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","Math","floor","toNumber","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleInputChange","input","inputAsInt","parseInt","inputAsBN","toString","handleNumberButtonClick","toFixed","updateTicket","randomize","allComplete","getTicketsForPurchase","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","address","currentAllowance","error","onApprove","approve","constants","MaxUint256","onApproveSuccess","onConfirm","ticketsForPurchase","buyTickets","onSuccess","getErrorMessage","maxTickets","percentageDiscount","percentageAsBn","isNaN","disableBuying","lte","length","EDIT","title","headerBackground","colors","gradients","cardHeader","alignItems","justifyContent","color","minWidth","mr","bold","isWarning","placeholder","value","onUserInput","currencyValue","concat","mt","flexDirection","fontSize","width","height","onClick","display","ref","ml","borderTop","cardBorder","pt","isApproveDisabled","isConfirmDisabled","buttonArrangement","SEQUENTIAL","confirmLabel","id","variant","disabled"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Flex,\r\n  HelpIcon,\r\n  BalanceInput,\r\n  Ticket,\r\n  useTooltip,\r\n  Skeleton,\r\n  Button,\r\n  ArrowForwardIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ApproveConfirmButtons, { ButtonArrangement } from 'views/Profile/components/ApproveConfirmButtons'\r\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\r\nimport EditNumbersModal from './EditNumbersModal'\r\nimport { useTicketsReducer } from './useTicketsReducer'\r\n\r\nconst StyledModal = styled(Modal)`\r\n  min-width: 280px;\r\n  max-width: 320px;\r\n`\r\n\r\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\r\n  justify-content: space-between;\r\n  margin-top: 8px;\r\n  margin-bottom: 24px;\r\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\r\n`\r\n\r\ninterface BuyTicketsModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nenum BuyingStage {\r\n  BUY = 'Buy',\r\n  EDIT = 'Edit',\r\n}\r\n\r\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const {\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    currentLotteryId,\r\n    currentRound: {\r\n      priceTicketInCake,\r\n      discountDivisor,\r\n      userTickets: { tickets: userCurrentTickets },\r\n    },\r\n  } = useLottery()\r\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\r\n  const [discountValue, setDiscountValue] = useState('')\r\n  const [totalCost, setTotalCost] = useState('')\r\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\r\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\r\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\r\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\r\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const cakeContract = useCake()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCake, fetchStatus } = useTokenBalance(getCakeAddress())\r\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instanciated on each render, hence memoising it using the stringified value below.\r\n  const stringifiedUserCake = userCake.toJSON()\r\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS\r\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3)\r\n\r\n  const TooltipComponent = () => (\r\n    <>\r\n      <Text mb=\"16px\">\r\n        {t(\r\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\r\n        )}\r\n      </Text>\r\n      <Text>{t('2 tickets: 0.05%')}</Text>\r\n      <Text>{t('50 tickets: 2.45%')}</Text>\r\n      <Text>{t('100 tickets: 4.95%')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  const limitNumberByMaxTicketsPerBuy = useCallback(\r\n    (number: BigNumber) => {\r\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\r\n    },\r\n    [maxNumberTicketsPerBuyOrClaim],\r\n  )\r\n\r\n  const getTicketCostAfterDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const totalAfterDiscount = priceTicketInCake\r\n        .times(numberTickets)\r\n        .times(discountDivisor.plus(1).minus(numberTickets))\r\n        .div(discountDivisor)\r\n      return totalAfterDiscount\r\n    },\r\n    [discountDivisor, priceTicketInCake],\r\n  )\r\n\r\n  const getMaxTicketBuyWithDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\r\n      const costBeforeDiscount = priceTicketInCake.times(numberTickets)\r\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\r\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake)\r\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\r\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\r\n    },\r\n    [getTicketCostAfterDiscount, priceTicketInCake],\r\n  )\r\n\r\n  const validateInput = useCallback(\r\n    (inputNumber: BigNumber) => {\r\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\r\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\r\n\r\n      if (cakeCostAfterDiscount.gt(userCake)) {\r\n        setUserNotEnoughCake(true)\r\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\r\n        setMaxTicketPurchaseExceeded(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n        setMaxTicketPurchaseExceeded(false)\r\n      }\r\n    },\r\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const getMaxPossiblePurchase = () => {\r\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake)\r\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\r\n      let maxPurchase\r\n\r\n      // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\r\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\r\n        // Get max tickets purchaseble with the users' balance, as well as using the discount to buy tickets\r\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\r\n\r\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\r\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\r\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\r\n\r\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\r\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\r\n      } else {\r\n        maxPurchase = limitedMaxPurchase\r\n      }\r\n\r\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\r\n        setUserNotEnoughCake(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n      }\r\n\r\n      setMaxPossibleTicketPurchase(maxPurchase)\r\n    }\r\n    getMaxPossiblePurchase()\r\n  }, [\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    priceTicketInCake,\r\n    memoisedUserCake,\r\n    limitNumberByMaxTicketsPerBuy,\r\n    getTicketCostAfterDiscount,\r\n    getMaxTicketBuyWithDiscount,\r\n    hasFetchedBalance,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\r\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\r\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\r\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\r\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0')\r\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\r\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0')\r\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\r\n\r\n  const getNumTicketsByPercentage = (percentage: number): number => {\r\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\r\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\r\n      : BIG_ZERO\r\n    return Math.floor(percentageOfMaxTickets.toNumber())\r\n  }\r\n\r\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\r\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\r\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\r\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\r\n\r\n  const handleInputChange = (input: string) => {\r\n    // Force input to integer\r\n    const inputAsInt = parseInt(input, 10)\r\n    const inputAsBN = new BigNumber(inputAsInt)\r\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\r\n    validateInput(inputAsBN)\r\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\r\n  }\r\n\r\n  const handleNumberButtonClick = (number: number) => {\r\n    setTicketsToBuy(number.toFixed())\r\n    setUserNotEnoughCake(false)\r\n    setMaxTicketPurchaseExceeded(false)\r\n  }\r\n\r\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\r\n    parseInt(ticketsToBuy, 10),\r\n    userCurrentTickets,\r\n  )\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await cakeContract.allowance(account, lotteryContract.address)\r\n          const currentAllowance = ethersToBigNumber(response)\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return cakeContract.approve(lotteryContract.address, ethers.constants.MaxUint256)\r\n      },\r\n      onApproveSuccess: async () => {\r\n        toastSuccess(t('Contract enabled - you can now purchase tickets'))\r\n      },\r\n      onConfirm: () => {\r\n        const ticketsForPurchase = getTicketsForPurchase()\r\n        return lotteryContract.buyTickets(currentLotteryId, ticketsForPurchase)\r\n      },\r\n      onSuccess: async () => {\r\n        onDismiss()\r\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n        toastSuccess(t('Lottery tickets purchased!'))\r\n      },\r\n    })\r\n\r\n  const getErrorMessage = () => {\r\n    if (userNotEnoughCake) return t('Insufficient CAKE balance')\r\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\r\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\r\n    })\r\n  }\r\n\r\n  const percentageDiscount = () => {\r\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\r\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\r\n      return 0\r\n    }\r\n    return percentageAsBn.toNumber().toFixed(2)\r\n  }\r\n\r\n  const disableBuying =\r\n    !isApproved ||\r\n    isConfirmed ||\r\n    userNotEnoughCake ||\r\n    !ticketsToBuy ||\r\n    new BigNumber(ticketsToBuy).lte(0) ||\r\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\r\n\r\n  if (buyingStage === BuyingStage.EDIT) {\r\n    return (\r\n      <EditNumbersModal\r\n        totalCost={totalCost}\r\n        updateTicket={updateTicket}\r\n        randomize={randomize}\r\n        tickets={tickets}\r\n        allComplete={allComplete}\r\n        onConfirm={handleConfirm}\r\n        isConfirming={isConfirming}\r\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      {tooltipVisible && tooltip}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Text mr=\"4px\" bold>\r\n            {t('Tickets')}\r\n          </Text>\r\n          <Ticket />\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        isWarning={userNotEnoughCake || maxTicketPurchaseExceeded}\r\n        placeholder=\"0\"\r\n        value={ticketsToBuy}\r\n        onUserInput={handleInputChange}\r\n        currencyValue={\r\n          cakePriceBusd.gt(0) &&\r\n          `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\r\n        }\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\r\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\r\n          {(userNotEnoughCake || maxTicketPurchaseExceeded) && (\r\n            <Text fontSize=\"12px\" color=\"failure\">\r\n              {getErrorMessage()}\r\n            </Text>\r\n          )}\r\n          <Flex justifyContent=\"flex-end\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\r\n              CAKE {t('Balance')}:\r\n            </Text>\r\n            {hasFetchedBalance ? (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                {userCakeDisplayBalance}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width={50} height={12} />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      {!hasFetchedBalance ? (\r\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\r\n      ) : (\r\n        <ShortcutButtonsWrapper isVisible={hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\r\n          {tenPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\r\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {twentyFivePercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\r\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {fiftyPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\r\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {oneHundredPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\r\n              MAX\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n        </ShortcutButtonsWrapper>\r\n      )}\r\n      <Flex flexDirection=\"column\">\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Cost')} (CAKE)\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0))} CAKE\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\r\n              {discountValue && totalCost ? percentageDiscount() : 0}%\r\n            </Text>\r\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Bulk discount')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\r\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\r\n            </Flex>\r\n          </Flex>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            ~{discountValue} CAKE\r\n          </Text>\r\n        </Flex>\r\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"16px\">\r\n            {t('You pay')}\r\n          </Text>\r\n          <Text fontSize=\"16px\" bold>\r\n            ~{totalCost} CAKE\r\n          </Text>\r\n        </Flex>\r\n\r\n        {account ? (\r\n          <>\r\n            <ApproveConfirmButtons\r\n              isApproveDisabled={isApproved}\r\n              isApproving={isApproving}\r\n              isConfirmDisabled={disableBuying}\r\n              isConfirming={isConfirming}\r\n              onApprove={handleApprove}\r\n              onConfirm={handleConfirm}\r\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\r\n              confirmLabel={t('Buy Instantly')}\r\n            />\r\n            {isApproved && (\r\n              <Button\r\n                id={`lottery_buy_ins_${ticketsToBuy}`}\r\n                variant=\"secondary\"\r\n                mt=\"8px\"\r\n                disabled={disableBuying || isConfirming}\r\n                onClick={() => {\r\n                  setBuyingStage(BuyingStage.EDIT)\r\n                }}\r\n              >\r\n                <Flex alignItems=\"center\">\r\n                  {t('View/Edit Numbers')}{' '}\r\n                  <ArrowForwardIcon\r\n                    mt=\"2px\"\r\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\r\n                    height=\"24px\"\r\n                    width=\"24px\"\r\n                  />\r\n                </Flex>\r\n              </Button>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <ConnectWalletButton />\r\n        )}\r\n\r\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t(\r\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketsModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}