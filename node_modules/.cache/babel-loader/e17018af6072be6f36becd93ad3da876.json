{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\ClaimButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClaimButton = ({\n  poolId,\n  ifoVersion,\n  walletIfoData\n}) => {\n  _s();\n\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n\n  const setPendingTx = isPending => walletIfoData.setPendingTx(isPending, poolId);\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true);\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest();\n        await tx.wait();\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1);\n        await tx.wait();\n      }\n\n      walletIfoData.setIsClaimed(poolId);\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'));\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      console.error(error);\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClaim,\n    disabled: userPoolCharacteristics.isPendingTx,\n    width: \"100%\",\n    isLoading: userPoolCharacteristics.isPendingTx,\n    endIcon: userPoolCharacteristics.isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n      spin: true,\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 54\n    }, this) : null,\n    children: t('Claim')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimButton, \"TVDcUOFoSEiY1eHYJog8Xwml5SU=\", false, function () {\n  return [useTranslation, useToast];\n});\n\n_c = ClaimButton;\nexport default ClaimButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimButton\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"names":["React","AutoRenewIcon","Button","PoolIds","useTranslation","useToast","ClaimButton","poolId","ifoVersion","walletIfoData","userPoolCharacteristics","t","toastError","toastSuccess","setPendingTx","isPending","handleClaim","tx","contract","harvest","wait","harvestPool","poolBasic","setIsClaimed","error","console","isPendingTx"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,oBAAtC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAQA,MAAMC,WAA4B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAA2C;AAAA;;AAC9E,QAAMC,uBAAuB,GAAGD,aAAa,CAACF,MAAD,CAA7C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAQP,cAAc,EAA5B;AACA,QAAM;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BR,QAAQ,EAA7C;;AAEA,QAAMS,YAAY,GAAIC,SAAD,IAAwBN,aAAa,CAACK,YAAd,CAA2BC,SAA3B,EAAsCR,MAAtC,CAA7C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC9B,QAAI;AACFF,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAIN,UAAU,KAAK,CAAnB,EAAsB;AACpB,cAAMS,EAAE,GAAG,MAAMR,aAAa,CAACS,QAAd,CAAuBC,OAAvB,EAAjB;AACA,cAAMF,EAAE,CAACG,IAAH,EAAN;AACD,OAHD,MAGO;AACL,cAAMH,EAAE,GAAG,MAAMR,aAAa,CAACS,QAAd,CAAuBG,WAAvB,CAAmCd,MAAM,KAAKJ,OAAO,CAACmB,SAAnB,GAA+B,CAA/B,GAAmC,CAAtE,CAAjB;AACA,cAAML,EAAE,CAACG,IAAH,EAAN;AACD;;AAEDX,MAAAA,aAAa,CAACc,YAAd,CAA2BhB,MAA3B;AACAM,MAAAA,YAAY,CAACF,CAAC,CAAC,UAAD,CAAF,EAAgBA,CAAC,CAAC,6CAAD,CAAjB,CAAZ;AACD,KAbD,CAaE,OAAOa,KAAP,EAAc;AACdZ,MAAAA,UAAU,CAACD,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV;AACAc,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAhBD,SAgBU;AACRV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GApBD;;AAsBA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEE,WADX;AAEE,IAAA,QAAQ,EAAEN,uBAAuB,CAACgB,WAFpC;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,SAAS,EAAEhB,uBAAuB,CAACgB,WAJrC;AAKE,IAAA,OAAO,EAAEhB,uBAAuB,CAACgB,WAAxB,gBAAsC,QAAC,aAAD;AAAe,MAAA,IAAI,MAAnB;AAAoB,MAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAtC,GAAoF,IAL/F;AAAA,cAOGf,CAAC,CAAC,OAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxCD;;GAAML,W;UAEUF,c,EACuBC,Q;;;KAHjCC,W;AA0CN,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\r\nimport { PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifoVersion: number\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\r\n\r\n  const handleClaim = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n\r\n      if (ifoVersion === 1) {\r\n        const tx = await walletIfoData.contract.harvest()\r\n        await tx.wait()\r\n      } else {\r\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\r\n        await tx.wait()\r\n      }\r\n\r\n      walletIfoData.setIsClaimed(poolId)\r\n      toastSuccess(t('Success!'), t('You have successfully claimed your rewards.'))\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      console.error(error)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClaim}\r\n      disabled={userPoolCharacteristics.isPendingTx}\r\n      width=\"100%\"\r\n      isLoading={userPoolCharacteristics.isPendingTx}\r\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n    >\r\n      {t('Claim')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n"]},"metadata":{},"sourceType":"module"}