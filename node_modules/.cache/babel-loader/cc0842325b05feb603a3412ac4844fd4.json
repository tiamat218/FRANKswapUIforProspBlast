{"ast":null,"code":"export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency; // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n\n  let aprAsDecimal = farmApr / 100;\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = farmApr / 100 * performanceFee;\n    const aprAfterFee = farmApr - feeRelativeToApr;\n    aprAsDecimal = aprAfterFee / 100;\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365; // Calculate the starting TOKEN balance with a dollar balance of $1000.\n\n  const principal = 1000 / tokenPrice; // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear); // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n\n  const interestEarned = finalAmount - principal;\n  return parseFloat(interestEarned.toFixed(roundingDecimals));\n};\nexport const getRoi = ({\n  amountEarned,\n  amountInvested\n}) => {\n  const percentage = amountEarned / amountInvested * 100;\n  return percentage;\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/compoundApyHelpers.ts"],"names":["tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","feeRelativeToApr","aprAfterFee","daysAsDecimalOfYear","principal","finalAmount","interestEarned","parseFloat","toFixed","getRoi","amountEarned","amountInvested","percentage"],"mappings":"AAAA,OAAO,MAAMA,wCAAwC,GAAG,CAAC;AACvDC,EAAAA,YADuD;AAEvDC,EAAAA,OAFuD;AAGvDC,EAAAA,UAHuD;AAIvDC,EAAAA,gBAAgB,GAAG,CAJoC;AAKvDC,EAAAA,iBAAiB,GAAG,CALmC;AAMvDC,EAAAA,cAAc,GAAG;AANsC,CAAD,KAOlD;AACJ;AACA,QAAMC,eAAe,GAAG,MAAMF,iBAA9B,CAFI,CAGJ;;AACA,MAAIG,YAAY,GAAGN,OAAO,GAAG,GAA7B;;AAEA,MAAII,cAAJ,EAAoB;AAClB;AACA,UAAMG,gBAAgB,GAAIP,OAAO,GAAG,GAAX,GAAkBI,cAA3C;AACA,UAAMI,WAAW,GAAGR,OAAO,GAAGO,gBAA9B;AACAD,IAAAA,YAAY,GAAGE,WAAW,GAAG,GAA7B;AACD;;AAED,QAAMC,mBAAmB,GAAGV,YAAY,GAAG,GAA3C,CAbI,CAcJ;;AACA,QAAMW,SAAS,GAAG,OAAOT,UAAzB,CAfI,CAgBJ;;AACA,QAAMU,WAAW,GAAGD,SAAS,GAAG,CAAC,IAAIJ,YAAY,GAAGD,eAApB,MAAyCA,eAAe,GAAGI,mBAA3D,CAAhC,CAjBI,CAkBJ;;AACA,QAAMG,cAAc,GAAGD,WAAW,GAAGD,SAArC;AAEA,SAAOG,UAAU,CAACD,cAAc,CAACE,OAAf,CAAuBZ,gBAAvB,CAAD,CAAjB;AACD,CA7BM;AA+BP,OAAO,MAAMa,MAAM,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAsC;AAC1D,QAAMC,UAAU,GAAIF,YAAY,GAAGC,cAAhB,GAAkC,GAArD;AACA,SAAOC,UAAP;AACD,CAHM","sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  let aprAsDecimal = farmApr / 100\r\n\r\n  if (performanceFee) {\r\n    // Reduce the APR by the % performance fee\r\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\r\n    const aprAfterFee = farmApr - feeRelativeToApr\r\n    aprAsDecimal = aprAfterFee / 100\r\n  }\r\n\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n"]},"metadata":{},"sourceType":"module"}