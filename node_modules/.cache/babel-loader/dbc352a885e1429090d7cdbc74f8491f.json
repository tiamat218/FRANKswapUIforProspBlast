{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\ContributeButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Button, useModal } from '@pancakeswap/uikit';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useTranslation } from 'contexts/Localization';\nimport useTokenBalance from 'hooks/useTokenBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport useToast from 'hooks/useToast';\nimport ContributeModal from './ContributeModal';\nimport GetLpModal from './GetLpModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContributeButton = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData\n}) => {\n  _s();\n\n  const publicPoolCharacteristics = publicIfoData[poolId];\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    isPendingTx,\n    amountTokenCommittedInLP\n  } = userPoolCharacteristics;\n  const {\n    limitPerUserInLP\n  } = publicPoolCharacteristics;\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    balance: userCurrencyBalance\n  } = useTokenBalance(getAddress(ifo.currency.address)); // Refetch all the data, and display a message when fetching is done\n\n  const handleContributeSuccess = async amount => {\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()]);\n    toastSuccess(t('Success!'), t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!', {\n      amount: getBalanceNumber(amount)\n    }));\n  };\n\n  const [onPresentContributeModal] = useModal( /*#__PURE__*/_jsxDEV(ContributeModal, {\n    poolId: poolId,\n    ifo: ifo,\n    publicIfoData: publicIfoData,\n    walletIfoData: walletIfoData,\n    onSuccess: handleContributeSuccess,\n    userCurrencyBalance: userCurrencyBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this), false);\n  const [onPresentGetLpModal] = useModal( /*#__PURE__*/_jsxDEV(GetLpModal, {\n    currency: ifo.currency\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 42\n  }, this), false);\n  const isDisabled = isPendingTx || limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal,\n    width: \"100%\",\n    disabled: isDisabled,\n    children: isDisabled ? t('Max. Committed') : t('Commit LP Tokens')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContributeButton, \"9MOAqMYI6+PlBjkKhkMJg1cK6iY=\", false, function () {\n  return [useTranslation, useToast, useTokenBalance, useModal, useModal];\n});\n\n_c = ContributeButton;\nexport default ContributeButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContributeButton\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx"],"names":["React","Button","useModal","getBalanceNumber","useTranslation","useTokenBalance","getAddress","useToast","ContributeModal","GetLpModal","ContributeButton","poolId","ifo","publicIfoData","walletIfoData","publicPoolCharacteristics","userPoolCharacteristics","isPendingTx","amountTokenCommittedInLP","limitPerUserInLP","t","toastSuccess","balance","userCurrencyBalance","currency","address","handleContributeSuccess","amount","Promise","all","fetchIfoData","onPresentContributeModal","onPresentGetLpModal","isDisabled","isGreaterThan","isGreaterThanOrEqualTo","isEqualTo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAGA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAQA,MAAMC,gBAAiC,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,GAAV;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,CAAD,KAAmD;AAAA;;AAC3F,QAAMC,yBAAyB,GAAGF,aAAa,CAACF,MAAD,CAA/C;AACA,QAAMK,uBAAuB,GAAGF,aAAa,CAACH,MAAD,CAA7C;AACA,QAAM;AAAEM,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4CF,uBAAlD;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAuBJ,yBAA7B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAQhB,cAAc,EAA5B;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAmBd,QAAQ,EAAjC;AACA,QAAM;AAAEe,IAAAA,OAAO,EAAEC;AAAX,MAAmClB,eAAe,CAACC,UAAU,CAACM,GAAG,CAACY,QAAJ,CAAaC,OAAd,CAAX,CAAxD,CAP2F,CAS3F;;AACA,QAAMC,uBAAuB,GAAG,MAAOC,MAAP,IAA6B;AAC3D,UAAMC,OAAO,CAACC,GAAR,CAAY,CAAChB,aAAa,CAACiB,YAAd,EAAD,EAA+BhB,aAAa,CAACgB,YAAd,EAA/B,CAAZ,CAAN;AACAT,IAAAA,YAAY,CACVD,CAAC,CAAC,UAAD,CADS,EAEVA,CAAC,CAAC,+DAAD,EAAkE;AAAEO,MAAAA,MAAM,EAAExB,gBAAgB,CAACwB,MAAD;AAA1B,KAAlE,CAFS,CAAZ;AAID,GAND;;AAQA,QAAM,CAACI,wBAAD,IAA6B7B,QAAQ,eACzC,QAAC,eAAD;AACE,IAAA,MAAM,EAAES,MADV;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,aAAa,EAAEC,aAHjB;AAIE,IAAA,aAAa,EAAEC,aAJjB;AAKE,IAAA,SAAS,EAAEY,uBALb;AAME,IAAA,mBAAmB,EAAEH;AANvB;AAAA;AAAA;AAAA;AAAA,UADyC,EASzC,KATyC,CAA3C;AAYA,QAAM,CAACS,mBAAD,IAAwB9B,QAAQ,eAAC,QAAC,UAAD;AAAY,IAAA,QAAQ,EAAEU,GAAG,CAACY;AAA1B;AAAA;AAAA;AAAA;AAAA,UAAD,EAAyC,KAAzC,CAAtC;AAEA,QAAMS,UAAU,GACdhB,WAAW,IACVE,gBAAgB,CAACe,aAAjB,CAA+B,CAA/B,KAAqChB,wBAAwB,CAACiB,sBAAzB,CAAgDhB,gBAAhD,CAFxC;AAIA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEI,mBAAmB,CAACa,SAApB,CAA8B,CAA9B,IAAmCJ,mBAAnC,GAAyDD,wBADpE;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,QAAQ,EAAEE,UAHZ;AAAA,cAKGA,UAAU,GAAGb,CAAC,CAAC,gBAAD,CAAJ,GAAyBA,CAAC,CAAC,kBAAD;AALvC;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA7CD;;GAAMV,gB;UAKUN,c,EACWG,Q,EACgBF,e,EAWNH,Q,EAYLA,Q;;;KA9B1BQ,gB;AA+CN,eAAeA,gBAAf","sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\nimport ContributeModal from './ContributeModal'\r\nimport GetLpModal from './GetLpModal'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(ifo.currency.address))\r\n\r\n  // Refetch all the data, and display a message when fetching is done\r\n  const handleContributeSuccess = async (amount: BigNumber) => {\r\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!', { amount: getBalanceNumber(amount) }),\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <ContributeModal\r\n      poolId={poolId}\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      onSuccess={handleContributeSuccess}\r\n      userCurrencyBalance={userCurrencyBalance}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={ifo.currency} />, false)\r\n\r\n  const isDisabled =\r\n    isPendingTx ||\r\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\r\n\r\n  return (\r\n    <Button\r\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\r\n      width=\"100%\"\r\n      disabled={isDisabled}\r\n    >\r\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ContributeButton\r\n"]},"metadata":{},"sourceType":"module"}