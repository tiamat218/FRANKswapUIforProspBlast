{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\AllHistoryCard\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchLottery } from 'state/lottery/helpers';\nimport { LotteryStatus } from 'config/constants/types';\nimport RoundSwitcher from './RoundSwitcher';\nimport { getDrawnDate, processLotteryResponse } from '../../helpers';\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body';\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`;\n_c = StyledCard;\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({\n  theme\n}) => theme.colors.cardBorder} solid;\n`;\n_c2 = StyledCardHeader;\n\nconst AllHistoryCard = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    currentLotteryId,\n    currentRound: {\n      status,\n      isLoading\n    }\n  } = useLottery();\n  const [latestRoundId, setLatestRoundId] = useState(null);\n  const [selectedRoundId, setSelectedRoundId] = useState('');\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null);\n  const timer = useRef(null);\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null;\n      const mostRecentFinishedRoundId = status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1;\n      setLatestRoundId(mostRecentFinishedRoundId);\n      setSelectedRoundId(mostRecentFinishedRoundId.toString());\n    }\n  }, [currentLotteryId, status]);\n  useEffect(() => {\n    setSelectedLotteryInfo(null);\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId);\n      const processedLotteryData = processLotteryResponse(lotteryData);\n      setSelectedLotteryInfo(processedLotteryData);\n    };\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData();\n      }\n\n      clearInterval(timer.current);\n    }, 1000);\n    return () => clearInterval(timer.current);\n  }, [selectedRoundId]);\n\n  const handleInputChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n\n    if (value) {\n      setSelectedRoundId(value);\n\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('');\n      }\n\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString());\n      }\n    } else {\n      setSelectedRoundId('');\n    }\n  };\n\n  const handleArrowButonPress = targetRound => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString());\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n      children: [/*#__PURE__*/_jsxDEV(RoundSwitcher, {\n        isLoading: isLoading,\n        selectedRoundId: selectedRoundId,\n        mostRecentRound: latestRoundId,\n        handleInputChange: handleInputChange,\n        handleArrowButonPress: handleArrowButonPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"8px\",\n        children: (selectedLotteryInfo === null || selectedLotteryInfo === void 0 ? void 0 : selectedLotteryInfo.endTime) ? /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: [t('Drawn'), \" \", getDrawnDate(selectedLotteryInfo.endTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"185px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardBody, {\n      lotteryData: selectedLotteryInfo,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardFooter, {\n      lotteryData: selectedLotteryInfo,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllHistoryCard, \"pWPeiBjh/NcmNejhBERykGJ1p+M=\", false, function () {\n  return [useTranslation, useLottery];\n});\n\n_c3 = AllHistoryCard;\nexport default AllHistoryCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledCardHeader\");\n$RefreshReg$(_c3, \"AllHistoryCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/AllHistoryCard/index.tsx"],"names":["React","useState","useRef","useEffect","styled","Card","Text","Skeleton","CardHeader","Box","useTranslation","useLottery","fetchLottery","LotteryStatus","RoundSwitcher","getDrawnDate","processLotteryResponse","PreviousRoundCardBody","PreviousRoundCardFooter","StyledCard","theme","mediaQueries","md","StyledCardHeader","colors","cardBorder","AllHistoryCard","t","currentLotteryId","currentRound","status","isLoading","latestRoundId","setLatestRoundId","selectedRoundId","setSelectedRoundId","selectedLotteryInfo","setSelectedLotteryInfo","timer","currentLotteryIdAsInt","parseInt","mostRecentFinishedRoundId","CLAIMABLE","toString","fetchLotteryData","lotteryData","processedLotteryData","current","setInterval","clearInterval","handleInputChange","event","target","value","handleArrowButonPress","targetRound","endTime"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport RoundSwitcher from './RoundSwitcher'\r\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\r\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\r\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst StyledCardHeader = styled(CardHeader)`\r\n  z-index: 2;\r\n  background: none;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nconst AllHistoryCard = () => {\r\n  const { t } = useTranslation()\r\n  const {\r\n    currentLotteryId,\r\n    currentRound: { status, isLoading },\r\n  } = useLottery()\r\n  const [latestRoundId, setLatestRoundId] = useState(null)\r\n  const [selectedRoundId, setSelectedRoundId] = useState('')\r\n  const [selectedLotteryInfo, setSelectedLotteryInfo] = useState(null)\r\n  const timer = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\r\n      const mostRecentFinishedRoundId =\r\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\r\n      setLatestRoundId(mostRecentFinishedRoundId)\r\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\r\n    }\r\n  }, [currentLotteryId, status])\r\n\r\n  useEffect(() => {\r\n    setSelectedLotteryInfo(null)\r\n\r\n    const fetchLotteryData = async () => {\r\n      const lotteryData = await fetchLottery(selectedRoundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      setSelectedLotteryInfo(processedLotteryData)\r\n    }\r\n\r\n    timer.current = setInterval(() => {\r\n      if (selectedRoundId) {\r\n        fetchLotteryData()\r\n      }\r\n      clearInterval(timer.current)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [selectedRoundId])\r\n\r\n  const handleInputChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event\r\n    if (value) {\r\n      setSelectedRoundId(value)\r\n      if (parseInt(value, 10) <= 0) {\r\n        setSelectedRoundId('')\r\n      }\r\n      if (parseInt(value, 10) >= latestRoundId) {\r\n        setSelectedRoundId(latestRoundId.toString())\r\n      }\r\n    } else {\r\n      setSelectedRoundId('')\r\n    }\r\n  }\r\n\r\n  const handleArrowButonPress = (targetRound) => {\r\n    if (targetRound) {\r\n      setSelectedRoundId(targetRound.toString())\r\n    } else {\r\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\r\n      setSelectedRoundId('1')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardHeader>\r\n        <RoundSwitcher\r\n          isLoading={isLoading}\r\n          selectedRoundId={selectedRoundId}\r\n          mostRecentRound={latestRoundId}\r\n          handleInputChange={handleInputChange}\r\n          handleArrowButonPress={handleArrowButonPress}\r\n        />\r\n        <Box mt=\"8px\">\r\n          {selectedLotteryInfo?.endTime ? (\r\n            <Text fontSize=\"14px\">\r\n              {t('Drawn')} {getDrawnDate(selectedLotteryInfo.endTime)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton width=\"185px\" height=\"21px\" />\r\n          )}\r\n        </Box>\r\n      </StyledCardHeader>\r\n      <PreviousRoundCardBody lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n      <PreviousRoundCardFooter lotteryData={selectedLotteryInfo} lotteryId={selectedRoundId} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default AllHistoryCard\r\n"]},"metadata":{},"sourceType":"module"}