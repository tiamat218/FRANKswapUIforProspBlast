{"ast":null,"code":"import{useState,useEffect}from'react';import{useWeb3React}from'@web3-react/core';import{BIG_ZERO}from'utils/bigNumber';import{getActivePools}from'utils/calls';import{getAddress}from'utils/addressHelpers';import{simpleRpcProvider}from'utils/providers';import BigNumber from'bignumber.js';import{getVotingPower}from'../helpers';const initialState={verificationHash:null,cakeBalance:BIG_ZERO,cakeVaultBalance:BIG_ZERO,cakePoolBalance:BIG_ZERO,poolsBalance:BIG_ZERO,cakeBnbLpBalance:BIG_ZERO,total:BIG_ZERO};const useGetVotingPower=function(block){let isActive=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const{account}=useWeb3React();const[votingPower,setVotingPower]=useState(initialState);const[isLoading,setIsLoading]=useState(!!account);useEffect(()=>{const fetchVotingPower=async()=>{setIsLoading(true);try{const blockNumber=block||(await simpleRpcProvider.getBlockNumber());const eligiblePools=await getActivePools(blockNumber);const poolAddresses=eligiblePools.map(_ref=>{let{contractAddress}=_ref;return getAddress(contractAddress);});const{cakeBalance,cakeBnbLpBalance,cakePoolBalance,total,poolsBalance,cakeVaultBalance,verificationHash}=await getVotingPower(account,poolAddresses,blockNumber);if(isActive){setVotingPower(prevVotingPower=>({...prevVotingPower,verificationHash,cakeBalance:new BigNumber(cakeBalance),cakeBnbLpBalance:new BigNumber(cakeBnbLpBalance),cakePoolBalance:new BigNumber(cakePoolBalance),poolsBalance:new BigNumber(poolsBalance),cakeVaultBalance:new BigNumber(cakeVaultBalance),total:new BigNumber(total)}));}}finally{setIsLoading(false);}};if(account&&isActive){fetchVotingPower();}},[account,block,setVotingPower,isActive,setIsLoading]);return{...votingPower,isLoading};};export default useGetVotingPower;","map":{"version":3,"names":["useState","useEffect","useWeb3React","BIG_ZERO","getActivePools","getAddress","simpleRpcProvider","BigNumber","getVotingPower","initialState","verificationHash","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","total","useGetVotingPower","block","isActive","arguments","length","undefined","account","votingPower","setVotingPower","isLoading","setIsLoading","fetchVotingPower","blockNumber","getBlockNumber","eligiblePools","poolAddresses","map","_ref","contractAddress","prevVotingPower"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Voting/hooks/useGetVotingPower.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n  total: BigNumber\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: BIG_ZERO,\r\n  cakeVaultBalance: BIG_ZERO,\r\n  cakePoolBalance: BIG_ZERO,\r\n  poolsBalance: BIG_ZERO,\r\n  cakeBnbLpBalance: BIG_ZERO,\r\n  total: BIG_ZERO,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: new BigNumber(cakeBalance),\r\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\r\n            cakePoolBalance: new BigNumber(cakePoolBalance),\r\n            poolsBalance: new BigNumber(poolsBalance),\r\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\r\n            total: new BigNumber(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,QAAQ,KAAQ,iBAAiB,CAC1C,OAASC,cAAc,KAAQ,aAAa,CAC5C,OAASC,UAAU,KAAQ,sBAAsB,CACjD,OAASC,iBAAiB,KAAQ,iBAAiB,CACnD,MAAO,CAAAC,SAAS,KAAM,cAAc,CACpC,OAASC,cAAc,KAAQ,YAAY,CAY3C,KAAM,CAAAC,YAAmB,CAAG,CAC1BC,gBAAgB,CAAE,IAAI,CACtBC,WAAW,CAAER,QAAQ,CACrBS,gBAAgB,CAAET,QAAQ,CAC1BU,eAAe,CAAEV,QAAQ,CACzBW,YAAY,CAAEX,QAAQ,CACtBY,gBAAgB,CAAEZ,QAAQ,CAC1Ba,KAAK,CAAEb,QACT,CAAC,CAED,KAAM,CAAAc,iBAAiB,CAAG,QAAAA,CAACC,KAAc,CAAsD,IAApD,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACxD,KAAM,CAAEG,OAAQ,CAAC,CAAGrB,YAAY,CAAC,CAAC,CAClC,KAAM,CAACsB,WAAW,CAAEC,cAAc,CAAC,CAAGzB,QAAQ,CAACS,YAAY,CAAC,CAC5D,KAAM,CAACiB,SAAS,CAAEC,YAAY,CAAC,CAAG3B,QAAQ,CAAC,CAAC,CAACuB,OAAO,CAAC,CAErDtB,SAAS,CAAC,IAAM,CACd,KAAM,CAAA2B,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnCD,YAAY,CAAC,IAAI,CAAC,CAElB,GAAI,CACF,KAAM,CAAAE,WAAW,CAAGX,KAAK,GAAK,KAAM,CAAAZ,iBAAiB,CAACwB,cAAc,CAAC,CAAC,CAAC,CACvE,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAA3B,cAAc,CAACyB,WAAW,CAAC,CACvD,KAAM,CAAAG,aAAa,CAAGD,aAAa,CAACE,GAAG,CAACC,IAAA,MAAC,CAAEC,eAAgB,CAAC,CAAAD,IAAA,OAAK,CAAA7B,UAAU,CAAC8B,eAAe,CAAC,GAAC,CAC7F,KAAM,CACJxB,WAAW,CACXI,gBAAgB,CAChBF,eAAe,CACfG,KAAK,CACLF,YAAY,CACZF,gBAAgB,CAChBF,gBACF,CAAC,CAAG,KAAM,CAAAF,cAAc,CAACe,OAAO,CAAES,aAAa,CAAEH,WAAW,CAAC,CAE7D,GAAIV,QAAQ,CAAE,CACZM,cAAc,CAAEW,eAAe,GAAM,CACnC,GAAGA,eAAe,CAClB1B,gBAAgB,CAChBC,WAAW,CAAE,GAAI,CAAAJ,SAAS,CAACI,WAAW,CAAC,CACvCI,gBAAgB,CAAE,GAAI,CAAAR,SAAS,CAACQ,gBAAgB,CAAC,CACjDF,eAAe,CAAE,GAAI,CAAAN,SAAS,CAACM,eAAe,CAAC,CAC/CC,YAAY,CAAE,GAAI,CAAAP,SAAS,CAACO,YAAY,CAAC,CACzCF,gBAAgB,CAAE,GAAI,CAAAL,SAAS,CAACK,gBAAgB,CAAC,CACjDI,KAAK,CAAE,GAAI,CAAAT,SAAS,CAACS,KAAK,CAC5B,CAAC,CAAC,CAAC,CACL,CACF,CAAC,OAAS,CACRW,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,GAAIJ,OAAO,EAAIJ,QAAQ,CAAE,CACvBS,gBAAgB,CAAC,CAAC,CACpB,CACF,CAAC,CAAE,CAACL,OAAO,CAAEL,KAAK,CAAEO,cAAc,CAAEN,QAAQ,CAAEQ,YAAY,CAAC,CAAC,CAE5D,MAAO,CAAE,GAAGH,WAAW,CAAEE,SAAU,CAAC,CACtC,CAAC,CAED,cAAe,CAAAT,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}