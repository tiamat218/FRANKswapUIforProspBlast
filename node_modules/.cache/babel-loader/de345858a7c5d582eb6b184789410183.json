{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState}from'react';import styled from'styled-components';import{useWeb3React}from'@web3-react/core';import{Button,Modal,Text,Flex,AutoRenewIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import useToast from'hooks/useToast';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const ModalContent=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));const Actions=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  grid-gap: 8px;\\n\"])));const ClaimNftModal=_ref=>{let{nft,onSuccess,onClaim,onDismiss}=_ref;const[isConfirming,setIsConfirming]=useState(false);const{t}=useTranslation();const{account}=useWeb3React();const{toastError,toastSuccess}=useToast();const handleConfirm=async()=>{const tx=await onClaim();setIsConfirming(true);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Successfully claimed!'));onDismiss();onSuccess();}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsConfirming(false);}};return/*#__PURE__*/_jsxs(Modal,{title:t('Claim Collectible'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsx(ModalContent,{children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",mb:\"8px\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Text,{children:[t('You will receive'),\":\"]}),/*#__PURE__*/_jsx(Text,{bold:true,children:t('1x %nftName% Collectible',{nftName:nft.name})})]})}),/*#__PURE__*/_jsxs(Actions,{children:[/*#__PURE__*/_jsx(Button,{width:\"100%\",variant:\"secondary\",onClick:onDismiss,children:t('Cancel')}),/*#__PURE__*/_jsx(Button,{width:\"100%\",onClick:handleConfirm,disabled:!account,isLoading:isConfirming,endIcon:isConfirming?/*#__PURE__*/_jsx(AutoRenewIcon,{color:\"currentColor\",spin:true}):null,children:t('Confirm')})]})]});};export default ClaimNftModal;","map":{"version":3,"names":["React","useState","styled","useWeb3React","Button","Modal","Text","Flex","AutoRenewIcon","useTranslation","useToast","jsxs","_jsxs","jsx","_jsx","ModalContent","div","_templateObject","_taggedTemplateLiteral","Actions","_templateObject2","ClaimNftModal","_ref","nft","onSuccess","onClaim","onDismiss","isConfirming","setIsConfirming","t","account","toastError","toastSuccess","handleConfirm","tx","receipt","wait","status","title","children","alignItems","mb","justifyContent","bold","nftName","name","width","variant","onClick","disabled","isLoading","endIcon","color","spin"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Collectibles/components/ClaimNftModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ethers } from 'ethers'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    const tx = await onClaim()\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Successfully claimed!'))\r\n      onDismiss()\r\n      onSuccess()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{t('You will receive')}:</Text>\r\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          onClick={handleConfirm}\r\n          disabled={!account}\r\n          isLoading={isConfirming}\r\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}