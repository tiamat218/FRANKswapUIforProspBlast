{"ast":null,"code":"const visit = require('unist-util-visit');\nconst splice = [].splice;\nmodule.exports = rehypeFilter;\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean}\n *\n * @typedef {Object} RehypeFilterOptions\n * @property {Array.<string>} [allowedElements]\n * @property {Array.<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @param {RehypeFilterOptions} options\n */\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');\n  }\n  return options.allowedElements || options.disallowedElements || options.allowElement ? transform : undefined;\n\n  /**\n   * @param {Root} tree\n   */\n  function transform(tree) {\n    visit(tree, 'element', onelement);\n  }\n\n  /**\n   * @param {Element} node\n   * @param {number} index\n   * @param {Element|Root} parent\n   * @returns {number|void}\n   */\n  function onelement(node, index, parent) {\n    /** @type {boolean} */\n    let remove;\n    if (options.allowedElements) {\n      remove = !options.allowedElements.includes(node.tagName);\n    } else if (options.disallowedElements) {\n      remove = options.disallowedElements.includes(node.tagName);\n    }\n    if (!remove && options.allowElement) {\n      remove = !options.allowElement(node, index, parent);\n    }\n    if (remove) {\n      /** @type {Array.<unknown>} */\n      let parameters = [index, 1];\n      if (options.unwrapDisallowed && node.children) {\n        parameters = parameters.concat(node.children);\n      }\n      splice.apply(parent.children, parameters);\n      return index;\n    }\n    return undefined;\n  }\n}","map":{"version":3,"names":["visit","require","splice","module","exports","rehypeFilter","options","allowedElements","disallowedElements","TypeError","allowElement","transform","undefined","tree","onelement","node","index","parent","remove","includes","tagName","parameters","unwrapDisallowed","children","concat","apply"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/react-markdown/src/rehype-filter.js"],"sourcesContent":["const visit = require('unist-util-visit')\n\nconst splice = [].splice\n\nmodule.exports = rehypeFilter\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean}\n *\n * @typedef {Object} RehypeFilterOptions\n * @property {Array.<string>} [allowedElements]\n * @property {Array.<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @param {RehypeFilterOptions} options\n */\nfunction rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  return options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n    ? transform\n    : undefined\n\n  /**\n   * @param {Root} tree\n   */\n  function transform(tree) {\n    visit(tree, 'element', onelement)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {number} index\n   * @param {Element|Root} parent\n   * @returns {number|void}\n   */\n  function onelement(node, index, parent) {\n    /** @type {boolean} */\n    let remove\n\n    if (options.allowedElements) {\n      remove = !options.allowedElements.includes(node.tagName)\n    } else if (options.disallowedElements) {\n      remove = options.disallowedElements.includes(node.tagName)\n    }\n\n    if (!remove && options.allowElement) {\n      remove = !options.allowElement(node, index, parent)\n    }\n\n    if (remove) {\n      /** @type {Array.<unknown>} */\n      let parameters = [index, 1]\n\n      if (options.unwrapDisallowed && node.children) {\n        parameters = parameters.concat(node.children)\n      }\n\n      splice.apply(parent.children, parameters)\n      return index\n    }\n\n    return undefined\n  }\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAEzC,MAAMC,MAAM,GAAG,EAAE,CAACA,MAAM;AAExBC,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,OAAO,EAAE;EAC7B,IAAIA,OAAO,CAACC,eAAe,IAAID,OAAO,CAACE,kBAAkB,EAAE;IACzD,MAAM,IAAIC,SAAS,CACjB,0EACF,CAAC;EACH;EAEA,OAAOH,OAAO,CAACC,eAAe,IAC5BD,OAAO,CAACE,kBAAkB,IAC1BF,OAAO,CAACI,YAAY,GAClBC,SAAS,GACTC,SAAS;;EAEb;AACF;AACA;EACE,SAASD,SAASA,CAACE,IAAI,EAAE;IACvBb,KAAK,CAACa,IAAI,EAAE,SAAS,EAAEC,SAAS,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASA,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACtC;IACA,IAAIC,MAAM;IAEV,IAAIZ,OAAO,CAACC,eAAe,EAAE;MAC3BW,MAAM,GAAG,CAACZ,OAAO,CAACC,eAAe,CAACY,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC1D,CAAC,MAAM,IAAId,OAAO,CAACE,kBAAkB,EAAE;MACrCU,MAAM,GAAGZ,OAAO,CAACE,kBAAkB,CAACW,QAAQ,CAACJ,IAAI,CAACK,OAAO,CAAC;IAC5D;IAEA,IAAI,CAACF,MAAM,IAAIZ,OAAO,CAACI,YAAY,EAAE;MACnCQ,MAAM,GAAG,CAACZ,OAAO,CAACI,YAAY,CAACK,IAAI,EAAEC,KAAK,EAAEC,MAAM,CAAC;IACrD;IAEA,IAAIC,MAAM,EAAE;MACV;MACA,IAAIG,UAAU,GAAG,CAACL,KAAK,EAAE,CAAC,CAAC;MAE3B,IAAIV,OAAO,CAACgB,gBAAgB,IAAIP,IAAI,CAACQ,QAAQ,EAAE;QAC7CF,UAAU,GAAGA,UAAU,CAACG,MAAM,CAACT,IAAI,CAACQ,QAAQ,CAAC;MAC/C;MAEArB,MAAM,CAACuB,KAAK,CAACR,MAAM,CAACM,QAAQ,EAAEF,UAAU,CAAC;MACzC,OAAOL,KAAK;IACd;IAEA,OAAOJ,SAAS;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script"}