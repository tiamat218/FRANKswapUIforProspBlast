{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json';\nimport { ChainId, JSBI, Percent, Token, ETHER } from '@pancakeswap/sdk';\nimport { ROUTER_ADDRESS } from '../config/constants';\nimport { BASE_BSC_SCAN_URLS } from '../config';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nexport function getBscScanLink(data, type, chainId = ChainId.MAINNET) {\n  switch (type) {\n    case 'transaction':\n      {\n        return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`;\n      }\n    case 'token':\n      {\n        return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`;\n      }\n    case 'block':\n      {\n        return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`;\n      }\n    case 'countdown':\n      {\n        return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`;\n      }\n    default:\n      {\n        return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`;\n      }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n\n// add 10%\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\n\n// account is optional\nexport function getRouterContract(_, library, account) {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function isTokenOnList(defaultTokens, currency) {\n  var _defaultTokens$curren;\n  if (currency === ETHER) return true;\n  return Boolean(currency instanceof Token && ((_defaultTokens$curren = defaultTokens[currency.chainId]) === null || _defaultTokens$curren === void 0 ? void 0 : _defaultTokens$curren[currency.address]));\n}","map":{"version":3,"names":["Contract","getAddress","AddressZero","BigNumber","abi","IUniswapV2Router02ABI","ChainId","JSBI","Percent","Token","ETHER","ROUTER_ADDRESS","BASE_BSC_SCAN_URLS","isAddress","value","getBscScanLink","data","type","chainId","MAINNET","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isTokenOnList","defaultTokens","currency","_defaultTokens$curren","Boolean"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/index.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@pancakeswap/sdk'\r\nimport { ROUTER_ADDRESS } from '../config/constants'\r\nimport { BASE_BSC_SCAN_URLS } from '../config'\r\nimport { TokenAddressMap } from '../state/lists/hooks'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function getBscScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address)\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account)\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}