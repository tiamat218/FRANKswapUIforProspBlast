{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { TokenAmount, Pair } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport { Interface } from '@ethersproject/abi';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useMultipleContractSingleData } from '../state/multicall/hooks';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI);\nexport let PairState;\n\n(function (PairState) {\n  PairState[PairState[\"LOADING\"] = 0] = \"LOADING\";\n  PairState[PairState[\"NOT_EXISTS\"] = 1] = \"NOT_EXISTS\";\n  PairState[PairState[\"EXISTS\"] = 2] = \"EXISTS\";\n  PairState[PairState[\"INVALID\"] = 3] = \"INVALID\";\n})(PairState || (PairState = {}));\n\nexport function usePairs(currencies) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useMemo(() => currencies.map(([currencyA, currencyB]) => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]), [chainId, currencies]);\n  const pairAddresses = useMemo(() => tokens.map(([tokenA, tokenB]) => {\n    return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined;\n  }), [tokens]);\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves');\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const {\n        result: reserves,\n        loading\n      } = result;\n      const tokenA = tokens[i][0];\n      const tokenB = tokens[i][1];\n      if (loading) return [PairState.LOADING, null];\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null];\n      if (!reserves) return [PairState.NOT_EXISTS, null];\n      const {\n        reserve0,\n        reserve1\n      } = reserves;\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return [PairState.EXISTS, new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()))];\n    });\n  }, [results, tokens]);\n}\n\n_s(usePairs, \"E9gbPqRdveknnYKMKRnUQnOW2SE=\", false, function () {\n  return [useActiveWeb3React, useMultipleContractSingleData];\n});\n\nexport function usePair(tokenA, tokenB) {\n  _s2();\n\n  return usePairs([[tokenA, tokenB]])[0];\n}\n\n_s2(usePair, \"AJtW1Ot38FORoSrNpUliDLrh4e4=\", false, function () {\n  return [usePairs];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/usePairs.ts"],"names":["TokenAmount","Pair","useMemo","abi","IUniswapV2PairABI","Interface","useActiveWeb3React","useMultipleContractSingleData","wrappedCurrency","PAIR_INTERFACE","PairState","usePairs","currencies","chainId","tokens","map","currencyA","currencyB","pairAddresses","tokenA","tokenB","equals","getAddress","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","token0","token1","sortsBefore","EXISTS","toString","usePair"],"mappings":"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","sourcesContent":["import { TokenAmount, Pair, Currency } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\n\r\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\r\n\r\nexport enum PairState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID,\r\n}\r\n\r\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const tokens = useMemo(\r\n    () =>\r\n      currencies.map(([currencyA, currencyB]) => [\r\n        wrappedCurrency(currencyA, chainId),\r\n        wrappedCurrency(currencyB, chainId),\r\n      ]),\r\n    [chainId, currencies],\r\n  )\r\n\r\n  const pairAddresses = useMemo(\r\n    () =>\r\n      tokens.map(([tokenA, tokenB]) => {\r\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\r\n      }),\r\n    [tokens],\r\n  )\r\n\r\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\r\n\r\n  return useMemo(() => {\r\n    return results.map((result, i) => {\r\n      const { result: reserves, loading } = result\r\n      const tokenA = tokens[i][0]\r\n      const tokenB = tokens[i][1]\r\n\r\n      if (loading) return [PairState.LOADING, null]\r\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\r\n      if (!reserves) return [PairState.NOT_EXISTS, null]\r\n      const { reserve0, reserve1 } = reserves\r\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return [\r\n        PairState.EXISTS,\r\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString())),\r\n      ]\r\n    })\r\n  }, [results, tokens])\r\n}\r\n\r\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\r\n  return usePairs([[tokenA, tokenB]])[0]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}