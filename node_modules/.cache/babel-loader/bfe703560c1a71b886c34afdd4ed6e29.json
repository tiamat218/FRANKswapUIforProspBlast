{"ast":null,"code":"import{JSBI,Percent,TokenAmount}from'@pancakeswap/sdk';import{useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import useActiveWeb3React from'hooks/useActiveWeb3React';import{wrappedCurrency}from'utils/wrappedCurrency';import{usePair}from'hooks/usePairs';import useTotalSupply from'hooks/useTotalSupply';import{tryParseAmount}from'../swap/hooks';import{useTokenBalances}from'../wallet/hooks';import{Field,typeInput}from'./actions';export function useBurnState(){return useSelector(state=>state.burn);}export function useDerivedBurnInfo(currencyA,currencyB){var _pair$liquidityToken$,_pair$liquidityToken;const{account,chainId}=useActiveWeb3React();const{independentField,typedValue}=useBurnState();// pair + totalsupply\nconst[,pair]=usePair(currencyA,currencyB);// balances\nconst relevantTokenBalances=useTokenBalances(account!==null&&account!==void 0?account:undefined,[pair===null||pair===void 0?void 0:pair.liquidityToken]);const userLiquidity=relevantTokenBalances===null||relevantTokenBalances===void 0?void 0:relevantTokenBalances[(_pair$liquidityToken$=pair===null||pair===void 0?void 0:(_pair$liquidityToken=pair.liquidityToken)===null||_pair$liquidityToken===void 0?void 0:_pair$liquidityToken.address)!==null&&_pair$liquidityToken$!==void 0?_pair$liquidityToken$:''];const[tokenA,tokenB]=[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)];const tokens={[Field.CURRENCY_A]:tokenA,[Field.CURRENCY_B]:tokenB,[Field.LIQUIDITY]:pair===null||pair===void 0?void 0:pair.liquidityToken};// liquidity values\nconst totalSupply=useTotalSupply(pair===null||pair===void 0?void 0:pair.liquidityToken);const liquidityValueA=pair&&totalSupply&&userLiquidity&&tokenA&&// this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\nJSBI.greaterThanOrEqual(totalSupply.raw,userLiquidity.raw)?new TokenAmount(tokenA,pair.getLiquidityValue(tokenA,totalSupply,userLiquidity,false).raw):undefined;const liquidityValueB=pair&&totalSupply&&userLiquidity&&tokenB&&// this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\nJSBI.greaterThanOrEqual(totalSupply.raw,userLiquidity.raw)?new TokenAmount(tokenB,pair.getLiquidityValue(tokenB,totalSupply,userLiquidity,false).raw):undefined;const liquidityValues={[Field.CURRENCY_A]:liquidityValueA,[Field.CURRENCY_B]:liquidityValueB};let percentToRemove=new Percent('0','100');// user specified a %\nif(independentField===Field.LIQUIDITY_PERCENT){percentToRemove=new Percent(typedValue,'100');}// user specified a specific amount of liquidity tokens\nelse if(independentField===Field.LIQUIDITY){if(pair===null||pair===void 0?void 0:pair.liquidityToken){const independentAmount=tryParseAmount(typedValue,pair.liquidityToken);if(independentAmount&&userLiquidity&&!independentAmount.greaterThan(userLiquidity)){percentToRemove=new Percent(independentAmount.raw,userLiquidity.raw);}}}// user specified a specific amount of token a or b\nelse if(tokens[independentField]){const independentAmount=tryParseAmount(typedValue,tokens[independentField]);const liquidityValue=liquidityValues[independentField];if(independentAmount&&liquidityValue&&!independentAmount.greaterThan(liquidityValue)){percentToRemove=new Percent(independentAmount.raw,liquidityValue.raw);}}const parsedAmounts={[Field.LIQUIDITY_PERCENT]:percentToRemove,[Field.LIQUIDITY]:userLiquidity&&percentToRemove&&percentToRemove.greaterThan('0')?new TokenAmount(userLiquidity.token,percentToRemove.multiply(userLiquidity.raw).quotient):undefined,[Field.CURRENCY_A]:tokenA&&percentToRemove&&percentToRemove.greaterThan('0')&&liquidityValueA?new TokenAmount(tokenA,percentToRemove.multiply(liquidityValueA.raw).quotient):undefined,[Field.CURRENCY_B]:tokenB&&percentToRemove&&percentToRemove.greaterThan('0')&&liquidityValueB?new TokenAmount(tokenB,percentToRemove.multiply(liquidityValueB.raw).quotient):undefined};let error;if(!account){error='Connect Wallet';}if(!parsedAmounts[Field.LIQUIDITY]||!parsedAmounts[Field.CURRENCY_A]||!parsedAmounts[Field.CURRENCY_B]){var _error;error=(_error=error)!==null&&_error!==void 0?_error:'Enter an amount';}return{pair,parsedAmounts,error};}export function useBurnActionHandlers(){const dispatch=useDispatch();const onUserInput=useCallback((field,typedValue)=>{dispatch(typeInput({field,typedValue}));},[dispatch]);return{onUserInput};}","map":{"version":3,"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","useActiveWeb3React","wrappedCurrency","usePair","useTotalSupply","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","_pair$liquidityToken$","_pair$liquidityToken","account","chainId","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","_error","useBurnActionHandlers","dispatch","onUserInput","field"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/burn/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useTokenBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  pair?: Pair | null\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: CurrencyAmount\r\n    [Field.CURRENCY_B]?: CurrencyAmount\r\n  }\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue } = useBurnState()\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB)\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  }\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  }\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100')\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100')\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else if (tokens[independentField]) {\r\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\r\n    const liquidityValue = liquidityValues[independentField]\r\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent\r\n    [Field.LIQUIDITY]?: TokenAmount\r\n    [Field.CURRENCY_A]?: TokenAmount\r\n    [Field.CURRENCY_B]?: TokenAmount\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  }\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  return { pair, parsedAmounts, error }\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onUserInput,\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}