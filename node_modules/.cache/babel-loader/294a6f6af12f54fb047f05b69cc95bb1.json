{"ast":null,"code":"import React from'react';import{Button,useModal}from'@pancakeswap/uikit';import{getBalanceNumber}from'utils/formatBalance';import{useTranslation}from'contexts/Localization';import useTokenBalance from'hooks/useTokenBalance';import{getAddress}from'utils/addressHelpers';import useToast from'hooks/useToast';import ContributeModal from'./ContributeModal';import GetLpModal from'./GetLpModal';import{jsx as _jsx}from\"react/jsx-runtime\";const ContributeButton=_ref=>{let{poolId,ifo,publicIfoData,walletIfoData}=_ref;const publicPoolCharacteristics=publicIfoData[poolId];const userPoolCharacteristics=walletIfoData[poolId];const{isPendingTx,amountTokenCommittedInLP}=userPoolCharacteristics;const{limitPerUserInLP}=publicPoolCharacteristics;const{t}=useTranslation();const{toastSuccess}=useToast();const{balance:userCurrencyBalance}=useTokenBalance(getAddress(ifo.currency.address));// Refetch all the data, and display a message when fetching is done\nconst handleContributeSuccess=async amount=>{await Promise.all([publicIfoData.fetchIfoData(),walletIfoData.fetchIfoData()]);toastSuccess(t('Success!'),t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!',{amount:getBalanceNumber(amount)}));};const[onPresentContributeModal]=useModal(/*#__PURE__*/_jsx(ContributeModal,{poolId:poolId,ifo:ifo,publicIfoData:publicIfoData,walletIfoData:walletIfoData,onSuccess:handleContributeSuccess,userCurrencyBalance:userCurrencyBalance}),false);const[onPresentGetLpModal]=useModal(/*#__PURE__*/_jsx(GetLpModal,{currency:ifo.currency}),false);const isDisabled=isPendingTx||limitPerUserInLP.isGreaterThan(0)&&amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP);return/*#__PURE__*/_jsx(Button,{onClick:userCurrencyBalance.isEqualTo(0)?onPresentGetLpModal:onPresentContributeModal,width:\"100%\",disabled:isDisabled,children:isDisabled?t('Max. Committed'):t('Commit LP Tokens')});};export default ContributeButton;","map":{"version":3,"names":["React","Button","useModal","getBalanceNumber","useTranslation","useTokenBalance","getAddress","useToast","ContributeModal","GetLpModal","jsx","_jsx","ContributeButton","_ref","poolId","ifo","publicIfoData","walletIfoData","publicPoolCharacteristics","userPoolCharacteristics","isPendingTx","amountTokenCommittedInLP","limitPerUserInLP","t","toastSuccess","balance","userCurrencyBalance","currency","address","handleContributeSuccess","amount","Promise","all","fetchIfoData","onPresentContributeModal","onSuccess","onPresentGetLpModal","isDisabled","isGreaterThan","isGreaterThanOrEqualTo","onClick","isEqualTo","width","disabled","children"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx"],"sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\nimport ContributeModal from './ContributeModal'\r\nimport GetLpModal from './GetLpModal'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCurrencyBalance } = useTokenBalance(getAddress(ifo.currency.address))\r\n\r\n  // Refetch all the data, and display a message when fetching is done\r\n  const handleContributeSuccess = async (amount: BigNumber) => {\r\n    await Promise.all([publicIfoData.fetchIfoData(), walletIfoData.fetchIfoData()])\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('You have contributed %amount% CAKE-BNB LP tokens to this IFO!', { amount: getBalanceNumber(amount) }),\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <ContributeModal\r\n      poolId={poolId}\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      onSuccess={handleContributeSuccess}\r\n      userCurrencyBalance={userCurrencyBalance}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={ifo.currency} />, false)\r\n\r\n  const isDisabled =\r\n    isPendingTx ||\r\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\r\n\r\n  return (\r\n    <Button\r\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\r\n      width=\"100%\"\r\n      disabled={isDisabled}\r\n    >\r\n      {isDisabled ? t('Max. Committed') : t('Commit LP Tokens')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ContributeButton\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,OAASC,MAAM,CAAEC,QAAQ,KAAQ,oBAAoB,CACrD,OAASC,gBAAgB,KAAQ,qBAAqB,CAGtD,OAASC,cAAc,KAAQ,uBAAuB,CACtD,MAAO,CAAAC,eAAe,KAAM,uBAAuB,CACnD,OAASC,UAAU,KAAQ,sBAAsB,CACjD,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,CACrC,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAC/C,MAAO,CAAAC,UAAU,KAAM,cAAc,QAAAC,GAAA,IAAAC,IAAA,yBAQrC,KAAM,CAAAC,gBAAiC,CAAGC,IAAA,EAAmD,IAAlD,CAAEC,MAAM,CAAEC,GAAG,CAAEC,aAAa,CAAEC,aAAc,CAAC,CAAAJ,IAAA,CACtF,KAAM,CAAAK,yBAAyB,CAAGF,aAAa,CAACF,MAAM,CAAC,CACvD,KAAM,CAAAK,uBAAuB,CAAGF,aAAa,CAACH,MAAM,CAAC,CACrD,KAAM,CAAEM,WAAW,CAAEC,wBAAyB,CAAC,CAAGF,uBAAuB,CACzE,KAAM,CAAEG,gBAAiB,CAAC,CAAGJ,yBAAyB,CACtD,KAAM,CAAEK,CAAE,CAAC,CAAGnB,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAEoB,YAAa,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CACnC,KAAM,CAAEkB,OAAO,CAAEC,mBAAoB,CAAC,CAAGrB,eAAe,CAACC,UAAU,CAACS,GAAG,CAACY,QAAQ,CAACC,OAAO,CAAC,CAAC,CAE1F;AACA,KAAM,CAAAC,uBAAuB,CAAG,KAAO,CAAAC,MAAiB,EAAK,CAC3D,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAAChB,aAAa,CAACiB,YAAY,CAAC,CAAC,CAAEhB,aAAa,CAACgB,YAAY,CAAC,CAAC,CAAC,CAAC,CAC/ET,YAAY,CACVD,CAAC,CAAC,UAAU,CAAC,CACbA,CAAC,CAAC,+DAA+D,CAAE,CAAEO,MAAM,CAAE3B,gBAAgB,CAAC2B,MAAM,CAAE,CAAC,CACzG,CAAC,CACH,CAAC,CAED,KAAM,CAACI,wBAAwB,CAAC,CAAGhC,QAAQ,cACzCS,IAAA,CAACH,eAAe,EACdM,MAAM,CAAEA,MAAO,CACfC,GAAG,CAAEA,GAAI,CACTC,aAAa,CAAEA,aAAc,CAC7BC,aAAa,CAAEA,aAAc,CAC7BkB,SAAS,CAAEN,uBAAwB,CACnCH,mBAAmB,CAAEA,mBAAoB,CAC1C,CAAC,CACF,KACF,CAAC,CAED,KAAM,CAACU,mBAAmB,CAAC,CAAGlC,QAAQ,cAACS,IAAA,CAACF,UAAU,EAACkB,QAAQ,CAAEZ,GAAG,CAACY,QAAS,CAAE,CAAC,CAAE,KAAK,CAAC,CAErF,KAAM,CAAAU,UAAU,CACdjB,WAAW,EACVE,gBAAgB,CAACgB,aAAa,CAAC,CAAC,CAAC,EAAIjB,wBAAwB,CAACkB,sBAAsB,CAACjB,gBAAgB,CAAE,CAE1G,mBACEX,IAAA,CAACV,MAAM,EACLuC,OAAO,CAAEd,mBAAmB,CAACe,SAAS,CAAC,CAAC,CAAC,CAAGL,mBAAmB,CAAGF,wBAAyB,CAC3FQ,KAAK,CAAC,MAAM,CACZC,QAAQ,CAAEN,UAAW,CAAAO,QAAA,CAEpBP,UAAU,CAAGd,CAAC,CAAC,gBAAgB,CAAC,CAAGA,CAAC,CAAC,kBAAkB,CAAC,CACnD,CAAC,CAEb,CAAC,CAED,cAAe,CAAAX,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}