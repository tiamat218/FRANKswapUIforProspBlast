{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolCard\\\\CardActions\\\\StakeActions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal';\nimport StakeModal from '../Modals/StakeModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StakeAction = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false\n}) => {\n  _s();\n\n  const {\n    stakingToken,\n    stakingTokenPrice,\n    stakingLimit,\n    isFinished,\n    userData\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals);\n  const stakedTokenDollarBalance = getBalanceNumber(stakedBalance.multipliedBy(stakingTokenPrice), stakingToken.decimals);\n  const [onPresentTokenRequired] = useModal( /*#__PURE__*/_jsxDEV(NotEnoughTokensModal, {\n    tokenSymbol: stakingToken.symbol\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 45\n  }, this));\n  const [onPresentStake] = useModal( /*#__PURE__*/_jsxDEV(StakeModal, {\n    isBnbPool: isBnbPool,\n    pool: pool,\n    stakingTokenBalance: stakingTokenBalance,\n    stakingTokenPrice: stakingTokenPrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n  const [onPresentUnstake] = useModal( /*#__PURE__*/_jsxDEV(StakeModal, {\n    stakingTokenBalance: stakingTokenBalance,\n    isBnbPool: isBnbPool,\n    pool: pool,\n    stakingTokenPrice: stakingTokenPrice,\n    isRemovingStake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this));\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t('Youâ€™ve already staked the maximum amount you can stake in this pool!'), {\n    placement: 'bottom'\n  });\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit);\n\n  const renderStakeAction = () => {\n    return isStaked ? /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Balance, {\n            bold: true,\n            fontSize: \"20px\",\n            decimals: 3,\n            value: stakedTokenBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), stakingTokenPrice !== 0 && /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: /*#__PURE__*/_jsxDEV(Balance, {\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              decimals: 2,\n              value: stakedTokenDollarBalance,\n              prefix: \"~\",\n              unit: \" USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"secondary\",\n          onClick: onPresentUnstake,\n          mr: \"6px\",\n          children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n            color: \"primary\",\n            width: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), reachStakingLimit ? /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: targetRef,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            variant: \"secondary\",\n            disabled: true,\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {\n              color: \"textDisabled\",\n              width: \"24px\",\n              height: \"24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"secondary\",\n          onClick: stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired,\n          disabled: isFinished,\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {\n            color: \"primary\",\n            width: \"24px\",\n            height: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), tooltipVisible && tooltip]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      disabled: isFinished,\n      onClick: stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired,\n      children: t('Stake')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: \"52px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 52\n    }, this) : renderStakeAction()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 10\n  }, this);\n};\n\n_s(StakeAction, \"MESHHOSVv0yaZVMPryU+igdHMGA=\", false, function () {\n  return [useTranslation, useModal, useModal, useModal, useTooltip];\n});\n\n_c = StakeAction;\nexport default StakeAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeAction\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/CardActions/StakeActions.tsx"],"names":["React","Flex","Text","Button","IconButton","AddIcon","MinusIcon","useModal","Skeleton","useTooltip","useTranslation","getBalanceNumber","Balance","NotEnoughTokensModal","StakeModal","StakeAction","pool","stakingTokenBalance","stakedBalance","isBnbPool","isStaked","isLoading","stakingToken","stakingTokenPrice","stakingLimit","isFinished","userData","t","stakedTokenBalance","decimals","stakedTokenDollarBalance","multipliedBy","onPresentTokenRequired","symbol","onPresentStake","onPresentUnstake","targetRef","tooltip","tooltipVisible","placement","reachStakingLimit","gt","gte","renderStakeAction"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,UAA7B,EAAyCC,OAAzC,EAAkDC,SAAlD,EAA6DC,QAA7D,EAAuEC,QAAvE,EAAiFC,UAAjF,QAAmG,oBAAnG;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;;;AAWA,MAAMC,WAAwC,GAAG,CAAC;AAChDC,EAAAA,IADgD;AAEhDC,EAAAA,mBAFgD;AAGhDC,EAAAA,aAHgD;AAIhDC,EAAAA,SAJgD;AAKhDC,EAAAA,QALgD;AAMhDC,EAAAA,SAAS,GAAG;AANoC,CAAD,KAO3C;AAAA;;AACJ,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,iBAAhB;AAAmCC,IAAAA,YAAnC;AAAiDC,IAAAA,UAAjD;AAA6DC,IAAAA;AAA7D,MAA0EV,IAAhF;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAQjB,cAAc,EAA5B;AACA,QAAMkB,kBAAkB,GAAGjB,gBAAgB,CAACO,aAAD,EAAgBI,YAAY,CAACO,QAA7B,CAA3C;AACA,QAAMC,wBAAwB,GAAGnB,gBAAgB,CAC/CO,aAAa,CAACa,YAAd,CAA2BR,iBAA3B,CAD+C,EAE/CD,YAAY,CAACO,QAFkC,CAAjD;AAKA,QAAM,CAACG,sBAAD,IAA2BzB,QAAQ,eAAC,QAAC,oBAAD;AAAsB,IAAA,WAAW,EAAEe,YAAY,CAACW;AAAhD;AAAA;AAAA;AAAA;AAAA,UAAD,CAAzC;AAEA,QAAM,CAACC,cAAD,IAAmB3B,QAAQ,eAC/B,QAAC,UAAD;AACE,IAAA,SAAS,EAAEY,SADb;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,mBAAmB,EAAEC,mBAHvB;AAIE,IAAA,iBAAiB,EAAEM;AAJrB;AAAA;AAAA;AAAA;AAAA,UAD+B,CAAjC;AASA,QAAM,CAACY,gBAAD,IAAqB5B,QAAQ,eACjC,QAAC,UAAD;AACE,IAAA,mBAAmB,EAAEU,mBADvB;AAEE,IAAA,SAAS,EAAEE,SAFb;AAGE,IAAA,IAAI,EAAEH,IAHR;AAIE,IAAA,iBAAiB,EAAEO,iBAJrB;AAKE,IAAA,eAAe;AALjB;AAAA;AAAA;AAAA;AAAA,UADiC,CAAnC;AAUA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,MAAyC7B,UAAU,CACvDkB,CAAC,CAAC,sEAAD,CADsD,EAEvD;AAAEY,IAAAA,SAAS,EAAE;AAAb,GAFuD,CAAzD;AAKA,QAAMC,iBAAiB,GAAGhB,YAAY,CAACiB,EAAb,CAAgB,CAAhB,KAAsBf,QAAQ,CAACR,aAAT,CAAuBwB,GAAvB,CAA2BlB,YAA3B,CAAhD;;AAEA,QAAMmB,iBAAiB,GAAG,MAAM;AAC9B,WAAOvB,QAAQ,gBACb,QAAC,IAAD;AAAM,MAAA,cAAc,EAAC,eAArB;AAAqC,MAAA,UAAU,EAAC,QAAhD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,aAAa,EAAC,QAApB;AAAA,+BACE;AAAA,kCACE,QAAC,OAAD;AAAS,YAAA,IAAI,MAAb;AAAc,YAAA,QAAQ,EAAC,MAAvB;AAA8B,YAAA,QAAQ,EAAE,CAAxC;AAA2C,YAAA,KAAK,EAAEQ;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGL,iBAAiB,KAAK,CAAtB,iBACC,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAC,YAA5B;AAAA,mCACE,QAAC,OAAD;AACE,cAAA,QAAQ,EAAC,MADX;AAEE,cAAA,KAAK,EAAC,YAFR;AAGE,cAAA,QAAQ,EAAE,CAHZ;AAIE,cAAA,KAAK,EAAEO,wBAJT;AAKE,cAAA,MAAM,EAAC,GALT;AAME,cAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAkBE,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,WAApB;AAAgC,UAAA,OAAO,EAAEK,gBAAzC;AAA2D,UAAA,EAAE,EAAC,KAA9D;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC,SAAjB;AAA2B,YAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,EAIGK,iBAAiB,gBAChB;AAAM,UAAA,GAAG,EAAEJ,SAAX;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,WAApB;AAAgC,YAAA,QAAQ,MAAxC;AAAA,mCACE,QAAC,OAAD;AAAS,cAAA,KAAK,EAAC,cAAf;AAA8B,cAAA,KAAK,EAAC,MAApC;AAA2C,cAAA,MAAM,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADgB,gBAOhB,QAAC,UAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,OAAO,EAAEnB,mBAAmB,CAACwB,EAApB,CAAuB,CAAvB,IAA4BP,cAA5B,GAA6CF,sBAFxD;AAGE,UAAA,QAAQ,EAAEP,UAHZ;AAAA,iCAKE,QAAC,OAAD;AAAS,YAAA,KAAK,EAAC,SAAf;AAAyB,YAAA,KAAK,EAAC,MAA/B;AAAsC,YAAA,MAAM,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,EAsCGa,cAAc,IAAID,OAtCrB;AAAA;AAAA;AAAA;AAAA;AAAA,YADa,gBA0Cb,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEZ,UAAlB;AAA8B,MAAA,OAAO,EAAER,mBAAmB,CAACwB,EAApB,CAAuB,CAAvB,IAA4BP,cAA5B,GAA6CF,sBAApF;AAAA,gBACGL,CAAC,CAAC,OAAD;AADJ;AAAA;AAAA;AAAA;AAAA,YA1CF;AA8CD,GA/CD;;AAiDA,sBAAO,QAAC,IAAD;AAAM,IAAA,aAAa,EAAC,QAApB;AAAA,cAA8BN,SAAS,gBAAG,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAH,GAA6CsB,iBAAiB;AAArG;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9FD;;GAAM5B,W;UASUL,c,EAOmBH,Q,EAERA,Q,EASEA,Q,EAUoBE,U;;;KArC3CM,W;AAgGN,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Pool } from 'state/types'\r\nimport Balance from 'components/Balance'\r\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\r\nimport StakeModal from '../Modals/StakeModal'\r\n\r\ninterface StakeActionsProps {\r\n  pool: Pool\r\n  stakingTokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  isBnbPool: boolean\r\n  isStaked: ConstrainBoolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst StakeAction: React.FC<StakeActionsProps> = ({\r\n  pool,\r\n  stakingTokenBalance,\r\n  stakedBalance,\r\n  isBnbPool,\r\n  isStaked,\r\n  isLoading = false,\r\n}) => {\r\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\r\n  const { t } = useTranslation()\r\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\r\n  const stakedTokenDollarBalance = getBalanceNumber(\r\n    stakedBalance.multipliedBy(stakingTokenPrice),\r\n    stakingToken.decimals,\r\n  )\r\n\r\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\r\n\r\n  const [onPresentStake] = useModal(\r\n    <StakeModal\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n    />,\r\n  )\r\n\r\n  const [onPresentUnstake] = useModal(\r\n    <StakeModal\r\n      stakingTokenBalance={stakingTokenBalance}\r\n      isBnbPool={isBnbPool}\r\n      pool={pool}\r\n      stakingTokenPrice={stakingTokenPrice}\r\n      isRemovingStake\r\n    />,\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Youâ€™ve already staked the maximum amount you can stake in this pool!'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\r\n\r\n  const renderStakeAction = () => {\r\n    return isStaked ? (\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <>\r\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\r\n            {stakingTokenPrice !== 0 && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={stakedTokenDollarBalance}\r\n                  prefix=\"~\"\r\n                  unit=\" USD\"\r\n                />\r\n              </Text>\r\n            )}\r\n          </>\r\n        </Flex>\r\n        <Flex>\r\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\r\n            <MinusIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n          {reachStakingLimit ? (\r\n            <span ref={targetRef}>\r\n              <IconButton variant=\"secondary\" disabled>\r\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\r\n              </IconButton>\r\n            </span>\r\n          ) : (\r\n            <IconButton\r\n              variant=\"secondary\"\r\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\r\n              disabled={isFinished}\r\n            >\r\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\r\n            </IconButton>\r\n          )}\r\n        </Flex>\r\n        {tooltipVisible && tooltip}\r\n      </Flex>\r\n    ) : (\r\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\r\n        {t('Stake')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\r\n}\r\n\r\nexport default StakeAction\r\n"]},"metadata":{},"sourceType":"module"}