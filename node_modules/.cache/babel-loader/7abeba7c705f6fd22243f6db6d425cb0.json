{"ast":null,"code":"'use strict';\n\nconst {\n  encoding: getCodec\n} = require('multibase');\nconst utf8Encoder = new TextEncoder();\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array(string) {\n  const array = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i);\n  }\n  return array;\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString(string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string);\n  }\n  return getCodec(encoding).decode(string);\n}\nmodule.exports = fromString;","map":{"version":3,"names":["encoding","getCodec","require","utf8Encoder","TextEncoder","asciiStringToUint8Array","string","array","Uint8Array","length","i","charCodeAt","fromString","encode","decode","module","exports"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/uint8arrays/from-string.js"],"sourcesContent":["'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {import('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,QAAQ,EAAEC;AAAS,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnD,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAEC,MAAM,EAAE;EACxC,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,MAAM,CAAC;EAE3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCH,KAAK,CAACG,CAAC,CAAC,GAAGJ,MAAM,CAACK,UAAU,CAACD,CAAC,CAAC;EACjC;EAEA,OAAOH,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,UAAUA,CAAEN,MAAM,EAAEN,QAAQ,GAAG,MAAM,EAAE;EAC9C,IAAIA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,EAAE;IAC/C,OAAOG,WAAW,CAACU,MAAM,CAACP,MAAM,CAAC;EACnC;EAEA,IAAIN,QAAQ,KAAK,OAAO,EAAE;IACxB,OAAOK,uBAAuB,CAACC,MAAM,CAAC;EACxC;EAEA,OAAOL,QAAQ,CAACD,QAAQ,CAAC,CAACc,MAAM,CAACR,MAAM,CAAC;AAC1C;AAEAS,MAAM,CAACC,OAAO,GAAGJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script"}