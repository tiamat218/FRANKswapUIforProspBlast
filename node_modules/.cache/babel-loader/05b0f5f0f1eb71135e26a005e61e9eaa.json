{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\Cells\\\\EndsInCell.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit';\nimport { getBscScanLink } from 'utils';\nimport { useBlock } from 'state/block/hooks';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { getPoolBlockInfo } from 'views/Pools/helpers';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`;\n_c = StyledCell;\nconst EndsInCell = ({\n  pool\n}) => {\n  _s();\n  const {\n    sousId,\n    totalStaked,\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    t\n  } = useTranslation();\n  const {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  } = getPoolBlockInfo(pool, currentBlock);\n  const isCakePool = sousId === 0;\n  const renderBlocks = shouldShowBlockCountdown ? /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flex: \"1.3\",\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"16px\",\n        value: blocksToDisplay,\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"4px\",\n        textTransform: \"lowercase\",\n        children: t('Blocks')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flex: \"1\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        external: true,\n        href: getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown'),\n        onClick: e => e.stopPropagation(),\n        children: /*#__PURE__*/_jsxDEV(TimerIcon, {\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Text, {\n    children: \"-\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || !blocksRemaining && !blocksUntilStart;\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished;\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), showLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this) : renderBlocks]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(EndsInCell, \"Uw5JVSiN5isweqQvxCTPHwhHRUs=\", false, function () {\n  return [useBlock, useTranslation];\n});\n_c2 = EndsInCell;\nexport default EndsInCell;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"EndsInCell\");","map":{"version":3,"names":["React","styled","Flex","Link","Skeleton","Text","TimerIcon","getBscScanLink","useBlock","Balance","useTranslation","getPoolBlockInfo","BaseCell","CellContent","jsxDEV","_jsxDEV","StyledCell","_c","EndsInCell","pool","_s","sousId","totalStaked","startBlock","endBlock","isFinished","currentBlock","t","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","isCakePool","renderBlocks","alignItems","children","flex","fontSize","value","decimals","fileName","_jsxFileName","lineNumber","columnNumber","ml","textTransform","external","href","onClick","e","stopPropagation","isLoadingPublicData","gt","showLoading","role","color","textAlign","width","height","_c2","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/EndsInCell.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}