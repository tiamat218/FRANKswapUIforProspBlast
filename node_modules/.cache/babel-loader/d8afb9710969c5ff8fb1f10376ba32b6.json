{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit';\nimport useAuth from 'hooks/useAuth';\nconst _binanceChainListener = async () => new Promise(resolve => Object.defineProperty(window, 'BinanceChain', {\n  get() {\n    return this.bsc;\n  },\n  set(bsc) {\n    this.bsc = bsc;\n    resolve();\n  }\n}));\nconst useEagerConnect = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey);\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC;\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain');\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId));\n        return;\n      }\n      login(connectorId);\n    }\n  }, [login]);\n};\n_s(useEagerConnect, \"Wgz/Ryr6BWZJCDTHbflgjoyTd1g=\", false, function () {\n  return [useAuth];\n});\nexport default useEagerConnect;","map":{"version":3,"names":["useEffect","connectorLocalStorageKey","ConnectorNames","useAuth","_binanceChainListener","Promise","resolve","Object","defineProperty","window","get","bsc","set","useEagerConnect","_s","login","connectorId","localStorage","getItem","isConnectorBinanceChain","BSC","isBinanceChainDefined","Reflect","has","then"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useEagerConnect.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst _binanceChainListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'BinanceChain', {\r\n      get() {\r\n        return this.bsc\r\n      },\r\n      set(bsc) {\r\n        this.bsc = bsc\r\n\r\n        resolve()\r\n      },\r\n    }),\r\n  )\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    if (connectorId) {\r\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\r\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\r\n\r\n      // Currently BSC extension doesn't always inject in time.\r\n      // We must check to see if it exists, and if not, wait for it before proceeding.\r\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\r\n        _binanceChainListener().then(() => login(connectorId))\r\n\r\n        return\r\n      }\r\n\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,wBAAwB,EAAEC,cAAc,QAAQ,oBAAoB;AAC7E,OAAOC,OAAO,MAAM,eAAe;AAEnC,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAC5B,IAAIC,OAAO,CAAQC,OAAO,IACxBC,MAAM,CAACC,cAAc,CAACC,MAAM,EAAE,cAAc,EAAE;EAC5CC,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACC,GAAG;EACjB,CAAC;EACDC,GAAGA,CAACD,GAAG,EAAE;IACP,IAAI,CAACA,GAAG,GAAGA,GAAG;IAEdL,OAAO,CAAC,CAAC;EACX;AACF,CAAC,CACH,CAAC;AAEH,MAAMO,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAM,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAE3BH,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAGP,MAAM,CAACQ,YAAY,CAACC,OAAO,CAACjB,wBAAwB,CAAmB;IAE3F,IAAIe,WAAW,EAAE;MACf,MAAMG,uBAAuB,GAAGH,WAAW,KAAKd,cAAc,CAACkB,GAAG;MAClE,MAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACd,MAAM,EAAE,cAAc,CAAC;;MAEjE;MACA;MACA,IAAIU,uBAAuB,IAAI,CAACE,qBAAqB,EAAE;QACrDjB,qBAAqB,CAAC,CAAC,CAACoB,IAAI,CAAC,MAAMT,KAAK,CAACC,WAAW,CAAC,CAAC;QAEtD;MACF;MAEAD,KAAK,CAACC,WAAW,CAAC;IACpB;EACF,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;AACb,CAAC;AAAAD,EAAA,CArBKD,eAAe;EAAA,QACDV,OAAO;AAAA;AAsB3B,eAAeU,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}