{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Collectibles\\\\components\\\\NftList.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport orderBy from 'lodash/orderBy';\nimport { useWeb3React } from '@web3-react/core';\nimport nfts from 'config/constants/nfts';\nimport { useAppDispatch } from 'state';\nimport { fetchWalletNfts } from 'state/collectibles';\nimport { useGetCollectibles } from 'state/hooks';\nimport NftCard from './NftCard';\nimport NftGrid from './NftGrid';\nimport EasterNftCard from './NftCard/EasterNftCard';\n\n/**\r\n * A map of bunnyIds to special campaigns (NFT distribution)\r\n * Each NftCard is responsible for checking it's own claim status\r\n *\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard\n};\nconst NftList = () => {\n  _s();\n  const {\n    tokenIds\n  } = useGetCollectibles();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account));\n  };\n  return /*#__PURE__*/_jsxDEV(NftGrid, {\n    children: orderBy(nfts, 'sortOrder').map(nft => {\n      const Card = nftComponents[nft.identifier] || NftCard;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          nft: nft,\n          tokenIds: tokenIds[nft.identifier],\n          refresh: handleRefresh\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, nft.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(NftList, \"4gZ+851OhRZ7QnuRInH2W+ppypM=\", false, function () {\n  return [useGetCollectibles, useAppDispatch, useWeb3React];\n});\n_c = NftList;\nexport default NftList;\nvar _c;\n$RefreshReg$(_c, \"NftList\");","map":{"version":3,"names":["React","orderBy","useWeb3React","nfts","useAppDispatch","fetchWalletNfts","useGetCollectibles","NftCard","NftGrid","EasterNftCard","jsxDEV","_jsxDEV","nftComponents","NftList","_s","tokenIds","dispatch","account","handleRefresh","children","map","nft","Card","identifier","refresh","fileName","_jsxFileName","lineNumber","columnNumber","name","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Collectibles/components/NftList.tsx"],"sourcesContent":["import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport nfts from 'config/constants/nfts'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchWalletNfts } from 'state/collectibles'\r\nimport { useGetCollectibles } from 'state/hooks'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\nimport EasterNftCard from './NftCard/EasterNftCard'\r\n\r\n/**\r\n * A map of bunnyIds to special campaigns (NFT distribution)\r\n * Each NftCard is responsible for checking it's own claim status\r\n *\r\n */\r\nconst nftComponents = {\r\n  'easter-storm': EasterNftCard,\r\n  'easter-flipper': EasterNftCard,\r\n  'easter-caker': EasterNftCard,\r\n}\r\n\r\nconst NftList = () => {\r\n  const { tokenIds } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleRefresh = () => {\r\n    dispatch(fetchWalletNfts(account))\r\n  }\r\n\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => {\r\n        const Card = nftComponents[nft.identifier] || NftCard\r\n\r\n        return (\r\n          <div key={nft.name}>\r\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\r\n          </div>\r\n        )\r\n      })}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,gBAAgB;AACpC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,kBAAkB,QAAQ,aAAa;AAChD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,aAAa,MAAM,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,aAAa,GAAG;EACpB,cAAc,EAAEH,aAAa;EAC7B,gBAAgB,EAAEA,aAAa;EAC/B,cAAc,EAAEA;AAClB,CAAC;AAED,MAAMI,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGT,kBAAkB,CAAC,CAAC;EACzC,MAAMU,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEa;EAAQ,CAAC,GAAGf,YAAY,CAAC,CAAC;EAElC,MAAMgB,aAAa,GAAGA,CAAA,KAAM;IAC1BF,QAAQ,CAACX,eAAe,CAACY,OAAO,CAAC,CAAC;EACpC,CAAC;EAED,oBACEN,OAAA,CAACH,OAAO;IAAAW,QAAA,EACLlB,OAAO,CAACE,IAAI,EAAE,WAAW,CAAC,CAACiB,GAAG,CAAEC,GAAG,IAAK;MACvC,MAAMC,IAAI,GAAGV,aAAa,CAACS,GAAG,CAACE,UAAU,CAAC,IAAIhB,OAAO;MAErD,oBACEI,OAAA;QAAAQ,QAAA,eACER,OAAA,CAACW,IAAI;UAACD,GAAG,EAAEA,GAAI;UAACN,QAAQ,EAAEA,QAAQ,CAACM,GAAG,CAACE,UAAU,CAAE;UAACC,OAAO,EAAEN;QAAc;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADtEP,GAAG,CAACQ,IAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEd,CAAC;AAAAd,EAAA,CAtBKD,OAAO;EAAA,QACUP,kBAAkB,EACtBF,cAAc,EACXF,YAAY;AAAA;AAAA4B,EAAA,GAH5BjB,OAAO;AAwBb,eAAeA,OAAO;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}