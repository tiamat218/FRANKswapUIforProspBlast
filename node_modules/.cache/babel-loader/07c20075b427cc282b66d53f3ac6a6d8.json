{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport { LotteryStatus } from 'config/constants/types';\nimport usePreviousValue from 'hooks/usePreviousValue';\nimport { useEffect } from 'react';\nimport { useAppDispatch } from 'state';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery';\n\nconst useStatusTransitions = () => {\n  _s();\n\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound: {\n      status\n    }\n  } = useLottery();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const previousStatus = usePreviousValue(status);\n  useEffect(() => {\n    // Only run if there is a status state change\n    if (previousStatus !== status && currentLotteryId) {\n      // Current lottery transitions from CLOSE > CLAIMABLE\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n\n        if (account) {\n          dispatch(fetchUserLotteries({\n            account,\n            currentLotteryId\n          }));\n        }\n      } // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\n\n\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n\n        if (account) {\n          dispatch(fetchUserLotteries({\n            account,\n            currentLotteryId\n          }));\n        }\n      }\n    }\n  }, [currentLotteryId, status, previousStatus, account, dispatch]);\n  useEffect(() => {\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\n      dispatch(fetchCurrentLotteryId());\n      dispatch(fetchPublicLotteries({\n        currentLotteryId\n      }));\n      const interval = setInterval(async () => {\n        dispatch(fetchCurrentLotteryId());\n        dispatch(fetchPublicLotteries({\n          currentLotteryId\n        }));\n      }, 10000);\n      return () => clearInterval(interval);\n    }\n\n    return () => null;\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch]);\n};\n\n_s(useStatusTransitions, \"wcLdGya9oVB3uOdWCc+Sx2dP9bI=\", false, function () {\n  return [useLottery, useWeb3React, useAppDispatch, usePreviousValue];\n});\n\nexport default useStatusTransitions;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/hooks/useStatusTransitions.tsx"],"names":["useWeb3React","LotteryStatus","usePreviousValue","useEffect","useAppDispatch","useLottery","fetchPublicLotteries","fetchCurrentLotteryId","fetchUserLotteries","useStatusTransitions","currentLotteryId","isTransitioning","currentRound","status","account","dispatch","previousStatus","CLOSE","CLAIMABLE","OPEN","interval","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,oBAAT,EAA+BC,qBAA/B,EAAsDC,kBAAtD,QAAgF,eAAhF;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,YAAY,EAAE;AAAEC,MAAAA;AAAF;AAHV,MAIFR,UAAU,EAJd;AAMA,QAAM;AAAES,IAAAA;AAAF,MAAcd,YAAY,EAAhC;AACA,QAAMe,QAAQ,GAAGX,cAAc,EAA/B;AACA,QAAMY,cAAc,GAAGd,gBAAgB,CAACW,MAAD,CAAvC;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIa,cAAc,KAAKH,MAAnB,IAA6BH,gBAAjC,EAAmD;AACjD;AACA,UAAIM,cAAc,KAAKf,aAAa,CAACgB,KAAjC,IAA0CJ,MAAM,KAAKZ,aAAa,CAACiB,SAAvE,EAAkF;AAChFH,QAAAA,QAAQ,CAACT,oBAAoB,CAAC;AAAEI,UAAAA;AAAF,SAAD,CAArB,CAAR;;AACA,YAAII,OAAJ,EAAa;AACXC,UAAAA,QAAQ,CAACP,kBAAkB,CAAC;AAAEM,YAAAA,OAAF;AAAWJ,YAAAA;AAAX,WAAD,CAAnB,CAAR;AACD;AACF,OAPgD,CAQjD;;;AACA,UAAIM,cAAc,KAAKf,aAAa,CAACiB,SAAjC,IAA8CL,MAAM,KAAKZ,aAAa,CAACkB,IAA3E,EAAiF;AAC/EJ,QAAAA,QAAQ,CAACT,oBAAoB,CAAC;AAAEI,UAAAA;AAAF,SAAD,CAArB,CAAR;;AACA,YAAII,OAAJ,EAAa;AACXC,UAAAA,QAAQ,CAACP,kBAAkB,CAAC;AAAEM,YAAAA,OAAF;AAAWJ,YAAAA;AAAX,WAAD,CAAnB,CAAR;AACD;AACF;AACF;AACF,GAlBQ,EAkBN,CAACA,gBAAD,EAAmBG,MAAnB,EAA2BG,cAA3B,EAA2CF,OAA3C,EAAoDC,QAApD,CAlBM,CAAT;AAoBAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAIa,cAAc,KAAKf,aAAa,CAACiB,SAAjC,IAA8CL,MAAM,KAAKZ,aAAa,CAACiB,SAAvE,IAAoFP,eAAxF,EAAyG;AACvGI,MAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAQ,MAAAA,QAAQ,CAACT,oBAAoB,CAAC;AAAEI,QAAAA;AAAF,OAAD,CAArB,CAAR;AACA,YAAMU,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvCN,QAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AACAQ,QAAAA,QAAQ,CAACT,oBAAoB,CAAC;AAAEI,UAAAA;AAAF,SAAD,CAArB,CAAR;AACD,OAH2B,EAGzB,KAHyB,CAA5B;AAIA,aAAO,MAAMY,aAAa,CAACF,QAAD,CAA1B;AACD;;AACD,WAAO,MAAM,IAAb;AACD,GAbQ,EAaN,CAACP,MAAD,EAASG,cAAT,EAAyBL,eAAzB,EAA0CD,gBAA1C,EAA4DK,QAA5D,CAbM,CAAT;AAcD,CA7CD;;GAAMN,oB;UAKAJ,U,EAEgBL,Y,EACHI,c,EACMF,gB;;;AAsCzB,eAAeO,oBAAf","sourcesContent":["import { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\r\n\r\nconst useStatusTransitions = () => {\r\n  const {\r\n    currentLotteryId,\r\n    isTransitioning,\r\n    currentRound: { status },\r\n  } = useLottery()\r\n\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const previousStatus = usePreviousValue(status)\r\n\r\n  useEffect(() => {\r\n    // Only run if there is a status state change\r\n    if (previousStatus !== status && currentLotteryId) {\r\n      // Current lottery transitions from CLOSE > CLAIMABLE\r\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\r\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n        if (account) {\r\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n        }\r\n      }\r\n    }\r\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\r\n\r\n  useEffect(() => {\r\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\r\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\r\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\r\n      dispatch(fetchCurrentLotteryId())\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      const interval = setInterval(async () => {\r\n        dispatch(fetchCurrentLotteryId())\r\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      }, 10000)\r\n      return () => clearInterval(interval)\r\n    }\r\n    return () => null\r\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\r\n}\r\n\r\nexport default useStatusTransitions\r\n"]},"metadata":{},"sourceType":"module"}