{"ast":null,"code":"import{useEffect,useRef,useState}from'react';import{BSC_BLOCK_TIME}from'config';import{simpleRpcProvider}from'utils/providers';/**\r\n * Returns a countdown in seconds of a given block\r\n */const useBlockCountdown=blockNumber=>{const timer=useRef(null);const[secondsRemaining,setSecondsRemaining]=useState(0);useEffect(()=>{const startCountdown=async()=>{const currentBlock=await simpleRpcProvider.getBlockNumber();if(blockNumber>currentBlock){setSecondsRemaining((blockNumber-currentBlock)*BSC_BLOCK_TIME);// Clear previous interval\nif(timer.current){clearInterval(timer.current);}timer.current=setInterval(()=>{setSecondsRemaining(prevSecondsRemaining=>{if(prevSecondsRemaining===1){clearInterval(timer.current);}return prevSecondsRemaining-1;});},1000);}};startCountdown();return()=>{clearInterval(timer.current);};},[setSecondsRemaining,blockNumber,timer]);return secondsRemaining;};export default useBlockCountdown;","map":{"version":3,"names":["useEffect","useRef","useState","BSC_BLOCK_TIME","simpleRpcProvider","useBlockCountdown","blockNumber","timer","secondsRemaining","setSecondsRemaining","startCountdown","currentBlock","getBlockNumber","current","clearInterval","setInterval","prevSecondsRemaining"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useGetBlockCountdown.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACnD,OAASC,cAAc,KAAQ,QAAQ,CACvC,OAASC,iBAAiB,KAAQ,iBAAiB,CAEnD;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAIC,WAAmB,EAAK,CACjD,KAAM,CAAAC,KAAK,CAAGN,MAAM,CAAgC,IAAI,CAAC,CACzD,KAAM,CAACO,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGP,QAAQ,CAAC,CAAC,CAAC,CAE3DF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAU,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAP,iBAAiB,CAACQ,cAAc,CAAC,CAAC,CAE7D,GAAIN,WAAW,CAAGK,YAAY,CAAE,CAC9BF,mBAAmB,CAAC,CAACH,WAAW,CAAGK,YAAY,EAAIR,cAAc,CAAC,CAElE;AACA,GAAII,KAAK,CAACM,OAAO,CAAE,CACjBC,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC,CAC9B,CAEAN,KAAK,CAACM,OAAO,CAAGE,WAAW,CAAC,IAAM,CAChCN,mBAAmB,CAAEO,oBAAoB,EAAK,CAC5C,GAAIA,oBAAoB,GAAK,CAAC,CAAE,CAC9BF,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC,CAC9B,CAEA,MAAO,CAAAG,oBAAoB,CAAG,CAAC,CACjC,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CACV,CACF,CAAC,CAEDN,cAAc,CAAC,CAAC,CAEhB,MAAO,IAAM,CACXI,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC,CAC9B,CAAC,CACH,CAAC,CAAE,CAACJ,mBAAmB,CAAEH,WAAW,CAAEC,KAAK,CAAC,CAAC,CAE7C,MAAO,CAAAC,gBAAgB,CACzB,CAAC,CAED,cAAe,CAAAH,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}