{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolTabButtons.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport ToggleView from './ToggleView/ToggleView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c = ToggleWrapper;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c2 = ViewControls;\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`;\n_c3 = Wrapper;\n\nconst PoolTabButtons = ({\n  stakedOnly,\n  setStakedOnly,\n  hasStakeInFinishedPools,\n  viewMode,\n  setViewMode\n}) => {\n  _s();\n\n  const {\n    url,\n    isExact\n  } = useRouteMatch();\n  const {\n    t\n  } = useTranslation();\n\n  const viewModeToggle = /*#__PURE__*/_jsxDEV(ToggleView, {\n    viewMode: viewMode,\n    onToggle: mode => setViewMode(mode)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 26\n  }, this);\n\n  const liveOrFinishedSwitch = /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      activeIndex: isExact ? 0 : 1,\n      scale: \"sm\",\n      variant: \"subtle\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n        as: Link,\n        to: `${url}`,\n        children: t('Live')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NotificationDot, {\n        show: hasStakeInFinishedPools,\n        children: /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          as: Link,\n          to: `${url}/history`,\n          children: t('Finished')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n\n  const stakedOnlySwitch = /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Toggle, {\n      checked: stakedOnly,\n      onChange: () => setStakedOnly(!stakedOnly),\n      scale: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: [\" \", t('Staked only')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(ViewControls, {\n    children: [viewModeToggle, stakedOnlySwitch, liveOrFinishedSwitch]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolTabButtons, \"ixiA0dnp5h8c0ijUrkwAcI+orxk=\", false, function () {\n  return [useRouteMatch, useTranslation];\n});\n\n_c4 = PoolTabButtons;\nexport default PoolTabButtons;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ToggleWrapper\");\n$RefreshReg$(_c2, \"ViewControls\");\n$RefreshReg$(_c3, \"Wrapper\");\n$RefreshReg$(_c4, \"PoolTabButtons\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolTabButtons.tsx"],"names":["React","useRouteMatch","Link","styled","ButtonMenu","ButtonMenuItem","Toggle","Text","NotificationDot","useTranslation","ToggleView","ToggleWrapper","div","ViewControls","theme","mediaQueries","sm","Wrapper","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","url","isExact","t","viewModeToggle","mode","liveOrFinishedSwitch","stakedOnlySwitch"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedPools}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <ToggleWrapper>\r\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n      <Text> {t('Staked only')}</Text>\r\n    </ToggleWrapper>\r\n  )\r\n\r\n  return (\r\n    <ViewControls>\r\n      {viewModeToggle}\r\n      {stakedOnlySwitch}\r\n      {liveOrFinishedSwitch}\r\n    </ViewControls>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n"]},"metadata":{},"sourceType":"module"}