{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Ifos\\\\components\\\\IfoFoldableCard\\\\IfoPoolCard\\\\ContributeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { getAddress } from 'utils/addressHelpers';\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { useERC20 } from 'hooks/useContract';\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]; // Default value for transaction setting, tweak based on BSC network congestion.\n\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString();\n\nconst ContributeModal = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess\n}) => {\n  _s();\n\n  const publicPoolCharacteristics = publicIfoData[poolId];\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    currency\n  } = ifo;\n  const {\n    limitPerUserInLP\n  } = publicPoolCharacteristics;\n  const {\n    amountTokenCommittedInLP\n  } = userPoolCharacteristics;\n  const {\n    contract\n  } = walletIfoData;\n  const [value, setValue] = useState('');\n  const {\n    account\n  } = useWeb3React();\n  const raisingTokenContract = useERC20(getAddress(currency.address));\n  const {\n    t\n  } = useTranslation();\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address);\n        const currentAllowance = new BigNumber(response.toString());\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, {\n        gasPrice\n      });\n    },\n    onConfirm: () => {\n      return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\n        gasPrice\n      });\n    },\n    onSuccess: async () => {\n      await onSuccess(valueWithTokenDecimals);\n      onDismiss();\n    }\n  });\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance) ? limitPerUserInLP : userCurrencyBalance;\n    }\n\n    return userCurrencyBalance;\n  })();\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Contribute %symbol%', {\n      symbol: currency.symbol\n    }),\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      maxWidth: \"320px\",\n      children: [limitPerUserInLP.isGreaterThan(0) && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Max. LP token entry')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: getBalanceAmount(limitPerUserInLP, currency.decimals).toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('Commit'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexGrow: 1,\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`,\n            width: 24,\n            height: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: currency.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        currencyValue: publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2),\n        onUserInput: setValue,\n        isWarning: valueWithTokenDecimals.isGreaterThan(maximumLpCommitable),\n        decimals: currency.decimals,\n        mb: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        textAlign: \"right\",\n        fontSize: \"12px\",\n        mb: \"16px\",\n        children: t('Balance: %balance%', {\n          balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString()\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: multiplierValues.map((multiplierValue, index) => /*#__PURE__*/_jsxDEV(Button, {\n          scale: \"xs\",\n          variant: \"tertiary\",\n          onClick: () => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString()),\n          mr: index < multiplierValues.length - 1 ? '8px' : 0,\n          children: [multiplierValue * 100, \"%\"]\n        }, multiplierValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        mb: \"24px\",\n        children: t('If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n        isApproveDisabled: isConfirmed || isConfirming || isApproved,\n        isApproving: isApproving,\n        isConfirmDisabled: !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0),\n        isConfirming: isConfirming,\n        onApprove: handleApprove,\n        onConfirm: handleConfirm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContributeModal, \"b5tF8rkKkmi2l224Pck7j0xVf0A=\", false, function () {\n  return [useWeb3React, useERC20, useTranslation, useApproveConfirmTransaction];\n});\n\n_c = ContributeModal;\nexport default ContributeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContributeModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx"],"names":["React","useState","useWeb3React","BigNumber","ethers","Modal","ModalBody","Text","Image","Button","BalanceInput","Flex","PoolIds","useTranslation","getBalanceAmount","getAddress","ApproveConfirmButtons","useApproveConfirmTransaction","DEFAULT_TOKEN_DECIMAL","useERC20","BIG_NINE","BIG_TEN","multiplierValues","gasPrice","times","pow","toString","ContributeModal","poolId","ifo","publicIfoData","walletIfoData","userCurrencyBalance","onDismiss","onSuccess","publicPoolCharacteristics","userPoolCharacteristics","currency","limitPerUserInLP","amountTokenCommittedInLP","contract","value","setValue","account","raisingTokenContract","address","t","valueWithTokenDecimals","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","currentAllowance","gt","error","onApprove","approve","constants","MaxUint256","onConfirm","depositPool","poolBasic","maximumLpCommitable","isGreaterThan","minus","isLessThanOrEqualTo","symbol","decimals","split","toLocaleLowerCase","currencyPriceInUSD","toFixed","balance","map","multiplierValue","index","length","isNaN","eq"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  userCurrencyBalance: BigNumber\r\n  onSuccess: (amount: BigNumber) => void\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst ContributeModal: React.FC<Props> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  userCurrencyBalance,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency } = ifo\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { contract } = walletIfoData\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const raisingTokenContract = useERC20(getAddress(currency.address))\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await raisingTokenContract.allowance(account, contract.address)\r\n          const currentAllowance = new BigNumber(response.toString())\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return raisingTokenContract.approve(contract.address, ethers.constants.MaxUint256, { gasPrice })\r\n      },\r\n      onConfirm: () => {\r\n        return contract.depositPool(valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1, {\r\n          gasPrice,\r\n        })\r\n      },\r\n      onSuccess: async () => {\r\n        await onSuccess(valueWithTokenDecimals)\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  const maximumLpCommitable = (() => {\r\n    if (limitPerUserInLP.isGreaterThan(0)) {\r\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\r\n        ? limitPerUserInLP\r\n        : userCurrencyBalance\r\n    }\r\n    return userCurrencyBalance\r\n  })()\r\n\r\n  return (\r\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"320px\">\r\n        {limitPerUserInLP.isGreaterThan(0) && (\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            <Text>{t('Max. LP token entry')}</Text>\r\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Commit')}:</Text>\r\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\r\n            <Image\r\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\r\n              width={24}\r\n              height={24}\r\n            />\r\n            <Text>{currency.symbol}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\r\n          onUserInput={setValue}\r\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\r\n          decimals={currency.decimals}\r\n          mb=\"8px\"\r\n        />\r\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Balance: %balance%', {\r\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\r\n          })}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n          {multiplierValues.map((multiplierValue, index) => (\r\n            <Button\r\n              key={multiplierValue}\r\n              scale=\"xs\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\r\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n            >\r\n              {multiplierValue * 100}%\r\n            </Button>\r\n          ))}\r\n        </Flex>\r\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n          {t(\r\n            'If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\r\n          )}\r\n        </Text>\r\n        <ApproveConfirmButtons\r\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n          isApproving={isApproving}\r\n          isConfirmDisabled={\r\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\r\n          }\r\n          isConfirming={isConfirming}\r\n          onApprove={handleApprove}\r\n          onConfirm={handleConfirm}\r\n        />\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n"]},"metadata":{},"sourceType":"module"}