{"ast":null,"code":"import{useCallback}from'react';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{useAppDispatch}from'state';import{updateUserStakedBalance,updateUserBalance,updateUserPendingReward}from'state/actions';import{unstakeFarm}from'utils/calls';import{useMasterchef,useSousChef}from'hooks/useContract';import{BIG_TEN}from'utils/bigNumber';const sousUnstake=async(sousChefContract,amount,decimals)=>{const tx=await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString());const receipt=await tx.wait();return receipt.status;};const sousEmergencyUnstake=async sousChefContract=>{const tx=await sousChefContract.emergencyWithdraw();const receipt=await tx.wait();return receipt.status;};const useUnstakePool=function(sousId){let enableEmergencyWithdraw=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const dispatch=useAppDispatch();const{account}=useWeb3React();const masterChefContract=useMasterchef();const sousChefContract=useSousChef(sousId);const handleUnstake=useCallback(async(amount,decimals)=>{if(sousId===0){await unstakeFarm(masterChefContract,0,amount);}else if(enableEmergencyWithdraw){await sousEmergencyUnstake(sousChefContract);}else{await sousUnstake(sousChefContract,amount,decimals);}dispatch(updateUserStakedBalance(sousId,account));dispatch(updateUserBalance(sousId,account));dispatch(updateUserPendingReward(sousId,account));},[account,dispatch,enableEmergencyWithdraw,masterChefContract,sousChefContract,sousId]);return{onUnstake:handleUnstake};};export default useUnstakePool;","map":{"version":3,"names":["useCallback","useWeb3React","BigNumber","useAppDispatch","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstakeFarm","useMasterchef","useSousChef","BIG_TEN","sousUnstake","sousChefContract","amount","decimals","tx","withdraw","times","pow","toString","receipt","wait","status","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","sousId","enableEmergencyWithdraw","arguments","length","undefined","dispatch","account","masterChefContract","handleUnstake","onUnstake"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useUnstakePool.ts"],"sourcesContent":["import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n  const tx = await sousChefContract.emergencyWithdraw()\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await unstakeFarm(masterChefContract, 0, amount)\r\n      } else if (enableEmergencyWithdraw) {\r\n        await sousEmergencyUnstake(sousChefContract)\r\n      } else {\r\n        await sousUnstake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakePool\r\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CACnC,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,MAAO,CAAAC,SAAS,KAAM,cAAc,CACpC,OAASC,cAAc,KAAQ,OAAO,CACtC,OAASC,uBAAuB,CAAEC,iBAAiB,CAAEC,uBAAuB,KAAQ,eAAe,CACnG,OAASC,WAAW,KAAQ,aAAa,CACzC,OAASC,aAAa,CAAEC,WAAW,KAAQ,mBAAmB,CAC9D,OAASC,OAAO,KAAQ,iBAAiB,CAEzC,KAAM,CAAAC,WAAW,CAAG,KAAAA,CAAOC,gBAAgB,CAAEC,MAAM,CAAEC,QAAQ,GAAK,CAChE,KAAM,CAAAC,EAAE,CAAG,KAAM,CAAAH,gBAAgB,CAACI,QAAQ,CAAC,GAAI,CAAAd,SAAS,CAACW,MAAM,CAAC,CAACI,KAAK,CAACP,OAAO,CAACQ,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC,CAAC,CACzG,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAL,EAAE,CAACM,IAAI,CAAC,CAAC,CAC/B,MAAO,CAAAD,OAAO,CAACE,MAAM,CACvB,CAAC,CAED,KAAM,CAAAC,oBAAoB,CAAG,KAAO,CAAAX,gBAAgB,EAAK,CACvD,KAAM,CAAAG,EAAE,CAAG,KAAM,CAAAH,gBAAgB,CAACY,iBAAiB,CAAC,CAAC,CACrD,KAAM,CAAAJ,OAAO,CAAG,KAAM,CAAAL,EAAE,CAACM,IAAI,CAAC,CAAC,CAC/B,MAAO,CAAAD,OAAO,CAACE,MAAM,CACvB,CAAC,CAED,KAAM,CAAAG,cAAc,CAAG,QAAAA,CAACC,MAAM,CAAsC,IAApC,CAAAC,uBAAuB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC7D,KAAM,CAAAG,QAAQ,CAAG5B,cAAc,CAAC,CAAC,CACjC,KAAM,CAAE6B,OAAQ,CAAC,CAAG/B,YAAY,CAAC,CAAC,CAClC,KAAM,CAAAgC,kBAAkB,CAAGzB,aAAa,CAAC,CAAC,CAC1C,KAAM,CAAAI,gBAAgB,CAAGH,WAAW,CAACiB,MAAM,CAAC,CAE5C,KAAM,CAAAQ,aAAa,CAAGlC,WAAW,CAC/B,MAAOa,MAAc,CAAEC,QAAgB,GAAK,CAC1C,GAAIY,MAAM,GAAK,CAAC,CAAE,CAChB,KAAM,CAAAnB,WAAW,CAAC0B,kBAAkB,CAAE,CAAC,CAAEpB,MAAM,CAAC,CAClD,CAAC,IAAM,IAAIc,uBAAuB,CAAE,CAClC,KAAM,CAAAJ,oBAAoB,CAACX,gBAAgB,CAAC,CAC9C,CAAC,IAAM,CACL,KAAM,CAAAD,WAAW,CAACC,gBAAgB,CAAEC,MAAM,CAAEC,QAAQ,CAAC,CACvD,CACAiB,QAAQ,CAAC3B,uBAAuB,CAACsB,MAAM,CAAEM,OAAO,CAAC,CAAC,CAClDD,QAAQ,CAAC1B,iBAAiB,CAACqB,MAAM,CAAEM,OAAO,CAAC,CAAC,CAC5CD,QAAQ,CAACzB,uBAAuB,CAACoB,MAAM,CAAEM,OAAO,CAAC,CAAC,CACpD,CAAC,CACD,CAACA,OAAO,CAAED,QAAQ,CAAEJ,uBAAuB,CAAEM,kBAAkB,CAAErB,gBAAgB,CAAEc,MAAM,CAC3F,CAAC,CAED,MAAO,CAAES,SAAS,CAAED,aAAc,CAAC,CACrC,CAAC,CAED,cAAe,CAAAT,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}