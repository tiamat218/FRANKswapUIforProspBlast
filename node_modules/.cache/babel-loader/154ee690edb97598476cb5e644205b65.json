{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useAppDispatch } from 'state';\nimport { updateUserAllowance } from 'state/actions';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport useLastUpdated from 'hooks/useLastUpdated';\nexport const useApprovePool = (lpContract, sousId, earningTokenSymbol) => {\n  _s();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const sousChefContract = useSousChef(sousId);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256);\n      const receipt = await tx.wait();\n      dispatch(updateUserAllowance(sousId, account));\n\n      if (receipt.status) {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% pool!', {\n          symbol: earningTokenSymbol\n        }));\n        setRequestedApproval(false);\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setRequestedApproval(false);\n      }\n    } catch (e) {\n      console.error(e);\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess]);\n  return {\n    handleApprove,\n    requestedApproval\n  };\n}; // Approve CAKE auto pool\n\n_s(useApprovePool, \"gTEIblGPv+nx2FY7sK1CA0guiWE=\", false, function () {\n  return [useToast, useTranslation, useAppDispatch, useWeb3React, useSousChef];\n});\n\nexport const useVaultApprove = setLastUpdated => {\n  _s2();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const cakeVaultContract = useCakeVaultContract();\n  const cakeContract = useCake();\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256);\n    setRequestedApproval(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', {\n        symbol: 'CAKE'\n      }));\n      setLastUpdated();\n      setRequestedApproval(false);\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setRequestedApproval(false);\n    }\n  };\n\n  return {\n    handleApprove,\n    requestedApproval\n  };\n};\n\n_s2(useVaultApprove, \"nPde9/5Imrq4z7i/uMeW2IgCL30=\", false, function () {\n  return [useTranslation, useToast, useCakeVaultContract, useCake];\n});\n\nexport const useCheckVaultApprovalStatus = () => {\n  _s3();\n\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.allowance(account, cakeVaultContract.address);\n        const currentAllowance = new BigNumber(response.toString());\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [account, cakeContract, cakeVaultContract, lastUpdated]);\n  return {\n    isVaultApproved,\n    setLastUpdated\n  };\n};\n\n_s3(useCheckVaultApprovalStatus, \"DYtHZy3b2IMwKe/ETQokUhwfsfM=\", false, function () {\n  return [useWeb3React, useCake, useCakeVaultContract, useLastUpdated];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useApprove.ts"],"names":["useCallback","useEffect","useState","useWeb3React","ethers","BigNumber","useAppDispatch","updateUserAllowance","useTranslation","useCake","useSousChef","useCakeVaultContract","useToast","useLastUpdated","useApprovePool","lpContract","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","toastSuccess","toastError","t","dispatch","account","sousChefContract","handleApprove","tx","approve","address","constants","MaxUint256","receipt","wait","status","symbol","e","console","error","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","lastUpdated","checkApprovalStatus","response","allowance","currentAllowance","toString","gt"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers, Contract } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\n\r\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\r\n    setRequestedApproval(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n      setLastUpdated()\r\n      setRequestedApproval(false)\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setRequestedApproval(false)\r\n    }\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}