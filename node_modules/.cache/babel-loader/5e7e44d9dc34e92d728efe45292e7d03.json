{"ast":null,"code":"/* eslint-disable no-param-reassign */import{isTradeBetter}from'utils/trades';import{Trade}from'@pancakeswap/sdk';import flatMap from'lodash/flatMap';import{useMemo}from'react';import useActiveWeb3React from'hooks/useActiveWeb3React';import{useUserSingleHopOnly}from'state/user/hooks';import{BASES_TO_CHECK_TRADES_AGAINST,CUSTOM_BASES,BETTER_TRADE_LESS_HOPS_THRESHOLD,ADDITIONAL_BASES}from'../config/constants';import{PairState,usePairs}from'./usePairs';import{wrappedCurrency}from'../utils/wrappedCurrency';import{useUnsupportedTokens}from'./Tokens';function useAllCommonPairs(currencyA,currencyB){const{chainId}=useActiveWeb3React();const[tokenA,tokenB]=chainId?[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)]:[undefined,undefined];const bases=useMemo(()=>{var _BASES_TO_CHECK_TRADE,_ADDITIONAL_BASES$cha,_ADDITIONAL_BASES$cha2,_ADDITIONAL_BASES$cha3,_ADDITIONAL_BASES$cha4;if(!chainId)return[];const common=(_BASES_TO_CHECK_TRADE=BASES_TO_CHECK_TRADES_AGAINST[chainId])!==null&&_BASES_TO_CHECK_TRADE!==void 0?_BASES_TO_CHECK_TRADE:[];const additionalA=tokenA?(_ADDITIONAL_BASES$cha=(_ADDITIONAL_BASES$cha2=ADDITIONAL_BASES[chainId])===null||_ADDITIONAL_BASES$cha2===void 0?void 0:_ADDITIONAL_BASES$cha2[tokenA.address])!==null&&_ADDITIONAL_BASES$cha!==void 0?_ADDITIONAL_BASES$cha:[]:[];const additionalB=tokenB?(_ADDITIONAL_BASES$cha3=(_ADDITIONAL_BASES$cha4=ADDITIONAL_BASES[chainId])===null||_ADDITIONAL_BASES$cha4===void 0?void 0:_ADDITIONAL_BASES$cha4[tokenB.address])!==null&&_ADDITIONAL_BASES$cha3!==void 0?_ADDITIONAL_BASES$cha3:[]:[];return[...common,...additionalA,...additionalB];},[chainId,tokenA,tokenB]);const basePairs=useMemo(()=>flatMap(bases,base=>bases.map(otherBase=>[base,otherBase])),[bases]);const allPairCombinations=useMemo(()=>tokenA&&tokenB?[// the direct pair\n[tokenA,tokenB],// token A against all bases\n...bases.map(base=>[tokenA,base]),// token B against all bases\n...bases.map(base=>[tokenB,base]),// each base against all bases\n...basePairs].filter(tokens=>Boolean(tokens[0]&&tokens[1])).filter(_ref=>{let[t0,t1]=_ref;return t0.address!==t1.address;}).filter(_ref2=>{let[tokenA_,tokenB_]=_ref2;if(!chainId)return true;const customBases=CUSTOM_BASES[chainId];const customBasesA=customBases===null||customBases===void 0?void 0:customBases[tokenA_.address];const customBasesB=customBases===null||customBases===void 0?void 0:customBases[tokenB_.address];if(!customBasesA&&!customBasesB)return true;if(customBasesA&&!customBasesA.find(base=>tokenB_.equals(base)))return false;if(customBasesB&&!customBasesB.find(base=>tokenA_.equals(base)))return false;return true;}):[],[tokenA,tokenB,bases,basePairs,chainId]);const allPairs=usePairs(allPairCombinations);// only pass along valid pairs, non-duplicated pairs\nreturn useMemo(()=>Object.values(allPairs// filter out invalid pairs\n.filter(result=>Boolean(result[0]===PairState.EXISTS&&result[1]))// filter out duplicated pairs\n.reduce((memo,_ref3)=>{var _memo$curr$liquidityT;let[,curr]=_ref3;memo[curr.liquidityToken.address]=(_memo$curr$liquidityT=memo[curr.liquidityToken.address])!==null&&_memo$curr$liquidityT!==void 0?_memo$curr$liquidityT:curr;return memo;},{})),[allPairs]);}const MAX_HOPS=3;/**\r\n * Returns the best trade for the exact amount of tokens in to the given token out\r\n */export function useTradeExactIn(currencyAmountIn,currencyOut){const allowedPairs=useAllCommonPairs(currencyAmountIn===null||currencyAmountIn===void 0?void 0:currencyAmountIn.currency,currencyOut);const[singleHopOnly]=useUserSingleHopOnly();return useMemo(()=>{if(currencyAmountIn&&currencyOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact;return(_Trade$bestTradeExact=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact!==void 0?_Trade$bestTradeExact:null;}// search through trades with varying hops, find best trade out of them\nlet bestTradeSoFar=null;for(let i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact2;const currentTrade=(_Trade$bestTradeExact2=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact2!==void 0?_Trade$bestTradeExact2:null;// if current trade is best yet, save it\nif(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[allowedPairs,currencyAmountIn,currencyOut,singleHopOnly]);}/**\r\n * Returns the best trade for the token in to the exact amount of token out\r\n */export function useTradeExactOut(currencyIn,currencyAmountOut){const allowedPairs=useAllCommonPairs(currencyIn,currencyAmountOut===null||currencyAmountOut===void 0?void 0:currencyAmountOut.currency);const[singleHopOnly]=useUserSingleHopOnly();return useMemo(()=>{if(currencyIn&&currencyAmountOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact3;return(_Trade$bestTradeExact3=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact3!==void 0?_Trade$bestTradeExact3:null;}// search through trades with varying hops, find best trade out of them\nlet bestTradeSoFar=null;for(let i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact4;const currentTrade=(_Trade$bestTradeExact4=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact4!==void 0?_Trade$bestTradeExact4:null;if(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[currencyIn,currencyAmountOut,allowedPairs,singleHopOnly]);}export function useIsTransactionUnsupported(currencyIn,currencyOut){const unsupportedTokens=useUnsupportedTokens();const{chainId}=useActiveWeb3React();const tokenIn=wrappedCurrency(currencyIn,chainId);const tokenOut=wrappedCurrency(currencyOut,chainId);// if unsupported list loaded & either token on list, mark as unsupported\nif(unsupportedTokens){if(tokenIn&&Object.keys(unsupportedTokens).includes(tokenIn.address)){return true;}if(tokenOut&&Object.keys(unsupportedTokens).includes(tokenOut.address)){return true;}}return false;}","map":{"version":3,"names":["isTradeBetter","Trade","flatMap","useMemo","useActiveWeb3React","useUserSingleHopOnly","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","BETTER_TRADE_LESS_HOPS_THRESHOLD","ADDITIONAL_BASES","PairState","usePairs","wrappedCurrency","useUnsupportedTokens","useAllCommonPairs","currencyA","currencyB","chainId","tokenA","tokenB","undefined","bases","_BASES_TO_CHECK_TRADE","_ADDITIONAL_BASES$cha","_ADDITIONAL_BASES$cha2","_ADDITIONAL_BASES$cha3","_ADDITIONAL_BASES$cha4","common","additionalA","address","additionalB","basePairs","base","map","otherBase","allPairCombinations","filter","tokens","Boolean","_ref","t0","t1","_ref2","tokenA_","tokenB_","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","_ref3","_memo$curr$liquidityT","curr","liquidityToken","MAX_HOPS","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","singleHopOnly","length","_Trade$bestTradeExact","bestTradeExactIn","maxHops","maxNumResults","bestTradeSoFar","i","_Trade$bestTradeExact2","currentTrade","useTradeExactOut","currencyIn","currencyAmountOut","_Trade$bestTradeExact3","bestTradeExactOut","_Trade$bestTradeExact4","useIsTransactionUnsupported","unsupportedTokens","tokenIn","tokenOut","keys","includes"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/Trades.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { isTradeBetter } from 'utils/trades'\r\nimport { Currency, CurrencyAmount, Pair, Token, Trade } from '@pancakeswap/sdk'\r\nimport flatMap from 'lodash/flatMap'\r\nimport { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\n\r\nimport { useUserSingleHopOnly } from 'state/user/hooks'\r\nimport {\r\n  BASES_TO_CHECK_TRADES_AGAINST,\r\n  CUSTOM_BASES,\r\n  BETTER_TRADE_LESS_HOPS_THRESHOLD,\r\n  ADDITIONAL_BASES,\r\n} from '../config/constants'\r\nimport { PairState, usePairs } from './usePairs'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nimport { useUnsupportedTokens } from './Tokens'\r\n\r\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const [tokenA, tokenB] = chainId\r\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n    : [undefined, undefined]\r\n\r\n  const bases: Token[] = useMemo(() => {\r\n    if (!chainId) return []\r\n\r\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\r\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\r\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\r\n\r\n    return [...common, ...additionalA, ...additionalB]\r\n  }, [chainId, tokenA, tokenB])\r\n\r\n  const basePairs: [Token, Token][] = useMemo(\r\n    () => flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])),\r\n    [bases],\r\n  )\r\n\r\n  const allPairCombinations: [Token, Token][] = useMemo(\r\n    () =>\r\n      tokenA && tokenB\r\n        ? [\r\n            // the direct pair\r\n            [tokenA, tokenB],\r\n            // token A against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\r\n            // token B against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\r\n            // each base against all bases\r\n            ...basePairs,\r\n          ]\r\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\r\n            .filter(([t0, t1]) => t0.address !== t1.address)\r\n            .filter(([tokenA_, tokenB_]) => {\r\n              if (!chainId) return true\r\n              const customBases = CUSTOM_BASES[chainId]\r\n\r\n              const customBasesA: Token[] | undefined = customBases?.[tokenA_.address]\r\n              const customBasesB: Token[] | undefined = customBases?.[tokenB_.address]\r\n\r\n              if (!customBasesA && !customBasesB) return true\r\n\r\n              if (customBasesA && !customBasesA.find((base) => tokenB_.equals(base))) return false\r\n              if (customBasesB && !customBasesB.find((base) => tokenA_.equals(base))) return false\r\n\r\n              return true\r\n            })\r\n        : [],\r\n    [tokenA, tokenB, bases, basePairs, chainId],\r\n  )\r\n\r\n  const allPairs = usePairs(allPairCombinations)\r\n\r\n  // only pass along valid pairs, non-duplicated pairs\r\n  return useMemo(\r\n    () =>\r\n      Object.values(\r\n        allPairs\r\n          // filter out invalid pairs\r\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\r\n          // filter out duplicated pairs\r\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\r\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\r\n            return memo\r\n          }, {}),\r\n      ),\r\n    [allPairs],\r\n  )\r\n}\r\n\r\nconst MAX_HOPS = 3\r\n\r\n/**\r\n * Returns the best trade for the exact amount of tokens in to the given token out\r\n */\r\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\r\n\r\n  const [singleHopOnly] = useUserSingleHopOnly()\r\n\r\n  return useMemo(() => {\r\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\r\n      if (singleHopOnly) {\r\n        return (\r\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\r\n          null\r\n        )\r\n      }\r\n      // search through trades with varying hops, find best trade out of them\r\n      let bestTradeSoFar: Trade | null = null\r\n      for (let i = 1; i <= MAX_HOPS; i++) {\r\n        const currentTrade: Trade | null =\r\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\r\n          null\r\n        // if current trade is best yet, save it\r\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\r\n          bestTradeSoFar = currentTrade\r\n        }\r\n      }\r\n      return bestTradeSoFar\r\n    }\r\n\r\n    return null\r\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly])\r\n}\r\n\r\n/**\r\n * Returns the best trade for the token in to the exact amount of token out\r\n */\r\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\r\n\r\n  const [singleHopOnly] = useUserSingleHopOnly()\r\n\r\n  return useMemo(() => {\r\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\r\n      if (singleHopOnly) {\r\n        return (\r\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\r\n          null\r\n        )\r\n      }\r\n      // search through trades with varying hops, find best trade out of them\r\n      let bestTradeSoFar: Trade | null = null\r\n      for (let i = 1; i <= MAX_HOPS; i++) {\r\n        const currentTrade =\r\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\r\n          null\r\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\r\n          bestTradeSoFar = currentTrade\r\n        }\r\n      }\r\n      return bestTradeSoFar\r\n    }\r\n    return null\r\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly])\r\n}\r\n\r\nexport function useIsTransactionUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\r\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n\r\n  // if unsupported list loaded & either token on list, mark as unsupported\r\n  if (unsupportedTokens) {\r\n    if (tokenIn && Object.keys(unsupportedTokens).includes(tokenIn.address)) {\r\n      return true\r\n    }\r\n    if (tokenOut && Object.keys(unsupportedTokens).includes(tokenOut.address)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n"],"mappings":"AAAA,sCACA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OAAgDC,KAAK,KAAQ,kBAAkB,CAC/E,MAAO,CAAAC,OAAO,KAAM,gBAAgB,CACpC,OAASC,OAAO,KAAQ,OAAO,CAC/B,MAAO,CAAAC,kBAAkB,KAAM,0BAA0B,CAEzD,OAASC,oBAAoB,KAAQ,kBAAkB,CACvD,OACEC,6BAA6B,CAC7BC,YAAY,CACZC,gCAAgC,CAChCC,gBAAgB,KACX,qBAAqB,CAC5B,OAASC,SAAS,CAAEC,QAAQ,KAAQ,YAAY,CAChD,OAASC,eAAe,KAAQ,0BAA0B,CAE1D,OAASC,oBAAoB,KAAQ,UAAU,CAE/C,QAAS,CAAAC,iBAAiBA,CAACC,SAAoB,CAAEC,SAAoB,CAAU,CAC7E,KAAM,CAAEC,OAAQ,CAAC,CAAGb,kBAAkB,CAAC,CAAC,CAExC,KAAM,CAACc,MAAM,CAAEC,MAAM,CAAC,CAAGF,OAAO,CAC5B,CAACL,eAAe,CAACG,SAAS,CAAEE,OAAO,CAAC,CAAEL,eAAe,CAACI,SAAS,CAAEC,OAAO,CAAC,CAAC,CAC1E,CAACG,SAAS,CAAEA,SAAS,CAAC,CAE1B,KAAM,CAAAC,KAAc,CAAGlB,OAAO,CAAC,IAAM,KAAAmB,qBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACnC,GAAI,CAACT,OAAO,CAAE,MAAO,EAAE,CAEvB,KAAM,CAAAU,MAAM,EAAAL,qBAAA,CAAGhB,6BAA6B,CAACW,OAAO,CAAC,UAAAK,qBAAA,UAAAA,qBAAA,CAAI,EAAE,CAC3D,KAAM,CAAAM,WAAW,CAAGV,MAAM,EAAAK,qBAAA,EAAAC,sBAAA,CAAGf,gBAAgB,CAACQ,OAAO,CAAC,UAAAO,sBAAA,iBAAzBA,sBAAA,CAA4BN,MAAM,CAACW,OAAO,CAAC,UAAAN,qBAAA,UAAAA,qBAAA,CAAI,EAAE,CAAG,EAAE,CACnF,KAAM,CAAAO,WAAW,CAAGX,MAAM,EAAAM,sBAAA,EAAAC,sBAAA,CAAGjB,gBAAgB,CAACQ,OAAO,CAAC,UAAAS,sBAAA,iBAAzBA,sBAAA,CAA4BP,MAAM,CAACU,OAAO,CAAC,UAAAJ,sBAAA,UAAAA,sBAAA,CAAI,EAAE,CAAG,EAAE,CAEnF,MAAO,CAAC,GAAGE,MAAM,CAAE,GAAGC,WAAW,CAAE,GAAGE,WAAW,CAAC,CACpD,CAAC,CAAE,CAACb,OAAO,CAAEC,MAAM,CAAEC,MAAM,CAAC,CAAC,CAE7B,KAAM,CAAAY,SAA2B,CAAG5B,OAAO,CACzC,IAAMD,OAAO,CAACmB,KAAK,CAAGW,IAAI,EAAuBX,KAAK,CAACY,GAAG,CAAEC,SAAS,EAAK,CAACF,IAAI,CAAEE,SAAS,CAAC,CAAC,CAAC,CAC7F,CAACb,KAAK,CACR,CAAC,CAED,KAAM,CAAAc,mBAAqC,CAAGhC,OAAO,CACnD,IACEe,MAAM,EAAIC,MAAM,CACZ,CACE;AACA,CAACD,MAAM,CAAEC,MAAM,CAAC,CAChB;AACA,GAAGE,KAAK,CAACY,GAAG,CAAED,IAAI,EAAqB,CAACd,MAAM,CAAEc,IAAI,CAAC,CAAC,CACtD;AACA,GAAGX,KAAK,CAACY,GAAG,CAAED,IAAI,EAAqB,CAACb,MAAM,CAAEa,IAAI,CAAC,CAAC,CACtD;AACA,GAAGD,SAAS,CACb,CACEK,MAAM,CAAEC,MAAM,EAA+BC,OAAO,CAACD,MAAM,CAAC,CAAC,CAAC,EAAIA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAC7ED,MAAM,CAACG,IAAA,MAAC,CAACC,EAAE,CAAEC,EAAE,CAAC,CAAAF,IAAA,OAAK,CAAAC,EAAE,CAACX,OAAO,GAAKY,EAAE,CAACZ,OAAO,GAAC,CAC/CO,MAAM,CAACM,KAAA,EAAwB,IAAvB,CAACC,OAAO,CAAEC,OAAO,CAAC,CAAAF,KAAA,CACzB,GAAI,CAACzB,OAAO,CAAE,MAAO,KAAI,CACzB,KAAM,CAAA4B,WAAW,CAAGtC,YAAY,CAACU,OAAO,CAAC,CAEzC,KAAM,CAAA6B,YAAiC,CAAGD,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAGF,OAAO,CAACd,OAAO,CAAC,CACxE,KAAM,CAAAkB,YAAiC,CAAGF,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAGD,OAAO,CAACf,OAAO,CAAC,CAExE,GAAI,CAACiB,YAAY,EAAI,CAACC,YAAY,CAAE,MAAO,KAAI,CAE/C,GAAID,YAAY,EAAI,CAACA,YAAY,CAACE,IAAI,CAAEhB,IAAI,EAAKY,OAAO,CAACK,MAAM,CAACjB,IAAI,CAAC,CAAC,CAAE,MAAO,MAAK,CACpF,GAAIe,YAAY,EAAI,CAACA,YAAY,CAACC,IAAI,CAAEhB,IAAI,EAAKW,OAAO,CAACM,MAAM,CAACjB,IAAI,CAAC,CAAC,CAAE,MAAO,MAAK,CAEpF,MAAO,KAAI,CACb,CAAC,CAAC,CACJ,EAAE,CACR,CAACd,MAAM,CAAEC,MAAM,CAAEE,KAAK,CAAEU,SAAS,CAAEd,OAAO,CAC5C,CAAC,CAED,KAAM,CAAAiC,QAAQ,CAAGvC,QAAQ,CAACwB,mBAAmB,CAAC,CAE9C;AACA,MAAO,CAAAhC,OAAO,CACZ,IACEgD,MAAM,CAACC,MAAM,CACXF,QACE;AAAA,CACCd,MAAM,CAAEiB,MAAM,EAAyCf,OAAO,CAACe,MAAM,CAAC,CAAC,CAAC,GAAK3C,SAAS,CAAC4C,MAAM,EAAID,MAAM,CAAC,CAAC,CAAC,CAAC,CAC5G;AAAA,CACCE,MAAM,CAAkC,CAACC,IAAI,CAAAC,KAAA,GAAe,KAAAC,qBAAA,IAAb,EAAGC,IAAI,CAAC,CAAAF,KAAA,CACtDD,IAAI,CAACG,IAAI,CAACC,cAAc,CAAC/B,OAAO,CAAC,EAAA6B,qBAAA,CAAGF,IAAI,CAACG,IAAI,CAACC,cAAc,CAAC/B,OAAO,CAAC,UAAA6B,qBAAA,UAAAA,qBAAA,CAAIC,IAAI,CAC7E,MAAO,CAAAH,IAAI,CACb,CAAC,CAAE,CAAC,CAAC,CACT,CAAC,CACH,CAACN,QAAQ,CACX,CAAC,CACH,CAEA,KAAM,CAAAW,QAAQ,CAAG,CAAC,CAElB;AACA;AACA,GACA,MAAO,SAAS,CAAAC,eAAeA,CAACC,gBAAiC,CAAEC,WAAsB,CAAgB,CACvG,KAAM,CAAAC,YAAY,CAAGnD,iBAAiB,CAACiD,gBAAgB,SAAhBA,gBAAgB,iBAAhBA,gBAAgB,CAAEG,QAAQ,CAAEF,WAAW,CAAC,CAE/E,KAAM,CAACG,aAAa,CAAC,CAAG9D,oBAAoB,CAAC,CAAC,CAE9C,MAAO,CAAAF,OAAO,CAAC,IAAM,CACnB,GAAI4D,gBAAgB,EAAIC,WAAW,EAAIC,YAAY,CAACG,MAAM,CAAG,CAAC,CAAE,CAC9D,GAAID,aAAa,CAAE,KAAAE,qBAAA,CACjB,OAAAA,qBAAA,CACEpE,KAAK,CAACqE,gBAAgB,CAACL,YAAY,CAAEF,gBAAgB,CAAEC,WAAW,CAAE,CAAEO,OAAO,CAAE,CAAC,CAAEC,aAAa,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAAH,qBAAA,UAAAA,qBAAA,CACxG,IAAI,CAER,CACA;AACA,GAAI,CAAAI,cAA4B,CAAG,IAAI,CACvC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIb,QAAQ,CAAEa,CAAC,EAAE,CAAE,KAAAC,sBAAA,CAClC,KAAM,CAAAC,YAA0B,EAAAD,sBAAA,CAC9B1E,KAAK,CAACqE,gBAAgB,CAACL,YAAY,CAAEF,gBAAgB,CAAEC,WAAW,CAAE,CAAEO,OAAO,CAAEG,CAAC,CAAEF,aAAa,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAAG,sBAAA,UAAAA,sBAAA,CACxG,IAAI,CACN;AACA,GAAI3E,aAAa,CAACyE,cAAc,CAAEG,YAAY,CAAEpE,gCAAgC,CAAC,CAAE,CACjFiE,cAAc,CAAGG,YAAY,CAC/B,CACF,CACA,MAAO,CAAAH,cAAc,CACvB,CAEA,MAAO,KAAI,CACb,CAAC,CAAE,CAACR,YAAY,CAAEF,gBAAgB,CAAEC,WAAW,CAAEG,aAAa,CAAC,CAAC,CAClE,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAU,gBAAgBA,CAACC,UAAqB,CAAEC,iBAAkC,CAAgB,CACxG,KAAM,CAAAd,YAAY,CAAGnD,iBAAiB,CAACgE,UAAU,CAAEC,iBAAiB,SAAjBA,iBAAiB,iBAAjBA,iBAAiB,CAAEb,QAAQ,CAAC,CAE/E,KAAM,CAACC,aAAa,CAAC,CAAG9D,oBAAoB,CAAC,CAAC,CAE9C,MAAO,CAAAF,OAAO,CAAC,IAAM,CACnB,GAAI2E,UAAU,EAAIC,iBAAiB,EAAId,YAAY,CAACG,MAAM,CAAG,CAAC,CAAE,CAC9D,GAAID,aAAa,CAAE,KAAAa,sBAAA,CACjB,OAAAA,sBAAA,CACE/E,KAAK,CAACgF,iBAAiB,CAAChB,YAAY,CAAEa,UAAU,CAAEC,iBAAiB,CAAE,CAAER,OAAO,CAAE,CAAC,CAAEC,aAAa,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAAQ,sBAAA,UAAAA,sBAAA,CACzG,IAAI,CAER,CACA;AACA,GAAI,CAAAP,cAA4B,CAAG,IAAI,CACvC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIb,QAAQ,CAAEa,CAAC,EAAE,CAAE,KAAAQ,sBAAA,CAClC,KAAM,CAAAN,YAAY,EAAAM,sBAAA,CAChBjF,KAAK,CAACgF,iBAAiB,CAAChB,YAAY,CAAEa,UAAU,CAAEC,iBAAiB,CAAE,CAAER,OAAO,CAAEG,CAAC,CAAEF,aAAa,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAAU,sBAAA,UAAAA,sBAAA,CACzG,IAAI,CACN,GAAIlF,aAAa,CAACyE,cAAc,CAAEG,YAAY,CAAEpE,gCAAgC,CAAC,CAAE,CACjFiE,cAAc,CAAGG,YAAY,CAC/B,CACF,CACA,MAAO,CAAAH,cAAc,CACvB,CACA,MAAO,KAAI,CACb,CAAC,CAAE,CAACK,UAAU,CAAEC,iBAAiB,CAAEd,YAAY,CAAEE,aAAa,CAAC,CAAC,CAClE,CAEA,MAAO,SAAS,CAAAgB,2BAA2BA,CAACL,UAAqB,CAAEd,WAAsB,CAAW,CAClG,KAAM,CAAAoB,iBAA+C,CAAGvE,oBAAoB,CAAC,CAAC,CAC9E,KAAM,CAAEI,OAAQ,CAAC,CAAGb,kBAAkB,CAAC,CAAC,CAExC,KAAM,CAAAiF,OAAO,CAAGzE,eAAe,CAACkE,UAAU,CAAE7D,OAAO,CAAC,CACpD,KAAM,CAAAqE,QAAQ,CAAG1E,eAAe,CAACoD,WAAW,CAAE/C,OAAO,CAAC,CAEtD;AACA,GAAImE,iBAAiB,CAAE,CACrB,GAAIC,OAAO,EAAIlC,MAAM,CAACoC,IAAI,CAACH,iBAAiB,CAAC,CAACI,QAAQ,CAACH,OAAO,CAACxD,OAAO,CAAC,CAAE,CACvE,MAAO,KAAI,CACb,CACA,GAAIyD,QAAQ,EAAInC,MAAM,CAACoC,IAAI,CAACH,iBAAiB,CAAC,CAACI,QAAQ,CAACF,QAAQ,CAACzD,OAAO,CAAC,CAAE,CACzE,MAAO,KAAI,CACb,CACF,CAEA,MAAO,MAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module"}