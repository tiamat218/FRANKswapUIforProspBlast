{"ast":null,"code":"/* eslint-disable */\nfunction wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction waitRandom(min, max) {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\n\n\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled');\n  }\n\n}\n/**\r\n * Throw this error if the function should retry\r\n */\n\nexport class RetryableError extends Error {}\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\n\nexport function retry(fn, {\n  n,\n  minWait,\n  maxWait\n}) {\n  let completed = false;\n  let rejectCancelled;\n  const promise = new Promise(async (resolve, reject) => {\n    rejectCancelled = reject;\n\n    while (true) {\n      let result;\n\n      try {\n        result = await fn();\n\n        if (!completed) {\n          resolve(result);\n          completed = true;\n        }\n\n        break;\n      } catch (error) {\n        if (completed) {\n          break;\n        }\n\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error);\n          completed = true;\n          break;\n        }\n\n        n--;\n      }\n\n      await waitRandom(minWait, maxWait);\n    }\n  });\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    }\n  };\n}\n/* eslint-enable */","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/multicall/retry.ts"],"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","constructor","RetryableError","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","error","cancel"],"mappings":"AAAA;AAEA,SAASA,IAAT,CAAcC,EAAd,EAAyC;AACvC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD;;AAED,SAASI,UAAT,CAAoBC,GAApB,EAAiCC,GAAjC,EAA6D;AAC3D,SAAOP,IAAI,CAACM,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACD,GAAL,CAAS,CAAT,EAAYA,GAAG,GAAGD,GAAlB,CAA3B,CAAP,CAAX;AACD;AAED;AACA;AACA;;;AACA,OAAO,MAAMK,cAAN,SAA6BC,KAA7B,CAAmC;AACxCC,EAAAA,WAAW,GAAG;AACZ,UAAM,WAAN;AACD;;AAHuC;AAM1C;AACA;AACA;;AACA,OAAO,MAAMC,cAAN,SAA6BF,KAA7B,CAAmC;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,KAAT,CACLC,EADK,EAEL;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,OAAL;AAAcC,EAAAA;AAAd,CAFK,EAGwC;AAC7C,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,eAAJ;AACA,QAAMC,OAAO,GAAG,IAAIpB,OAAJ,CAAe,OAAOC,OAAP,EAAgBoB,MAAhB,KAA2B;AACxDF,IAAAA,eAAe,GAAGE,MAAlB;;AACA,WAAO,IAAP,EAAa;AACX,UAAIC,MAAJ;;AACA,UAAI;AACFA,QAAAA,MAAM,GAAG,MAAMR,EAAE,EAAjB;;AACA,YAAI,CAACI,SAAL,EAAgB;AACdjB,UAAAA,OAAO,CAACqB,MAAD,CAAP;AACAJ,UAAAA,SAAS,GAAG,IAAZ;AACD;;AACD;AACD,OAPD,CAOE,OAAOK,KAAP,EAAc;AACd,YAAIL,SAAJ,EAAe;AACb;AACD;;AACD,YAAIH,CAAC,IAAI,CAAL,IAAU,EAAEQ,KAAK,YAAYX,cAAnB,CAAd,EAAkD;AAChDS,UAAAA,MAAM,CAACE,KAAD,CAAN;AACAL,UAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACDH,QAAAA,CAAC;AACF;;AACD,YAAMZ,UAAU,CAACa,OAAD,EAAUC,OAAV,CAAhB;AACD;AACF,GAxBe,CAAhB;AAyBA,SAAO;AACLG,IAAAA,OADK;AAELI,IAAAA,MAAM,EAAE,MAAM;AACZ,UAAIN,SAAJ,EAAe;AACfA,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,eAAe,CAAC,IAAIV,cAAJ,EAAD,CAAf;AACD;AANI,GAAP;AAQD;AAED","sourcesContent":["/* eslint-disable */\r\n\r\nfunction wait(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms))\r\n}\r\n\r\nfunction waitRandom(min: number, max: number): Promise<void> {\r\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\r\n}\r\n\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nexport class CancelledError extends Error {\r\n  constructor() {\r\n    super('Cancelled')\r\n  }\r\n}\r\n\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {}\r\n\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry<T>(\r\n  fn: () => Promise<T>,\r\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\r\n): { promise: Promise<T>; cancel: () => void } {\r\n  let completed = false\r\n  let rejectCancelled: (error: Error) => void\r\n  const promise = new Promise<T>(async (resolve, reject) => {\r\n    rejectCancelled = reject\r\n    while (true) {\r\n      let result: T\r\n      try {\r\n        result = await fn()\r\n        if (!completed) {\r\n          resolve(result)\r\n          completed = true\r\n        }\r\n        break\r\n      } catch (error) {\r\n        if (completed) {\r\n          break\r\n        }\r\n        if (n <= 0 || !(error instanceof RetryableError)) {\r\n          reject(error)\r\n          completed = true\r\n          break\r\n        }\r\n        n--\r\n      }\r\n      await waitRandom(minWait, maxWait)\r\n    }\r\n  })\r\n  return {\r\n    promise,\r\n    cancel: () => {\r\n      if (completed) return\r\n      completed = true\r\n      rejectCancelled(new CancelledError())\r\n    },\r\n  }\r\n}\r\n\r\n/* eslint-enable */\r\n"]},"metadata":{},"sourceType":"module"}