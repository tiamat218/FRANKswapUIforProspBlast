{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\n\nexport default function useDebouncedChangeHandler(value, onChange, debouncedMs = 100) {\n  _s();\n\n  const [inner, setInner] = useState(() => value);\n  const timer = useRef();\n  const onChangeInner = useCallback(newValue => {\n    setInner(newValue);\n\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n\n    timer.current = setTimeout(() => {\n      onChange(newValue);\n      timer.current = undefined;\n    }, debouncedMs);\n  }, [debouncedMs, onChange]);\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n      timer.current = undefined;\n    }\n\n    setInner(value);\n  }, [value]);\n  return [inner, onChangeInner];\n}\n\n_s(useDebouncedChangeHandler, \"hMxW3E4LWgKh3jKpAjrpeYPhb3U=\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useDebouncedChangeHandler.ts"],"names":["useCallback","useEffect","useRef","useState","useDebouncedChangeHandler","value","onChange","debouncedMs","inner","setInner","timer","onChangeInner","newValue","current","clearTimeout","setTimeout","undefined"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,CACbC,KADa,EAEbC,QAFa,EAGbC,WAAW,GAAG,GAHD,EAIY;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAI,MAAME,KAAV,CAAlC;AACA,QAAMK,KAAK,GAAGR,MAAM,EAApB;AAEA,QAAMS,aAAa,GAAGX,WAAW,CAC9BY,QAAD,IAAiB;AACfH,IAAAA,QAAQ,CAACG,QAAD,CAAR;;AACA,QAAIF,KAAK,CAACG,OAAV,EAAmB;AACjBC,MAAAA,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ;AACD;;AACDH,IAAAA,KAAK,CAACG,OAAN,GAAgBE,UAAU,CAAC,MAAM;AAC/BT,MAAAA,QAAQ,CAACM,QAAD,CAAR;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgBG,SAAhB;AACD,KAHyB,EAGvBT,WAHuB,CAA1B;AAID,GAV8B,EAW/B,CAACA,WAAD,EAAcD,QAAd,CAX+B,CAAjC;AAcAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,KAAK,CAACG,OAAV,EAAmB;AACjBC,MAAAA,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ;AACAH,MAAAA,KAAK,CAACG,OAAN,GAAgBG,SAAhB;AACD;;AACDP,IAAAA,QAAQ,CAACJ,KAAD,CAAR;AACD,GANQ,EAMN,CAACA,KAAD,CANM,CAAT;AAQA,SAAO,CAACG,KAAD,EAAQG,aAAR,CAAP;AACD;;GA/BuBP,yB","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}