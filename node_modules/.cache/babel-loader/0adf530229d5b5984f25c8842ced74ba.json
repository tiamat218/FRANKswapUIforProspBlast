{"ast":null,"code":"import{useCallback,useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import{ethers}from'ethers';import BigNumber from'bignumber.js';import{useAppDispatch}from'state';import{updateUserAllowance}from'state/actions';import{useTranslation}from'contexts/Localization';import{useCake,useSousChef,useCakeVaultContract}from'hooks/useContract';import useToast from'hooks/useToast';import useLastUpdated from'hooks/useLastUpdated';export const useApprovePool=(lpContract,sousId,earningTokenSymbol)=>{const[requestedApproval,setRequestedApproval]=useState(false);const{toastSuccess,toastError}=useToast();const{t}=useTranslation();const dispatch=useAppDispatch();const{account}=useWeb3React();const sousChefContract=useSousChef(sousId);const handleApprove=useCallback(async()=>{try{setRequestedApproval(true);const tx=await lpContract.approve(sousChefContract.address,ethers.constants.MaxUint256);const receipt=await tx.wait();dispatch(updateUserAllowance(sousId,account));if(receipt.status){toastSuccess(t('Contract Enabled'),t('You can now stake in the %symbol% pool!',{symbol:earningTokenSymbol}));setRequestedApproval(false);}else{// user rejected tx or didn't go thru\ntoastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setRequestedApproval(false);}}catch(e){console.error(e);toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));}},[account,dispatch,lpContract,sousChefContract,sousId,earningTokenSymbol,t,toastError,toastSuccess]);return{handleApprove,requestedApproval};};// Approve CAKE auto pool\nexport const useVaultApprove=setLastUpdated=>{const[requestedApproval,setRequestedApproval]=useState(false);const{t}=useTranslation();const{toastSuccess,toastError}=useToast();const cakeVaultContract=useCakeVaultContract();const cakeContract=useCake();const handleApprove=async()=>{const tx=await cakeContract.approve(cakeVaultContract.address,ethers.constants.MaxUint256);setRequestedApproval(true);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Contract Enabled'),t('You can now stake in the %symbol% vault!',{symbol:'CAKE'}));setLastUpdated();setRequestedApproval(false);}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setRequestedApproval(false);}};return{handleApprove,requestedApproval};};export const useCheckVaultApprovalStatus=()=>{const[isVaultApproved,setIsVaultApproved]=useState(false);const{account}=useWeb3React();const cakeContract=useCake();const cakeVaultContract=useCakeVaultContract();const{lastUpdated,setLastUpdated}=useLastUpdated();useEffect(()=>{const checkApprovalStatus=async()=>{try{const response=await cakeContract.allowance(account,cakeVaultContract.address);const currentAllowance=new BigNumber(response.toString());setIsVaultApproved(currentAllowance.gt(0));}catch(error){setIsVaultApproved(false);}};checkApprovalStatus();},[account,cakeContract,cakeVaultContract,lastUpdated]);return{isVaultApproved,setLastUpdated};};","map":{"version":3,"names":["useCallback","useEffect","useState","useWeb3React","ethers","BigNumber","useAppDispatch","updateUserAllowance","useTranslation","useCake","useSousChef","useCakeVaultContract","useToast","useLastUpdated","useApprovePool","lpContract","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","toastSuccess","toastError","t","dispatch","account","sousChefContract","handleApprove","tx","approve","address","constants","MaxUint256","receipt","wait","status","symbol","e","console","error","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","lastUpdated","checkApprovalStatus","response","allowance","currentAllowance","toString","gt"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useApprove.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers, Contract } from 'ethers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserAllowance } from 'state/actions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useSousChef, useCakeVaultContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\n\r\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const tx = await lpContract.approve(sousChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Contract Enabled'),\r\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\r\n        )\r\n        setRequestedApproval(false)\r\n      } else {\r\n        // user rejected tx or didn't go thru\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setRequestedApproval(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\n// Approve CAKE auto pool\r\nexport const useVaultApprove = (setLastUpdated: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const cakeContract = useCake()\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(cakeVaultContract.address, ethers.constants.MaxUint256)\r\n    setRequestedApproval(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\r\n      setLastUpdated()\r\n      setRequestedApproval(false)\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setRequestedApproval(false)\r\n    }\r\n  }\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport const useCheckVaultApprovalStatus = () => {\r\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      try {\r\n        const response = await cakeContract.allowance(account, cakeVaultContract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setIsVaultApproved(currentAllowance.gt(0))\r\n      } catch (error) {\r\n        setIsVaultApproved(false)\r\n      }\r\n    }\r\n\r\n    checkApprovalStatus()\r\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\r\n\r\n  return { isVaultApproved, setLastUpdated }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}