{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useAppDispatch } from 'state';\nimport { setLastOraclePrice } from 'state/predictions';\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice';\nconst usePollOraclePrice = (seconds = 30) => {\n  _s();\n  const {\n    price,\n    refresh\n  } = useGetLatestOraclePrice();\n  const dispatch = useAppDispatch();\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh();\n    const timer = setInterval(() => {\n      refresh();\n    }, seconds * 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [seconds, refresh]);\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()));\n  }, [price, dispatch]);\n};\n_s(usePollOraclePrice, \"QQTmLiJ8UGoiRYPW7n/jfZ5Xr4M=\", false, function () {\n  return [useGetLatestOraclePrice, useAppDispatch];\n});\nexport default usePollOraclePrice;","map":{"version":3,"names":["useEffect","useAppDispatch","setLastOraclePrice","useGetLatestOraclePrice","usePollOraclePrice","seconds","_s","price","refresh","dispatch","timer","setInterval","clearInterval","toJSON"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/hooks/usePollOraclePrice.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 30) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,OAAOC,uBAAuB,MAAM,2BAA2B;AAE/D,MAAMC,kBAAkB,GAAGA,CAACC,OAAO,GAAG,EAAE,KAAK;EAAAC,EAAA;EAC3C,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGL,uBAAuB,CAAC,CAAC;EACpD,MAAMM,QAAQ,GAAGR,cAAc,CAAC,CAAC;;EAEjC;EACAD,SAAS,CAAC,MAAM;IACdQ,OAAO,CAAC,CAAC;IACT,MAAME,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9BH,OAAO,CAAC,CAAC;IACX,CAAC,EAAEH,OAAO,GAAG,IAAI,CAAC;IAElB,OAAO,MAAM;MACXO,aAAa,CAACF,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACL,OAAO,EAAEG,OAAO,CAAC,CAAC;;EAEtB;EACAR,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACP,kBAAkB,CAACK,KAAK,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACN,KAAK,EAAEE,QAAQ,CAAC,CAAC;AACvB,CAAC;AAAAH,EAAA,CApBKF,kBAAkB;EAAA,QACKD,uBAAuB,EACjCF,cAAc;AAAA;AAoBjC,eAAeG,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module"}