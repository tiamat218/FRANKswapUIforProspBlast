{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\RoundCard\\\\SoonRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { BetPosition } from 'state/types';\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks';\nimport { formatRoundTime } from '../../helpers';\nimport useRoundCountdown from '../../hooks/useRoundCountdown';\nimport { RoundResultBox } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport Card from './Card';\nimport CardHeader from './CardHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SoonRoundCard = ({\n  round\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const interval = useGetTotalIntervalBlocks();\n  const currentEpoch = useGetCurrentEpoch();\n  const estimatedEndBlock = round.startBlock + interval;\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1);\n  const countdown = formatRoundTime(seconds);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      status: \"soon\",\n      icon: /*#__PURE__*/_jsxDEV(WaitIcon, {\n        mr: \"4px\",\n        width: \"21px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this),\n      title: t('Later'),\n      epoch: round.epoch,\n      blockNumber: estimatedEndBlock\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      p: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        isDisabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            children: t('Entry starts')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"24px\",\n            bold: true,\n            children: `~${countdown}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        betPosition: BetPosition.BEAR,\n        isDisabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SoonRoundCard, \"nkbYeqB6/jILA7Itdbpzgt/b5K0=\", false, function () {\n  return [useTranslation, useGetTotalIntervalBlocks, useGetCurrentEpoch, useRoundCountdown];\n});\n\n_c = SoonRoundCard;\nexport default SoonRoundCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoonRoundCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/RoundCard/SoonRoundCard.tsx"],"names":["React","CardBody","Text","WaitIcon","useTranslation","BetPosition","useGetCurrentEpoch","useGetTotalIntervalBlocks","formatRoundTime","useRoundCountdown","RoundResultBox","MultiplierArrow","Card","CardHeader","SoonRoundCard","round","t","interval","currentEpoch","estimatedEndBlock","startBlock","seconds","epoch","countdown","BEAR"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,QAAzB,QAAyC,oBAAzC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAAoBC,WAApB,QAAuC,aAAvC;AACA,SAASC,kBAAT,EAA6BC,yBAA7B,QAA8D,aAA9D;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAMA,MAAMC,aAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AACjE,QAAM;AAAEC,IAAAA;AAAF,MAAQZ,cAAc,EAA5B;AACA,QAAMa,QAAQ,GAAGV,yBAAyB,EAA1C;AACA,QAAMW,YAAY,GAAGZ,kBAAkB,EAAvC;AACA,QAAMa,iBAAiB,GAAGJ,KAAK,CAACK,UAAN,GAAmBH,QAA7C;AACA,QAAMI,OAAO,GAAGZ,iBAAiB,CAACM,KAAK,CAACO,KAAN,GAAcJ,YAAd,GAA6B,CAA9B,CAAjC;AACA,QAAMK,SAAS,GAAGf,eAAe,CAACa,OAAD,CAAjC;AAEA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,MAAM,EAAC,MADT;AAEE,MAAA,IAAI,eAAE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC,KAAb;AAAmB,QAAA,KAAK,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFR;AAGE,MAAA,KAAK,EAAEL,CAAC,CAAC,OAAD,CAHV;AAIE,MAAA,KAAK,EAAED,KAAK,CAACO,KAJf;AAKE,MAAA,WAAW,EAAEH;AALf;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,QAAD;AAAU,MAAA,CAAC,EAAC,MAAZ;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,UAAU;AAA3B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,QAAhB;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,sBAAYH,CAAC,CAAC,cAAD;AAAb;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,MAAf;AAAsB,YAAA,IAAI,MAA1B;AAAA,sBACI,IAAGO,SAAU;AADjB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE,QAAC,eAAD;AAAiB,QAAA,WAAW,EAAElB,WAAW,CAACmB,IAA1C;AAAgD,QAAA,UAAU;AAA1D;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA/BD;;GAAMV,a;UACUV,c,EACGG,yB,EACID,kB,EAELG,iB;;;KALZK,a;AAiCN,eAAeA,aAAf","sourcesContent":["import React from 'react'\r\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const interval = useGetTotalIntervalBlocks()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const estimatedEndBlock = round.startBlock + interval\r\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\r\n  const countdown = formatRoundTime(seconds)\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        status=\"soon\"\r\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Later')}\r\n        epoch={round.epoch}\r\n        blockNumber={estimatedEndBlock}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n"]},"metadata":{},"sourceType":"module"}