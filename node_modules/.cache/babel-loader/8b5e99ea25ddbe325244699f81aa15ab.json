{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useAllLists } from 'state/lists/hooks';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAllInactiveTokens } from 'hooks/Tokens';\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists';\nimport useWeb3Provider from 'hooks/useActiveWeb3React';\nimport useFetchListCallback from 'hooks/useFetchListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nexport default function Updater() {\n  _s();\n\n  const {\n    library\n  } = useWeb3Provider();\n  const dispatch = useDispatch();\n  const isWindowVisible = useIsWindowVisible(); // get all loaded lists, and the active urls\n\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls(); // initiate loading\n\n  useAllInactiveTokens();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version); // eslint-disable-next-line default-case\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          // update any active or inactive lists\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}\n\n_s(Updater, \"E0kuHtpo3bE1+I75mpY60gQkqiA=\", false, function () {\n  return [useWeb3Provider, useDispatch, useIsWindowVisible, useAllLists, useActiveListUrls, useAllInactiveTokens, useFetchListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/lists/updater.ts"],"names":["useAllLists","getVersionUpgrade","VersionUpgrade","useCallback","useEffect","useDispatch","useAllInactiveTokens","UNSUPPORTED_LIST_URLS","useWeb3Provider","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,sBAAlD;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,qBAAT,QAAsC,wBAAtC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,iBAAT,QAAkC,SAAlC;AAEA,eAAe,SAASC,OAAT,GAAyB;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcP,eAAe,EAAnC;AACA,QAAMQ,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,eAAe,GAAGN,kBAAkB,EAA1C,CAHsC,CAKtC;;AACA,QAAMO,KAAK,GAAGlB,WAAW,EAAzB;AACA,QAAMmB,cAAc,GAAGN,iBAAiB,EAAxC,CAPsC,CAStC;;AACAP,EAAAA,oBAAoB;AAEpB,QAAMc,SAAS,GAAGX,oBAAoB,EAAtC;AACA,QAAMY,qBAAqB,GAAGlB,WAAW,CAAC,MAAM;AAC9C,QAAI,CAACc,eAAL,EAAsB;AACtBK,IAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA4BC,GAAD,IACzBL,SAAS,CAACK,GAAD,CAAT,CAAeC,KAAf,CAAsBC,KAAD,IAAWC,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,KAA9C,CAAhC,CADF;AAGD,GALwC,EAKtC,CAACP,SAAD,EAAYH,eAAZ,EAA6BC,KAA7B,CALsC,CAAzC,CAbsC,CAoBtC;;AACAR,EAAAA,WAAW,CAACW,qBAAD,EAAwBN,OAAO,GAAG,OAAO,EAAP,GAAY,EAAf,GAAoB,IAAnD,CAAX,CArBsC,CAuBtC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA4BM,OAAD,IAAa;AACtC,YAAMC,IAAI,GAAGb,KAAK,CAACY,OAAD,CAAlB;;AACA,UAAI,CAACC,IAAI,CAACC,OAAN,IAAiB,CAACD,IAAI,CAACE,gBAAvB,IAA2C,CAACF,IAAI,CAACJ,KAArD,EAA4D;AAC1DP,QAAAA,SAAS,CAACU,OAAD,CAAT,CAAmBJ,KAAnB,CAA0BC,KAAD,IAAWC,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,KAA3C,CAApC;AACD;AACF,KALD;AAMD,GAPQ,EAON,CAACX,QAAD,EAAWI,SAAX,EAAsBL,OAAtB,EAA+BG,KAA/B,CAPM,CAAT,CAxBsC,CAiCtC;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACC,IAAP,CAAYhB,qBAAZ,EAAmCiB,OAAnC,CAA4CM,OAAD,IAAa;AACtD,YAAMC,IAAI,GAAGb,KAAK,CAACY,OAAD,CAAlB;;AACA,UAAI,CAACC,IAAD,IAAU,CAACA,IAAI,CAACC,OAAN,IAAiB,CAACD,IAAI,CAACE,gBAAvB,IAA2C,CAACF,IAAI,CAACJ,KAA/D,EAAuE;AACrEP,QAAAA,SAAS,CAACU,OAAD,CAAT,CAAmBJ,KAAnB,CAA0BC,KAAD,IAAWC,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CF,KAA3C,CAApC;AACD;AACF,KALD;AAMD,GAPQ,EAON,CAACX,QAAD,EAAWI,SAAX,EAAsBL,OAAtB,EAA+BG,KAA/B,CAPM,CAAT,CAlCsC,CA2CtC;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA4BM,OAAD,IAAa;AACtC,YAAMC,IAAI,GAAGb,KAAK,CAACY,OAAD,CAAlB;;AACA,UAAIC,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACG,aAAzB,EAAwC;AACtC,cAAMC,IAAI,GAAGlC,iBAAiB,CAAC8B,IAAI,CAACC,OAAL,CAAaI,OAAd,EAAuBL,IAAI,CAACG,aAAL,CAAmBE,OAA1C,CAA9B,CADsC,CAEtC;;AACA,gBAAQD,IAAR;AACE,eAAKjC,cAAc,CAACmC,IAApB;AACE,kBAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACF;;AACA,eAAKpC,cAAc,CAACqC,KAApB;AACA,eAAKrC,cAAc,CAACsC,KAApB;AACA,eAAKtC,cAAc,CAACuC,KAApB;AACEzB,YAAAA,QAAQ,CAACJ,gBAAgB,CAACkB,OAAD,CAAjB,CAAR;AAPJ;AASD;AACF,KAfD;AAgBD,GAjBQ,EAiBN,CAACd,QAAD,EAAWE,KAAX,EAAkBC,cAAlB,CAjBM,CAAT;AAmBA,SAAO,IAAP;AACD;;GAhEuBL,O;UACFN,e,EACHH,W,EACOM,kB,EAGVX,W,EACSa,iB,EAGvBP,oB,EAEkBG,oB,EASlBC,W;;;KArBsBI,O","sourcesContent":["import { useAllLists } from 'state/lists/hooks'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\nimport { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAllInactiveTokens } from 'hooks/Tokens'\r\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useFetchListCallback from 'hooks/useFetchListCallback'\r\nimport useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { AppDispatch } from '../index'\r\nimport { acceptListUpdate } from './actions'\r\nimport { useActiveListUrls } from './hooks'\r\n\r\nexport default function Updater(): null {\r\n  const { library } = useWeb3Provider()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  // get all loaded lists, and the active urls\r\n  const lists = useAllLists()\r\n  const activeListUrls = useActiveListUrls()\r\n\r\n  // initiate loading\r\n  useAllInactiveTokens()\r\n\r\n  const fetchList = useFetchListCallback()\r\n  const fetchAllListsCallback = useCallback(() => {\r\n    if (!isWindowVisible) return\r\n    Object.keys(lists).forEach((url) =>\r\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\r\n    )\r\n  }, [fetchList, isWindowVisible, lists])\r\n\r\n  // fetch all lists every 10 minutes, but only after we initialize library\r\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\r\n\r\n  // whenever a list is not loaded and not loading, try again to load it\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list.current && !list.loadingRequestId && !list.error) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\r\n  useEffect(() => {\r\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // automatically update lists if versions are minor/patch\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (list.current && list.pendingUpdate) {\r\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\r\n        // eslint-disable-next-line default-case\r\n        switch (bump) {\r\n          case VersionUpgrade.NONE:\r\n            throw new Error('unexpected no version bump')\r\n          // update any active or inactive lists\r\n          case VersionUpgrade.PATCH:\r\n          case VersionUpgrade.MINOR:\r\n          case VersionUpgrade.MAJOR:\r\n            dispatch(acceptListUpdate(listUrl))\r\n        }\r\n      }\r\n    })\r\n  }, [dispatch, lists, activeListUrls])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}