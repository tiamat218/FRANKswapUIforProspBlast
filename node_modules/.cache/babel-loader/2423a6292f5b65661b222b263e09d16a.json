{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\CurrencyInputPanel\\\\NumericalInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { escapeRegExp } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInput = styled.input`\n  color: ${({\n  error,\n  theme\n}) => error ? theme.colors.failure : theme.colors.text};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${({\n  align\n}) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({\n  theme\n}) => theme.colors.textSubtle};\n  }\n`;\n_c = StyledInput;\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c2 = _s(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}) {\n  _s();\n\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(StyledInput, { ...rest,\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because we exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    } // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: t('Token Amount'),\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n}));\n_c3 = Input;\nexport default Input;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledInput\");\n$RefreshReg$(_c2, \"Input$React.memo\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/CurrencyInputPanel/NumericalInput.tsx"],"names":["React","styled","useTranslation","escapeRegExp","StyledInput","input","error","theme","colors","failure","text","align","textSubtle","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","t","event","target","replace"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,WAAW,GAAGH,MAAM,CAACI,KAA8D;AACzF,WAAW,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAuBD,KAAK,GAAGC,KAAK,CAACC,MAAN,CAAaC,OAAhB,GAA0BF,KAAK,CAACC,MAAN,CAAaE,IAAM;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,IAAIA,KAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaI,UAAW;AACpD;AACA,CAjCA;KAAMR,W;AAmCN,MAAMS,UAAU,GAAGC,MAAM,CAAE,wBAAF,CAAzB,C,CAAoD;;AAEpD,OAAO,MAAMC,KAAK,gBAAGf,KAAK,CAACgB,IAAN,UAAW,SAASC,UAAT,CAAoB;AAClDC,EAAAA,KADkD;AAElDC,EAAAA,WAFkD;AAGlDC,EAAAA,WAHkD;AAIlD,KAAGC;AAJ+C,CAApB,EAWwC;AAAA;;AACtE,QAAMC,QAAQ,GAAIC,aAAD,IAA2B;AAC1C,QAAIA,aAAa,KAAK,EAAlB,IAAwBV,UAAU,CAACW,IAAX,CAAgBrB,YAAY,CAACoB,aAAD,CAA5B,CAA5B,EAA0E;AACxEJ,MAAAA,WAAW,CAACI,aAAD,CAAX;AACD;AACF,GAJD;;AAMA,QAAM;AAAEE,IAAAA;AAAF,MAAQvB,cAAc,EAA5B;AAEA,sBACE,QAAC,WAAD,OACMmB,IADN;AAEE,IAAA,KAAK,EAAEH,KAFT;AAGE,IAAA,QAAQ,EAAGQ,KAAD,IAAW;AACnB;AACAJ,MAAAA,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaT,KAAb,CAAmBU,OAAnB,CAA2B,IAA3B,EAAiC,GAAjC,CAAD,CAAR;AACD,KANH,CAOE;AAPF;AAQE,IAAA,SAAS,EAAC,SARZ;AASE,IAAA,KAAK,EAAEH,CAAC,CAAC,cAAD,CATV;AAUE,IAAA,YAAY,EAAC,KAVf;AAWE,IAAA,WAAW,EAAC,KAXd,CAYE;AAZF;AAaE,IAAA,IAAI,EAAC,MAbP;AAcE,IAAA,OAAO,EAAC,qBAdV;AAeE,IAAA,WAAW,EAAEL,WAAW,IAAI,KAf9B;AAgBE,IAAA,SAAS,EAAE,CAhBb;AAiBE,IAAA,SAAS,EAAE,EAjBb;AAkBE,IAAA,UAAU,EAAC;AAlBb;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA1CoB;AAAA,UAkBLlB,cAlBK;AAAA,GAAd;MAAMa,K;AA4Cb,eAAeA,KAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={(event) => {\r\n        // replace commas with periods, because we exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title={t('Token Amount')}\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n"]},"metadata":{},"sourceType":"module"}