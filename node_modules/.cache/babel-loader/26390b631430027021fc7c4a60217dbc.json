{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\WinningNumbers.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Flex } from '@pancakeswap/uikit';\nimport { random } from 'lodash';\nimport uniqueId from 'lodash/uniqueId';\nimport { parseRetreivedNumber } from '../helpers';\nimport { BallWithNumber } from '../svgs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WinningNumbers = ({\n  number,\n  size = '32px',\n  fontSize = '16px',\n  rotateText,\n  ...containerProps\n}) => {\n  _s();\n  const [rotationValues, setRotationValues] = useState([]);\n  const reversedNumber = parseRetreivedNumber(number);\n  const numAsArray = reversedNumber.split('');\n  const colors = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow'];\n  useEffect(() => {\n    if (rotateText && numAsArray && rotationValues.length === 0) {\n      setRotationValues(numAsArray.map(() => random(-30, 30)));\n    }\n  }, [rotateText, numAsArray, rotationValues]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    ...containerProps,\n    children: numAsArray.map((num, index) => {\n      return /*#__PURE__*/_jsxDEV(BallWithNumber, {\n        rotationTransform: rotateText && rotationValues[index],\n        size: size,\n        fontSize: fontSize,\n        color: colors[index],\n        number: num\n      }, uniqueId(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(WinningNumbers, \"2StapSlzQpNMVHWmfHT3lxPCTUY=\");\n_c = WinningNumbers;\nexport default WinningNumbers;\nvar _c;\n$RefreshReg$(_c, \"WinningNumbers\");","map":{"version":3,"names":["React","useEffect","useState","Flex","random","uniqueId","parseRetreivedNumber","BallWithNumber","jsxDEV","_jsxDEV","WinningNumbers","number","size","fontSize","rotateText","containerProps","_s","rotationValues","setRotationValues","reversedNumber","numAsArray","split","colors","length","map","justifyContent","children","num","index","rotationTransform","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Lottery/components/WinningNumbers.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Flex, FlexProps } from '@pancakeswap/uikit'\r\nimport { random } from 'lodash'\r\nimport uniqueId from 'lodash/uniqueId'\r\nimport { parseRetreivedNumber } from '../helpers'\r\nimport { BallWithNumber } from '../svgs'\r\nimport { BallColor } from '../svgs/Balls'\r\n\r\ninterface WinningNumbersProps extends FlexProps {\r\n  number: string\r\n  size?: string\r\n  fontSize?: string\r\n  rotateText?: boolean\r\n}\r\n\r\nconst WinningNumbers: React.FC<WinningNumbersProps> = ({\r\n  number,\r\n  size = '32px',\r\n  fontSize = '16px',\r\n  rotateText,\r\n  ...containerProps\r\n}) => {\r\n  const [rotationValues, setRotationValues] = useState([])\r\n  const reversedNumber = parseRetreivedNumber(number)\r\n  const numAsArray = reversedNumber.split('')\r\n  const colors: BallColor[] = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow']\r\n\r\n  useEffect(() => {\r\n    if (rotateText && numAsArray && rotationValues.length === 0) {\r\n      setRotationValues(numAsArray.map(() => random(-30, 30)))\r\n    }\r\n  }, [rotateText, numAsArray, rotationValues])\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" {...containerProps}>\r\n      {numAsArray.map((num, index) => {\r\n        return (\r\n          <BallWithNumber\r\n            key={uniqueId()}\r\n            rotationTransform={rotateText && rotationValues[index]}\r\n            size={size}\r\n            fontSize={fontSize}\r\n            color={colors[index]}\r\n            number={num}\r\n          />\r\n        )\r\n      })}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default WinningNumbers\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAmB,oBAAoB;AACpD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,oBAAoB,QAAQ,YAAY;AACjD,SAASC,cAAc,QAAQ,SAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUxC,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,MAAM;EACNC,IAAI,GAAG,MAAM;EACbC,QAAQ,GAAG,MAAM;EACjBC,UAAU;EACV,GAAGC;AACL,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMiB,cAAc,GAAGb,oBAAoB,CAACK,MAAM,CAAC;EACnD,MAAMS,UAAU,GAAGD,cAAc,CAACE,KAAK,CAAC,EAAE,CAAC;EAC3C,MAAMC,MAAmB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;EAEhFrB,SAAS,CAAC,MAAM;IACd,IAAIa,UAAU,IAAIM,UAAU,IAAIH,cAAc,CAACM,MAAM,KAAK,CAAC,EAAE;MAC3DL,iBAAiB,CAACE,UAAU,CAACI,GAAG,CAAC,MAAMpB,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1D;EACF,CAAC,EAAE,CAACU,UAAU,EAAEM,UAAU,EAAEH,cAAc,CAAC,CAAC;EAE5C,oBACER,OAAA,CAACN,IAAI;IAACsB,cAAc,EAAC,eAAe;IAAA,GAAKV,cAAc;IAAAW,QAAA,EACpDN,UAAU,CAACI,GAAG,CAAC,CAACG,GAAG,EAAEC,KAAK,KAAK;MAC9B,oBACEnB,OAAA,CAACF,cAAc;QAEbsB,iBAAiB,EAAEf,UAAU,IAAIG,cAAc,CAACW,KAAK,CAAE;QACvDhB,IAAI,EAAEA,IAAK;QACXC,QAAQ,EAAEA,QAAS;QACnBiB,KAAK,EAAER,MAAM,CAACM,KAAK,CAAE;QACrBjB,MAAM,EAAEgB;MAAI,GALPtB,QAAQ,CAAC,CAAC;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhB,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAAAlB,EAAA,CAlCKN,cAA6C;AAAAyB,EAAA,GAA7CzB,cAA6C;AAoCnD,eAAeA,cAAc;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}