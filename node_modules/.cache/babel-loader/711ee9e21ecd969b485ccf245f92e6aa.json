{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\swapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\FarmTable\\\\Actions\\\\HarvestAction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport Balance from 'components/Balance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport useToast from 'hooks/useToast';\nimport { useTranslation } from 'contexts/Localization';\nimport useHarvestFarm from '../../../hooks/useHarvestFarm';\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HarvestAction = ({\n  pid,\n  userData,\n  userDataReady\n}) => {\n  _s();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const earningsBigNumber = new BigNumber(userData.earnings);\n  const cakePrice = usePriceCakeBusd();\n  let earnings = BIG_ZERO;\n  let earningsBusd = 0;\n  let displayBalance = userDataReady ? earnings.toLocaleString() : /*#__PURE__*/_jsxDEV(Skeleton, {\n    width: 60\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 68\n  }, this);\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber);\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber();\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN);\n  }\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvestFarm(pid);\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: \"CAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Earned, {\n          children: displayBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), earningsBusd > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          decimals: 2,\n          value: earningsBusd,\n          unit: \" USD\",\n          prefix: \"~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: earnings.eq(0) || pendingTx || !userDataReady,\n        onClick: async () => {\n          setPendingTx(true);\n          try {\n            await onReward();\n            toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n              symbol: 'CAKE'\n            }));\n          } catch (e) {\n            toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n            console.error(e);\n          } finally {\n            setPendingTx(false);\n          }\n          dispatch(fetchFarmUserDataAsync({\n            account,\n            pids: [pid]\n          }));\n        },\n        ml: \"4px\",\n        children: t('Harvest')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(HarvestAction, \"bgUDCgJmDQinqw0QN+HTOMuJSvM=\", false, function () {\n  return [useToast, usePriceCakeBusd, useHarvestFarm, useTranslation, useAppDispatch, useWeb3React];\n});\n_c = HarvestAction;\nexport default HarvestAction;\nvar _c;\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"names":["React","useState","Button","Skeleton","Text","BigNumber","useWeb3React","Balance","BIG_ZERO","getBalanceAmount","useAppDispatch","fetchFarmUserDataAsync","usePriceCakeBusd","useToast","useTranslation","useHarvestFarm","ActionContainer","ActionTitles","ActionContent","Earned","jsxDEV","_jsxDEV","HarvestAction","pid","userData","userDataReady","_s","toastSuccess","toastError","earningsBigNumber","earnings","cakePrice","earningsBusd","displayBalance","toLocaleString","width","fileName","_jsxFileName","lineNumber","columnNumber","isZero","multipliedBy","toNumber","toFixed","ROUND_DOWN","pendingTx","setPendingTx","onReward","t","dispatch","account","children","bold","textTransform","color","fontSize","pr","decimals","value","unit","prefix","disabled","eq","onClick","symbol","e","console","error","pids","ml","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}