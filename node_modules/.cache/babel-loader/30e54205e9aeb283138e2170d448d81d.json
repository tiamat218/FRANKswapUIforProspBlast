{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\TradingCompetition\\\\components\\\\BattleCta\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Flex, LaurelLeftIcon, LaurelRightIcon, Button, CheckmarkCircleIcon, useWalletModal, useModal } from '@pancakeswap/uikit';\nimport { useHistory } from 'react-router-dom';\nimport useAuth from 'hooks/useAuth';\nimport { useTranslation } from 'contexts/Localization';\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases';\nimport RegisterModal from '../RegisterModal';\nimport ClaimModal from '../ClaimModal';\nimport { Heading2Text } from '../CompetitionHeadingText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  display: inline-flex;\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\n\n  svg {\n    margin-bottom: 6px;\n    height: 32px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.warning};\n  }\n`;\n_c = StyledCard;\nconst StyledButton = styled(Button)`\n  margin: 16px 20px 0;\n  z-index: 200;\n\n  svg {\n    margin: 0 4px 0 0;\n    height: 20px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.textDisabled};\n  }\n`;\n_c2 = StyledButton;\nconst StyledHeadingText = styled(Heading2Text)`\n  white-space: normal;\n`;\n_c3 = StyledHeadingText;\n\nconst BattleCta = ({\n  userTradingInformation,\n  currentPhase,\n  account,\n  isCompetitionLive,\n  profile,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  isLoading,\n  hasCompetitionEnded,\n  onRegisterSuccess,\n  onClaimSuccess\n}) => {\n  _s();\n\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const {\n    login,\n    logout\n  } = useAuth();\n  const {\n    onPresentConnectModal\n  } = useWalletModal(login, logout);\n  const [onPresentRegisterModal] = useModal( /*#__PURE__*/_jsxDEV(RegisterModal, {\n    profile: profile,\n    onRegisterSuccess: onRegisterSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), false);\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimModal, {\n    userTradingInformation: userTradingInformation,\n    onClaimSuccess: onClaimSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), false);\n  const {\n    hasRegistered,\n    hasUserClaimed\n  } = userTradingInformation;\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded;\n  const isButtonDisabled = Boolean(isLoading || currentPhase.state === OVER || registeredAndNotStarted || finishedAndPrizesClaimed || finishedAndNothingToClaim);\n\n  const getHeadingText = () => {\n    // Competition live\n    if (isCompetitionLive) {\n      return t('Now Live!');\n    } // Competition finished. Rewards being calculated\n\n\n    if (currentPhase.state === FINISHED) {\n      return `${t('Calculating prizes')}...`;\n    } // All competition finished states\n\n\n    if (hasCompetitionEnded) {\n      return `${t('Finished')}!`;\n    } // Competition not started\n\n\n    return t('Starting Soon');\n  };\n\n  const getButtonText = () => {\n    // No wallet connected\n    if (!account) {\n      return t('Connect Wallet');\n    } // User not registered\n\n\n    if (!hasRegistered) {\n      return t('I want to Battle!');\n    } // User registered and competition live\n\n\n    if (isCompetitionLive) {\n      return t('Trade Now');\n    } // User registered and competition finished\n\n\n    if (hasCompetitionEnded) {\n      // Claim period has ended\n      if (currentPhase.state === OVER) {\n        return t('Claim period over');\n      } // User has prizes to claim\n\n\n      if (userCanClaimPrizes) {\n        return t('Claim prizes');\n      } // User has already claimed prizes\n\n\n      if (hasUserClaimed) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), \" \", t('Prizes Claimed!')]\n        }, void 0, true);\n      } // User has nothing to claim\n\n\n      return t('Nothing to claim');\n    } // User registered but competition has not started\n\n\n    if (!isCompetitionLive) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), \" \", t('Registered!')]\n      }, void 0, true);\n    } // May be useful for debugging - if somehow none of the above conditions are met\n\n\n    return 'Whoopsie';\n  };\n\n  const handleCtaClick = () => {\n    // All conditions when button isn't disabled\n    // No wallet connected\n    if (!account) {\n      onPresentConnectModal();\n    } // Wallet connected but user not registered\n\n\n    if (account && !hasRegistered) {\n      onPresentRegisterModal();\n    } // Registered and competition is live\n\n\n    if (hasRegistered && isCompetitionLive) {\n      history.push('/swap');\n    } // Registered and competition has finished\n\n\n    if (hasRegistered && hasCompetitionEnded) {\n      onPresentClaimModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(StyledHeadingText, {\n          children: getHeadingText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), currentPhase.state !== FINISHED && /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(LaurelLeftIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n            disabled: isButtonDisabled,\n            onClick: () => handleCtaClick(),\n            children: getButtonText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LaurelRightIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BattleCta, \"D0hK3FOERzjT0FzSjsaV95Y3M1U=\", false, function () {\n  return [useHistory, useTranslation, useAuth, useWalletModal, useModal, useModal];\n});\n\n_c4 = BattleCta;\nexport default BattleCta;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledButton\");\n$RefreshReg$(_c3, \"StyledHeadingText\");\n$RefreshReg$(_c4, \"BattleCta\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/components/BattleCta/index.tsx"],"names":["React","styled","Card","CardBody","Flex","LaurelLeftIcon","LaurelRightIcon","Button","CheckmarkCircleIcon","useWalletModal","useModal","useHistory","useAuth","useTranslation","FINISHED","OVER","RegisterModal","ClaimModal","Heading2Text","StyledCard","theme","colors","warning","StyledButton","textDisabled","StyledHeadingText","BattleCta","userTradingInformation","currentPhase","account","isCompetitionLive","profile","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","isLoading","hasCompetitionEnded","onRegisterSuccess","onClaimSuccess","history","t","login","logout","onPresentConnectModal","onPresentRegisterModal","onPresentClaimModal","hasRegistered","hasUserClaimed","registeredAndNotStarted","isButtonDisabled","Boolean","state","getHeadingText","getButtonText","handleCtaClick","push"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  LaurelLeftIcon,\r\n  LaurelRightIcon,\r\n  Button,\r\n  CheckmarkCircleIcon,\r\n  useWalletModal,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases'\r\nimport RegisterModal from '../RegisterModal'\r\nimport ClaimModal from '../ClaimModal'\r\nimport { Heading2Text } from '../CompetitionHeadingText'\r\nimport { CompetitionProps } from '../../types'\r\n\r\nconst StyledCard = styled(Card)`\r\n  display: inline-flex;\r\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\r\n\r\n  svg {\r\n    margin-bottom: 6px;\r\n    height: 32px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.warning};\r\n  }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 16px 20px 0;\r\n  z-index: 200;\r\n\r\n  svg {\r\n    margin: 0 4px 0 0;\r\n    height: 20px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledHeadingText = styled(Heading2Text)`\r\n  white-space: normal;\r\n`\r\n\r\nconst BattleCta: React.FC<CompetitionProps> = ({\r\n  userTradingInformation,\r\n  currentPhase,\r\n  account,\r\n  isCompetitionLive,\r\n  profile,\r\n  userCanClaimPrizes,\r\n  finishedAndPrizesClaimed,\r\n  finishedAndNothingToClaim,\r\n  isLoading,\r\n  hasCompetitionEnded,\r\n  onRegisterSuccess,\r\n  onClaimSuccess,\r\n}) => {\r\n  const history = useHistory()\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n  const [onPresentRegisterModal] = useModal(\r\n    <RegisterModal profile={profile} onRegisterSuccess={onRegisterSuccess} />,\r\n    false,\r\n  )\r\n  const [onPresentClaimModal] = useModal(\r\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\r\n    false,\r\n  )\r\n  const { hasRegistered, hasUserClaimed } = userTradingInformation\r\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded\r\n\r\n  const isButtonDisabled = Boolean(\r\n    isLoading ||\r\n      currentPhase.state === OVER ||\r\n      registeredAndNotStarted ||\r\n      finishedAndPrizesClaimed ||\r\n      finishedAndNothingToClaim,\r\n  )\r\n\r\n  const getHeadingText = () => {\r\n    // Competition live\r\n    if (isCompetitionLive) {\r\n      return t('Now Live!')\r\n    }\r\n    // Competition finished. Rewards being calculated\r\n    if (currentPhase.state === FINISHED) {\r\n      return `${t('Calculating prizes')}...`\r\n    }\r\n    // All competition finished states\r\n    if (hasCompetitionEnded) {\r\n      return `${t('Finished')}!`\r\n    }\r\n    // Competition not started\r\n    return t('Starting Soon')\r\n  }\r\n\r\n  const getButtonText = () => {\r\n    // No wallet connected\r\n    if (!account) {\r\n      return t('Connect Wallet')\r\n    }\r\n    // User not registered\r\n    if (!hasRegistered) {\r\n      return t('I want to Battle!')\r\n    }\r\n    // User registered and competition live\r\n    if (isCompetitionLive) {\r\n      return t('Trade Now')\r\n    }\r\n\r\n    // User registered and competition finished\r\n    if (hasCompetitionEnded) {\r\n      // Claim period has ended\r\n      if (currentPhase.state === OVER) {\r\n        return t('Claim period over')\r\n      }\r\n      // User has prizes to claim\r\n      if (userCanClaimPrizes) {\r\n        return t('Claim prizes')\r\n      }\r\n      // User has already claimed prizes\r\n      if (hasUserClaimed) {\r\n        return (\r\n          <>\r\n            <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\r\n          </>\r\n        )\r\n      }\r\n      // User has nothing to claim\r\n      return t('Nothing to claim')\r\n    }\r\n\r\n    // User registered but competition has not started\r\n    if (!isCompetitionLive) {\r\n      return (\r\n        <>\r\n          <CheckmarkCircleIcon /> {t('Registered!')}\r\n        </>\r\n      )\r\n    }\r\n\r\n    // May be useful for debugging - if somehow none of the above conditions are met\r\n    return 'Whoopsie'\r\n  }\r\n\r\n  const handleCtaClick = () => {\r\n    // All conditions when button isn't disabled\r\n\r\n    // No wallet connected\r\n    if (!account) {\r\n      onPresentConnectModal()\r\n    }\r\n    // Wallet connected but user not registered\r\n    if (account && !hasRegistered) {\r\n      onPresentRegisterModal()\r\n    }\r\n    // Registered and competition is live\r\n    if (hasRegistered && isCompetitionLive) {\r\n      history.push('/swap')\r\n    }\r\n    // Registered and competition has finished\r\n    if (hasRegistered && hasCompetitionEnded) {\r\n      onPresentClaimModal()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardBody>\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n          <StyledHeadingText>{getHeadingText()}</StyledHeadingText>\r\n          {/* Hide button if in the pre-claim, FINISHED phase */}\r\n          {currentPhase.state !== FINISHED && (\r\n            <Flex alignItems=\"flex-end\">\r\n              <LaurelLeftIcon />\r\n              <StyledButton disabled={isButtonDisabled} onClick={() => handleCtaClick()}>\r\n                {getButtonText()}\r\n              </StyledButton>\r\n              <LaurelRightIcon />\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default BattleCta\r\n"]},"metadata":{},"sourceType":"module"}