{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React from'react';import styled from'styled-components';import{IconButton,ArrowForwardIcon,ArrowBackIcon,ArrowLastIcon,Flex,Heading,Input}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StyledInput=styled(Input)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 60px;\\n  height: 100%;\\n  padding: 4px 16px;\\n\"])));const StyledIconButton=styled(IconButton)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 32px;\\n\\n  :disabled {\\n    background: none;\\n\\n    svg {\\n      fill: \",\";\\n\\n      path {\\n        fill: \",\";\\n      }\\n    }\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.colors.textDisabled;},_ref2=>{let{theme}=_ref2;return theme.colors.textDisabled;});const RoundSwitcher=_ref3=>{let{isLoading,selectedRoundId,mostRecentRound,handleInputChange,handleArrowButonPress}=_ref3;const{t}=useTranslation();const selectedRoundIdAsInt=parseInt(selectedRoundId,10);return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(Heading,{mr:\"8px\",children:t('Round')}),/*#__PURE__*/_jsx(StyledInput,{disabled:isLoading,id:\"round-id\",name:\"round-id\",type:\"number\",value:selectedRoundId,scale:\"lg\",onChange:handleInputChange})]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(StyledIconButton,{disabled:!selectedRoundIdAsInt||selectedRoundIdAsInt<=1,onClick:()=>handleArrowButonPress(selectedRoundIdAsInt-1),variant:\"text\",scale:\"sm\",mr:\"4px\",children:/*#__PURE__*/_jsx(ArrowBackIcon,{})}),/*#__PURE__*/_jsx(StyledIconButton,{disabled:selectedRoundIdAsInt>=mostRecentRound,onClick:()=>handleArrowButonPress(selectedRoundIdAsInt+1),variant:\"text\",scale:\"sm\",mr:\"4px\",children:/*#__PURE__*/_jsx(ArrowForwardIcon,{})}),/*#__PURE__*/_jsx(StyledIconButton,{disabled:selectedRoundIdAsInt>=mostRecentRound,onClick:()=>handleArrowButonPress(mostRecentRound),variant:\"text\",scale:\"sm\",children:/*#__PURE__*/_jsx(ArrowLastIcon,{})})]})]});};export default RoundSwitcher;","map":{"version":3,"names":["React","styled","IconButton","ArrowForwardIcon","ArrowBackIcon","ArrowLastIcon","Flex","Heading","Input","useTranslation","jsx","_jsx","jsxs","_jsxs","StyledInput","_templateObject","_taggedTemplateLiteral","StyledIconButton","_templateObject2","_ref","theme","colors","textDisabled","_ref2","RoundSwitcher","_ref3","isLoading","selectedRoundId","mostRecentRound","handleInputChange","handleArrowButonPress","t","selectedRoundIdAsInt","parseInt","alignItems","justifyContent","children","mr","disabled","id","name","type","value","scale","onChange","onClick","variant"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/components/AllHistoryCard/RoundSwitcher.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { IconButton, ArrowForwardIcon, ArrowBackIcon, ArrowLastIcon, Flex, Heading, Input } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  width: 60px;\r\n  height: 100%;\r\n  padding: 4px 16px;\r\n`\r\n\r\nconst StyledIconButton = styled(IconButton)`\r\n  width: 32px;\r\n\r\n  :disabled {\r\n    background: none;\r\n\r\n    svg {\r\n      fill: ${({ theme }) => theme.colors.textDisabled};\r\n\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textDisabled};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ninterface RoundSwitcherProps {\r\n  isLoading: boolean\r\n  selectedRoundId: string\r\n  mostRecentRound: number\r\n  handleInputChange: (event: any) => void\r\n  handleArrowButonPress: (targetRound: number) => void\r\n}\r\n\r\nconst RoundSwitcher: React.FC<RoundSwitcherProps> = ({\r\n  isLoading,\r\n  selectedRoundId,\r\n  mostRecentRound,\r\n  handleInputChange,\r\n  handleArrowButonPress,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const selectedRoundIdAsInt = parseInt(selectedRoundId, 10)\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Flex alignItems=\"center\">\r\n        <Heading mr=\"8px\">{t('Round')}</Heading>\r\n        <StyledInput\r\n          disabled={isLoading}\r\n          id=\"round-id\"\r\n          name=\"round-id\"\r\n          type=\"number\"\r\n          value={selectedRoundId}\r\n          scale=\"lg\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </Flex>\r\n      <Flex alignItems=\"center\">\r\n        <StyledIconButton\r\n          disabled={!selectedRoundIdAsInt || selectedRoundIdAsInt <= 1}\r\n          onClick={() => handleArrowButonPress(selectedRoundIdAsInt - 1)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n          mr=\"4px\"\r\n        >\r\n          <ArrowBackIcon />\r\n        </StyledIconButton>\r\n        <StyledIconButton\r\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\r\n          onClick={() => handleArrowButonPress(selectedRoundIdAsInt + 1)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n          mr=\"4px\"\r\n        >\r\n          <ArrowForwardIcon />\r\n        </StyledIconButton>\r\n        <StyledIconButton\r\n          disabled={selectedRoundIdAsInt >= mostRecentRound}\r\n          onClick={() => handleArrowButonPress(mostRecentRound)}\r\n          variant=\"text\"\r\n          scale=\"sm\"\r\n        >\r\n          <ArrowLastIcon />\r\n        </StyledIconButton>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RoundSwitcher\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}