{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Profile\\\\components\\\\EditProfileModal\\\\ChangeProfilePicView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { useGetCollectibles } from 'state/hooks';\nimport { useProfile } from 'state/profile/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { fetchProfile } from 'state/profile';\nimport { getAddressByType } from 'utils/collectibles';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { getErc721Contract } from 'utils/contractHelpers';\nimport { useProfile as useProfileContract } from 'hooks/useContract';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport SelectionCard from '../SelectionCard';\nimport ApproveConfirmButtons from '../ApproveConfirmButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChangeProfilePicPage = ({\n  onDismiss\n}) => {\n  _s();\n\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    isLoading,\n    tokenIds,\n    nftsInWallet\n  } = useGetCollectibles();\n  const dispatch = useAppDispatch();\n  const {\n    profile\n  } = useProfile();\n  const profileContract = useProfileContract();\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onApprove: () => {\n      const contract = getErc721Contract(selectedNft.nftAddress, library.getSigner());\n      return contract.approve(getPancakeProfileAddress(), selectedNft.tokenId);\n    },\n    onConfirm: () => {\n      if (!profile.isActive) {\n        return profileContract.reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId);\n      }\n\n      return profileContract.updateProfile(selectedNft.nftAddress, selectedNft.tokenId);\n    },\n    onSuccess: async () => {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account));\n      toastSuccess(t('Profile Updated!'));\n      onDismiss();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      color: \"textSubtle\",\n      mb: \"24px\",\n      children: t('Choose a new Collectible to use as your profile pic.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: \"80px\",\n      mb: \"16px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : nftsInWallet.map(walletNft => {\n      const [firstTokenId] = tokenIds[walletNft.identifier];\n\n      const handleChange = value => {\n        setSelectedNft({\n          tokenId: Number(value),\n          nftAddress: getAddressByType(walletNft.type)\n        });\n      };\n\n      return /*#__PURE__*/_jsxDEV(SelectionCard, {\n        name: \"profilePicture\",\n        value: firstTokenId,\n        image: `/images/nfts/${walletNft.images.md}`,\n        isChecked: firstTokenId === selectedNft.tokenId,\n        onChange: handleChange,\n        disabled: isApproving || isConfirming || isConfirmed,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: walletNft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)\n      }, walletNft.identifier, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this);\n    }), !isLoading && nftsInWallet.length === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"16px\",\n        children: t('Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        color: \"textSubtle\",\n        mb: \"24px\",\n        children: t('Make sure you have a Pancake Collectible in your wallet and try again!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n      isApproveDisabled: isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null,\n      isApproving: isApproving,\n      isConfirmDisabled: !isApproved || isConfirmed || selectedNft.tokenId === null,\n      isConfirming: isConfirming,\n      onApprove: handleApprove,\n      onConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"text\",\n      width: \"100%\",\n      onClick: onDismiss,\n      disabled: isApproving || isConfirming,\n      children: t('Close Window')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChangeProfilePicPage, \"JuEcp6rCV6Ga3EkPIIQcor8cPDE=\", false, function () {\n  return [useTranslation, useGetCollectibles, useAppDispatch, useProfile, useProfileContract, useWeb3React, useToast, useApproveConfirmTransaction];\n});\n\n_c = ChangeProfilePicPage;\nexport default ChangeProfilePicPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeProfilePicPage\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx"],"names":["React","useState","Button","Skeleton","Text","useWeb3React","useAppDispatch","useGetCollectibles","useProfile","useTranslation","useToast","fetchProfile","getAddressByType","useApproveConfirmTransaction","getErc721Contract","useProfileContract","getPancakeProfileAddress","SelectionCard","ApproveConfirmButtons","ChangeProfilePicPage","onDismiss","selectedNft","setSelectedNft","tokenId","nftAddress","t","isLoading","tokenIds","nftsInWallet","dispatch","profile","profileContract","account","library","toastSuccess","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onApprove","contract","getSigner","approve","onConfirm","isActive","reactivateProfile","updateProfile","onSuccess","map","walletNft","firstTokenId","identifier","handleChange","value","Number","type","images","md","name","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollectibles } from 'state/hooks'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport { getAddressByType } from 'utils/collectibles'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport SelectionCard from '../SelectionCard'\r\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    nftAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.nftAddress, library.getSigner())\r\n        return contract.approve(getPancakeProfileAddress(), selectedNft.tokenId)\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return profileContract.reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\r\n        }\r\n\r\n        return profileContract.updateProfile(selectedNft.nftAddress, selectedNft.tokenId)\r\n      },\r\n      onSuccess: async () => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'))\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      {isLoading ? (\r\n        <Skeleton height=\"80px\" mb=\"16px\" />\r\n      ) : (\r\n        nftsInWallet.map((walletNft) => {\r\n          const [firstTokenId] = tokenIds[walletNft.identifier]\r\n          const handleChange = (value: string) => {\r\n            setSelectedNft({\r\n              tokenId: Number(value),\r\n              nftAddress: getAddressByType(walletNft.type),\r\n            })\r\n          }\r\n\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={walletNft.identifier}\r\n              value={firstTokenId}\r\n              image={`/images/nfts/${walletNft.images.md}`}\r\n              isChecked={firstTokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })\r\n      )}\r\n      {!isLoading && nftsInWallet.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You donâ€™t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n"]},"metadata":{},"sourceType":"module"}