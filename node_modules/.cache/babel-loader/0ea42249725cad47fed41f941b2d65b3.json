{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\CollectRoundWinningsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ModalContainer, ModalBody, ModalTitle, ModalHeader, Button, AutoRenewIcon, TrophyGoldIcon, Text, Flex, Heading, Box, LinkExternal, ModalCloseButton } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { getBscScanLink } from 'utils';\nimport { useAppDispatch } from 'state';\nimport { usePriceBnbBusd } from 'state/farms/hooks';\nimport { fetchClaimableStatuses } from 'state/predictions';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`;\n_c = Modal;\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`;\n_c2 = BunnyDecoration;\n\nconst CollectRoundWinningsModal = ({\n  payout,\n  betAmount,\n  epoch,\n  onDismiss,\n  onSuccess\n}) => {\n  _s();\n\n  const [isPendingTx, setIsPendingTx] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const predictionsContract = usePredictionsContract();\n  const bnbBusdPrice = usePriceBnbBusd();\n  const dispatch = useAppDispatch(); // Convert payout to number for compatibility\n\n  const payoutAsFloat = parseFloat(payout);\n  const betAmountAsFloat = parseFloat(betAmount);\n\n  const handleClick = async () => {\n    try {\n      const tx = await predictionsContract.claim(epoch);\n      setIsPendingTx(true);\n      const receipt = await tx.wait();\n\n      if (onSuccess) {\n        await onSuccess();\n      }\n\n      await dispatch(fetchClaimableStatuses({\n        account,\n        epochs: [epoch]\n      }));\n      onDismiss();\n      setIsPendingTx(false);\n      toastSuccess(t('Winnings collected!'), /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          mb: \"8px\",\n          children: t('Your prizes have been sent to your wallet')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), receipt.transactionHash && /*#__PURE__*/_jsxDEV(LinkExternal, {\n          href: getBscScanLink(receipt.transactionHash, 'transaction'),\n          children: t('View on BscScan')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this));\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    } finally {\n      setIsPendingTx(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    minWidth: \"288px\",\n    position: \"relative\",\n    mt: \"124px\",\n    children: [/*#__PURE__*/_jsxDEV(BunnyDecoration, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/decorations/prize-bunny.png\",\n        alt: \"bunny decoration\",\n        height: \"124px\",\n        width: \"168px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalHeader, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: /*#__PURE__*/_jsxDEV(Heading, {\n          children: t('Collect Winnings')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {\n        onDismiss: onDismiss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      p: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(TrophyGoldIcon, {\n        width: \"96px\",\n        mx: \"auto\",\n        mb: \"24px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"start\",\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Your position')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            textAlign: 'right'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: `${betAmount} BNB`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: `~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"start\",\n        justifyContent: \"space-between\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Your winnings')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            textAlign: 'right'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: `${payout} BNB`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: `~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mb: \"8px\",\n        onClick: handleClick,\n        isLoading: isPendingTx,\n        endIcon: isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 34\n        }, this) : null,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectRoundWinningsModal, \"NArkcuFKkgFf2eBkFgx1F9brSCM=\", false, function () {\n  return [useWeb3React, useTranslation, useToast, usePredictionsContract, usePriceBnbBusd, useAppDispatch];\n});\n\n_c3 = CollectRoundWinningsModal;\nexport default CollectRoundWinningsModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"BunnyDecoration\");\n$RefreshReg$(_c3, \"CollectRoundWinningsModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/CollectRoundWinningsModal.tsx"],"names":["React","useState","styled","ModalContainer","ModalBody","ModalTitle","ModalHeader","Button","AutoRenewIcon","TrophyGoldIcon","Text","Flex","Heading","Box","LinkExternal","ModalCloseButton","useWeb3React","getBscScanLink","useAppDispatch","usePriceBnbBusd","fetchClaimableStatuses","useTranslation","useToast","usePredictionsContract","Modal","BunnyDecoration","div","CollectRoundWinningsModal","payout","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","account","t","toastSuccess","toastError","predictionsContract","bnbBusdPrice","dispatch","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","tx","claim","receipt","wait","epochs","transactionHash","textAlign","times","toFormat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { fetchClaimableStatuses } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Convert payout to number for compatibility\r\n  const payoutAsFloat = parseFloat(payout)\r\n  const betAmountAsFloat = parseFloat(betAmount)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await predictionsContract.claim(epoch)\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <Box>\r\n          <Text as=\"p\" mb=\"8px\">\r\n            {t('Your prizes have been sent to your wallet')}\r\n          </Text>\r\n          {receipt.transactionHash && (\r\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          )}\r\n        </Box>,\r\n      )\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${betAmount} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Your winnings')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${payout} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n"]},"metadata":{},"sourceType":"module"}