{"ast":null,"code":"import{useEffect}from'react';import{connectorLocalStorageKey,ConnectorNames}from'@pancakeswap/uikit';import useAuth from'hooks/useAuth';const _binanceChainListener=async()=>new Promise(resolve=>Object.defineProperty(window,'BinanceChain',{get(){return this.bsc;},set(bsc){this.bsc=bsc;resolve();}}));const useEagerConnect=()=>{const{login}=useAuth();useEffect(()=>{const connectorId=window.localStorage.getItem(connectorLocalStorageKey);if(connectorId){const isConnectorBinanceChain=connectorId===ConnectorNames.BSC;const isBinanceChainDefined=Reflect.has(window,'BinanceChain');// Currently BSC extension doesn't always inject in time.\n// We must check to see if it exists, and if not, wait for it before proceeding.\nif(isConnectorBinanceChain&&!isBinanceChainDefined){_binanceChainListener().then(()=>login(connectorId));return;}login(connectorId);}},[login]);};export default useEagerConnect;","map":{"version":3,"names":["useEffect","connectorLocalStorageKey","ConnectorNames","useAuth","_binanceChainListener","Promise","resolve","Object","defineProperty","window","get","bsc","set","useEagerConnect","login","connectorId","localStorage","getItem","isConnectorBinanceChain","BSC","isBinanceChainDefined","Reflect","has","then"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useEagerConnect.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\n\r\nconst _binanceChainListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'BinanceChain', {\r\n      get() {\r\n        return this.bsc\r\n      },\r\n      set(bsc) {\r\n        this.bsc = bsc\r\n\r\n        resolve()\r\n      },\r\n    }),\r\n  )\r\n\r\nconst useEagerConnect = () => {\r\n  const { login } = useAuth()\r\n\r\n  useEffect(() => {\r\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\r\n\r\n    if (connectorId) {\r\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\r\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\r\n\r\n      // Currently BSC extension doesn't always inject in time.\r\n      // We must check to see if it exists, and if not, wait for it before proceeding.\r\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\r\n        _binanceChainListener().then(() => login(connectorId))\r\n\r\n        return\r\n      }\r\n\r\n      login(connectorId)\r\n    }\r\n  }, [login])\r\n}\r\n\r\nexport default useEagerConnect\r\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,wBAAwB,CAAEC,cAAc,KAAQ,oBAAoB,CAC7E,MAAO,CAAAC,OAAO,KAAM,eAAe,CAEnC,KAAM,CAAAC,qBAAqB,CAAG,KAAAA,CAAA,GAC5B,GAAI,CAAAC,OAAO,CAAQC,OAAO,EACxBC,MAAM,CAACC,cAAc,CAACC,MAAM,CAAE,cAAc,CAAE,CAC5CC,GAAGA,CAAA,CAAG,CACJ,MAAO,KAAI,CAACC,GAAG,CACjB,CAAC,CACDC,GAAGA,CAACD,GAAG,CAAE,CACP,IAAI,CAACA,GAAG,CAAGA,GAAG,CAEdL,OAAO,CAAC,CAAC,CACX,CACF,CAAC,CACH,CAAC,CAEH,KAAM,CAAAO,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAEC,KAAM,CAAC,CAAGX,OAAO,CAAC,CAAC,CAE3BH,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,WAAW,CAAGN,MAAM,CAACO,YAAY,CAACC,OAAO,CAAChB,wBAAwB,CAAmB,CAE3F,GAAIc,WAAW,CAAE,CACf,KAAM,CAAAG,uBAAuB,CAAGH,WAAW,GAAKb,cAAc,CAACiB,GAAG,CAClE,KAAM,CAAAC,qBAAqB,CAAGC,OAAO,CAACC,GAAG,CAACb,MAAM,CAAE,cAAc,CAAC,CAEjE;AACA;AACA,GAAIS,uBAAuB,EAAI,CAACE,qBAAqB,CAAE,CACrDhB,qBAAqB,CAAC,CAAC,CAACmB,IAAI,CAAC,IAAMT,KAAK,CAACC,WAAW,CAAC,CAAC,CAEtD,OACF,CAEAD,KAAK,CAACC,WAAW,CAAC,CACpB,CACF,CAAC,CAAE,CAACD,KAAK,CAAC,CAAC,CACb,CAAC,CAED,cAAe,CAAAD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}