{"ast":null,"code":"import{JSBI,Percent,Router,TradeType}from'@pancakeswap/sdk';import{useMemo}from'react';import useActiveWeb3React from'hooks/useActiveWeb3React';import{BIPS_BASE,INITIAL_ALLOWED_SLIPPAGE}from'../config/constants';import{useTransactionAdder}from'../state/transactions/hooks';import{calculateGasMargin,getRouterContract,isAddress,shortenAddress}from'../utils';import isZero from'../utils/isZero';import useTransactionDeadline from'./useTransactionDeadline';import useENS from'./ENS/useENS';export let SwapCallbackState;(function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";})(SwapCallbackState||(SwapCallbackState={}));/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param recipientAddressOrName\r\n */function useSwapCallArguments(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let// in bips\nrecipientAddressOrName// the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n=arguments.length>2?arguments[2]:undefined;const{account,chainId,library}=useActiveWeb3React();const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;const deadline=useTransactionDeadline();return useMemo(()=>{if(!trade||!recipient||!library||!account||!chainId||!deadline)return[];const contract=getRouterContract(chainId,library,account);if(!contract){return[];}const swapMethods=[];swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:false,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,deadline:deadline.toNumber()}));if(trade.tradeType===TradeType.EXACT_INPUT){swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:true,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,deadline:deadline.toNumber()}));}return swapMethods.map(parameters=>({parameters,contract}));},[account,allowedSlippage,chainId,deadline,library,recipient,trade]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let// in bips\nrecipientAddressOrName// the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n=arguments.length>2?arguments[2]:undefined;const{account,chainId,library}=useActiveWeb3React();const swapCalls=useSwapCallArguments(trade,allowedSlippage,recipientAddressOrName);const addTransaction=useTransactionAdder();const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(()=>{if(!trade||!library||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}return{state:SwapCallbackState.LOADING,callback:null,error:null};}return{state:SwapCallbackState.VALID,callback:async function onSwap(){const estimatedCalls=await Promise.all(swapCalls.map(call=>{const{parameters:{methodName,args,value},contract}=call;const options=!value||isZero(value)?{}:{value};return contract.estimateGas[methodName](...args,options).then(gasEstimate=>{return{call,gasEstimate};}).catch(gasError=>{console.error('Gas estimate failed, trying eth_call to extract error',call);return contract.callStatic[methodName](...args,options).then(result=>{console.error('Unexpected successful call after failed estimate gas',call,gasError,result);return{call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(callError=>{var _callError$data;console.error('Call threw error',call,callError);const reason=callError.reason||((_callError$data=callError.data)===null||_callError$data===void 0?void 0:_callError$data.message)||callError.message;const errorMessage=\"The transaction cannot succeed due to error: \".concat(reason!==null&&reason!==void 0?reason:'Unknown error, check the logs',\".\");return{call,error:new Error(errorMessage)};});});}));// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nconst successfulEstimation=estimatedCalls.find((el,ix,list)=>'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]));if(!successfulEstimation){const errorCalls=estimatedCalls.filter(call=>'error'in call);if(errorCalls.length>0)throw errorCalls[errorCalls.length-1].error;throw new Error('Unexpected error. Please contact support: none of the calls threw an error');}const{call:{contract,parameters:{methodName,args,value}},gasEstimate}=successfulEstimation;return contract[methodName](...args,{gasLimit:calculateGasMargin(gasEstimate),...(value&&!isZero(value)?{value,from:account}:{from:account})}).then(response=>{const inputSymbol=trade.inputAmount.currency.symbol;const outputSymbol=trade.outputAmount.currency.symbol;const inputAmount=trade.inputAmount.toSignificant(3);const outputAmount=trade.outputAmount.toSignificant(3);const base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);const withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?shortenAddress(recipientAddressOrName):recipientAddressOrName);addTransaction(response,{summary:withRecipient});return response.hash;}).catch(error=>{// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}});},error:null};},[trade,library,account,chainId,recipient,recipientAddressOrName,swapCalls,addTransaction]);}","map":{"version":3,"names":["JSBI","Percent","Router","TradeType","useMemo","useActiveWeb3React","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","useTransactionDeadline","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","arguments","length","undefined","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","deadline","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","toNumber","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","callStatic","result","Error","callError","_callError$data","reason","data","message","errorMessage","concat","successfulEstimation","find","el","ix","list","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport useTransactionDeadline from './useTransactionDeadline'\r\nimport useENS from './ENS/useENS'\r\n\r\nexport enum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID,\r\n}\r\n\r\ninterface SwapCall {\r\n  contract: Contract\r\n  parameters: SwapParameters\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n  const deadline = useTransactionDeadline()\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\r\n\r\n    const contract: Contract | null = getRouterContract(chainId, library, account)\r\n    if (!contract) {\r\n      return []\r\n    }\r\n\r\n    const swapMethods = []\r\n\r\n    swapMethods.push(\r\n      Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n        recipient,\r\n        deadline: deadline.toNumber(),\r\n      }),\r\n    )\r\n\r\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n      swapMethods.push(\r\n        Router.swapCallParameters(trade, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n          recipient,\r\n          deadline: deadline.toNumber(),\r\n        }),\r\n      )\r\n    }\r\n\r\n    return swapMethods.map((parameters) => ({ parameters, contract }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      }\r\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n    }\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map((call) => {\r\n            const {\r\n              parameters: { methodName, args, value },\r\n              contract,\r\n            } = call\r\n            const options = !value || isZero(value) ? {} : { value }\r\n\r\n            return contract.estimateGas[methodName](...args, options)\r\n              .then((gasEstimate) => {\r\n                return {\r\n                  call,\r\n                  gasEstimate,\r\n                }\r\n              })\r\n              .catch((gasError) => {\r\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return contract.callStatic[methodName](...args, options)\r\n                  .then((result) => {\r\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch((callError) => {\r\n                    console.error('Call threw error', call, callError)\r\n                    const reason: string = callError.reason || callError.data?.message || callError.message\r\n                    const errorMessage = `The transaction cannot succeed due to error: ${\r\n                      reason ?? 'Unknown error, check the logs'\r\n                    }.`\r\n\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          }),\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\r\n        )\r\n\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: {\r\n            contract,\r\n            parameters: { methodName, args, value },\r\n          },\r\n          gasEstimate,\r\n        } = successfulEstimation\r\n\r\n        return contract[methodName](...args, {\r\n          gasLimit: calculateGasMargin(gasEstimate),\r\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\r\n        })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = trade.inputAmount.toSignificant(3)\r\n            const outputAmount = trade.outputAmount.toSignificant(3)\r\n\r\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\r\n                      ? shortenAddress(recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            addTransaction(response, {\r\n              summary: withRecipient,\r\n            })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001) {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, methodName, args, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null,\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}