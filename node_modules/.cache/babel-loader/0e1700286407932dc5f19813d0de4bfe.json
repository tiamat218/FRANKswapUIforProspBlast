{"ast":null,"code":"import{useEffect,useState,useCallback}from'react';import BigNumber from'bignumber.js';import{BSC_BLOCK_TIME}from'config';import{PoolIds}from'config/constants/types';import{useBlock}from'state/block/hooks';import{useLpTokenPrice}from'state/farms/hooks';import{BIG_ZERO}from'utils/bigNumber';import{multicallv2}from'utils/multicall';import ifoV1Abi from'config/abi/ifoV1.json';import{getStatus}from'../helpers';/**\r\n * Gets all public data of an IFO\r\n */const useGetPublicIfoData=ifo=>{const{address,releaseBlockNumber}=ifo;const lpTokenPriceInUsd=useLpTokenPrice(ifo.currency.symbol);const[state,setState]=useState({status:'idle',blocksRemaining:0,secondsUntilStart:0,progress:5,secondsUntilEnd:0,startBlockNum:0,endBlockNum:0,numberPoints:null,[PoolIds.poolUnlimited]:{raisingAmountPool:BIG_ZERO,totalAmountPool:BIG_ZERO,offeringAmountPool:BIG_ZERO,// Not know\nlimitPerUserInLP:BIG_ZERO,//  Not used\ntaxRate:0,//  Not used\nsumTaxesOverflow:BIG_ZERO//  Not used\n}});const{currentBlock}=useBlock();const fetchIfoData=useCallback(async()=>{const ifoCalls=['startBlock','endBlock','raisingAmount','totalAmount'].map(method=>({address,name:method}));const[startBlock,endBlock,raisingAmount,totalAmount]=await multicallv2(ifoV1Abi,ifoCalls);const startBlockNum=startBlock?startBlock[0].toNumber():0;const endBlockNum=endBlock?endBlock[0].toNumber():0;const status=getStatus(currentBlock,startBlockNum,endBlockNum);const totalBlocks=endBlockNum-startBlockNum;const blocksRemaining=endBlockNum-currentBlock;// Calculate the total progress until finished or until start\nconst progress=currentBlock>startBlockNum?(currentBlock-startBlockNum)/totalBlocks*100:(currentBlock-releaseBlockNumber)/(startBlockNum-releaseBlockNumber)*100;setState(prev=>({status,blocksRemaining,secondsUntilStart:(startBlockNum-currentBlock)*BSC_BLOCK_TIME,progress,secondsUntilEnd:blocksRemaining*BSC_BLOCK_TIME,startBlockNum,endBlockNum,currencyPriceInUSD:null,numberPoints:null,[PoolIds.poolUnlimited]:{...prev.poolUnlimited,raisingAmountPool:raisingAmount?new BigNumber(raisingAmount[0].toString()):BIG_ZERO,totalAmountPool:totalAmount?new BigNumber(totalAmount[0].toString()):BIG_ZERO}}));},[address,currentBlock,releaseBlockNumber]);useEffect(()=>{fetchIfoData();},[fetchIfoData]);return{...state,currencyPriceInUSD:lpTokenPriceInUsd,fetchIfoData};};export default useGetPublicIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","BIG_ZERO","multicallv2","ifoV1Abi","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","currentBlock","fetchIfoData","ifoCalls","map","method","name","startBlock","endBlock","raisingAmount","totalAmount","toNumber","totalBlocks","prev","currencyPriceInUSD","toString"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v1/useGetPublicIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const { currentBlock } = useBlock()\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n    }))\r\n\r\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      status,\r\n      blocksRemaining,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      progress,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      currencyPriceInUSD: null,\r\n      numberPoints: null,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prev.poolUnlimited,\r\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}