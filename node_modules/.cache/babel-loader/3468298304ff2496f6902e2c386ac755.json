{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\CardActionsContainer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Text } from '@pancakeswap/uikit';\nimport { getAddress } from 'utils/addressHelpers';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport StakeAction from './StakeAction';\nimport HarvestAction from './HarvestAction';\nimport useApproveFarm from '../../hooks/useApproveFarm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Action = styled.div`\n  padding-top: 16px;\n`;\n_c = Action;\nconst CardActions = ({\n  farm,\n  account,\n  addLiquidityUrl\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    pid,\n    lpAddresses\n  } = farm;\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0\n  } = farm.userData || {};\n  const allowance = new BigNumber(allowanceAsString);\n  const tokenBalance = new BigNumber(tokenBalanceAsString);\n  const stakedBalance = new BigNumber(stakedBalanceAsString);\n  const earnings = new BigNumber(earningsAsString);\n  const lpAddress = getAddress(lpAddresses);\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const dispatch = useAppDispatch();\n  const lpContract = useERC20(lpAddress);\n  const {\n    onApprove\n  } = useApproveFarm(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids: [pid]\n      }));\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, dispatch, account, pid]);\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? /*#__PURE__*/_jsxDEV(StakeAction, {\n      stakedBalance: stakedBalance,\n      tokenBalance: tokenBalance,\n      tokenName: farm.lpSymbol,\n      pid: pid,\n      addLiquidityUrl: addLiquidityUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      width: \"100%\",\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      children: t('Enable Contract')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Action, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: \"CAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HarvestAction, {\n      earnings: earnings,\n      pid: pid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: farm.lpSymbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n      mt: \"8px\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this) : renderApprovalOrStakeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CardActions, \"IqZAhQLNMiP2soOvZtMeLXA+3jE=\", false, function () {\n  return [useTranslation, useAppDispatch, useERC20, useApproveFarm];\n});\n_c2 = CardActions;\nexport default CardActions;\nvar _c, _c2;\n$RefreshReg$(_c, \"Action\");\n$RefreshReg$(_c2, \"CardActions\");","map":{"version":3,"names":["React","useState","useCallback","styled","BigNumber","Button","Flex","Text","getAddress","useAppDispatch","fetchFarmUserDataAsync","useTranslation","useERC20","ConnectWalletButton","StakeAction","HarvestAction","useApproveFarm","jsxDEV","_jsxDEV","Action","div","_c","CardActions","farm","account","addLiquidityUrl","_s","t","requestedApproval","setRequestedApproval","pid","lpAddresses","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","earnings","earningsAsString","userData","lpAddress","isApproved","isGreaterThan","dispatch","lpContract","onApprove","handleApprove","pids","e","console","error","renderApprovalOrStakeButton","tokenName","lpSymbol","fileName","_jsxFileName","lineNumber","columnNumber","mt","width","disabled","onClick","children","bold","textTransform","color","fontSize","pr","_c2","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/FarmCard/CardActionsContainer.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}