{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\ViewTicketsModal\\\\PreviousRoundTicketsInner.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Box, Text, Flex, Button, Skeleton, Ticket, PresentWonIcon, TooltipText, InfoIcon, useTooltip, useModal } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useWeb3React } from '@web3-react/core';\nimport { fetchLottery } from 'state/lottery/helpers';\nimport { getWinningTickets } from 'state/lottery/fetchUnclaimedUserRewards';\nimport { fetchUserTicketsForOneRound } from 'state/lottery/getUserTicketsData';\nimport { useGetUserLotteryGraphRoundById } from 'state/lottery/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport WinningNumbers from '../WinningNumbers';\nimport { processLotteryResponse } from '../../helpers';\nimport TicketNumber from '../TicketNumber';\nimport ClaimPrizesModal from '../ClaimPrizesModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TopBox = styled(Flex)`\n  flex-direction: column;\n  margin: -24px;\n  padding: 24px;\n  background-color: ${({\n  theme\n}) => theme.colors.dropdown};\n  border-bottom: 1px solid ${({\n  theme\n}) => theme.colors.cardBorder};\n`;\n_c = TopBox;\nconst ScrollBox = styled(Box)`\n  margin-right: -20px;\n  padding-right: 24px;\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-top: 24px;\n`;\n_c2 = ScrollBox;\n\nconst TicketSkeleton = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"32px\",\n      height: \"12px\",\n      mt: \"2px\",\n      mb: \"4px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: \"34px\",\n      mb: \"12px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c3 = TicketSkeleton;\n\nconst PreviousRoundTicketsInner = ({\n  roundId\n}) => {\n  _s();\n\n  var _userWinningTickets$a;\n\n  const [lotteryInfo, setLotteryInfo] = useState(null);\n  const [allUserTickets, setAllUserTickets] = useState(null);\n  const [userWinningTickets, setUserWinningTickets] = useState({\n    allWinningTickets: null,\n    ticketsWithUnclaimedRewards: null,\n    isFetched: false,\n    claimData: null\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    totalTickets\n  } = useGetUserLotteryGraphRoundById(roundId);\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimPrizesModal, {\n    roundsToClaim: [userWinningTickets.claimData]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 42\n  }, this), false);\n\n  const TooltipComponent = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: \"16px\",\n      children: t('Tickets must match the winning number in the exact same order, starting from the first digit.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mb: \"16px\",\n      children: t('If the winning number is “123456”:')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mb: \"4px\",\n      children: t('“120000” matches the first 2 digits.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('“000006” matches the last digit, but since the first five digits are wrong, it doesn’t win any prizes.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(TooltipComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 61\n  }, this), {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10]\n  });\n  useEffect(() => {\n    const addWinningTicketInfoToAllTickets = (_allTickets, _allWinningTickets) => {\n      const allTicketsWithWinningTickets = _allTickets.map(ticket => {\n        const winningTicketEquivalent = _allWinningTickets.find(winningTicket => winningTicket.id === ticket.id);\n\n        if (winningTicketEquivalent) {\n          return winningTicketEquivalent;\n        }\n\n        return ticket;\n      });\n\n      return allTicketsWithWinningTickets;\n    };\n\n    const sortTicketsByWinningBracket = tickets => {\n      return tickets.sort((ticketA, ticketB) => {\n        const rewardBracket1 = ticketA.rewardBracket === undefined ? 0 : ticketA.rewardBracket + 1;\n        const rewardBracket2 = ticketB.rewardBracket === undefined ? 0 : ticketB.rewardBracket + 1;\n        return rewardBracket2 - rewardBracket1;\n      });\n    };\n\n    const fetchData = async () => {\n      const userTickets = await fetchUserTicketsForOneRound(account, roundId);\n      const lotteryData = await fetchLottery(roundId);\n      const processedLotteryData = processLotteryResponse(lotteryData);\n      const winningTickets = await getWinningTickets({\n        roundId,\n        userTickets,\n        finalNumber: processedLotteryData.finalNumber.toString()\n      });\n      setUserWinningTickets({\n        isFetched: true,\n        allWinningTickets: winningTickets === null || winningTickets === void 0 ? void 0 : winningTickets.allWinningTickets,\n        ticketsWithUnclaimedRewards: winningTickets === null || winningTickets === void 0 ? void 0 : winningTickets.ticketsWithUnclaimedRewards,\n        claimData: winningTickets\n      });\n      setLotteryInfo(processedLotteryData); // If the user has some winning tickets - modify the userTickets response to include that data\n\n      if (winningTickets === null || winningTickets === void 0 ? void 0 : winningTickets.allWinningTickets) {\n        const allTicketsWithWinningTicketInfo = addWinningTicketInfoToAllTickets(userTickets, winningTickets.allWinningTickets);\n        const ticketsSortedByWinners = sortTicketsByWinningBracket(allTicketsWithWinningTicketInfo);\n        setAllUserTickets(ticketsSortedByWinners);\n      } else {\n        setAllUserTickets(userTickets);\n      }\n    };\n\n    fetchData();\n  }, [roundId, account, totalTickets]);\n\n  const getFooter = () => {\n    var _userWinningTickets$t;\n\n    if ((userWinningTickets === null || userWinningTickets === void 0 ? void 0 : (_userWinningTickets$t = userWinningTickets.ticketsWithUnclaimedRewards) === null || _userWinningTickets$t === void 0 ? void 0 : _userWinningTickets$t.length) > 0) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onPresentClaimModal,\n        mt: \"24px\",\n        width: \"100%\",\n        children: t('Collect Prizes')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (!userWinningTickets.allWinningTickets) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: targetRef,\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          mt: \"20px\",\n          children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n            height: \"20px\",\n            width: \"20px\",\n            color: \"textSubtle\",\n            mr: \"8px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TooltipText, {\n            color: \"textSubtle\",\n            children: t(\"Why didn't I win?\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TopBox, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        mb: \"4px\",\n        children: t('Winning number')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), (lotteryInfo === null || lotteryInfo === void 0 ? void 0 : lotteryInfo.finalNumber) ? /*#__PURE__*/_jsxDEV(WinningNumbers, {\n        number: lotteryInfo.finalNumber.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"230px\",\n        height: \"34px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScrollBox, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        my: \"16px\",\n        children: t('Your tickets')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Ticket, {\n            width: \"24px\",\n            height: \"24px\",\n            mr: \"8px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            color: \"text\",\n            children: [t('Total tickets'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          color: \"text\",\n          children: allUserTickets ? allUserTickets.length : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"56px\",\n            height: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"24px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(PresentWonIcon, {\n            width: \"24px\",\n            height: \"24px\",\n            mr: \"8px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            color: \"text\",\n            children: [t('Winning tickets'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          color: \"text\",\n          children: userWinningTickets.isFetched ? (userWinningTickets === null || userWinningTickets === void 0 ? void 0 : (_userWinningTickets$a = userWinningTickets.allWinningTickets) === null || _userWinningTickets$a === void 0 ? void 0 : _userWinningTickets$a.length) || '0' : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"40px\",\n            height: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), allUserTickets ? allUserTickets.map(ticket => {\n        return /*#__PURE__*/_jsxDEV(TicketNumber, {\n          id: ticket.id,\n          number: ticket.number,\n          rewardBracket: ticket.rewardBracket,\n          status: ticket.status\n        }, ticket.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TicketSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TicketSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TicketSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TicketSkeleton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      borderTop: `1px solid ${theme.colors.cardBorder}`,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: userWinningTickets.isFetched && getFooter()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PreviousRoundTicketsInner, \"pV49shPSn3oKjN2ybG+Dj8fGrAI=\", false, function () {\n  return [useTranslation, useTheme, useWeb3React, useGetUserLotteryGraphRoundById, useModal, useTooltip];\n});\n\n_c4 = PreviousRoundTicketsInner;\nexport default PreviousRoundTicketsInner;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"TopBox\");\n$RefreshReg$(_c2, \"ScrollBox\");\n$RefreshReg$(_c3, \"TicketSkeleton\");\n$RefreshReg$(_c4, \"PreviousRoundTicketsInner\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/ViewTicketsModal/PreviousRoundTicketsInner.tsx"],"names":["React","useEffect","useState","Box","Text","Flex","Button","Skeleton","Ticket","PresentWonIcon","TooltipText","InfoIcon","useTooltip","useModal","styled","useWeb3React","fetchLottery","getWinningTickets","fetchUserTicketsForOneRound","useGetUserLotteryGraphRoundById","useTranslation","useTheme","WinningNumbers","processLotteryResponse","TicketNumber","ClaimPrizesModal","TopBox","theme","colors","dropdown","cardBorder","ScrollBox","TicketSkeleton","PreviousRoundTicketsInner","roundId","lotteryInfo","setLotteryInfo","allUserTickets","setAllUserTickets","userWinningTickets","setUserWinningTickets","allWinningTickets","ticketsWithUnclaimedRewards","isFetched","claimData","t","account","totalTickets","onPresentClaimModal","TooltipComponent","targetRef","tooltip","tooltipVisible","placement","tooltipOffset","addWinningTicketInfoToAllTickets","_allTickets","_allWinningTickets","allTicketsWithWinningTickets","map","ticket","winningTicketEquivalent","find","winningTicket","id","sortTicketsByWinningBracket","tickets","sort","ticketA","ticketB","rewardBracket1","rewardBracket","undefined","rewardBracket2","fetchData","userTickets","lotteryData","processedLotteryData","winningTickets","finalNumber","toString","allTicketsWithWinningTicketInfo","ticketsSortedByWinners","getFooter","length","number","status"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Button,\r\n  Skeleton,\r\n  Ticket,\r\n  PresentWonIcon,\r\n  TooltipText,\r\n  InfoIcon,\r\n  useTooltip,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { fetchLottery } from 'state/lottery/helpers'\r\nimport { getWinningTickets } from 'state/lottery/fetchUnclaimedUserRewards'\r\nimport { fetchUserTicketsForOneRound } from 'state/lottery/getUserTicketsData'\r\nimport { LotteryRound } from 'state/types'\r\nimport { useGetUserLotteryGraphRoundById } from 'state/lottery/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport WinningNumbers from '../WinningNumbers'\r\nimport { processLotteryResponse } from '../../helpers'\r\nimport TicketNumber from '../TicketNumber'\r\nimport ClaimPrizesModal from '../ClaimPrizesModal'\r\n\r\nconst TopBox = styled(Flex)`\r\n  flex-direction: column;\r\n  margin: -24px;\r\n  padding: 24px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst ScrollBox = styled(Box)`\r\n  margin-right: -20px;\r\n  padding-right: 24px;\r\n  max-height: 300px;\r\n  overflow-y: scroll;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TicketSkeleton = () => {\r\n  return (\r\n    <>\r\n      <Skeleton width=\"32px\" height=\"12px\" mt=\"2px\" mb=\"4px\" />\r\n      <Skeleton width=\"100%\" height=\"34px\" mb=\"12px\" />\r\n    </>\r\n  )\r\n}\r\n\r\nconst PreviousRoundTicketsInner: React.FC<{ roundId: string }> = ({ roundId }) => {\r\n  const [lotteryInfo, setLotteryInfo] = useState<LotteryRound>(null)\r\n  const [allUserTickets, setAllUserTickets] = useState<LotteryTicket[]>(null)\r\n  const [userWinningTickets, setUserWinningTickets] = useState<{\r\n    allWinningTickets: LotteryTicket[]\r\n    ticketsWithUnclaimedRewards: LotteryTicket[]\r\n    isFetched: boolean\r\n    claimData: LotteryTicketClaimData\r\n  }>({ allWinningTickets: null, ticketsWithUnclaimedRewards: null, isFetched: false, claimData: null })\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { totalTickets } = useGetUserLotteryGraphRoundById(roundId)\r\n  const [onPresentClaimModal] = useModal(<ClaimPrizesModal roundsToClaim={[userWinningTickets.claimData]} />, false)\r\n\r\n  const TooltipComponent = () => (\r\n    <>\r\n      <Text mb=\"16px\">\r\n        {t('Tickets must match the winning number in the exact same order, starting from the first digit.')}\r\n      </Text>\r\n      <Text mb=\"16px\">{t('If the winning number is “123456”:')}</Text>\r\n      <Text mb=\"4px\">{t('“120000” matches the first 2 digits.')}</Text>\r\n      <Text>\r\n        {t('“000006” matches the last digit, but since the first five digits are wrong, it doesn’t win any prizes.')}\r\n      </Text>\r\n    </>\r\n  )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  useEffect(() => {\r\n    const addWinningTicketInfoToAllTickets = (\r\n      _allTickets: LotteryTicket[],\r\n      _allWinningTickets: LotteryTicket[],\r\n    ): LotteryTicket[] => {\r\n      const allTicketsWithWinningTickets = _allTickets.map((ticket) => {\r\n        const winningTicketEquivalent = _allWinningTickets.find((winningTicket) => winningTicket.id === ticket.id)\r\n        if (winningTicketEquivalent) {\r\n          return winningTicketEquivalent\r\n        }\r\n        return ticket\r\n      })\r\n      return allTicketsWithWinningTickets\r\n    }\r\n\r\n    const sortTicketsByWinningBracket = (tickets) => {\r\n      return tickets.sort((ticketA, ticketB) => {\r\n        const rewardBracket1 = ticketA.rewardBracket === undefined ? 0 : ticketA.rewardBracket + 1\r\n        const rewardBracket2 = ticketB.rewardBracket === undefined ? 0 : ticketB.rewardBracket + 1\r\n        return rewardBracket2 - rewardBracket1\r\n      })\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      const userTickets = await fetchUserTicketsForOneRound(account, roundId)\r\n      const lotteryData = await fetchLottery(roundId)\r\n      const processedLotteryData = processLotteryResponse(lotteryData)\r\n      const winningTickets = await getWinningTickets({\r\n        roundId,\r\n        userTickets,\r\n        finalNumber: processedLotteryData.finalNumber.toString(),\r\n      })\r\n\r\n      setUserWinningTickets({\r\n        isFetched: true,\r\n        allWinningTickets: winningTickets?.allWinningTickets,\r\n        ticketsWithUnclaimedRewards: winningTickets?.ticketsWithUnclaimedRewards,\r\n        claimData: winningTickets,\r\n      })\r\n      setLotteryInfo(processedLotteryData)\r\n\r\n      // If the user has some winning tickets - modify the userTickets response to include that data\r\n      if (winningTickets?.allWinningTickets) {\r\n        const allTicketsWithWinningTicketInfo = addWinningTicketInfoToAllTickets(\r\n          userTickets,\r\n          winningTickets.allWinningTickets,\r\n        )\r\n        const ticketsSortedByWinners = sortTicketsByWinningBracket(allTicketsWithWinningTicketInfo)\r\n        setAllUserTickets(ticketsSortedByWinners)\r\n      } else {\r\n        setAllUserTickets(userTickets)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [roundId, account, totalTickets])\r\n\r\n  const getFooter = () => {\r\n    if (userWinningTickets?.ticketsWithUnclaimedRewards?.length > 0) {\r\n      return (\r\n        <Button onClick={onPresentClaimModal} mt=\"24px\" width=\"100%\">\r\n          {t('Collect Prizes')}\r\n        </Button>\r\n      )\r\n    }\r\n    if (!userWinningTickets.allWinningTickets) {\r\n      return (\r\n        <div ref={targetRef}>\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" mt=\"20px\">\r\n            <InfoIcon height=\"20px\" width=\"20px\" color=\"textSubtle\" mr=\"8px\" />\r\n            <TooltipText color=\"textSubtle\">{t(\"Why didn't I win?\")}</TooltipText>\r\n          </Flex>\r\n        </div>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TopBox>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" mb=\"4px\">\r\n          {t('Winning number')}\r\n        </Text>\r\n        {lotteryInfo?.finalNumber ? (\r\n          <WinningNumbers number={lotteryInfo.finalNumber.toString()} />\r\n        ) : (\r\n          <Skeleton width=\"230px\" height=\"34px\" />\r\n        )}\r\n      </TopBox>\r\n      <ScrollBox>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" my=\"16px\">\r\n          {t('Your tickets')}\r\n        </Text>\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <Ticket width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n            <Text bold color=\"text\">\r\n              {t('Total tickets')}:\r\n            </Text>\r\n          </Flex>\r\n          <Text bold color=\"text\">\r\n            {allUserTickets ? allUserTickets.length : <Skeleton width=\"56px\" height=\"24px\" />}\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <PresentWonIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n            <Text bold color=\"text\">\r\n              {t('Winning tickets')}:\r\n            </Text>\r\n          </Flex>\r\n          <Text bold color=\"text\">\r\n            {userWinningTickets.isFetched ? (\r\n              userWinningTickets?.allWinningTickets?.length || '0'\r\n            ) : (\r\n              <Skeleton width=\"40px\" height=\"24px\" />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n        {allUserTickets ? (\r\n          allUserTickets.map((ticket) => {\r\n            return (\r\n              <TicketNumber\r\n                key={ticket.id}\r\n                id={ticket.id}\r\n                number={ticket.number}\r\n                rewardBracket={ticket.rewardBracket}\r\n                status={ticket.status}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <>\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n            <TicketSkeleton />\r\n          </>\r\n        )}\r\n      </ScrollBox>\r\n      <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} alignItems=\"center\" justifyContent=\"center\">\r\n        {userWinningTickets.isFetched && getFooter()}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundTicketsInner\r\n"]},"metadata":{},"sourceType":"module"}