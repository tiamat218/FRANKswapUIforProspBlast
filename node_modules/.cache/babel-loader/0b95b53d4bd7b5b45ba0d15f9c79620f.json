{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Helmet } from 'react-helmet-async';\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit';\nimport { useAppDispatch } from 'state';\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/hooks';\nimport { useInitialBlock } from 'state/block/hooks';\nimport { initializePredictions } from 'state/predictions';\nimport { PredictionStatus } from 'state/types';\nimport usePersistState from 'hooks/usePersistState';\nimport PageLoader from 'components/Loader/PageLoader';\nimport usePollOraclePrice from './hooks/usePollOraclePrice';\nimport usePollPredictions from './hooks/usePollPredictions';\nimport Container from './components/Container';\nimport CollectWinningsPopup from './components/CollectWinningsPopup';\nimport SwiperProvider from './context/SwiperProvider';\nimport Desktop from './Desktop';\nimport Mobile from './Mobile';\nimport RiskDisclaimer from './components/RiskDisclaimer';\nimport ChartDisclaimer from './components/ChartDisclaimer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Predictions = () => {\n  _s();\n  const {\n    isXl\n  } = useMatchBreakpoints();\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk'\n  });\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart'\n  });\n  const {\n    account\n  } = useWeb3React();\n  const status = useGetPredictionsStatus();\n  const isChartPaneOpen = useIsChartPaneOpen();\n  const dispatch = useAppDispatch();\n  const initialBlock = useInitialBlock();\n  const isDesktop = isXl;\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true);\n  const handleAcceptChart = () => setHasAcceptedChart(true);\n  const [onPresentRiskDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(RiskDisclaimer, {\n    onSuccess: handleAcceptRiskSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 46\n  }, this), false);\n  const [onPresentChartDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(ChartDisclaimer, {\n    onSuccess: handleAcceptChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 47\n  }, this), false);\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer);\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer);\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current();\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef]);\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current();\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen]);\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account));\n    }\n  }, [initialBlock, dispatch, account]);\n  usePollPredictions();\n  usePollOraclePrice();\n  if (status === PredictionStatus.INITIAL) {\n    return /*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"https://s3.tradingview.com/tv.js\",\n        type: \"text/javascript\",\n        id: \"tradingViewWidget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwiperProvider, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [isDesktop ? /*#__PURE__*/_jsxDEV(Desktop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Mobile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(CollectWinningsPopup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Predictions, \"b49upazuDdq85Xqlio63t4v8Eb4=\", false, function () {\n  return [useMatchBreakpoints, usePersistState, usePersistState, useWeb3React, useGetPredictionsStatus, useIsChartPaneOpen, useAppDispatch, useInitialBlock, useModal, useModal, usePollPredictions, usePollOraclePrice];\n});\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useEffect","useRef","useWeb3React","Helmet","useMatchBreakpoints","useModal","useAppDispatch","useGetPredictionsStatus","useIsChartPaneOpen","useInitialBlock","initializePredictions","PredictionStatus","usePersistState","PageLoader","usePollOraclePrice","usePollPredictions","Container","CollectWinningsPopup","SwiperProvider","Desktop","Mobile","RiskDisclaimer","ChartDisclaimer","jsxDEV","_jsxDEV","Fragment","_Fragment","Predictions","_s","isXl","hasAcceptedRisk","setHasAcceptedRisk","localStorageKey","hasAcceptedChart","setHasAcceptedChart","account","status","isChartPaneOpen","dispatch","initialBlock","isDesktop","handleAcceptRiskSuccess","handleAcceptChart","onPresentRiskDisclaimer","onSuccess","fileName","_jsxFileName","lineNumber","columnNumber","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","current","INITIAL","children","src","type","id","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/index.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/hooks'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk',\r\n  })\r\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_chart',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const isDesktop = isXl\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const handleAcceptChart = () => setHasAcceptedChart(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedChart && isChartPaneOpen) {\r\n      onPresentChartDisclaimerRef.current()\r\n    }\r\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}