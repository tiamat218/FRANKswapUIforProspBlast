{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport { CancelledError, retry, RetryableError } from './retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { errorFetchingMulticallResults, fetchingMulticallResults, parseCallKey, updateMulticallResults } from './actions';\nimport chunkArray from './chunkArray'; // chunk calls so we do not exceed the gas limit\n\nconst CALL_CHUNK_SIZE = 500;\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\n\nasync function fetchChunk(multicallContract, chunk, minBlockNumber) {\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n  let resultsBlockNumber;\n  let returnData;\n\n  try {\n    // prettier-ignore\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(chunk.map(obj => [obj.address, obj.callData]));\n  } catch (error) {\n    console.debug('Failed to fetch chunk inside retry', error);\n    throw error;\n  }\n\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\n    throw new RetryableError('Fetched for old block number');\n  }\n\n  return {\n    results: returnData,\n    blockNumber: resultsBlockNumber.toNumber()\n  };\n}\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\n\n\nexport function activeListeningKeys(allListeners, chainId) {\n  if (!allListeners || !chainId) return {};\n  const listeners = allListeners[chainId];\n  if (!listeners) return {};\n  return Object.keys(listeners).reduce((memo, callKey) => {\n    const keyListeners = listeners[callKey];\n    memo[callKey] = Object.keys(keyListeners).filter(key => {\n      const blocksPerFetch = parseInt(key);\n      if (blocksPerFetch <= 0) return false;\n      return keyListeners[blocksPerFetch] > 0;\n    }).reduce((previousMin, current) => {\n      return Math.min(previousMin, parseInt(current));\n    }, Infinity);\n    return memo;\n  }, {});\n}\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */\n\nexport function outdatedListeningKeys(callResults, listeningKeys, chainId, latestBlockNumber) {\n  if (!chainId || !latestBlockNumber) return [];\n  const results = callResults[chainId]; // no results at all, load everything\n\n  if (!results) return Object.keys(listeningKeys);\n  return Object.keys(listeningKeys).filter(callKey => {\n    const blocksPerFetch = listeningKeys[callKey];\n    const data = callResults[chainId][callKey]; // no data, must fetch\n\n    if (!data) return true;\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1); // already fetching it for a recent enough block, don't refetch it\n\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false; // if data is older than minDataBlockNumber, fetch it\n\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\nexport default function Updater() {\n  _s();\n\n  const dispatch = useDispatch();\n  const state = useSelector(s => s.multicall); // wait for listeners to settle before triggering updates\n\n  const debouncedListeners = useDebounce(state.callListeners, 100);\n  const latestBlockNumber = useBlockNumber();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const multicallContract = useMulticallContract();\n  const cancellations = useRef();\n  const listeningKeys = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n  const serializedOutdatedCallKeys = useMemo(() => JSON.stringify(unserializedOutdatedCallKeys.sort()), [unserializedOutdatedCallKeys]);\n  useEffect(() => {\n    var _cancellations$curren;\n\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n    const outdatedCallKeys = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    const calls = outdatedCallKeys.map(key => parseCallKey(key));\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n\n    if (((_cancellations$curren = cancellations.current) === null || _cancellations$curren === void 0 ? void 0 : _cancellations$curren.blockNumber) !== latestBlockNumber) {\n      var _cancellations$curren2, _cancellations$curren3;\n\n      (_cancellations$curren2 = cancellations.current) === null || _cancellations$curren2 === void 0 ? void 0 : (_cancellations$curren3 = _cancellations$curren2.cancellations) === null || _cancellations$curren3 === void 0 ? void 0 : _cancellations$curren3.forEach(c => c());\n    }\n\n    dispatch(fetchingMulticallResults({\n      calls,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber\n    }));\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk, index) => {\n        const {\n          cancel,\n          promise\n        } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\n          n: Infinity,\n          minWait: 2500,\n          maxWait: 3500\n        });\n        promise.then(({\n          results: returnData,\n          blockNumber: fetchBlockNumber\n        }) => {\n          cancellations.current = {\n            cancellations: [],\n            blockNumber: latestBlockNumber\n          }; // accumulates the length of all previous indices\n\n          const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce((memo, curr) => memo + curr.length, 0);\n          const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n          dispatch(updateMulticallResults({\n            chainId,\n            results: outdatedCallKeys.slice(firstCallKeyIndex, lastCallKeyIndex).reduce((memo, callKey, i) => {\n              var _returnData$i;\n\n              memo[callKey] = (_returnData$i = returnData[i]) !== null && _returnData$i !== void 0 ? _returnData$i : null;\n              return memo;\n            }, {}),\n            blockNumber: fetchBlockNumber\n          }));\n        }).catch(error => {\n          if (error instanceof CancelledError) {\n            console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n            return;\n          }\n\n          console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n          dispatch(errorFetchingMulticallResults({\n            calls: chunk,\n            chainId,\n            fetchingBlockNumber: latestBlockNumber\n          }));\n        });\n        return cancel;\n      })\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n  return null;\n}\n\n_s(Updater, \"xpRD+AhDwmTdNwtyGSlpafZt7S0=\", false, function () {\n  return [useDispatch, useSelector, useDebounce, useBlockNumber, useActiveWeb3React, useMulticallContract];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/multicall/updater.tsx"],"names":["useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","chunkArray","CALL_CHUNK_SIZE","fetchChunk","multicallContract","chunk","minBlockNumber","console","debug","resultsBlockNumber","returnData","aggregate","map","obj","address","callData","error","toNumber","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","Object","keys","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","s","multicall","debouncedListeners","callListeners","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","outdatedCallKeys","parse","length","calls","chunkedCalls","forEach","c","index","cancel","promise","n","minWait","maxWait","then","fetchBlockNumber","firstCallKeyIndex","slice","curr","lastCallKeyIndex","i","catch"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport useDebounce from '../../hooks/useDebounce'\r\nimport { CancelledError, retry, RetryableError } from './retry'\r\nimport { useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  Call,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  parseCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\nimport chunkArray from './chunkArray'\r\n\r\n// chunk calls so we do not exceed the gas limit\r\nconst CALL_CHUNK_SIZE = 500\r\n\r\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\r\nasync function fetchChunk(\r\n  multicallContract: Contract,\r\n  chunk: Call[],\r\n  minBlockNumber: number,\r\n): Promise<{ results: string[]; blockNumber: number }> {\r\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\r\n  let resultsBlockNumber\r\n  let returnData\r\n  try {\r\n    // prettier-ignore\r\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\r\n      chunk.map((obj) => [obj.address, obj.callData])\r\n    )\r\n  } catch (error) {\r\n    console.debug('Failed to fetch chunk inside retry', error)\r\n    throw error\r\n  }\r\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\r\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\r\n    throw new RetryableError('Fetched for old block number')\r\n  }\r\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\r\n}\r\n\r\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\r\nexport function activeListeningKeys(\r\n  allListeners: AppState['multicall']['callListeners'],\r\n  chainId?: number,\r\n): { [callKey: string]: number } {\r\n  if (!allListeners || !chainId) return {}\r\n  const listeners = allListeners[chainId]\r\n  if (!listeners) return {}\r\n\r\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\r\n    const keyListeners = listeners[callKey]\r\n\r\n    memo[callKey] = Object.keys(keyListeners)\r\n      .filter((key) => {\r\n        const blocksPerFetch = parseInt(key)\r\n        if (blocksPerFetch <= 0) return false\r\n        return keyListeners[blocksPerFetch] > 0\r\n      })\r\n      .reduce((previousMin, current) => {\r\n        return Math.min(previousMin, parseInt(current))\r\n      }, Infinity)\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */\r\nexport function outdatedListeningKeys(\r\n  callResults: AppState['multicall']['callResults'],\r\n  listeningKeys: { [callKey: string]: number },\r\n  chainId: number | undefined,\r\n  latestBlockNumber: number | undefined,\r\n): string[] {\r\n  if (!chainId || !latestBlockNumber) return []\r\n  const results = callResults[chainId]\r\n  // no results at all, load everything\r\n  if (!results) return Object.keys(listeningKeys)\r\n\r\n  return Object.keys(listeningKeys).filter((callKey) => {\r\n    const blocksPerFetch = listeningKeys[callKey]\r\n\r\n    const data = callResults[chainId][callKey]\r\n    // no data, must fetch\r\n    if (!data) return true\r\n\r\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\r\n\r\n    // already fetching it for a recent enough block, don't refetch it\r\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\r\n\r\n    // if data is older than minDataBlockNumber, fetch it\r\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\r\n  })\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\r\n  // wait for listeners to settle before triggering updates\r\n  const debouncedListeners = useDebounce(state.callListeners, 100)\r\n  const latestBlockNumber = useBlockNumber()\r\n  const { chainId } = useActiveWeb3React()\r\n  const multicallContract = useMulticallContract()\r\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\r\n\r\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\r\n    return activeListeningKeys(debouncedListeners, chainId)\r\n  }, [debouncedListeners, chainId])\r\n\r\n  const unserializedOutdatedCallKeys = useMemo(() => {\r\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\r\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\r\n\r\n  const serializedOutdatedCallKeys = useMemo(\r\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\r\n    [unserializedOutdatedCallKeys],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!latestBlockNumber || !chainId || !multicallContract) return\r\n\r\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\r\n    if (outdatedCallKeys.length === 0) return\r\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\r\n\r\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\r\n\r\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\r\n      cancellations.current?.cancellations?.forEach((c) => c())\r\n    }\r\n\r\n    dispatch(\r\n      fetchingMulticallResults({\r\n        calls,\r\n        chainId,\r\n        fetchingBlockNumber: latestBlockNumber,\r\n      }),\r\n    )\r\n\r\n    cancellations.current = {\r\n      blockNumber: latestBlockNumber,\r\n      cancellations: chunkedCalls.map((chunk, index) => {\r\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\r\n          n: Infinity,\r\n          minWait: 2500,\r\n          maxWait: 3500,\r\n        })\r\n        promise\r\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\r\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber }\r\n\r\n            // accumulates the length of all previous indices\r\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\r\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\r\n\r\n            dispatch(\r\n              updateMulticallResults({\r\n                chainId,\r\n                results: outdatedCallKeys\r\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\r\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\r\n                    memo[callKey] = returnData[i] ?? null\r\n                    return memo\r\n                  }, {}),\r\n                blockNumber: fetchBlockNumber,\r\n              }),\r\n            )\r\n          })\r\n          .catch((error: any) => {\r\n            if (error instanceof CancelledError) {\r\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber)\r\n              return\r\n            }\r\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\r\n            dispatch(\r\n              errorFetchingMulticallResults({\r\n                calls: chunk,\r\n                chainId,\r\n                fetchingBlockNumber: latestBlockNumber,\r\n              }),\r\n            )\r\n          })\r\n        return cancel\r\n      }),\r\n    }\r\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}