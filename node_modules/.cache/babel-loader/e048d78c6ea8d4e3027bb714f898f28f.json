{"ast":null,"code":"import{parseUnits}from'@ethersproject/units';import{CurrencyAmount,ETHER,JSBI,Token,TokenAmount}from'@pancakeswap/sdk';import{useCallback,useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import useENS from'hooks/ENS/useENS';import useActiveWeb3React from'hooks/useActiveWeb3React';import{useCurrency}from'hooks/Tokens';import{useTradeExactIn,useTradeExactOut}from'hooks/Trades';import useParsedQueryString from'hooks/useParsedQueryString';import{useTranslation}from'contexts/Localization';import{isAddress}from'utils';import{computeSlippageAdjustedAmounts}from'utils/prices';import{useCurrencyBalances}from'../wallet/hooks';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import{useUserSlippageTolerance}from'../user/hooks';export function useSwapState(){return useSelector(state=>state.swap);}export function useSwapActionHandlers(){const dispatch=useDispatch();const onCurrencySelection=useCallback((field,currency)=>{dispatch(selectCurrency({field,currencyId:currency instanceof Token?currency.address:currency===ETHER?'BNB':''}));},[dispatch]);const onSwitchTokens=useCallback(()=>{dispatch(switchCurrencies());},[dispatch]);const onUserInput=useCallback((field,typedValue)=>{dispatch(typeInput({field,typedValue}));},[dispatch]);const onChangeRecipient=useCallback(recipient=>{dispatch(setRecipient({recipient}));},[dispatch]);return{onSwitchTokens,onCurrencySelection,onUserInput,onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return undefined;}try{const typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return currency instanceof Token?new TokenAmount(currency,JSBI.BigInt(typedValueParsed)):CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn undefined;}const BAD_RECIPIENT_ADDRESSES=[];/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */function involvesAddress(trade,checksummedAddress){return trade.route.path.some(token=>token.address===checksummedAddress)||trade.route.pairs.some(pair=>pair.liquidityToken.address===checksummedAddress);}// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(){var _ref,_ref2;const{account}=useActiveWeb3React();const{t}=useTranslation();const{independentField,typedValue,[Field.INPUT]:{currencyId:inputCurrencyId},[Field.OUTPUT]:{currencyId:outputCurrencyId},recipient}=useSwapState();const inputCurrency=useCurrency(inputCurrencyId);const outputCurrency=useCurrency(outputCurrencyId);const recipientLookup=useENS(recipient!==null&&recipient!==void 0?recipient:undefined);const to=(_ref=recipient===null?account:recipientLookup.address)!==null&&_ref!==void 0?_ref:null;const relevantTokenBalances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined]);const isExactIn=independentField===Field.INPUT;const parsedAmount=tryParseAmount(typedValue,(_ref2=isExactIn?inputCurrency:outputCurrency)!==null&&_ref2!==void 0?_ref2:undefined);const bestTradeExactIn=useTradeExactIn(isExactIn?parsedAmount:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined);const bestTradeExactOut=useTradeExactOut(inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,!isExactIn?parsedAmount:undefined);const v2Trade=isExactIn?bestTradeExactIn:bestTradeExactOut;const currencyBalances={[Field.INPUT]:relevantTokenBalances[0],[Field.OUTPUT]:relevantTokenBalances[1]};const currencies={[Field.INPUT]:inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,[Field.OUTPUT]:outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined};let inputError;if(!account){inputError=t('Connect Wallet');}if(!parsedAmount){var _inputError;inputError=(_inputError=inputError)!==null&&_inputError!==void 0?_inputError:t('Enter an amount');}if(!currencies[Field.INPUT]||!currencies[Field.OUTPUT]){var _inputError2;inputError=(_inputError2=inputError)!==null&&_inputError2!==void 0?_inputError2:t('Select a token');}const formattedTo=isAddress(to);if(!to||!formattedTo){var _inputError3;inputError=(_inputError3=inputError)!==null&&_inputError3!==void 0?_inputError3:t('Enter a recipient');}else if(BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo)!==-1||bestTradeExactIn&&involvesAddress(bestTradeExactIn,formattedTo)||bestTradeExactOut&&involvesAddress(bestTradeExactOut,formattedTo)){var _inputError4;inputError=(_inputError4=inputError)!==null&&_inputError4!==void 0?_inputError4:t('Invalid recipient');}const[allowedSlippage]=useUserSlippageTolerance();const slippageAdjustedAmounts=v2Trade&&allowedSlippage&&computeSlippageAdjustedAmounts(v2Trade,allowedSlippage);// compare input balance to max input based on version\nconst[balanceIn,amountIn]=[currencyBalances[Field.INPUT],slippageAdjustedAmounts?slippageAdjustedAmounts[Field.INPUT]:null];if(balanceIn&&amountIn&&balanceIn.lessThan(amountIn)){inputError=t('Insufficient %symbol% balance',{symbol:amountIn.currency.symbol});}return{currencies,currencyBalances,parsedAmount,v2Trade:v2Trade!==null&&v2Trade!==void 0?v2Trade:undefined,inputError};}function parseCurrencyFromURLParameter(urlParam){var _BNB;if(typeof urlParam==='string'){const valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='BNB')return'BNB';if(valid===false)return'BNB';}return(_BNB='BNB')!==null&&_BNB!==void 0?_BNB:'';}function parseTokenAmountURLParameter(urlParam){// eslint-disable-next-line no-restricted-globals\nreturn typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}const ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;const ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;const address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs){let inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency);let outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency);if(inputCurrency===outputCurrency){if(typeof parsedQs.outputCurrency==='string'){inputCurrency='';}else{outputCurrency='';}}const recipient=validatedRecipient(parsedQs.recipient);return{[Field.INPUT]:{currencyId:inputCurrency},[Field.OUTPUT]:{currencyId:outputCurrency},typedValue:parseTokenAmountURLParameter(parsedQs.exactAmount),independentField:parseIndependentFieldURLParameter(parsedQs.exactField),recipient};}// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(){const{chainId}=useActiveWeb3React();const dispatch=useDispatch();const parsedQs=useParsedQueryString();const[result,setResult]=useState();useEffect(()=>{if(!chainId)return;const parsed=queryParametersToSwapState(parsedQs);dispatch(replaceSwapState({typedValue:parsed.typedValue,field:parsed.independentField,inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId,recipient:null}));setResult({inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId});// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,chainId]);return result;}","map":{"version":3,"names":["parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useENS","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","useTranslation","isAddress","computeSlippageAdjustedAmounts","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useUserSlippageTolerance","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","concat","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","_ref","_ref2","account","t","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","inputError","_inputError","_inputError2","formattedTo","_inputError3","indexOf","_inputError4","allowedSlippage","slippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","_BNB","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/swap/hooks.ts"],"sourcesContent":["import { parseUnits } from '@ethersproject/units'\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@pancakeswap/sdk'\r\nimport { ParsedQs } from 'qs'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useENS from 'hooks/ENS/useENS'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isAddress } from 'utils'\r\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\nimport { SwapState } from './reducer'\r\nimport { useUserSlippageTolerance } from '../user/hooks'\r\n\r\nexport function useSwapState(): AppState['swap'] {\r\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\r\n}\r\n\r\nexport function useSwapActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void\r\n  onSwitchTokens: () => void\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n  onChangeRecipient: (recipient: string | null) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\r\n        }),\r\n      )\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies())\r\n  }, [dispatch])\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient,\r\n  }\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\r\n]\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\r\n  )\r\n}\r\n\r\n// from the current swap inputs, compute the best trade and return it.\r\nexport function useDerivedSwapInfo(): {\r\n  currencies: { [field in Field]?: Currency }\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmount: CurrencyAmount | undefined\r\n  v2Trade: Trade | undefined\r\n  inputError?: string\r\n} {\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient,\r\n  } = useSwapState()\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId)\r\n  const outputCurrency = useCurrency(outputCurrencyId)\r\n  const recipientLookup = useENS(recipient ?? undefined)\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined,\r\n  ])\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1],\r\n  }\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined,\r\n  }\r\n\r\n  let inputError: string | undefined\r\n  if (!account) {\r\n    inputError = t('Connect Wallet')\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? t('Enter an amount')\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? t('Select a token')\r\n  }\r\n\r\n  const formattedTo = isAddress(to)\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? t('Enter a recipient')\r\n  } else if (\r\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n  ) {\r\n    inputError = inputError ?? t('Invalid recipient')\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\r\n  ]\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = t('Insufficient %symbol% balance', { symbol: amountIn.currency.symbol })\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n  }\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam)\r\n    if (valid) return valid\r\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\r\n    if (valid === false) return 'BNB'\r\n  }\r\n  return 'BNB' ?? ''\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null\r\n  const address = isAddress(recipient)\r\n  if (address) return address\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient\r\n  return null\r\n}\r\n\r\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = ''\r\n    } else {\r\n      outputCurrency = ''\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient)\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency,\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency,\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient,\r\n  }\r\n}\r\n\r\n// updates the swap state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const parsedQs = useParsedQueryString()\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >()\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return\r\n    const parsed = queryParametersToSwapState(parsedQs)\r\n\r\n    dispatch(\r\n      replaceSwapState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: null,\r\n      }),\r\n    )\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId])\r\n\r\n  return result\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}