{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getAchievements } from './helpers';\nconst initialState = {\n  data: []\n};\nexport const achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    addAchievement: (state, action) => {\n      state.data.push(action.payload);\n    },\n    addAchievements: (state, action) => {\n      state.data = [...state.data, ...action.payload];\n    },\n    setAchievements: (state, action) => {\n      state.data = action.payload;\n    },\n    clearAchievements: state => {\n      state.data = [];\n    }\n  }\n});\n\n// Actions\nexport const {\n  addAchievement,\n  addAchievements,\n  setAchievements,\n  clearAchievements\n} = achievementSlice.actions;\n\n// Thunks\nexport const fetchAchievements = account => async dispatch => {\n  try {\n    const achievements = await getAchievements(account);\n    dispatch(setAchievements(achievements));\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport default achievementSlice.reducer;","map":{"version":3,"names":["createSlice","getAchievements","initialState","data","achievementSlice","name","reducers","addAchievement","state","action","push","payload","addAchievements","setAchievements","clearAchievements","actions","fetchAchievements","account","dispatch","achievements","error","console","reducer"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/achievements/index.ts"],"sourcesContent":["import { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AchievementState, Achievement } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  data: [],\r\n}\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.data.push(action.payload)\r\n    },\r\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = [...state.data, ...action.payload]\r\n    },\r\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\r\n      state.data = action.payload\r\n    },\r\n    clearAchievements: (state) => {\r\n      state.data = []\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\r\n\r\n// Thunks\r\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\r\n  try {\r\n    const achievements = await getAchievements(account)\r\n    dispatch(setAchievements(achievements))\r\n  } catch (error) {\r\n    console.error(error)\r\n  }\r\n}\r\n\r\nexport default achievementSlice.reducer\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAiC,kBAAkB;AAEvE,SAASC,eAAe,QAAQ,WAAW;AAE3C,MAAMC,YAA8B,GAAG;EACrCC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGJ,WAAW,CAAC;EAC1CK,IAAI,EAAE,cAAc;EACpBH,YAAY;EACZI,QAAQ,EAAE;IACRC,cAAc,EAAEA,CAACC,KAAK,EAAEC,MAAkC,KAAK;MAC7DD,KAAK,CAACL,IAAI,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACjC,CAAC;IACDC,eAAe,EAAEA,CAACJ,KAAK,EAAEC,MAAoC,KAAK;MAChED,KAAK,CAACL,IAAI,GAAG,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAE,GAAGM,MAAM,CAACE,OAAO,CAAC;IACjD,CAAC;IACDE,eAAe,EAAEA,CAACL,KAAK,EAAEC,MAAoC,KAAK;MAChED,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACE,OAAO;IAC7B,CAAC;IACDG,iBAAiB,EAAGN,KAAK,IAAK;MAC5BA,KAAK,CAACL,IAAI,GAAG,EAAE;IACjB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEI,cAAc;EAAEK,eAAe;EAAEC,eAAe;EAAEC;AAAkB,CAAC,GAAGV,gBAAgB,CAACW,OAAO;;AAE/G;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAe,IAAK,MAAOC,QAAkB,IAAK;EAClF,IAAI;IACF,MAAMC,YAAY,GAAG,MAAMlB,eAAe,CAACgB,OAAO,CAAC;IACnDC,QAAQ,CAACL,eAAe,CAACM,YAAY,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC;AAED,eAAehB,gBAAgB,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}