{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport useTokenBalance from './useTokenBalance';\n\n/**\r\n * A hook to check if a wallet's CAKE balance is at least the amount passed in\r\n */\nconst useHasCakeBalance = minimumBalance => {\n  _s();\n  const {\n    balance: cakeBalance\n  } = useTokenBalance(getCakeAddress());\n  return cakeBalance.gte(minimumBalance);\n};\n_s(useHasCakeBalance, \"Q3sSQYGPPT+mp9TM+DPHFLdZalc=\", false, function () {\n  return [useTokenBalance];\n});\nexport default useHasCakeBalance;","map":{"version":3,"names":["getCakeAddress","useTokenBalance","useHasCakeBalance","minimumBalance","_s","balance","cakeBalance","gte"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/hooks/useHasCakeBalance.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useTokenBalance from './useTokenBalance'\r\n\r\n/**\r\n * A hook to check if a wallet's CAKE balance is at least the amount passed in\r\n */\r\nconst useHasCakeBalance = (minimumBalance: BigNumber) => {\r\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\r\n  return cakeBalance.gte(minimumBalance)\r\n}\r\n\r\nexport default useHasCakeBalance\r\n"],"mappings":";AACA,SAASA,cAAc,QAAQ,sBAAsB;AACrD,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AACA;AACA;AACA,MAAMC,iBAAiB,GAAIC,cAAyB,IAAK;EAAAC,EAAA;EACvD,MAAM;IAAEC,OAAO,EAAEC;EAAY,CAAC,GAAGL,eAAe,CAACD,cAAc,CAAC,CAAC,CAAC;EAClE,OAAOM,WAAW,CAACC,GAAG,CAACJ,cAAc,CAAC;AACxC,CAAC;AAAAC,EAAA,CAHKF,iBAAiB;EAAA,QACYD,eAAe;AAAA;AAIlD,eAAeC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}