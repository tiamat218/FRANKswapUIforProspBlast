{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks';\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions';\nimport { PredictionStatus } from 'state/types';\nimport { range } from 'lodash';\nconst POLL_TIME_IN_SECONDS = 10;\nconst usePollPredictions = () => {\n  _s();\n  const timer = useRef(null);\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const currentEpoch = useGetCurrentEpoch();\n  const earliestEpoch = useGetEarliestEpoch();\n  const status = useGetPredictionsStatus();\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current);\n    }\n    if (status === PredictionStatus.LIVE) {\n      timer.current = setInterval(async () => {\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1];\n        dispatch(fetchRounds(liveAndCurrent));\n        dispatch(fetchMarketData());\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1);\n          dispatch(fetchLedgerData({\n            account,\n            epochs: epochRange\n          }));\n          dispatch(fetchClaimableStatuses({\n            account,\n            epochs: epochRange\n          }));\n        }\n      }, POLL_TIME_IN_SECONDS * 1000);\n    }\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current);\n      }\n    };\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch]);\n};\n_s(usePollPredictions, \"sAiLuXKdkhZzAd6Cgh04o+cp2N4=\", false, function () {\n  return [useAppDispatch, useWeb3React, useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus];\n});\nexport default usePollPredictions;","map":{"version":3,"names":["useEffect","useRef","useWeb3React","useAppDispatch","useGetCurrentEpoch","useGetEarliestEpoch","useGetPredictionsStatus","fetchClaimableStatuses","fetchLedgerData","fetchMarketData","fetchRounds","PredictionStatus","range","POLL_TIME_IN_SECONDS","usePollPredictions","_s","timer","dispatch","account","currentEpoch","earliestEpoch","status","current","clearInterval","LIVE","setInterval","liveAndCurrent","epochRange","epochs"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/hooks/usePollPredictions.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status === PredictionStatus.LIVE) {\r\n      timer.current = setInterval(async () => {\r\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\r\n\r\n        dispatch(fetchRounds(liveAndCurrent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,uBAAuB,QAAQ,aAAa;AAC9F,SAASC,sBAAsB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,WAAW,QAAQ,mBAAmB;AACzG,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,KAAK,QAAQ,QAAQ;AAE9B,MAAMC,oBAAoB,GAAG,EAAE;AAE/B,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,KAAK,GAAGf,MAAM,CAAiB,IAAI,CAAC;EAC1C,MAAMgB,QAAQ,GAAGd,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEe;EAAQ,CAAC,GAAGhB,YAAY,CAAC,CAAC;EAClC,MAAMiB,YAAY,GAAGf,kBAAkB,CAAC,CAAC;EACzC,MAAMgB,aAAa,GAAGf,mBAAmB,CAAC,CAAC;EAC3C,MAAMgB,MAAM,GAAGf,uBAAuB,CAAC,CAAC;EAExCN,SAAS,CAAC,MAAM;IACd;IACA,IAAIgB,KAAK,CAACM,OAAO,EAAE;MACjBC,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC;IAC9B;IAEA,IAAID,MAAM,KAAKV,gBAAgB,CAACa,IAAI,EAAE;MACpCR,KAAK,CAACM,OAAO,GAAGG,WAAW,CAAC,YAAY;QACtC,MAAMC,cAAc,GAAG,CAACP,YAAY,EAAEA,YAAY,GAAG,CAAC,CAAC;QAEvDF,QAAQ,CAACP,WAAW,CAACgB,cAAc,CAAC,CAAC;QACrCT,QAAQ,CAACR,eAAe,CAAC,CAAC,CAAC;QAE3B,IAAIS,OAAO,EAAE;UACX,MAAMS,UAAU,GAAGf,KAAK,CAACQ,aAAa,EAAED,YAAY,GAAG,CAAC,CAAC;UACzDF,QAAQ,CAACT,eAAe,CAAC;YAAEU,OAAO;YAAEU,MAAM,EAAED;UAAW,CAAC,CAAC,CAAC;UAC1DV,QAAQ,CAACV,sBAAsB,CAAC;YAAEW,OAAO;YAAEU,MAAM,EAAED;UAAW,CAAC,CAAC,CAAC;QACnE;MACF,CAAC,EAAEd,oBAAoB,GAAG,IAAI,CAAC;IACjC;IAEA,OAAO,MAAM;MACX,IAAIG,KAAK,CAACM,OAAO,EAAE;QACjBC,aAAa,CAACP,KAAK,CAACM,OAAO,CAAC;MAC9B;IACF,CAAC;EACH,CAAC,EAAE,CAACN,KAAK,EAAEE,OAAO,EAAEG,MAAM,EAAEF,YAAY,EAAEC,aAAa,EAAEH,QAAQ,CAAC,CAAC;AACrE,CAAC;AAAAF,EAAA,CAnCKD,kBAAkB;EAAA,QAELX,cAAc,EACXD,YAAY,EACXE,kBAAkB,EACjBC,mBAAmB,EAC1BC,uBAAuB;AAAA;AA+BxC,eAAeQ,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module"}