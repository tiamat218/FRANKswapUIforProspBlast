{"ast":null,"code":"var _s = $RefreshSig$();\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\nexport default function useENSAddress(ensName) {\n  _s();\n  var _resolverAddress$resu, _address$result$, _address$result;\n  const debouncedName = useDebounce(ensName, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined];\n    try {\n      return [namehash(debouncedName)];\n    } catch (error) {\n      console.error('Invalid ENS name:', error);\n      return [undefined];\n    }\n  }, [debouncedName]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false);\n  const address = useSingleCallResult(resolverContract, 'addr', ensNodeArgument);\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult);\n  return {\n    address: isResolverAddressValid ? (_address$result$ = (_address$result = address.result) === null || _address$result === void 0 ? void 0 : _address$result[0]) !== null && _address$result$ !== void 0 ? _address$result$ : null : null,\n    loading: resolverAddress.loading || address.loading\n  };\n}\n_s(useENSAddress, \"/lEk8vCrILZ1VpeoA0HEYquqhM4=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"names":["namehash","useMemo","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","ensName","_s","_resolverAddress$resu","_address$result$","_address$result","debouncedName","ensNodeArgument","undefined","error","console","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","address","isResolverAddressValid","loading"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSAddress.ts"],"sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\r\n  const debouncedName = useDebounce(ensName, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedName) return [undefined]\r\n    try {\r\n      return [namehash(debouncedName)]\r\n    } catch (error) {\r\n      console.error('Invalid ENS name:', error)\r\n      return [undefined]\r\n    }\r\n  }, [debouncedName])\r\n\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n\r\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false)\r\n  const address = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\r\n\r\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult)\r\n\r\n  return {\r\n    address: isResolverAddressValid ? address.result?.[0] ?? null : null,\r\n    loading: resolverAddress.loading || address.loading,\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,OAAOC,MAAM,MAAM,oBAAoB;AACvC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ,gBAAgB;AAChF,OAAOC,WAAW,MAAM,gBAAgB;AAExC,eAAe,SAASC,aAAaA,CAACC,OAAuB,EAAgD;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,gBAAA,EAAAC,eAAA;EAC3G,MAAMC,aAAa,GAAGP,WAAW,CAACE,OAAO,EAAE,GAAG,CAAC;EAC/C,MAAMM,eAAe,GAAGb,OAAO,CAAC,MAAM;IACpC,IAAI,CAACY,aAAa,EAAE,OAAO,CAACE,SAAS,CAAC;IACtC,IAAI;MACF,OAAO,CAACf,QAAQ,CAACa,aAAa,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,OAAO,CAACD,SAAS,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,aAAa,CAAC,CAAC;EAEnB,MAAMK,iBAAiB,GAAGd,uBAAuB,CAAC,KAAK,CAAC;EACxD,MAAMe,eAAe,GAAGjB,mBAAmB,CAACgB,iBAAiB,EAAE,UAAU,EAAEJ,eAAe,CAAC;EAC3F,MAAMM,qBAAqB,IAAAV,qBAAA,GAAGS,eAAe,CAACE,MAAM,cAAAX,qBAAA,uBAAtBA,qBAAA,CAAyB,CAAC,CAAC;EAEzD,MAAMY,gBAAgB,GAAGjB,sBAAsB,CAACe,qBAAqB,IAAIL,SAAS,EAAE,KAAK,CAAC;EAC1F,MAAMQ,OAAO,GAAGrB,mBAAmB,CAACoB,gBAAgB,EAAE,MAAM,EAAER,eAAe,CAAC;EAE9E,MAAMU,sBAAsB,GAAGJ,qBAAqB,IAAI,CAACjB,MAAM,CAACiB,qBAAqB,CAAC;EAEtF,OAAO;IACLG,OAAO,EAAEC,sBAAsB,IAAAb,gBAAA,IAAAC,eAAA,GAAGW,OAAO,CAACF,MAAM,cAAAT,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC,cAAAD,gBAAA,cAAAA,gBAAA,GAAI,IAAI,GAAG,IAAI;IACpEc,OAAO,EAAEN,eAAe,CAACM,OAAO,IAAIF,OAAO,CAACE;EAC9C,CAAC;AACH;AAAChB,EAAA,CAzBuBF,aAAa;EAAA,QACbD,WAAW,EAWPF,uBAAuB,EACzBF,mBAAmB,EAGlBG,sBAAsB,EAC/BH,mBAAmB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}