{"ast":null,"code":"import{useEffect,useMemo}from'react';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import{simpleRpcProvider}from'utils/providers';import useRefresh from'hooks/useRefresh';import{fetchPoolsPublicDataAsync,fetchPoolsUserDataAsync,fetchCakeVaultPublicData,fetchCakeVaultUserData,fetchCakeVaultFees,fetchPoolsStakingLimitsAsync}from'.';import{transformPool}from'./helpers';export const useFetchPublicPoolsData=()=>{const dispatch=useAppDispatch();const{slowRefresh}=useRefresh();useEffect(()=>{const fetchPoolsPublicData=async()=>{const blockNumber=await simpleRpcProvider.getBlockNumber();dispatch(fetchPoolsPublicDataAsync(blockNumber));};fetchPoolsPublicData();dispatch(fetchPoolsStakingLimitsAsync());},[dispatch,slowRefresh]);};export const usePools=account=>{const{fastRefresh}=useRefresh();const dispatch=useAppDispatch();useEffect(()=>{if(account){dispatch(fetchPoolsUserDataAsync(account));}},[account,dispatch,fastRefresh]);const{pools,userDataLoaded}=useSelector(state=>({pools:state.pools.data,userDataLoaded:state.pools.userDataLoaded}));return{pools:pools.map(transformPool),userDataLoaded};};export const useFetchCakeVault=()=>{const{account}=useWeb3React();const{fastRefresh}=useRefresh();const dispatch=useAppDispatch();useEffect(()=>{dispatch(fetchCakeVaultPublicData());},[dispatch,fastRefresh]);useEffect(()=>{dispatch(fetchCakeVaultUserData({account}));},[dispatch,fastRefresh,account]);useEffect(()=>{dispatch(fetchCakeVaultFees());},[dispatch]);};export const useCakeVault=()=>{const{totalShares:totalSharesAsString,pricePerFullShare:pricePerFullShareAsString,totalCakeInVault:totalCakeInVaultAsString,estimatedCakeBountyReward:estimatedCakeBountyRewardAsString,totalPendingCakeHarvest:totalPendingCakeHarvestAsString,fees:{performanceFee,callFee,withdrawalFee,withdrawalFeePeriod},userData:{isLoading,userShares:userSharesAsString,cakeAtLastUserAction:cakeAtLastUserActionAsString,lastDepositedTime,lastUserActionTime}}=useSelector(state=>state.pools.cakeVault);const estimatedCakeBountyReward=useMemo(()=>{return new BigNumber(estimatedCakeBountyRewardAsString);},[estimatedCakeBountyRewardAsString]);const totalPendingCakeHarvest=useMemo(()=>{return new BigNumber(totalPendingCakeHarvestAsString);},[totalPendingCakeHarvestAsString]);const totalShares=useMemo(()=>{return new BigNumber(totalSharesAsString);},[totalSharesAsString]);const pricePerFullShare=useMemo(()=>{return new BigNumber(pricePerFullShareAsString);},[pricePerFullShareAsString]);const totalCakeInVault=useMemo(()=>{return new BigNumber(totalCakeInVaultAsString);},[totalCakeInVaultAsString]);const userShares=useMemo(()=>{return new BigNumber(userSharesAsString);},[userSharesAsString]);const cakeAtLastUserAction=useMemo(()=>{return new BigNumber(cakeAtLastUserActionAsString);},[cakeAtLastUserActionAsString]);return{totalShares,pricePerFullShare,totalCakeInVault,estimatedCakeBountyReward,totalPendingCakeHarvest,fees:{performanceFee,callFee,withdrawalFee,withdrawalFeePeriod},userData:{isLoading,userShares,cakeAtLastUserAction,lastDepositedTime,lastUserActionTime}};};","map":{"version":3,"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","simpleRpcProvider","useRefresh","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","fetchPoolsStakingLimitsAsync","transformPool","useFetchPublicPoolsData","dispatch","slowRefresh","fetchPoolsPublicData","blockNumber","getBlockNumber","usePools","account","fastRefresh","pools","userDataLoaded","state","data","map","useFetchCakeVault","useCakeVault","totalShares","totalSharesAsString","pricePerFullShare","pricePerFullShareAsString","totalCakeInVault","totalCakeInVaultAsString","estimatedCakeBountyReward","estimatedCakeBountyRewardAsString","totalPendingCakeHarvest","totalPendingCakeHarvestAsString","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","userSharesAsString","cakeAtLastUserAction","cakeAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","cakeVault"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/pools/hooks.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  fetchCakeVaultPublicData,\r\n  fetchCakeVaultUserData,\r\n  fetchCakeVaultFees,\r\n  fetchPoolsStakingLimitsAsync,\r\n} from '.'\r\nimport { State, Pool } from '../types'\r\nimport { transformPool } from './helpers'\r\n\r\nexport const useFetchPublicPoolsData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchPoolsPublicData = async () => {\r\n      const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\r\n    }\r\n\r\n    fetchPoolsPublicData()\r\n    dispatch(fetchPoolsStakingLimitsAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\r\n    pools: state.pools.data,\r\n    userDataLoaded: state.pools.userDataLoaded,\r\n  }))\r\n  return { pools: pools.map(transformPool), userDataLoaded }\r\n}\r\n\r\nexport const useFetchCakeVault = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultPublicData())\r\n  }, [dispatch, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultUserData({ account }))\r\n  }, [dispatch, fastRefresh, account])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCakeVaultFees())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useCakeVault = () => {\r\n  const {\r\n    totalShares: totalSharesAsString,\r\n    pricePerFullShare: pricePerFullShareAsString,\r\n    totalCakeInVault: totalCakeInVaultAsString,\r\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\r\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\r\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\r\n    userData: {\r\n      isLoading,\r\n      userShares: userSharesAsString,\r\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  } = useSelector((state: State) => state.pools.cakeVault)\r\n\r\n  const estimatedCakeBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyRewardAsString)\r\n  }, [estimatedCakeBountyRewardAsString])\r\n\r\n  const totalPendingCakeHarvest = useMemo(() => {\r\n    return new BigNumber(totalPendingCakeHarvestAsString)\r\n  }, [totalPendingCakeHarvestAsString])\r\n\r\n  const totalShares = useMemo(() => {\r\n    return new BigNumber(totalSharesAsString)\r\n  }, [totalSharesAsString])\r\n\r\n  const pricePerFullShare = useMemo(() => {\r\n    return new BigNumber(pricePerFullShareAsString)\r\n  }, [pricePerFullShareAsString])\r\n\r\n  const totalCakeInVault = useMemo(() => {\r\n    return new BigNumber(totalCakeInVaultAsString)\r\n  }, [totalCakeInVaultAsString])\r\n\r\n  const userShares = useMemo(() => {\r\n    return new BigNumber(userSharesAsString)\r\n  }, [userSharesAsString])\r\n\r\n  const cakeAtLastUserAction = useMemo(() => {\r\n    return new BigNumber(cakeAtLastUserActionAsString)\r\n  }, [cakeAtLastUserActionAsString])\r\n\r\n  return {\r\n    totalShares,\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: {\r\n      performanceFee,\r\n      callFee,\r\n      withdrawalFee,\r\n      withdrawalFeePeriod,\r\n    },\r\n    userData: {\r\n      isLoading,\r\n      userShares,\r\n      cakeAtLastUserAction,\r\n      lastDepositedTime,\r\n      lastUserActionTime,\r\n    },\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}