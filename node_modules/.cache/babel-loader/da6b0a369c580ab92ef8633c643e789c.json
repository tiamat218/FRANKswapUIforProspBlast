{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\TradingCompetition\\\\components\\\\ShareImageModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Modal, Flex, Button, Text, Skeleton, Box } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport FlippersShare from '../pngs/flippers-share.png';\nimport StormShare from '../pngs/storm-share.png';\nimport CakersShare from '../pngs/cakers-share.png';\nimport ProfileMask from '../pngs/share-profile-mask.png';\nimport MedalGold from '../pngs/medals/medal-gold.png';\nimport MedalSilver from '../pngs/medals/medal-silver.png';\nimport MedalBronze from '../pngs/medals/medal-bronze.png';\nimport MedalPurple from '../pngs/medals/medal-purple.png';\nimport MedalTeal from '../pngs/medals/medal-teal.png';\nimport { localiseTradingVolume } from '../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCanvas = styled.canvas`\n  width: 100%;\n`;\n_c = StyledCanvas;\nconst StyledButton = styled(Button)`\n  display: none;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`;\n_c2 = StyledButton;\nconst MobileText = styled(Text)`\n  display: block;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    display: none;\n  }\n`;\n_c3 = MobileText;\n\nconst ShareImageModal = ({\n  onDismiss,\n  profile,\n  userLeaderboardInformation\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    global,\n    team,\n    volume\n  } = userLeaderboardInformation;\n  const [bgImage, setBgImage] = useState(null);\n  const [profileImage, setProfileImage] = useState(null);\n  const [profileOverlayImage, setProfileOverlayImage] = useState(null);\n  const [medalImage, setMedalImage] = useState(null);\n  const [imageFromCanvas, setImageFromCanvas] = useState(null);\n  const canvas = useRef(null);\n\n  const getMedal = rank => {\n    if (rank === 1) {\n      return MedalGold;\n    }\n\n    if (rank <= 10) {\n      return MedalSilver;\n    }\n\n    if (rank <= 100) {\n      return MedalBronze;\n    }\n\n    if (rank <= 500) {\n      return MedalPurple;\n    }\n\n    return MedalTeal;\n  };\n\n  useEffect(() => {\n    var _profile$nft, _profile$nft$images;\n\n    const bgImages = [StormShare, FlippersShare, CakersShare];\n    const bgImagEl = new Image();\n    bgImagEl.src = bgImages[profile.teamId - 1];\n\n    bgImagEl.onload = () => setBgImage(bgImagEl);\n\n    const profileImageEl = new Image();\n    profileImageEl.src = `/images/nfts/${(_profile$nft = profile.nft) === null || _profile$nft === void 0 ? void 0 : (_profile$nft$images = _profile$nft.images) === null || _profile$nft$images === void 0 ? void 0 : _profile$nft$images.lg}`;\n\n    profileImageEl.onload = () => setProfileImage(profileImageEl);\n\n    const profileImageOverlayEl = new Image();\n    profileImageOverlayEl.src = ProfileMask;\n\n    profileImageOverlayEl.onload = () => setProfileOverlayImage(profileImageOverlayEl);\n\n    const medalImageEl = new Image();\n    medalImageEl.src = getMedal(team);\n\n    medalImageEl.onload = () => setMedalImage(medalImageEl);\n  }, [profile, team]);\n  useEffect(() => {\n    if (canvas && bgImage && profileImage && profileOverlayImage && medalImage) {\n      const canvasWidth = canvas.current.width;\n      canvas.current.height = canvasWidth * 0.5625;\n      const canvasHeight = canvas.current.height;\n      const ctx = canvas.current.getContext('2d');\n      ctx.drawImage(bgImage, 0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(profileImage, canvasWidth * 0.0315, canvasHeight * 0.07, canvasWidth * 0.19, canvasWidth * 0.19);\n      ctx.drawImage(profileOverlayImage, 0, 0, canvasWidth * 0.235, canvasWidth * 0.235);\n      ctx.drawImage(medalImage, canvasWidth * 0.15, canvasHeight * 0.32, canvasWidth * 0.06, canvasWidth * 0.06);\n      ctx.font = 'bold 84px Kanit';\n      ctx.fillStyle = 'white';\n      ctx.fillText(`@${profile.username}`, canvasWidth * 0.033, canvasHeight * 0.53);\n      ctx.font = 'bold 72px Kanit';\n      ctx.fillText(`# ${team.toLocaleString()}`, canvasWidth * 0.18, canvasHeight * 0.69);\n      ctx.fillText(`# ${global.toLocaleString()}`, canvasWidth * 0.18, canvasHeight * 0.79);\n      ctx.fillText(`$ ${localiseTradingVolume(volume)}`, canvasWidth * 0.18, canvasHeight * 0.89);\n      setImageFromCanvas(canvas.current.toDataURL('image/png'));\n    }\n  }, [canvas, bgImage, profileImage, team, global, volume, profile, profileOverlayImage, medalImage]);\n\n  const downloadImage = () => {\n    const link = document.createElement('a');\n    link.download = `easter-battle-${profile.username}.png`;\n    link.href = imageFromCanvas;\n    link.click();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Share Your Score'),\n    onDismiss: onDismiss,\n    minWidth: \"280px\",\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      maxWidth: \"460px\",\n      children: [bgImage && profileImage ? /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        minHeight: \"258px\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          height: \"0px\",\n          children: /*#__PURE__*/_jsxDEV(StyledCanvas, {\n            ref: canvas,\n            width: \"1600px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), imageFromCanvas && /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"your shareable score\",\n          src: `${imageFromCanvas}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"100%\",\n        height: \"258px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        p: \"24px 16px\",\n        color: \"textSubtle\",\n        textAlign: \"center\",\n        children: t('Brag to your friends and annoy your rivals with your custom scorecard!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), imageFromCanvas && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n          onClick: downloadImage,\n          children: t('Download Image')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MobileText, {\n          p: \"0 16px 18px 16px\",\n          bold: true,\n          textAlign: \"center\",\n          children: t('Screenshot or press & hold the image to share!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ShareImageModal, \"gBFDJZkG5u5SCAzT7fw7NQibn3w=\", false, function () {\n  return [useTranslation];\n});\n\n_c4 = ShareImageModal;\nexport default ShareImageModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledCanvas\");\n$RefreshReg$(_c2, \"StyledButton\");\n$RefreshReg$(_c3, \"MobileText\");\n$RefreshReg$(_c4, \"ShareImageModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/TradingCompetition/components/ShareImageModal.tsx"],"names":["React","useRef","useState","useEffect","Modal","Flex","Button","Text","Skeleton","Box","styled","useTranslation","FlippersShare","StormShare","CakersShare","ProfileMask","MedalGold","MedalSilver","MedalBronze","MedalPurple","MedalTeal","localiseTradingVolume","StyledCanvas","canvas","StyledButton","theme","mediaQueries","sm","MobileText","ShareImageModal","onDismiss","profile","userLeaderboardInformation","t","global","team","volume","bgImage","setBgImage","profileImage","setProfileImage","profileOverlayImage","setProfileOverlayImage","medalImage","setMedalImage","imageFromCanvas","setImageFromCanvas","getMedal","rank","bgImages","bgImagEl","Image","src","teamId","onload","profileImageEl","nft","images","lg","profileImageOverlayEl","medalImageEl","canvasWidth","current","width","height","canvasHeight","ctx","getContext","drawImage","font","fillStyle","fillText","username","toLocaleString","toDataURL","downloadImage","link","document","createElement","download","href","click"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport { Modal, Flex, Button, Text, Skeleton, Box } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport FlippersShare from '../pngs/flippers-share.png'\r\nimport StormShare from '../pngs/storm-share.png'\r\nimport CakersShare from '../pngs/cakers-share.png'\r\nimport ProfileMask from '../pngs/share-profile-mask.png'\r\nimport MedalGold from '../pngs/medals/medal-gold.png'\r\nimport MedalSilver from '../pngs/medals/medal-silver.png'\r\nimport MedalBronze from '../pngs/medals/medal-bronze.png'\r\nimport MedalPurple from '../pngs/medals/medal-purple.png'\r\nimport MedalTeal from '../pngs/medals/medal-teal.png'\r\n\r\nimport { localiseTradingVolume } from '../helpers'\r\nimport { YourScoreProps } from '../types'\r\n\r\nconst StyledCanvas = styled.canvas`\r\n  width: 100%;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n  display: none;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst MobileText = styled(Text)`\r\n  display: block;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ShareImageModal: React.FC<YourScoreProps> = ({ onDismiss, profile, userLeaderboardInformation }) => {\r\n  const { t } = useTranslation()\r\n  const { global, team, volume } = userLeaderboardInformation\r\n  const [bgImage, setBgImage] = useState(null)\r\n  const [profileImage, setProfileImage] = useState(null)\r\n  const [profileOverlayImage, setProfileOverlayImage] = useState(null)\r\n  const [medalImage, setMedalImage] = useState(null)\r\n\r\n  const [imageFromCanvas, setImageFromCanvas] = useState(null)\r\n  const canvas = useRef(null)\r\n\r\n  const getMedal = (rank: React.ReactText) => {\r\n    if (rank === 1) {\r\n      return MedalGold\r\n    }\r\n    if (rank <= 10) {\r\n      return MedalSilver\r\n    }\r\n    if (rank <= 100) {\r\n      return MedalBronze\r\n    }\r\n    if (rank <= 500) {\r\n      return MedalPurple\r\n    }\r\n    return MedalTeal\r\n  }\r\n\r\n  useEffect(() => {\r\n    const bgImages = [StormShare, FlippersShare, CakersShare]\r\n    const bgImagEl = new Image()\r\n    bgImagEl.src = bgImages[profile.teamId - 1]\r\n    bgImagEl.onload = () => setBgImage(bgImagEl)\r\n\r\n    const profileImageEl = new Image()\r\n    profileImageEl.src = `/images/nfts/${profile.nft?.images?.lg}`\r\n    profileImageEl.onload = () => setProfileImage(profileImageEl)\r\n\r\n    const profileImageOverlayEl = new Image()\r\n    profileImageOverlayEl.src = ProfileMask\r\n    profileImageOverlayEl.onload = () => setProfileOverlayImage(profileImageOverlayEl)\r\n\r\n    const medalImageEl = new Image()\r\n    medalImageEl.src = getMedal(team)\r\n    medalImageEl.onload = () => setMedalImage(medalImageEl)\r\n  }, [profile, team])\r\n\r\n  useEffect(() => {\r\n    if (canvas && bgImage && profileImage && profileOverlayImage && medalImage) {\r\n      const canvasWidth = canvas.current.width\r\n      canvas.current.height = canvasWidth * 0.5625\r\n      const canvasHeight = canvas.current.height\r\n\r\n      const ctx = canvas.current.getContext('2d')\r\n\r\n      ctx.drawImage(bgImage, 0, 0, canvasWidth, canvasHeight)\r\n      ctx.drawImage(profileImage, canvasWidth * 0.0315, canvasHeight * 0.07, canvasWidth * 0.19, canvasWidth * 0.19)\r\n      ctx.drawImage(profileOverlayImage, 0, 0, canvasWidth * 0.235, canvasWidth * 0.235)\r\n      ctx.drawImage(medalImage, canvasWidth * 0.15, canvasHeight * 0.32, canvasWidth * 0.06, canvasWidth * 0.06)\r\n\r\n      ctx.font = 'bold 84px Kanit'\r\n      ctx.fillStyle = 'white'\r\n      ctx.fillText(`@${profile.username}`, canvasWidth * 0.033, canvasHeight * 0.53)\r\n\r\n      ctx.font = 'bold 72px Kanit'\r\n      ctx.fillText(`# ${team.toLocaleString()}`, canvasWidth * 0.18, canvasHeight * 0.69)\r\n      ctx.fillText(`# ${global.toLocaleString()}`, canvasWidth * 0.18, canvasHeight * 0.79)\r\n      ctx.fillText(`$ ${localiseTradingVolume(volume)}`, canvasWidth * 0.18, canvasHeight * 0.89)\r\n\r\n      setImageFromCanvas(canvas.current.toDataURL('image/png'))\r\n    }\r\n  }, [canvas, bgImage, profileImage, team, global, volume, profile, profileOverlayImage, medalImage])\r\n\r\n  const downloadImage = () => {\r\n    const link = document.createElement('a')\r\n    link.download = `easter-battle-${profile.username}.png`\r\n    link.href = imageFromCanvas\r\n    link.click()\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Share Your Score')} onDismiss={onDismiss} minWidth=\"280px\">\r\n      <Flex flexDirection=\"column\" alignItems=\"center\" maxWidth=\"460px\">\r\n        {bgImage && profileImage ? (\r\n          <Flex alignItems=\"center\" justifyContent=\"center\" minHeight=\"258px\">\r\n            <Box height=\"0px\">\r\n              <StyledCanvas ref={canvas} width=\"1600px\" />\r\n            </Box>\r\n            {imageFromCanvas && <img alt=\"your shareable score\" src={`${imageFromCanvas}`} />}\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"100%\" height=\"258px\" />\r\n        )}\r\n        <Text p=\"24px 16px\" color=\"textSubtle\" textAlign=\"center\">\r\n          {t('Brag to your friends and annoy your rivals with your custom scorecard!')}\r\n        </Text>\r\n        {imageFromCanvas && (\r\n          <>\r\n            <StyledButton onClick={downloadImage}>{t('Download Image')}</StyledButton>\r\n            <MobileText p=\"0 16px 18px 16px\" bold textAlign=\"center\">\r\n              {t('Screenshot or press & hold the image to share!')}\r\n            </MobileText>\r\n          </>\r\n        )}\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ShareImageModal\r\n"]},"metadata":{},"sourceType":"module"}