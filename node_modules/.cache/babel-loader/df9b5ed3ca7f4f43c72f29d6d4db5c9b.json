{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\Cells\\\\EndsInCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit';\nimport { getBscScanLink } from 'utils';\nimport { useBlock } from 'state/block/hooks';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { getPoolBlockInfo } from 'views/Pools/helpers';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`;\n_c = StyledCell;\n\nconst EndsInCell = ({\n  pool\n}) => {\n  _s();\n\n  const {\n    sousId,\n    totalStaked,\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    t\n  } = useTranslation();\n  const {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  } = getPoolBlockInfo(pool, currentBlock);\n  const isCakePool = sousId === 0;\n  const renderBlocks = shouldShowBlockCountdown ? /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flex: \"1.3\",\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"16px\",\n        value: blocksToDisplay,\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"4px\",\n        textTransform: \"lowercase\",\n        children: t('Blocks')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flex: \"1\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        external: true,\n        href: getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown'),\n        onClick: e => e.stopPropagation(),\n        children: /*#__PURE__*/_jsxDEV(TimerIcon, {\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Text, {\n    children: \"-\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this); // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || !blocksRemaining && !blocksUntilStart;\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished;\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), showLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this) : renderBlocks]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EndsInCell, \"Uw5JVSiN5isweqQvxCTPHwhHRUs=\", false, function () {\n  return [useBlock, useTranslation];\n});\n\n_c2 = EndsInCell;\nexport default EndsInCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"EndsInCell\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/EndsInCell.tsx"],"names":["React","styled","Flex","Link","Skeleton","Text","TimerIcon","getBscScanLink","useBlock","Balance","useTranslation","getPoolBlockInfo","BaseCell","CellContent","StyledCell","EndsInCell","pool","sousId","totalStaked","startBlock","endBlock","isFinished","currentBlock","t","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","isCakePool","renderBlocks","e","stopPropagation","isLoadingPublicData","gt","showLoading"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,SAArC,QAAsD,oBAAtD;AACA,SAASC,cAAT,QAA+B,OAA/B;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,YAAtC;;AAMA,MAAMC,UAAU,GAAGb,MAAM,CAACW,QAAD,CAAW;AACpC;AACA,CAFA;KAAME,U;;AAIN,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC1D,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA,QAAnC;AAA6CC,IAAAA;AAA7C,MAA4DL,IAAlE;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAmBd,QAAQ,EAAjC;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAQb,cAAc,EAA5B;AAEA,QAAM;AAAEc,IAAAA,wBAAF;AAA4BC,IAAAA,gBAA5B;AAA8CC,IAAAA,eAA9C;AAA+DC,IAAAA,cAA/D;AAA+EC,IAAAA;AAA/E,MACJjB,gBAAgB,CAACK,IAAD,EAAOM,YAAP,CADlB;AAGA,QAAMO,UAAU,GAAGZ,MAAM,KAAK,CAA9B;AAEA,QAAMa,YAAY,GAAGN,wBAAwB,gBAC3C,QAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,KAAX;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,MAAlB;AAAyB,QAAA,KAAK,EAAEI,eAAhC;AAAiD,QAAA,QAAQ,EAAE;AAA3D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,KAAT;AAAe,QAAA,aAAa,EAAC,WAA7B;AAAA,kBACGL,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,IAAI,EAAEhB,cAAc,CAACoB,cAAc,GAAGP,QAAH,GAAcD,UAA7B,EAAyC,WAAzC,CAFtB;AAGE,QAAA,OAAO,EAAGY,CAAD,IAAOA,CAAC,CAACC,eAAF,EAHlB;AAAA,+BAKE,QAAC,SAAD;AAAW,UAAA,EAAE,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UAD2C,gBAmB3C,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAnBF,CAV0D,CAgC1D;AACA;AACA;;AACA,QAAMC,mBAAmB,GAAG,CAACf,WAAW,CAACgB,EAAZ,CAAe,CAAf,CAAD,IAAsB,CAACZ,YAAvB,IAAwC,CAACI,eAAD,IAAoB,CAACD,gBAAzF;AACA,QAAMU,WAAW,GAAGF,mBAAmB,IAAI,CAACJ,UAAxB,IAAsC,CAACR,UAA3D;AACA,sBACE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAA,2BACE,QAAC,WAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAC,YAA5B;AAAyC,QAAA,SAAS,EAAC,MAAnD;AAAA,kBACGM,cAAc,IAAI,CAACH,wBAAnB,GAA8CD,CAAC,CAAC,SAAD,CAA/C,GAA6DA,CAAC,CAAC,WAAD;AADjE;AAAA;AAAA;AAAA;AAAA,cADF,EAIGY,WAAW,gBAAG,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,MAAhB;AAAuB,QAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAH,GAA6CL,YAJ3D;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA/CD;;GAAMf,U;UAEqBP,Q,EACXE,c;;;MAHVK,U;AAiDN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Pool } from 'state/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface FinishCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\r\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\r\n  const { currentBlock } = useBlock()\r\n  const { t } = useTranslation()\r\n\r\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\r\n    getPoolBlockInfo(pool, currentBlock)\r\n\r\n  const isCakePool = sousId === 0\r\n\r\n  const renderBlocks = shouldShowBlockCountdown ? (\r\n    <Flex alignItems=\"center\">\r\n      <Flex flex=\"1.3\">\r\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\r\n        <Text ml=\"4px\" textTransform=\"lowercase\">\r\n          {t('Blocks')}\r\n        </Text>\r\n      </Flex>\r\n      <Flex flex=\"1\">\r\n        <Link\r\n          external\r\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          <TimerIcon ml=\"4px\" />\r\n        </Link>\r\n      </Flex>\r\n    </Flex>\r\n  ) : (\r\n    <Text>-</Text>\r\n  )\r\n\r\n  // A bit hacky way to determine if public data is loading relying on totalStaked\r\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\r\n  // anywhere else\r\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\r\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\r\n        </Text>\r\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EndsInCell\r\n"]},"metadata":{},"sourceType":"module"}