{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState,useEffect}from'react';import BigNumber from'bignumber.js';import{Flex,Text}from'@pancakeswap/uikit';import styled from'styled-components';import{BIG_ZERO}from'utils/bigNumber';import{useTranslation}from'contexts/Localization';import RewardBracketDetail from'./RewardBracketDetail';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Wrapper=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  flex-direction: column;\\n\"])));const RewardsInner=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(2, auto);\\n  row-gap: 16px;\\n\\n  \",\" {\\n    grid-template-columns: repeat(4, 1fr);\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.mediaQueries.sm;});const RewardBrackets=_ref2=>{let{lotteryData,isHistoricRound}=_ref2;const{t}=useTranslation();const[state,setState]=useState({isLoading:true,cakeToBurn:BIG_ZERO,rewardsLessTreasuryFee:BIG_ZERO,rewardsBreakdown:null,countWinnersPerBracket:null});useEffect(()=>{if(lotteryData){const{treasuryFee,amountCollectedInCake,rewardsBreakdown,countWinnersPerBracket}=lotteryData;const feeAsPercentage=new BigNumber(treasuryFee).div(100);const cakeToBurn=feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake));const amountLessTreasuryFee=new BigNumber(amountCollectedInCake).minus(cakeToBurn);setState({isLoading:false,cakeToBurn,rewardsLessTreasuryFee:amountLessTreasuryFee,rewardsBreakdown,countWinnersPerBracket});}else{setState({isLoading:true,cakeToBurn:BIG_ZERO,rewardsLessTreasuryFee:BIG_ZERO,rewardsBreakdown:null,countWinnersPerBracket:null});}},[lotteryData]);const getCakeRewards=bracket=>{const shareAsPercentage=new BigNumber(state.rewardsBreakdown[bracket]).div(100);return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage);};const{isLoading,countWinnersPerBracket,cakeToBurn}=state;const rewardBrackets=[0,1,2,3,4,5];return/*#__PURE__*/_jsxs(Wrapper,{children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",mb:\"24px\",children:[t('Match the winning number in the same order to share prizes.'),' ',!isHistoricRound&&t('Current prizes up for grabs:')]}),/*#__PURE__*/_jsxs(RewardsInner,{children:[rewardBrackets.map(bracketIndex=>/*#__PURE__*/_jsx(RewardBracketDetail,{rewardBracket:bracketIndex,cakeAmount:!isLoading&&getCakeRewards(bracketIndex),numberWinners:!isLoading&&countWinnersPerBracket[bracketIndex],isHistoricRound:isHistoricRound,isLoading:isLoading},bracketIndex)),/*#__PURE__*/_jsx(RewardBracketDetail,{rewardBracket:0,cakeAmount:cakeToBurn,isBurn:true,isLoading:isLoading})]})]});};export default RewardBrackets;","map":{"version":3,"names":["React","useState","useEffect","BigNumber","Flex","Text","styled","BIG_ZERO","useTranslation","RewardBracketDetail","jsxs","_jsxs","jsx","_jsx","Wrapper","_templateObject","_taggedTemplateLiteral","RewardsInner","div","_templateObject2","_ref","theme","mediaQueries","sm","RewardBrackets","_ref2","lotteryData","isHistoricRound","t","state","setState","isLoading","cakeToBurn","rewardsLessTreasuryFee","rewardsBreakdown","countWinnersPerBracket","treasuryFee","amountCollectedInCake","feeAsPercentage","times","amountLessTreasuryFee","minus","getCakeRewards","bracket","shareAsPercentage","rewardBrackets","children","fontSize","mb","map","bracketIndex","rewardBracket","cakeAmount","numberWinners","isBurn"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/components/RewardBrackets.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound } from 'state/types'\r\nimport RewardBracketDetail from './RewardBracketDetail'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: 100%;\r\n  flex-direction: column;\r\n`\r\n\r\nconst RewardsInner = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n  row-gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n`\r\n\r\ninterface RewardMatchesProps {\r\n  lotteryData: LotteryRound\r\n  isHistoricRound?: boolean\r\n}\r\n\r\ninterface RewardsState {\r\n  isLoading: boolean\r\n  cakeToBurn: BigNumber\r\n  rewardsLessTreasuryFee: BigNumber\r\n  rewardsBreakdown: string[]\r\n  countWinnersPerBracket: string[]\r\n}\r\n\r\nconst RewardBrackets: React.FC<RewardMatchesProps> = ({ lotteryData, isHistoricRound }) => {\r\n  const { t } = useTranslation()\r\n  const [state, setState] = useState<RewardsState>({\r\n    isLoading: true,\r\n    cakeToBurn: BIG_ZERO,\r\n    rewardsLessTreasuryFee: BIG_ZERO,\r\n    rewardsBreakdown: null,\r\n    countWinnersPerBracket: null,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (lotteryData) {\r\n      const { treasuryFee, amountCollectedInCake, rewardsBreakdown, countWinnersPerBracket } = lotteryData\r\n\r\n      const feeAsPercentage = new BigNumber(treasuryFee).div(100)\r\n      const cakeToBurn = feeAsPercentage.div(100).times(new BigNumber(amountCollectedInCake))\r\n      const amountLessTreasuryFee = new BigNumber(amountCollectedInCake).minus(cakeToBurn)\r\n      setState({\r\n        isLoading: false,\r\n        cakeToBurn,\r\n        rewardsLessTreasuryFee: amountLessTreasuryFee,\r\n        rewardsBreakdown,\r\n        countWinnersPerBracket,\r\n      })\r\n    } else {\r\n      setState({\r\n        isLoading: true,\r\n        cakeToBurn: BIG_ZERO,\r\n        rewardsLessTreasuryFee: BIG_ZERO,\r\n        rewardsBreakdown: null,\r\n        countWinnersPerBracket: null,\r\n      })\r\n    }\r\n  }, [lotteryData])\r\n\r\n  const getCakeRewards = (bracket: number) => {\r\n    const shareAsPercentage = new BigNumber(state.rewardsBreakdown[bracket]).div(100)\r\n    return state.rewardsLessTreasuryFee.div(100).times(shareAsPercentage)\r\n  }\r\n\r\n  const { isLoading, countWinnersPerBracket, cakeToBurn } = state\r\n\r\n  const rewardBrackets = [0, 1, 2, 3, 4, 5]\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Text fontSize=\"14px\" mb=\"24px\">\r\n        {t('Match the winning number in the same order to share prizes.')}{' '}\r\n        {!isHistoricRound && t('Current prizes up for grabs:')}\r\n      </Text>\r\n      <RewardsInner>\r\n        {rewardBrackets.map((bracketIndex) => (\r\n          <RewardBracketDetail\r\n            key={bracketIndex}\r\n            rewardBracket={bracketIndex}\r\n            cakeAmount={!isLoading && getCakeRewards(bracketIndex)}\r\n            numberWinners={!isLoading && countWinnersPerBracket[bracketIndex]}\r\n            isHistoricRound={isHistoricRound}\r\n            isLoading={isLoading}\r\n          />\r\n        ))}\r\n        <RewardBracketDetail rewardBracket={0} cakeAmount={cakeToBurn} isBurn isLoading={isLoading} />\r\n      </RewardsInner>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default RewardBrackets\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}