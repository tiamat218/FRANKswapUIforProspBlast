{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstakeFarm } from 'utils/calls';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nimport { BIG_TEN } from 'utils/bigNumber';\n\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString());\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst sousEmergencyUnstake = async sousChefContract => {\n  const tx = await sousChefContract.emergencyWithdraw();\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleUnstake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      await unstakeFarm(masterChefContract, 0, amount);\n    } else if (enableEmergencyWithdraw) {\n      await sousEmergencyUnstake(sousChefContract);\n    } else {\n      await sousUnstake(sousChefContract, amount, decimals);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward(sousId, account));\n  }, [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstakePool, \"ZdLCx5w3kCXGv4NZYm/42J9apvQ=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useUnstakePool;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/hooks/useUnstakePool.ts"],"names":["useCallback","useWeb3React","BigNumber","useAppDispatch","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstakeFarm","useMasterchef","useSousChef","BIG_TEN","sousUnstake","sousChefContract","amount","decimals","tx","withdraw","times","pow","toString","receipt","wait","status","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","sousId","enableEmergencyWithdraw","dispatch","account","masterChefContract","handleUnstake","onUnstake"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,EAAqDC,uBAArD,QAAoF,eAApF;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,WAAW,GAAG,OAAOC,gBAAP,EAAyBC,MAAzB,EAAiCC,QAAjC,KAA8C;AAChE,QAAMC,EAAE,GAAG,MAAMH,gBAAgB,CAACI,QAAjB,CAA0B,IAAId,SAAJ,CAAcW,MAAd,EAAsBI,KAAtB,CAA4BP,OAAO,CAACQ,GAAR,CAAYJ,QAAZ,CAA5B,EAAmDK,QAAnD,EAA1B,CAAjB;AACA,QAAMC,OAAO,GAAG,MAAML,EAAE,CAACM,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAJD;;AAMA,MAAMC,oBAAoB,GAAG,MAAOX,gBAAP,IAA4B;AACvD,QAAMG,EAAE,GAAG,MAAMH,gBAAgB,CAACY,iBAAjB,EAAjB;AACA,QAAMJ,OAAO,GAAG,MAAML,EAAE,CAACM,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAJD;;AAMA,MAAMG,cAAc,GAAG,CAACC,MAAD,EAASC,uBAAuB,GAAG,KAAnC,KAA6C;AAAA;;AAClE,QAAMC,QAAQ,GAAGzB,cAAc,EAA/B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAc5B,YAAY,EAAhC;AACA,QAAM6B,kBAAkB,GAAGtB,aAAa,EAAxC;AACA,QAAMI,gBAAgB,GAAGH,WAAW,CAACiB,MAAD,CAApC;AAEA,QAAMK,aAAa,GAAG/B,WAAW,CAC/B,OAAOa,MAAP,EAAuBC,QAAvB,KAA4C;AAC1C,QAAIY,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMnB,WAAW,CAACuB,kBAAD,EAAqB,CAArB,EAAwBjB,MAAxB,CAAjB;AACD,KAFD,MAEO,IAAIc,uBAAJ,EAA6B;AAClC,YAAMJ,oBAAoB,CAACX,gBAAD,CAA1B;AACD,KAFM,MAEA;AACL,YAAMD,WAAW,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAjB;AACD;;AACDc,IAAAA,QAAQ,CAACxB,uBAAuB,CAACsB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACvB,iBAAiB,CAACqB,MAAD,EAASG,OAAT,CAAlB,CAAR;AACAD,IAAAA,QAAQ,CAACtB,uBAAuB,CAACoB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACD,GAZ8B,EAa/B,CAACA,OAAD,EAAUD,QAAV,EAAoBD,uBAApB,EAA6CG,kBAA7C,EAAiElB,gBAAjE,EAAmFc,MAAnF,CAb+B,CAAjC;AAgBA,SAAO;AAAEM,IAAAA,SAAS,EAAED;AAAb,GAAP;AACD,CAvBD;;GAAMN,c;UACatB,c,EACGF,Y,EACOO,a,EACFC,W;;;AAqB3B,eAAegB,cAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useAppDispatch } from 'state'\r\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\r\n  const tx = await sousChefContract.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst sousEmergencyUnstake = async (sousChefContract) => {\r\n  const tx = await sousChefContract.emergencyWithdraw()\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string, decimals: number) => {\r\n      if (sousId === 0) {\r\n        await unstakeFarm(masterChefContract, 0, amount)\r\n      } else if (enableEmergencyWithdraw) {\r\n        await sousEmergencyUnstake(sousChefContract)\r\n      } else {\r\n        await sousUnstake(sousChefContract, amount, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakePool\r\n"]},"metadata":{},"sourceType":"module"}