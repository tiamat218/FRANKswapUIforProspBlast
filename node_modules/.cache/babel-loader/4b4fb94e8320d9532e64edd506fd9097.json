{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import React from'react';import styled from'styled-components';import{RowBetween}from'components/Layout/Row';import{AutoColumn}from'components/Layout/Column';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Grouping=styled(RowBetween)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 50%;\\n\"])));const Circle=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  min-width: 20px;\\n  min-height: 20px;\\n  background-color: \",\";\\n  border-radius: 50%;\\n  color: #ffffff;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  line-height: 8px;\\n  font-size: 12px;\\n\"])),_ref=>{let{theme,confirmed,disabled}=_ref;return disabled?theme.colors.backgroundDisabled:confirmed?theme.colors.success:theme.colors.primary;});const CircleRow=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  width: calc(100% - 20px);\\n  display: flex;\\n  align-items: center;\\n\"])));const Connector=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 2px;\\n  background: linear-gradient(\\n    90deg,\\n    \",\"\\n      0%,\\n    \",\"\\n      80%\\n  );\\n  opacity: 0.6;\\n\"])),_ref2=>{let{theme,prevConfirmed,disabled}=_ref2;return disabled?theme.colors.backgroundDisabled:prevConfirmed?theme.colors.success:theme.colors.primary;},_ref3=>{let{theme,prevConfirmed,disabled}=_ref3;return disabled?theme.colors.backgroundDisabled:prevConfirmed?theme.colors.primary:theme.colors.backgroundDisabled;});/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */export default function ProgressCircles(_ref4){let{steps,disabled=false,...rest}=_ref4;return/*#__PURE__*/_jsx(AutoColumn,{justify:\"center\",...rest,children:/*#__PURE__*/_jsxs(Grouping,{children:[steps.map((step,i)=>{return/*#__PURE__*/ (// eslint-disable-next-line react/no-array-index-key\n_jsxs(CircleRow,{children:[/*#__PURE__*/_jsx(Circle,{confirmed:step,disabled:disabled||!steps[i-1]&&i!==0,children:step?'✓':i+1}),/*#__PURE__*/_jsx(Connector,{prevConfirmed:step,disabled:disabled})]},i));}),/*#__PURE__*/_jsx(Circle,{disabled:disabled||!steps[steps.length-1],children:steps.length+1})]})});}","map":{"version":3,"names":["React","styled","RowBetween","AutoColumn","jsx","_jsx","jsxs","_jsxs","Grouping","_templateObject","_taggedTemplateLiteral","Circle","div","_templateObject2","_ref","theme","confirmed","disabled","colors","backgroundDisabled","success","primary","CircleRow","_templateObject3","Connector","_templateObject4","_ref2","prevConfirmed","_ref3","ProgressCircles","_ref4","steps","rest","justify","children","map","step","i","length"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Swap/components/ProgressSteps.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { RowBetween } from 'components/Layout/Row'\r\nimport { AutoColumn } from 'components/Layout/Column'\r\n\r\nconst Grouping = styled(RowBetween)`\r\n  width: 50%;\r\n`\r\n\r\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  background-color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\r\n  border-radius: 50%;\r\n  color: #ffffff;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 8px;\r\n  font-size: 12px;\r\n`\r\n\r\nconst CircleRow = styled.div`\r\n  width: calc(100% - 20px);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Connector = styled.div<{ prevConfirmed?: boolean; disabled?: boolean }>`\r\n  width: 100%;\r\n  height: 2px;\r\n  background: linear-gradient(\r\n    90deg,\r\n    ${({ theme, prevConfirmed, disabled }) =>\r\n        disabled ? theme.colors.backgroundDisabled : prevConfirmed ? theme.colors.success : theme.colors.primary}\r\n      0%,\r\n    ${({ theme, prevConfirmed, disabled }) =>\r\n        disabled\r\n          ? theme.colors.backgroundDisabled\r\n          : prevConfirmed\r\n          ? theme.colors.primary\r\n          : theme.colors.backgroundDisabled}\r\n      80%\r\n  );\r\n  opacity: 0.6;\r\n`\r\n\r\ninterface ProgressCirclesProps {\r\n  steps: boolean[]\r\n  disabled?: boolean\r\n}\r\n\r\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\r\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\r\n  return (\r\n    <AutoColumn justify=\"center\" {...rest}>\r\n      <Grouping>\r\n        {steps.map((step, i) => {\r\n          return (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <CircleRow key={i}>\r\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\r\n                {step ? '✓' : i + 1}\r\n              </Circle>\r\n              <Connector prevConfirmed={step} disabled={disabled} />\r\n            </CircleRow>\r\n          )\r\n        })}\r\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1}</Circle>\r\n      </Grouping>\r\n    </AutoColumn>\r\n  )\r\n}\r\n"],"mappings":"gQAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,OAASC,UAAU,KAAQ,uBAAuB,CAClD,OAASC,UAAU,KAAQ,0BAA0B,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErD,KAAM,CAAAC,QAAQ,CAAGP,MAAM,CAACC,UAAU,CAAC,CAAAO,eAAA,GAAAA,eAAA,CAAAC,sBAAA,yBAElC,CAED,KAAM,CAAAC,MAAM,CAAGV,MAAM,CAACW,GAAG,CAAAC,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,sOAGHI,IAAA,MAAC,CAAEC,KAAK,CAAEC,SAAS,CAAEC,QAAS,CAAC,CAAAH,IAAA,OACjD,CAAAG,QAAQ,CAAGF,KAAK,CAACG,MAAM,CAACC,kBAAkB,CAAGH,SAAS,CAAGD,KAAK,CAACG,MAAM,CAACE,OAAO,CAAGL,KAAK,CAACG,MAAM,CAACG,OAAO,GAQvG,CAED,KAAM,CAAAC,SAAS,CAAGrB,MAAM,CAACW,GAAG,CAAAW,gBAAA,GAAAA,gBAAA,CAAAb,sBAAA,iFAI3B,CAED,KAAM,CAAAc,SAAS,CAAGvB,MAAM,CAACW,GAAG,CAAAa,gBAAA,GAAAA,gBAAA,CAAAf,sBAAA,qJAKtBgB,KAAA,MAAC,CAAEX,KAAK,CAAEY,aAAa,CAAEV,QAAS,CAAC,CAAAS,KAAA,OACjC,CAAAT,QAAQ,CAAGF,KAAK,CAACG,MAAM,CAACC,kBAAkB,CAAGQ,aAAa,CAAGZ,KAAK,CAACG,MAAM,CAACE,OAAO,CAAGL,KAAK,CAACG,MAAM,CAACG,OAAO,GAE1GO,KAAA,MAAC,CAAEb,KAAK,CAAEY,aAAa,CAAEV,QAAS,CAAC,CAAAW,KAAA,OACjC,CAAAX,QAAQ,CACJF,KAAK,CAACG,MAAM,CAACC,kBAAkB,CAC/BQ,aAAa,CACbZ,KAAK,CAACG,MAAM,CAACG,OAAO,CACpBN,KAAK,CAACG,MAAM,CAACC,kBAAkB,GAI1C,CAOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAU,eAAeA,CAAAC,KAAA,CAA6D,IAA5D,CAAEC,KAAK,CAAEd,QAAQ,CAAG,KAAK,CAAE,GAAGe,IAA2B,CAAC,CAAAF,KAAA,CAChG,mBACEzB,IAAA,CAACF,UAAU,EAAC8B,OAAO,CAAC,QAAQ,IAAKD,IAAI,CAAAE,QAAA,cACnC3B,KAAA,CAACC,QAAQ,EAAA0B,QAAA,EACNH,KAAK,CAACI,GAAG,CAAC,CAACC,IAAI,CAAEC,CAAC,GAAK,CACtB,oBACE;AACA9B,KAAA,CAACe,SAAS,EAAAY,QAAA,eACR7B,IAAA,CAACM,MAAM,EAACK,SAAS,CAAEoB,IAAK,CAACnB,QAAQ,CAAEA,QAAQ,EAAK,CAACc,KAAK,CAACM,CAAC,CAAG,CAAC,CAAC,EAAIA,CAAC,GAAK,CAAG,CAAAH,QAAA,CACvEE,IAAI,CAAG,GAAG,CAAGC,CAAC,CAAG,CAAC,CACb,CAAC,cACThC,IAAA,CAACmB,SAAS,EAACG,aAAa,CAAES,IAAK,CAACnB,QAAQ,CAAEA,QAAS,CAAE,CAAC,GAJxCoB,CAKL,CAAC,EAEhB,CAAC,CAAC,cACFhC,IAAA,CAACM,MAAM,EAACM,QAAQ,CAAEA,QAAQ,EAAI,CAACc,KAAK,CAACA,KAAK,CAACO,MAAM,CAAG,CAAC,CAAE,CAAAJ,QAAA,CAAEH,KAAK,CAACO,MAAM,CAAG,CAAC,CAAS,CAAC,EAC3E,CAAC,CACD,CAAC,CAEjB","ignoreList":[]},"metadata":{},"sourceType":"module"}