{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\BuyTicketsModal\\\\BuyTicketsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { Modal, Text, Flex, HelpIcon, BalanceInput, Ticket, useTooltip, Skeleton, Button, ArrowForwardIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber';\nimport { useAppDispatch } from 'state';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchUserTicketsAndLotteries } from 'state/lottery';\nimport useTheme from 'hooks/useTheme';\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport ApproveConfirmButtons, { ButtonArrangement } from 'views/Profile/components/ApproveConfirmButtons';\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton';\nimport EditNumbersModal from './EditNumbersModal';\nimport { useTicketsReducer } from './useTicketsReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n`;\n_c = StyledModal;\nconst ShortcutButtonsWrapper = styled(Flex)`\n  justify-content: space-between;\n  margin-top: 8px;\n  margin-bottom: 24px;\n  display: ${({\n  isVisible\n}) => isVisible ? 'flex' : 'none'};\n`;\n_c2 = ShortcutButtonsWrapper;\nvar BuyingStage;\n\n(function (BuyingStage) {\n  BuyingStage[\"BUY\"] = \"Buy\";\n  BuyingStage[\"EDIT\"] = \"Edit\";\n})(BuyingStage || (BuyingStage = {}));\n\nconst BuyTicketsModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId,\n    currentRound: {\n      priceTicketInCake,\n      discountDivisor,\n      userTickets: {\n        tickets: userCurrentTickets\n      }\n    }\n  } = useLottery();\n  const [ticketsToBuy, setTicketsToBuy] = useState('');\n  const [discountValue, setDiscountValue] = useState('');\n  const [totalCost, setTotalCost] = useState('');\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('');\n  const [buyingStage, setBuyingStage] = useState(BuyingStage.BUY);\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO);\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false);\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false);\n  const lotteryContract = useLotteryV2Contract();\n  const cakeContract = useCake();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    balance: userCake,\n    fetchStatus\n  } = useTokenBalance(getCakeAddress()); // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instanciated on each render, hence memoising it using the stringified value below.\n\n  const stringifiedUserCake = userCake.toJSON();\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake]);\n  const cakePriceBusd = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS;\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3);\n\n  const TooltipComponent = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: \"16px\",\n      children: t('Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('2 tickets: 0.05%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('50 tickets: 2.45%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('100 tickets: 4.95%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(TooltipComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 61\n  }, this), {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10]\n  });\n  const limitNumberByMaxTicketsPerBuy = useCallback(number => {\n    return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number;\n  }, [maxNumberTicketsPerBuyOrClaim]);\n  const getTicketCostAfterDiscount = useCallback(numberTickets => {\n    const totalAfterDiscount = priceTicketInCake.times(numberTickets).times(discountDivisor.plus(1).minus(numberTickets)).div(discountDivisor);\n    return totalAfterDiscount;\n  }, [discountDivisor, priceTicketInCake]);\n  const getMaxTicketBuyWithDiscount = useCallback(numberTickets => {\n    const costAfterDiscount = getTicketCostAfterDiscount(numberTickets);\n    const costBeforeDiscount = priceTicketInCake.times(numberTickets);\n    const discountAmount = costBeforeDiscount.minus(costAfterDiscount);\n    const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake);\n    const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount);\n    return {\n      overallTicketBuy,\n      ticketsBoughtWithDiscount\n    };\n  }, [getTicketCostAfterDiscount, priceTicketInCake]);\n  const validateInput = useCallback(inputNumber => {\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber);\n    const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets);\n\n    if (cakeCostAfterDiscount.gt(userCake)) {\n      setUserNotEnoughCake(true);\n    } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\n      setMaxTicketPurchaseExceeded(true);\n    } else {\n      setUserNotEnoughCake(false);\n      setMaxTicketPurchaseExceeded(false);\n    }\n  }, [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake]);\n  useEffect(() => {\n    const getMaxPossiblePurchase = () => {\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake);\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase);\n      let maxPurchase; // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\n\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\n        // Get max tickets purchaseble with the users' balance, as well as using the discount to buy tickets\n        const {\n          overallTicketBuy: maxPlusDiscountTickets\n        } = getMaxTicketBuyWithDiscount(limitedMaxPurchase); // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\n\n        const {\n          ticketsBoughtWithDiscount: secondTicketDiscountBuy\n        } = getMaxTicketBuyWithDiscount(maxPlusDiscountTickets); // Add the additional tickets that can be bought with the discount, to the original max purchase\n\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy);\n      } else {\n        maxPurchase = limitedMaxPurchase;\n      }\n\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\n        setUserNotEnoughCake(true);\n      } else {\n        setUserNotEnoughCake(false);\n      }\n\n      setMaxPossibleTicketPurchase(maxPurchase);\n    };\n\n    getMaxPossiblePurchase();\n  }, [maxNumberTicketsPerBuyOrClaim, priceTicketInCake, memoisedUserCake, limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, getMaxTicketBuyWithDiscount, hasFetchedBalance]);\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy);\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy);\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy);\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount);\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0');\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0');\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0');\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount]);\n\n  const getNumTicketsByPercentage = percentage => {\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0) ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage)) : BIG_ZERO;\n    return Math.floor(percentageOfMaxTickets.toNumber());\n  };\n\n  const tenPercentOfBalance = getNumTicketsByPercentage(10);\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25);\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50);\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100);\n\n  const handleInputChange = input => {\n    // Force input to integer\n    const inputAsInt = parseInt(input, 10);\n    const inputAsBN = new BigNumber(inputAsInt);\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN);\n    validateInput(inputAsBN);\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '');\n  };\n\n  const handleNumberButtonClick = number => {\n    setTicketsToBuy(number.toFixed());\n    setUserNotEnoughCake(false);\n    setMaxTicketPurchaseExceeded(false);\n  };\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(parseInt(ticketsToBuy, 10), userCurrentTickets);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await cakeContract.allowance(account, lotteryContract.address);\n        const currentAllowance = ethersToBigNumber(response);\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return cakeContract.approve(lotteryContract.address, ethers.constants.MaxUint256);\n    },\n    onApproveSuccess: async () => {\n      toastSuccess(t('Contract enabled - you can now purchase tickets'));\n    },\n    onConfirm: () => {\n      const ticketsForPurchase = getTicketsForPurchase();\n      return lotteryContract.buyTickets(currentLotteryId, ticketsForPurchase);\n    },\n    onSuccess: async () => {\n      onDismiss();\n      dispatch(fetchUserTicketsAndLotteries({\n        account,\n        currentLotteryId\n      }));\n      toastSuccess(t('Lottery tickets purchased!'));\n    }\n  });\n\n  const getErrorMessage = () => {\n    if (userNotEnoughCake) return t('Insufficient CAKE balance');\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString()\n    });\n  };\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100);\n\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0;\n    }\n\n    return percentageAsBn.toNumber().toFixed(2);\n  };\n\n  const disableBuying = !isApproved || isConfirmed || userNotEnoughCake || !ticketsToBuy || new BigNumber(ticketsToBuy).lte(0) || getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10);\n\n  if (buyingStage === BuyingStage.EDIT) {\n    return /*#__PURE__*/_jsxDEV(EditNumbersModal, {\n      totalCost: totalCost,\n      updateTicket: updateTicket,\n      randomize: randomize,\n      tickets: tickets,\n      allComplete: allComplete,\n      onConfirm: handleConfirm,\n      isConfirming: isConfirming,\n      onDismiss: () => setBuyingStage(BuyingStage.BUY)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    title: t('Buy Tickets'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        children: [t('Buy'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mr: \"4px\",\n          bold: true,\n          children: t('Tickets')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Ticket, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      isWarning: userNotEnoughCake || maxTicketPurchaseExceeded,\n      placeholder: \"0\",\n      value: ticketsToBuy,\n      onUserInput: handleInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      mt: \"4px\",\n      mb: \"12px\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"flex-end\",\n        flexDirection: \"column\",\n        children: [(userNotEnoughCake || maxTicketPurchaseExceeded) && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"failure\",\n          children: getErrorMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            mr: \"4px\",\n            children: [\"CAKE \", t('Balance'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), hasFetchedBalance ? /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: userCakeDisplayBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: 50,\n            height: 12\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), !hasFetchedBalance ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: 20,\n      mt: \"8px\",\n      mb: \"24px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ShortcutButtonsWrapper, {\n      isVisible: hasFetchedBalance && oneHundredPercentOfBalance >= 1,\n      children: [tenPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(tenPercentOfBalance),\n        children: hasFetchedBalance ? tenPercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }, this), twentyFivePercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(twentyFivePercentOfBalance),\n        children: hasFetchedBalance ? twentyFivePercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }, this), fiftyPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(fiftyPercentOfBalance),\n        children: hasFetchedBalance ? fiftyPercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }, this), oneHundredPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(oneHundredPercentOfBalance),\n        children: \"MAX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          children: [t('Cost'), \" (CAKE)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          children: [priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0)), \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            display: \"inline\",\n            bold: true,\n            fontSize: \"14px\",\n            mr: \"4px\",\n            children: [discountValue && totalCost ? percentageDiscount() : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            display: \"inline\",\n            color: \"textSubtle\",\n            fontSize: \"14px\",\n            children: t('Bulk discount')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n              ml: \"4px\",\n              width: \"14px\",\n              height: \"14px\",\n              color: \"textSubtle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"textSubtle\",\n          children: [\"~\", discountValue, \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        borderTop: `1px solid ${theme.colors.cardBorder}`,\n        pt: \"8px\",\n        mb: \"24px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"16px\",\n          children: t('You pay')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"16px\",\n          bold: true,\n          children: [\"~\", totalCost, \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), account ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n          isApproveDisabled: isApproved,\n          isApproving: isApproving,\n          isConfirmDisabled: disableBuying,\n          isConfirming: isConfirming,\n          onApprove: handleApprove,\n          onConfirm: handleConfirm,\n          buttonArrangement: ButtonArrangement.SEQUENTIAL,\n          confirmLabel: t('Buy Instantly')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), isApproved && /*#__PURE__*/_jsxDEV(Button, {\n          id: `lottery_buy_ins_${ticketsToBuy}`,\n          variant: \"secondary\",\n          mt: \"8px\",\n          disabled: disableBuying || isConfirming,\n          onClick: () => {\n            setBuyingStage(BuyingStage.EDIT);\n          },\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            children: [t('View/Edit Numbers'), ' ', /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              mt: \"2px\",\n              color: disableBuying || isConfirming ? 'disabled' : 'primary',\n              height: \"24px\",\n              width: \"24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        mt: \"24px\",\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: t('\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyTicketsModal, \"funczYmkHxOexoqU7lMfX/ASW3c=\", false, function () {\n  return [useWeb3React, useTranslation, useTheme, useLottery, useLotteryV2Contract, useCake, useToast, useTokenBalance, usePriceCakeBusd, useAppDispatch, useTooltip, useTicketsReducer, useApproveConfirmTransaction];\n});\n\n_c3 = BuyTicketsModal;\nexport default BuyTicketsModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledModal\");\n$RefreshReg$(_c2, \"ShortcutButtonsWrapper\");\n$RefreshReg$(_c3, \"BuyTicketsModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx"],"names":["React","useEffect","useState","useMemo","useCallback","styled","BigNumber","ethers","Modal","Text","Flex","HelpIcon","BalanceInput","Ticket","useTooltip","Skeleton","Button","ArrowForwardIcon","useTranslation","useWeb3React","getFullDisplayBalance","getCakeAddress","BIG_ZERO","ethersToBigNumber","useAppDispatch","usePriceCakeBusd","useLottery","fetchUserTicketsAndLotteries","useTheme","useTokenBalance","FetchStatus","useApproveConfirmTransaction","useCake","useLotteryV2Contract","useToast","ConnectWalletButton","ApproveConfirmButtons","ButtonArrangement","NumTicketsToBuyButton","EditNumbersModal","useTicketsReducer","StyledModal","ShortcutButtonsWrapper","isVisible","BuyingStage","BuyTicketsModal","onDismiss","account","t","theme","maxNumberTicketsPerBuyOrClaim","currentLotteryId","currentRound","priceTicketInCake","discountDivisor","userTickets","tickets","userCurrentTickets","ticketsToBuy","setTicketsToBuy","discountValue","setDiscountValue","totalCost","setTotalCost","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","buyingStage","setBuyingStage","BUY","maxPossibleTicketPurchase","setMaxPossibleTicketPurchase","maxTicketPurchaseExceeded","setMaxTicketPurchaseExceeded","userNotEnoughCake","setUserNotEnoughCake","lotteryContract","cakeContract","toastSuccess","balance","userCake","fetchStatus","stringifiedUserCake","toJSON","memoisedUserCake","cakePriceBusd","dispatch","hasFetchedBalance","SUCCESS","userCakeDisplayBalance","TooltipComponent","targetRef","tooltip","tooltipVisible","placement","tooltipOffset","limitNumberByMaxTicketsPerBuy","number","gt","getTicketCostAfterDiscount","numberTickets","totalAfterDiscount","times","plus","minus","div","getMaxTicketBuyWithDiscount","costAfterDiscount","costBeforeDiscount","discountAmount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","cakeCostAfterDiscount","eq","getMaxPossiblePurchase","maxBalancePurchase","limitedMaxPurchase","maxPurchase","lt","maxPlusDiscountTickets","secondTicketDiscountBuy","numberOfTicketsToBuy","discountBeingApplied","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","Math","floor","toNumber","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleInputChange","input","inputAsInt","parseInt","inputAsBN","toString","handleNumberButtonClick","toFixed","updateTicket","randomize","allComplete","getTicketsForPurchase","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","address","currentAllowance","error","onApprove","approve","constants","MaxUint256","onApproveSuccess","onConfirm","ticketsForPurchase","buyTickets","onSuccess","getErrorMessage","maxTickets","percentageDiscount","percentageAsBn","isNaN","disableBuying","lte","length","EDIT","colors","gradients","cardHeader","cardBorder","SEQUENTIAL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Modal,\r\n  Text,\r\n  Flex,\r\n  HelpIcon,\r\n  BalanceInput,\r\n  Ticket,\r\n  useTooltip,\r\n  Skeleton,\r\n  Button,\r\n  ArrowForwardIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ApproveConfirmButtons, { ButtonArrangement } from 'views/Profile/components/ApproveConfirmButtons'\r\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\r\nimport EditNumbersModal from './EditNumbersModal'\r\nimport { useTicketsReducer } from './useTicketsReducer'\r\n\r\nconst StyledModal = styled(Modal)`\r\n  min-width: 280px;\r\n  max-width: 320px;\r\n`\r\n\r\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\r\n  justify-content: space-between;\r\n  margin-top: 8px;\r\n  margin-bottom: 24px;\r\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\r\n`\r\n\r\ninterface BuyTicketsModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nenum BuyingStage {\r\n  BUY = 'Buy',\r\n  EDIT = 'Edit',\r\n}\r\n\r\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const {\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    currentLotteryId,\r\n    currentRound: {\r\n      priceTicketInCake,\r\n      discountDivisor,\r\n      userTickets: { tickets: userCurrentTickets },\r\n    },\r\n  } = useLottery()\r\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\r\n  const [discountValue, setDiscountValue] = useState('')\r\n  const [totalCost, setTotalCost] = useState('')\r\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\r\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\r\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\r\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\r\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const cakeContract = useCake()\r\n  const { toastSuccess } = useToast()\r\n  const { balance: userCake, fetchStatus } = useTokenBalance(getCakeAddress())\r\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instanciated on each render, hence memoising it using the stringified value below.\r\n  const stringifiedUserCake = userCake.toJSON()\r\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS\r\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3)\r\n\r\n  const TooltipComponent = () => (\r\n    <>\r\n      <Text mb=\"16px\">\r\n        {t(\r\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\r\n        )}\r\n      </Text>\r\n      <Text>{t('2 tickets: 0.05%')}</Text>\r\n      <Text>{t('50 tickets: 2.45%')}</Text>\r\n      <Text>{t('100 tickets: 4.95%')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\r\n    placement: 'bottom-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  const limitNumberByMaxTicketsPerBuy = useCallback(\r\n    (number: BigNumber) => {\r\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\r\n    },\r\n    [maxNumberTicketsPerBuyOrClaim],\r\n  )\r\n\r\n  const getTicketCostAfterDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const totalAfterDiscount = priceTicketInCake\r\n        .times(numberTickets)\r\n        .times(discountDivisor.plus(1).minus(numberTickets))\r\n        .div(discountDivisor)\r\n      return totalAfterDiscount\r\n    },\r\n    [discountDivisor, priceTicketInCake],\r\n  )\r\n\r\n  const getMaxTicketBuyWithDiscount = useCallback(\r\n    (numberTickets: BigNumber) => {\r\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\r\n      const costBeforeDiscount = priceTicketInCake.times(numberTickets)\r\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\r\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake)\r\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\r\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\r\n    },\r\n    [getTicketCostAfterDiscount, priceTicketInCake],\r\n  )\r\n\r\n  const validateInput = useCallback(\r\n    (inputNumber: BigNumber) => {\r\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\r\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\r\n\r\n      if (cakeCostAfterDiscount.gt(userCake)) {\r\n        setUserNotEnoughCake(true)\r\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\r\n        setMaxTicketPurchaseExceeded(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n        setMaxTicketPurchaseExceeded(false)\r\n      }\r\n    },\r\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const getMaxPossiblePurchase = () => {\r\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake)\r\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\r\n      let maxPurchase\r\n\r\n      // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\r\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\r\n        // Get max tickets purchaseble with the users' balance, as well as using the discount to buy tickets\r\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\r\n\r\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\r\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\r\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\r\n\r\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\r\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\r\n      } else {\r\n        maxPurchase = limitedMaxPurchase\r\n      }\r\n\r\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\r\n        setUserNotEnoughCake(true)\r\n      } else {\r\n        setUserNotEnoughCake(false)\r\n      }\r\n\r\n      setMaxPossibleTicketPurchase(maxPurchase)\r\n    }\r\n    getMaxPossiblePurchase()\r\n  }, [\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    priceTicketInCake,\r\n    memoisedUserCake,\r\n    limitNumberByMaxTicketsPerBuy,\r\n    getTicketCostAfterDiscount,\r\n    getMaxTicketBuyWithDiscount,\r\n    hasFetchedBalance,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\r\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\r\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\r\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\r\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0')\r\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\r\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0')\r\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\r\n\r\n  const getNumTicketsByPercentage = (percentage: number): number => {\r\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\r\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\r\n      : BIG_ZERO\r\n    return Math.floor(percentageOfMaxTickets.toNumber())\r\n  }\r\n\r\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\r\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\r\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\r\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\r\n\r\n  const handleInputChange = (input: string) => {\r\n    // Force input to integer\r\n    const inputAsInt = parseInt(input, 10)\r\n    const inputAsBN = new BigNumber(inputAsInt)\r\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\r\n    validateInput(inputAsBN)\r\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\r\n  }\r\n\r\n  const handleNumberButtonClick = (number: number) => {\r\n    setTicketsToBuy(number.toFixed())\r\n    setUserNotEnoughCake(false)\r\n    setMaxTicketPurchaseExceeded(false)\r\n  }\r\n\r\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\r\n    parseInt(ticketsToBuy, 10),\r\n    userCurrentTickets,\r\n  )\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await cakeContract.allowance(account, lotteryContract.address)\r\n          const currentAllowance = ethersToBigNumber(response)\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return cakeContract.approve(lotteryContract.address, ethers.constants.MaxUint256)\r\n      },\r\n      onApproveSuccess: async () => {\r\n        toastSuccess(t('Contract enabled - you can now purchase tickets'))\r\n      },\r\n      onConfirm: () => {\r\n        const ticketsForPurchase = getTicketsForPurchase()\r\n        return lotteryContract.buyTickets(currentLotteryId, ticketsForPurchase)\r\n      },\r\n      onSuccess: async () => {\r\n        onDismiss()\r\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n        toastSuccess(t('Lottery tickets purchased!'))\r\n      },\r\n    })\r\n\r\n  const getErrorMessage = () => {\r\n    if (userNotEnoughCake) return t('Insufficient CAKE balance')\r\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\r\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\r\n    })\r\n  }\r\n\r\n  const percentageDiscount = () => {\r\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\r\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\r\n      return 0\r\n    }\r\n    return percentageAsBn.toNumber().toFixed(2)\r\n  }\r\n\r\n  const disableBuying =\r\n    !isApproved ||\r\n    isConfirmed ||\r\n    userNotEnoughCake ||\r\n    !ticketsToBuy ||\r\n    new BigNumber(ticketsToBuy).lte(0) ||\r\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\r\n\r\n  if (buyingStage === BuyingStage.EDIT) {\r\n    return (\r\n      <EditNumbersModal\r\n        totalCost={totalCost}\r\n        updateTicket={updateTicket}\r\n        randomize={randomize}\r\n        tickets={tickets}\r\n        allComplete={allComplete}\r\n        onConfirm={handleConfirm}\r\n        isConfirming={isConfirming}\r\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      {tooltipVisible && tooltip}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Text mr=\"4px\" bold>\r\n            {t('Tickets')}\r\n          </Text>\r\n          <Ticket />\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        isWarning={userNotEnoughCake || maxTicketPurchaseExceeded}\r\n        placeholder=\"0\"\r\n        value={ticketsToBuy}\r\n        onUserInput={handleInputChange}\r\n        currencyValue={\r\n          cakePriceBusd.gt(0) &&\r\n          `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\r\n        }\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\r\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\r\n          {(userNotEnoughCake || maxTicketPurchaseExceeded) && (\r\n            <Text fontSize=\"12px\" color=\"failure\">\r\n              {getErrorMessage()}\r\n            </Text>\r\n          )}\r\n          <Flex justifyContent=\"flex-end\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\r\n              CAKE {t('Balance')}:\r\n            </Text>\r\n            {hasFetchedBalance ? (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                {userCakeDisplayBalance}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width={50} height={12} />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      {!hasFetchedBalance ? (\r\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\r\n      ) : (\r\n        <ShortcutButtonsWrapper isVisible={hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\r\n          {tenPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\r\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {twentyFivePercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\r\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {fiftyPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\r\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n          {oneHundredPercentOfBalance >= 1 && (\r\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\r\n              MAX\r\n            </NumTicketsToBuyButton>\r\n          )}\r\n        </ShortcutButtonsWrapper>\r\n      )}\r\n      <Flex flexDirection=\"column\">\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Cost')} (CAKE)\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0))} CAKE\r\n          </Text>\r\n        </Flex>\r\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\r\n          <Flex>\r\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\r\n              {discountValue && totalCost ? percentageDiscount() : 0}%\r\n            </Text>\r\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\r\n              {t('Bulk discount')}\r\n            </Text>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\r\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\r\n            </Flex>\r\n          </Flex>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            ~{discountValue} CAKE\r\n          </Text>\r\n        </Flex>\r\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\r\n          <Text color=\"textSubtle\" fontSize=\"16px\">\r\n            {t('You pay')}\r\n          </Text>\r\n          <Text fontSize=\"16px\" bold>\r\n            ~{totalCost} CAKE\r\n          </Text>\r\n        </Flex>\r\n\r\n        {account ? (\r\n          <>\r\n            <ApproveConfirmButtons\r\n              isApproveDisabled={isApproved}\r\n              isApproving={isApproving}\r\n              isConfirmDisabled={disableBuying}\r\n              isConfirming={isConfirming}\r\n              onApprove={handleApprove}\r\n              onConfirm={handleConfirm}\r\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\r\n              confirmLabel={t('Buy Instantly')}\r\n            />\r\n            {isApproved && (\r\n              <Button\r\n                id={`lottery_buy_ins_${ticketsToBuy}`}\r\n                variant=\"secondary\"\r\n                mt=\"8px\"\r\n                disabled={disableBuying || isConfirming}\r\n                onClick={() => {\r\n                  setBuyingStage(BuyingStage.EDIT)\r\n                }}\r\n              >\r\n                <Flex alignItems=\"center\">\r\n                  {t('View/Edit Numbers')}{' '}\r\n                  <ArrowForwardIcon\r\n                    mt=\"2px\"\r\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\r\n                    height=\"24px\"\r\n                    width=\"24px\"\r\n                  />\r\n                </Flex>\r\n              </Button>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <ConnectWalletButton />\r\n        )}\r\n\r\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t(\r\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketsModal\r\n"]},"metadata":{},"sourceType":"module"}