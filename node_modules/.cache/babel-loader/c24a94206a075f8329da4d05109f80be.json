{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\TradingView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Box } from '@pancakeswap/uikit';\nimport { useTheme } from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst tradingViewListener = async () => new Promise(resolve => Object.defineProperty(window, 'TradingView', {\n  configurable: true,\n\n  set(value) {\n    this.tv = value;\n    resolve(value);\n  }\n\n}));\n\nconst initializeTradingView = (TradingViewObj, theme, localeCode) => {\n  /* eslint-disable new-cap */\n\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c'\n  });\n};\n\nconst TradingView = () => {\n  _s();\n\n  const {\n    currentLanguage\n  } = useTranslation();\n  const theme = useTheme();\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code);\n    } else {\n      tradingViewListener().then(tv => {\n        initializeTradingView(tv, theme, currentLanguage.code);\n      });\n    }\n  }, [theme, currentLanguage]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    overflow: \"hidden\",\n    className: \"tradingview_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"tradingview_b239c\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TradingView, \"OkCMeLjZVO85Rc/FXqWd7KVZ4Ek=\", false, function () {\n  return [useTranslation, useTheme];\n});\n\n_c = TradingView;\nexport default TradingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TradingView\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/TradingView.tsx"],"names":["React","useEffect","Box","useTheme","useTranslation","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","value","tv","initializeTradingView","TradingViewObj","theme","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","style","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","code","then"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAAuBC,QAAvB,QAAuC,mBAAvC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA;AACA;AACA;AACA;;;;AACA,MAAMC,mBAAmB,GAAG,YAC1B,IAAIC,OAAJ,CAAmBC,OAAD,IAChBC,MAAM,CAACC,cAAP,CAAsBC,MAAtB,EAA8B,aAA9B,EAA6C;AAC3CC,EAAAA,YAAY,EAAE,IAD6B;;AAE3CC,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACT,SAAKC,EAAL,GAAUD,KAAV;AACAN,IAAAA,OAAO,CAACM,KAAD,CAAP;AACD;;AAL0C,CAA7C,CADF,CADF;;AAWA,MAAME,qBAAqB,GAAG,CAACC,cAAD,EAAsBC,KAAtB,EAA2CC,UAA3C,KAAkE;AAC9F;;AACA;AACA;AACA,MAAIF,cAAc,CAACG,MAAnB,CAA0B;AACxBC,IAAAA,QAAQ,EAAE,IADc;AAExBC,IAAAA,MAAM,EAAE,MAFgB;AAGxBC,IAAAA,MAAM,EAAE,iBAHgB;AAIxBC,IAAAA,QAAQ,EAAE,GAJc;AAKxBC,IAAAA,QAAQ,EAAE,SALc;AAMxBP,IAAAA,KAAK,EAAEA,KAAK,CAACQ,MAAN,GAAe,MAAf,GAAwB,OANP;AAOxBC,IAAAA,KAAK,EAAE,GAPiB;AAQxBC,IAAAA,MAAM,EAAET,UARgB;AASxBU,IAAAA,UAAU,EAAE,SATY;AAUxBC,IAAAA,iBAAiB,EAAE,KAVK;AAWxBC,IAAAA,mBAAmB,EAAE,IAXG;AAYxBC,IAAAA,YAAY,EAAE;AAZU,GAA1B;AAcD,CAlBD;;AAoBA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAsB7B,cAAc,EAA1C;AACA,QAAMa,KAAK,GAAGd,QAAQ,EAAtB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIS,MAAM,CAACsB,WAAX,EAAwB;AACtB;AACAjB,MAAAA,qBAAqB,CAACL,MAAM,CAACsB,WAAR,EAAqBf,KAArB,EAA4BgB,eAAe,CAACC,IAA5C,CAArB;AACD,KAHD,MAGO;AACL7B,MAAAA,mBAAmB,GAAG8B,IAAtB,CAA4BrB,EAAD,IAAQ;AACjCC,QAAAA,qBAAqB,CAACD,EAAD,EAAKG,KAAL,EAAYgB,eAAe,CAACC,IAA5B,CAArB;AACD,OAFD;AAGD;AACF,GAVQ,EAUN,CAACjB,KAAD,EAAQgB,eAAR,CAVM,CAAT;AAYA,sBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,QAAd;AAAuB,IAAA,SAAS,EAAC,uBAAjC;AAAA,2BACE;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArBD;;GAAMD,W;UACwB5B,c,EACdD,Q;;;KAFV6B,W;AAuBN,eAAeA,WAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n"]},"metadata":{},"sourceType":"module"}