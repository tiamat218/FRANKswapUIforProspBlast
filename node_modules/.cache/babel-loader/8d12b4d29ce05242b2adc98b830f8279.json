{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\Logo\\\\CurrencyLogo.tsx\",\n    _s = $RefreshSig$();\n\nimport { ETHER, Token } from '@pancakeswap/sdk';\nimport { BinanceIcon } from '@pancakeswap/uikit';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport useHttpLocations from '../../hooks/useHttpLocations';\nimport { WrappedTokenInfo } from '../../state/lists/hooks';\nimport getTokenLogoURL from '../../utils/getTokenLogoURL';\nimport Logo from './Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledLogo = styled(Logo)`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n`;\n_c = StyledLogo;\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}) {\n  _s();\n\n  var _currency$symbol;\n\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined);\n  const srcs = useMemo(() => {\n    if (currency === ETHER) return [];\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)];\n      }\n\n      return [getTokenLogoURL(currency.address)];\n    }\n\n    return [];\n  }, [currency, uriLocations]);\n\n  if (currency === ETHER) {\n    return /*#__PURE__*/_jsxDEV(BinanceIcon, {\n      width: size,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledLogo, {\n    size: size,\n    srcs: srcs,\n    alt: `${(_currency$symbol = currency === null || currency === void 0 ? void 0 : currency.symbol) !== null && _currency$symbol !== void 0 ? _currency$symbol : 'token'} logo`,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CurrencyLogo, \"jo2gP9fsIv3AxI3dA7ElsR2yU5g=\", false, function () {\n  return [useHttpLocations];\n});\n\n_c2 = CurrencyLogo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledLogo\");\n$RefreshReg$(_c2, \"CurrencyLogo\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/Logo/CurrencyLogo.tsx"],"names":["ETHER","Token","BinanceIcon","React","useMemo","styled","useHttpLocations","WrappedTokenInfo","getTokenLogoURL","Logo","StyledLogo","size","CurrencyLogo","currency","style","uriLocations","logoURI","undefined","srcs","address","symbol"],"mappings":";;;AAAA,SAAmBA,KAAnB,EAA0BC,KAA1B,QAAuC,kBAAvC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,UAAU,GAAGL,MAAM,CAACI,IAAD,CAAyB;AAClD,WAAW,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC9B,YAAY,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAcA,IAAK;AAC/B,CAHA;KAAMD,U;AAKN,eAAe,SAASE,YAAT,CAAsB;AACnCC,EAAAA,QADmC;AAEnCF,EAAAA,IAAI,GAAG,MAF4B;AAGnCG,EAAAA;AAHmC,CAAtB,EAQZ;AAAA;;AAAA;;AACD,QAAMC,YAAY,GAAGT,gBAAgB,CAACO,QAAQ,YAAYN,gBAApB,GAAuCM,QAAQ,CAACG,OAAhD,GAA0DC,SAA3D,CAArC;AAEA,QAAMC,IAAc,GAAGd,OAAO,CAAC,MAAM;AACnC,QAAIS,QAAQ,KAAKb,KAAjB,EAAwB,OAAO,EAAP;;AAExB,QAAIa,QAAQ,YAAYZ,KAAxB,EAA+B;AAC7B,UAAIY,QAAQ,YAAYN,gBAAxB,EAA0C;AACxC,eAAO,CAAC,GAAGQ,YAAJ,EAAkBP,eAAe,CAACK,QAAQ,CAACM,OAAV,CAAjC,CAAP;AACD;;AACD,aAAO,CAACX,eAAe,CAACK,QAAQ,CAACM,OAAV,CAAhB,CAAP;AACD;;AACD,WAAO,EAAP;AACD,GAV6B,EAU3B,CAACN,QAAD,EAAWE,YAAX,CAV2B,CAA9B;;AAYA,MAAIF,QAAQ,KAAKb,KAAjB,EAAwB;AACtB,wBAAO,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEW,IAApB;AAA0B,MAAA,KAAK,EAAEG;AAAjC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEH,IAAlB;AAAwB,IAAA,IAAI,EAAEO,IAA9B;AAAoC,IAAA,GAAG,EAAG,GAAD,oBAAGL,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEO,MAAb,+DAAuB,OAAQ,OAAxE;AAAgF,IAAA,KAAK,EAAEN;AAAvF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA5BuBF,Y;UASDN,gB;;;MATCM,Y","sourcesContent":["import { Currency, ETHER, Token } from '@pancakeswap/sdk'\r\nimport { BinanceIcon } from '@pancakeswap/uikit'\r\nimport React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport useHttpLocations from '../../hooks/useHttpLocations'\r\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\r\nimport getTokenLogoURL from '../../utils/getTokenLogoURL'\r\nimport Logo from './Logo'\r\n\r\nconst StyledLogo = styled(Logo)<{ size: string }>`\r\n  width: ${({ size }) => size};\r\n  height: ${({ size }) => size};\r\n`\r\n\r\nexport default function CurrencyLogo({\r\n  currency,\r\n  size = '24px',\r\n  style,\r\n}: {\r\n  currency?: Currency\r\n  size?: string\r\n  style?: React.CSSProperties\r\n}) {\r\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\r\n\r\n  const srcs: string[] = useMemo(() => {\r\n    if (currency === ETHER) return []\r\n\r\n    if (currency instanceof Token) {\r\n      if (currency instanceof WrappedTokenInfo) {\r\n        return [...uriLocations, getTokenLogoURL(currency.address)]\r\n      }\r\n      return [getTokenLogoURL(currency.address)]\r\n    }\r\n    return []\r\n  }, [currency, uriLocations])\r\n\r\n  if (currency === ETHER) {\r\n    return <BinanceIcon width={size} style={style} />\r\n  }\r\n\r\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\r\n}\r\n"]},"metadata":{},"sourceType":"module"}