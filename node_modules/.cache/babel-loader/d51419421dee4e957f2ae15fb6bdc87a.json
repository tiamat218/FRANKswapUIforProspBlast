{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport usePreviousValue from 'hooks/usePreviousValue';\nimport { useAppDispatch } from 'state';\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks';\nimport useSwiper from './useSwiper';\n\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\nconst useOnNextRound = () => {\n  _s();\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  const {\n    account\n  } = useWeb3React();\n  const previousEpoch = usePreviousValue(currentEpoch);\n  const {\n    swiper\n  } = useSwiper();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex(round => round.epoch === currentEpoch);\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1);\n      swiper.update();\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch]);\n};\n_s(useOnNextRound, \"msTJ2uYFOP+3F+ULaB03y2ZBGjc=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds, useWeb3React, usePreviousValue, useSwiper, useAppDispatch];\n});\nexport default useOnNextRound;","map":{"version":3,"names":["useEffect","useWeb3React","usePreviousValue","useAppDispatch","useGetCurrentEpoch","useGetSortedRounds","useSwiper","useOnNextRound","_s","currentEpoch","rounds","account","previousEpoch","swiper","dispatch","undefined","currentEpochIndex","findIndex","round","epoch","slideTo","update"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Predictions/hooks/useOnNextRound.ts"],"sourcesContent":["import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,SAASC,cAAc,QAAQ,OAAO;AACtC,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,aAAa;AACpE,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,YAAY,GAAGL,kBAAkB,CAAC,CAAC;EACzC,MAAMM,MAAM,GAAGL,kBAAkB,CAAC,CAAC;EACnC,MAAM;IAAEM;EAAQ,CAAC,GAAGV,YAAY,CAAC,CAAC;EAClC,MAAMW,aAAa,GAAGV,gBAAgB,CAACO,YAAY,CAAC;EACpD,MAAM;IAAEI;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGX,cAAc,CAAC,CAAC;EAEjCH,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,IAAIJ,YAAY,KAAKM,SAAS,IAAIH,aAAa,KAAKG,SAAS,IAAIN,YAAY,KAAKG,aAAa,EAAE;MACzG,MAAMI,iBAAiB,GAAGN,MAAM,CAACO,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKV,YAAY,CAAC;;MAEnF;MACAI,MAAM,CAACO,OAAO,CAACJ,iBAAiB,GAAG,CAAC,CAAC;MACrCH,MAAM,CAACQ,MAAM,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACT,aAAa,EAAEH,YAAY,EAAEC,MAAM,EAAEG,MAAM,EAAEF,OAAO,EAAEG,QAAQ,CAAC,CAAC;AACtE,CAAC;AAAAN,EAAA,CAjBKD,cAAc;EAAA,QACGH,kBAAkB,EACxBC,kBAAkB,EACbJ,YAAY,EACVC,gBAAgB,EACnBI,SAAS,EACXH,cAAc;AAAA;AAajC,eAAeI,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}