{"ast":null,"code":"import merge from 'lodash/merge';\nimport teamsList from 'config/constants/teams';\nimport { getProfileContract } from 'utils/contractHelpers';\nimport { multicallv2 } from 'utils/multicall';\nimport profileABI from 'config/abi/pancakeProfile.json';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nconst profileContract = getProfileContract();\nexport const getTeam = async teamId => {\n  try {\n    const {\n      0: teamName,\n      2: numberUsers,\n      3: numberPoints,\n      4: isJoinable\n    } = await profileContract.getTeamProfile(teamId);\n    const staticTeamInfo = teamsList.find(staticTeam => staticTeam.id === teamId);\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers.toNumber(),\n      points: numberPoints.toNumber()\n    });\n  } catch (error) {\n    return null;\n  }\n};\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\n\nexport const getTeams = async () => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return { ...accum,\n        [team.id]: team\n      };\n    }, {});\n    const nbTeams = await profileContract.numberTeams();\n    const calls = [];\n\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push({\n        address: getPancakeProfileAddress(),\n        name: 'getTeamProfile',\n        params: [i]\n      });\n    }\n\n    const teamData = await multicallv2(profileABI, calls);\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const {\n        0: teamName,\n        2: numberUsers,\n        3: numberPoints,\n        4: isJoinable\n      } = team;\n      return { ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: numberUsers.toNumber(),\n          points: numberPoints.toNumber(),\n          isJoinable\n        }\n      };\n    }, {});\n    return merge({}, teamsById, onChainTeamData);\n  } catch (error) {\n    return null;\n  }\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/teams/helpers.ts"],"names":["merge","teamsList","getProfileContract","multicallv2","profileABI","getPancakeProfileAddress","profileContract","getTeam","teamId","teamName","numberUsers","numberPoints","isJoinable","getTeamProfile","staticTeamInfo","find","staticTeam","id","name","users","toNumber","points","error","getTeams","teamsById","reduce","accum","team","nbTeams","numberTeams","calls","i","push","address","params","teamData","onChainTeamData","index"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AAEA,MAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;AAEA,OAAO,MAAMK,OAAO,GAAG,MAAOC,MAAP,IAAyC;AAC9D,MAAI;AACF,UAAM;AAAE,SAAGC,QAAL;AAAe,SAAGC,WAAlB;AAA+B,SAAGC,YAAlC;AAAgD,SAAGC;AAAnD,QAAkE,MAAMN,eAAe,CAACO,cAAhB,CAA+BL,MAA/B,CAA9E;AACA,UAAMM,cAAc,GAAGb,SAAS,CAACc,IAAV,CAAgBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBT,MAAjD,CAAvB;AAEA,WAAOR,KAAK,CAAC,EAAD,EAAKc,cAAL,EAAqB;AAC/BF,MAAAA,UAD+B;AAE/BM,MAAAA,IAAI,EAAET,QAFyB;AAG/BU,MAAAA,KAAK,EAAET,WAAW,CAACU,QAAZ,EAHwB;AAI/BC,MAAAA,MAAM,EAAEV,YAAY,CAACS,QAAb;AAJuB,KAArB,CAAZ;AAMD,GAVD,CAUE,OAAOE,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAdM;AAgBP;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,YAAgC;AACtD,MAAI;AACF,UAAMC,SAAS,GAAGvB,SAAS,CAACwB,MAAV,CAAiB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClD,aAAO,EACL,GAAGD,KADE;AAEL,SAACC,IAAI,CAACV,EAAN,GAAWU;AAFN,OAAP;AAID,KALiB,EAKf,EALe,CAAlB;AAMA,UAAMC,OAAO,GAAG,MAAMtB,eAAe,CAACuB,WAAhB,EAAtB;AAEA,UAAMC,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,OAArB,EAA8BG,CAAC,EAA/B,EAAmC;AACjCD,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,QAAAA,OAAO,EAAE5B,wBAAwB,EADxB;AAETa,QAAAA,IAAI,EAAE,gBAFG;AAGTgB,QAAAA,MAAM,EAAE,CAACH,CAAD;AAHC,OAAX;AAKD;;AACD,UAAMI,QAAQ,GAAG,MAAMhC,WAAW,CAACC,UAAD,EAAa0B,KAAb,CAAlC;AAEA,UAAMM,eAAe,GAAGD,QAAQ,CAACV,MAAT,CAAgB,CAACC,KAAD,EAAQC,IAAR,EAAcU,KAAd,KAAwB;AAC9D,YAAM;AAAE,WAAG5B,QAAL;AAAe,WAAGC,WAAlB;AAA+B,WAAGC,YAAlC;AAAgD,WAAGC;AAAnD,UAAkEe,IAAxE;AAEA,aAAO,EACL,GAAGD,KADE;AAEL,SAACW,KAAK,GAAG,CAAT,GAAa;AACXnB,UAAAA,IAAI,EAAET,QADK;AAEXU,UAAAA,KAAK,EAAET,WAAW,CAACU,QAAZ,EAFI;AAGXC,UAAAA,MAAM,EAAEV,YAAY,CAACS,QAAb,EAHG;AAIXR,UAAAA;AAJW;AAFR,OAAP;AASD,KAZuB,EAYrB,EAZqB,CAAxB;AAcA,WAAOZ,KAAK,CAAC,EAAD,EAAKwB,SAAL,EAAgBY,eAAhB,CAAZ;AACD,GAlCD,CAkCE,OAAOd,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAtCM","sourcesContent":["import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { TeamsById } from 'state/types'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers.toNumber(),\r\n      points: numberPoints.toNumber(),\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.numberTeams()\r\n\r\n    const calls = []\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push({\r\n        address: getPancakeProfileAddress(),\r\n        name: 'getTeamProfile',\r\n        params: [i],\r\n      })\r\n    }\r\n    const teamData = await multicallv2(profileABI, calls)\r\n\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: numberUsers.toNumber(),\r\n          points: numberPoints.toNumber(),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}