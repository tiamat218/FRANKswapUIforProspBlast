{"ast":null,"code":"import{useEffect,useState,useRef}from'react';import{useAppDispatch}from'state';import{useLottery}from'state/lottery/hooks';import{fetchCurrentLottery,setLotteryIsTransitioning}from'state/lottery';const useNextEventCountdown=nextEventTime=>{const dispatch=useAppDispatch();const[secondsRemaining,setSecondsRemaining]=useState(null);const timer=useRef(null);const{currentLotteryId}=useLottery();useEffect(()=>{dispatch(setLotteryIsTransitioning({isTransitioning:false}));const currentSeconds=Math.floor(Date.now()/1000);const secondsRemainingCalc=nextEventTime-currentSeconds;setSecondsRemaining(secondsRemainingCalc);timer.current=setInterval(()=>{setSecondsRemaining(prevSecondsRemaining=>{// Clear current interval at end of countdown and fetch current lottery to get updated state\nif(prevSecondsRemaining<=1){clearInterval(timer.current);dispatch(setLotteryIsTransitioning({isTransitioning:true}));dispatch(fetchCurrentLottery({currentLotteryId}));}return prevSecondsRemaining-1;});},1000);return()=>clearInterval(timer.current);},[setSecondsRemaining,nextEventTime,currentLotteryId,timer,dispatch]);return secondsRemaining;};export default useNextEventCountdown;","map":{"version":3,"names":["useEffect","useState","useRef","useAppDispatch","useLottery","fetchCurrentLottery","setLotteryIsTransitioning","useNextEventCountdown","nextEventTime","dispatch","secondsRemaining","setSecondsRemaining","timer","currentLotteryId","isTransitioning","currentSeconds","Math","floor","Date","now","secondsRemainingCalc","current","setInterval","prevSecondsRemaining","clearInterval"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/hooks/useNextEventCountdown.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\r\n\r\nconst useNextEventCountdown = (nextEventTime: number): number => {\r\n  const dispatch = useAppDispatch()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\r\n  const timer = useRef(null)\r\n  const { currentLotteryId } = useLottery()\r\n\r\n  useEffect(() => {\r\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\r\n    const currentSeconds = Math.floor(Date.now() / 1000)\r\n    const secondsRemainingCalc = nextEventTime - currentSeconds\r\n    setSecondsRemaining(secondsRemainingCalc)\r\n\r\n    timer.current = setInterval(() => {\r\n      setSecondsRemaining((prevSecondsRemaining) => {\r\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\r\n        if (prevSecondsRemaining <= 1) {\r\n          clearInterval(timer.current)\r\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\r\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n        }\r\n        return prevSecondsRemaining - 1\r\n      })\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer.current)\r\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useNextEventCountdown\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CACnD,OAASC,cAAc,KAAQ,OAAO,CACtC,OAASC,UAAU,KAAQ,qBAAqB,CAChD,OAASC,mBAAmB,CAAEC,yBAAyB,KAAQ,eAAe,CAE9E,KAAM,CAAAC,qBAAqB,CAAIC,aAAqB,EAAa,CAC/D,KAAM,CAAAC,QAAQ,CAAGN,cAAc,CAAC,CAAC,CACjC,KAAM,CAACO,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAC9D,KAAM,CAAAW,KAAK,CAAGV,MAAM,CAAC,IAAI,CAAC,CAC1B,KAAM,CAAEW,gBAAiB,CAAC,CAAGT,UAAU,CAAC,CAAC,CAEzCJ,SAAS,CAAC,IAAM,CACdS,QAAQ,CAACH,yBAAyB,CAAC,CAAEQ,eAAe,CAAE,KAAM,CAAC,CAAC,CAAC,CAC/D,KAAM,CAAAC,cAAc,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CACpD,KAAM,CAAAC,oBAAoB,CAAGZ,aAAa,CAAGO,cAAc,CAC3DJ,mBAAmB,CAACS,oBAAoB,CAAC,CAEzCR,KAAK,CAACS,OAAO,CAAGC,WAAW,CAAC,IAAM,CAChCX,mBAAmB,CAAEY,oBAAoB,EAAK,CAC5C;AACA,GAAIA,oBAAoB,EAAI,CAAC,CAAE,CAC7BC,aAAa,CAACZ,KAAK,CAACS,OAAO,CAAC,CAC5BZ,QAAQ,CAACH,yBAAyB,CAAC,CAAEQ,eAAe,CAAE,IAAK,CAAC,CAAC,CAAC,CAC9DL,QAAQ,CAACJ,mBAAmB,CAAC,CAAEQ,gBAAiB,CAAC,CAAC,CAAC,CACrD,CACA,MAAO,CAAAU,oBAAoB,CAAG,CAAC,CACjC,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMC,aAAa,CAACZ,KAAK,CAACS,OAAO,CAAC,CAC3C,CAAC,CAAE,CAACV,mBAAmB,CAAEH,aAAa,CAAEK,gBAAgB,CAAED,KAAK,CAAEH,QAAQ,CAAC,CAAC,CAE3E,MAAO,CAAAC,gBAAgB,CACzB,CAAC,CAED,cAAe,CAAAH,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module"}