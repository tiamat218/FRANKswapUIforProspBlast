{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\PreviousRoundCard\\\\FooterExpanded.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks';\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport RewardBrackets from '../RewardBrackets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({\n  theme\n}) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`;\n_c = NextDrawWrapper;\n\nconst PreviousRoundCardFooter = ({\n  lotteryData,\n  lotteryId\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const lotteryGraphData = useGetLotteryGraphDataById(lotteryId);\n  const cakePriceBusd = usePriceCakeBusd();\n  let prizeInBusd = new BigNumber(NaN);\n\n  if (lotteryData) {\n    const {\n      amountCollectedInCake\n    } = lotteryData;\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd);\n  }\n\n  const getPrizeBalances = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"7px\",\n        height: 40,\n        width: 200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        lineHeight: \"1\",\n        color: \"secondary\",\n        children: [\"~$\", formatNumber(getBalanceNumber(prizeInBusd), 0, 0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 14,\n        width: 90\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        unit: \" CAKE\",\n        value: getBalanceNumber(lotteryData === null || lotteryData === void 0 ? void 0 : lotteryData.amountCollectedInCake),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NextDrawWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      mr: \"24px\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: t('Prize pot')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), getPrizeBalances()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: \"24px\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            display: \"inline\",\n            children: [t('Total players this round'), \":\", ' ', lotteryData && lotteryGraphData.totalUsers ? lotteryGraphData.totalUsers.toLocaleString() : /*#__PURE__*/_jsxDEV(Skeleton, {\n              height: 14,\n              width: 31\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RewardBrackets, {\n      lotteryData: lotteryData,\n      isHistoricRound: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviousRoundCardFooter, \"K3/THwZZDLds/pFY+GbTYUO4RfI=\", false, function () {\n  return [useTranslation, useGetLotteryGraphDataById, usePriceCakeBusd];\n});\n\n_c2 = PreviousRoundCardFooter;\nexport default PreviousRoundCardFooter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NextDrawWrapper\");\n$RefreshReg$(_c2, \"PreviousRoundCardFooter\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx"],"names":["React","styled","BigNumber","Flex","Skeleton","Heading","Box","Text","useTranslation","usePriceCakeBusd","useGetLotteryGraphDataById","formatNumber","getBalanceNumber","Balance","RewardBrackets","NextDrawWrapper","theme","colors","background","mediaQueries","sm","PreviousRoundCardFooter","lotteryData","lotteryId","t","lotteryGraphData","cakePriceBusd","prizeInBusd","NaN","amountCollectedInCake","times","getPrizeBalances","isNaN","totalUsers","toLocaleString"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryRound } from 'state/types'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks'\r\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport RewardBrackets from '../RewardBrackets'\r\n\r\nconst NextDrawWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  padding: 24px;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst PreviousRoundCardFooter: React.FC<{ lotteryData: LotteryRound; lotteryId: string }> = ({\r\n  lotteryData,\r\n  lotteryId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lotteryGraphData = useGetLotteryGraphDataById(lotteryId)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  let prizeInBusd = new BigNumber(NaN)\r\n  if (lotteryData) {\r\n    const { amountCollectedInCake } = lotteryData\r\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\r\n  }\r\n\r\n  const getPrizeBalances = () => {\r\n    return (\r\n      <>\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"7px\" height={40} width={200} />\r\n        ) : (\r\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\r\n            ~${formatNumber(getBalanceNumber(prizeInBusd), 0, 0)}\r\n          </Heading>\r\n        )}\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"2px\" height={14} width={90} />\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"14px\"\r\n            color=\"textSubtle\"\r\n            unit=\" CAKE\"\r\n            value={getBalanceNumber(lotteryData?.amountCollectedInCake)}\r\n            decimals={0}\r\n          />\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <NextDrawWrapper>\r\n      <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\r\n        <Box>\r\n          <Heading>{t('Prize pot')}</Heading>\r\n          {getPrizeBalances()}\r\n        </Box>\r\n        <Box mb=\"24px\">\r\n          <Flex>\r\n            <Text fontSize=\"14px\" display=\"inline\">\r\n              {t('Total players this round')}:{' '}\r\n              {lotteryData && lotteryGraphData.totalUsers ? (\r\n                lotteryGraphData.totalUsers.toLocaleString()\r\n              ) : (\r\n                <Skeleton height={14} width={31} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        </Box>\r\n      </Flex>\r\n      <RewardBrackets lotteryData={lotteryData} isHistoricRound />\r\n    </NextDrawWrapper>\r\n  )\r\n}\r\n\r\nexport default PreviousRoundCardFooter\r\n"]},"metadata":{},"sourceType":"module"}