{"ast":null,"code":"import { ethers } from 'ethers';\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\n\nexport const estimateGas = async (contract, methodName, methodArgs, gasMarginPer10000) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`);\n  }\n\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs); // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n\n  const gasEstimation = rawGasEstimation.mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000))).div(ethers.BigNumber.from(10000));\n  return gasEstimation;\n};\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\n\nexport const callWithEstimateGas = async (contract, methodName, methodArgs = [], gasMarginPer10000 = 1000) => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000);\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation\n  });\n  return tx;\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/calls/estimateGas.ts"],"names":["ethers","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","Error","address","rawGasEstimation","gasEstimation","mul","BigNumber","from","add","div","callWithEstimateGas","tx","gasLimit"],"mappings":"AAAA,SAASA,MAAT,QAAiC,QAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,OACzBC,QADyB,EAEzBC,UAFyB,EAGzBC,UAHyB,EAIzBC,iBAJyB,KAKtB;AACH,MAAI,CAACH,QAAQ,CAACC,UAAD,CAAb,EAA2B;AACzB,UAAM,IAAIG,KAAJ,CAAW,UAASH,UAAW,qBAAoBD,QAAQ,CAACK,OAAQ,EAApE,CAAN;AACD;;AACD,QAAMC,gBAAgB,GAAG,MAAMN,QAAQ,CAACD,WAAT,CAAqBE,UAArB,EAAiC,GAAGC,UAApC,CAA/B,CAJG,CAKH;;AACA,QAAMK,aAAa,GAAGD,gBAAgB,CACnCE,GADmB,CACfV,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,KAAtB,EAA6BC,GAA7B,CAAiCb,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsBP,iBAAtB,CAAjC,CADe,EAEnBS,GAFmB,CAEfd,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,KAAtB,CAFe,CAAtB;AAGA,SAAOH,aAAP;AACD,CAfM;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,mBAAmB,GAAG,OACjCb,QADiC,EAEjCC,UAFiC,EAGjCC,UAAiB,GAAG,EAHa,EAIjCC,iBAAiB,GAAG,IAJa,KAKiB;AAClD,QAAMI,aAAa,GAAGR,WAAW,CAACC,QAAD,EAAWC,UAAX,EAAuBC,UAAvB,EAAmCC,iBAAnC,CAAjC;AACA,QAAMW,EAAE,GAAG,MAAMd,QAAQ,CAACC,UAAD,CAAR,CAAqB,GAAGC,UAAxB,EAAoC;AACnDa,IAAAA,QAAQ,EAAER;AADyC,GAApC,CAAjB;AAGA,SAAOO,EAAP;AACD,CAXM","sourcesContent":["import { ethers, Contract } from 'ethers'\r\n\r\n/**\r\n * Estimate the gas needed to call a function, and add a 10% margin\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const estimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[],\r\n  gasMarginPer10000: number,\r\n) => {\r\n  if (!contract[methodName]) {\r\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\r\n  }\r\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\r\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\r\n  const gasEstimation = rawGasEstimation\r\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\r\n    .div(ethers.BigNumber.from(10000))\r\n  return gasEstimation\r\n}\r\n\r\n/**\r\n * Perform a contract call with a gas value returned from estimateGas\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the methode called\r\n * @param args An array of arguments to pass to the method\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport const callWithEstimateGas = async (\r\n  contract: Contract,\r\n  methodName: string,\r\n  methodArgs: any[] = [],\r\n  gasMarginPer10000 = 1000,\r\n): Promise<ethers.providers.TransactionResponse> => {\r\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\r\n  const tx = await contract[methodName](...methodArgs, {\r\n    gasLimit: gasEstimation,\r\n  })\r\n  return tx\r\n}\r\n"]},"metadata":{},"sourceType":"module"}