{"ast":null,"code":"import{useCallback,useEffect,useRef,useState}from'react';/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */export default function useDebouncedChangeHandler(value,onChange){let debouncedMs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;const[inner,setInner]=useState(()=>value);const timer=useRef();const onChangeInner=useCallback(newValue=>{setInner(newValue);if(timer.current){clearTimeout(timer.current);}timer.current=setTimeout(()=>{onChange(newValue);timer.current=undefined;},debouncedMs);},[debouncedMs,onChange]);useEffect(()=>{if(timer.current){clearTimeout(timer.current);timer.current=undefined;}setInner(value);},[value]);return[inner,onChangeInner];}","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useDebouncedChangeHandler","value","onChange","debouncedMs","arguments","length","undefined","inner","setInner","timer","onChangeInner","newValue","current","clearTimeout","setTimeout"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useDebouncedChangeHandler.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\r\n * @param value value that is rapidly changing\r\n * @param onChange change handler that should receive the debounced updates to the value\r\n * @param debouncedMs how long we should wait for changes to be applied\r\n */\r\nexport default function useDebouncedChangeHandler<T>(\r\n  value: T,\r\n  onChange: (newValue: T) => void,\r\n  debouncedMs = 100,\r\n): [T, (value: T) => void] {\r\n  const [inner, setInner] = useState<T>(() => value)\r\n  const timer = useRef<ReturnType<typeof setTimeout>>()\r\n\r\n  const onChangeInner = useCallback(\r\n    (newValue: T) => {\r\n      setInner(newValue)\r\n      if (timer.current) {\r\n        clearTimeout(timer.current)\r\n      }\r\n      timer.current = setTimeout(() => {\r\n        onChange(newValue)\r\n        timer.current = undefined\r\n      }, debouncedMs)\r\n    },\r\n    [debouncedMs, onChange],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n      timer.current = undefined\r\n    }\r\n    setInner(value)\r\n  }, [value])\r\n\r\n  return [inner, onChangeInner]\r\n}\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAEhE;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAC,yBAAyBA,CAC/CC,KAAQ,CACRC,QAA+B,CAEN,IADzB,CAAAC,WAAW,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,GAAG,CAEjB,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAI,IAAME,KAAK,CAAC,CAClD,KAAM,CAAAQ,KAAK,CAAGX,MAAM,CAAgC,CAAC,CAErD,KAAM,CAAAY,aAAa,CAAGd,WAAW,CAC9Be,QAAW,EAAK,CACfH,QAAQ,CAACG,QAAQ,CAAC,CAClB,GAAIF,KAAK,CAACG,OAAO,CAAE,CACjBC,YAAY,CAACJ,KAAK,CAACG,OAAO,CAAC,CAC7B,CACAH,KAAK,CAACG,OAAO,CAAGE,UAAU,CAAC,IAAM,CAC/BZ,QAAQ,CAACS,QAAQ,CAAC,CAClBF,KAAK,CAACG,OAAO,CAAGN,SAAS,CAC3B,CAAC,CAAEH,WAAW,CAAC,CACjB,CAAC,CACD,CAACA,WAAW,CAAED,QAAQ,CACxB,CAAC,CAEDL,SAAS,CAAC,IAAM,CACd,GAAIY,KAAK,CAACG,OAAO,CAAE,CACjBC,YAAY,CAACJ,KAAK,CAACG,OAAO,CAAC,CAC3BH,KAAK,CAACG,OAAO,CAAGN,SAAS,CAC3B,CACAE,QAAQ,CAACP,KAAK,CAAC,CACjB,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,MAAO,CAACM,KAAK,CAAEG,aAAa,CAAC,CAC/B","ignoreList":[]},"metadata":{},"sourceType":"module"}