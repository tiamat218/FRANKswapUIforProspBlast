{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getActivePools } from 'utils/calls';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport BigNumber from 'bignumber.js';\nimport { getVotingPower } from '../helpers';\nconst initialState = {\n  verificationHash: null,\n  cakeBalance: BIG_ZERO,\n  cakeVaultBalance: BIG_ZERO,\n  cakePoolBalance: BIG_ZERO,\n  poolsBalance: BIG_ZERO,\n  cakeBnbLpBalance: BIG_ZERO,\n  total: BIG_ZERO\n};\n\nconst useGetVotingPower = (block, isActive = true) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const [votingPower, setVotingPower] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(!!account);\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true);\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n        const eligiblePools = await getActivePools(blockNumber);\n        const poolAddresses = eligiblePools.map(({\n          contractAddress\n        }) => getAddress(contractAddress));\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash\n        } = await getVotingPower(account, poolAddresses, blockNumber);\n\n        if (isActive) {\n          setVotingPower(prevVotingPower => ({ ...prevVotingPower,\n            verificationHash,\n            cakeBalance: new BigNumber(cakeBalance),\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\n            cakePoolBalance: new BigNumber(cakePoolBalance),\n            poolsBalance: new BigNumber(poolsBalance),\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\n            total: new BigNumber(total)\n          }));\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (account && isActive) {\n      fetchVotingPower();\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading]);\n  return { ...votingPower,\n    isLoading\n  };\n};\n\n_s(useGetVotingPower, \"XT26o7mNPWR21ECToQ3wCkK+Z1E=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useGetVotingPower;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Voting/hooks/useGetVotingPower.tsx"],"names":["useState","useEffect","useWeb3React","BIG_ZERO","getActivePools","getAddress","simpleRpcProvider","BigNumber","getVotingPower","initialState","verificationHash","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","total","useGetVotingPower","block","isActive","account","votingPower","setVotingPower","isLoading","setIsLoading","fetchVotingPower","blockNumber","getBlockNumber","eligiblePools","poolAddresses","map","contractAddress","prevVotingPower"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAYA,MAAMC,YAAmB,GAAG;AAC1BC,EAAAA,gBAAgB,EAAE,IADQ;AAE1BC,EAAAA,WAAW,EAAER,QAFa;AAG1BS,EAAAA,gBAAgB,EAAET,QAHQ;AAI1BU,EAAAA,eAAe,EAAEV,QAJS;AAK1BW,EAAAA,YAAY,EAAEX,QALY;AAM1BY,EAAAA,gBAAgB,EAAEZ,QANQ;AAO1Ba,EAAAA,KAAK,EAAEb;AAPmB,CAA5B;;AAUA,MAAMc,iBAAiB,GAAG,CAACC,KAAD,EAAiBC,QAAQ,GAAG,IAA5B,KAAqE;AAAA;;AAC7F,QAAM;AAAEC,IAAAA;AAAF,MAAclB,YAAY,EAAhC;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAACS,YAAD,CAA9C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,CAAC,CAACoB,OAAH,CAA1C;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,gBAAgB,GAAG,YAAY;AACnCD,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAME,WAAW,GAAGR,KAAK,KAAK,MAAMZ,iBAAiB,CAACqB,cAAlB,EAAX,CAAzB;AACA,cAAMC,aAAa,GAAG,MAAMxB,cAAc,CAACsB,WAAD,CAA1C;AACA,cAAMG,aAAa,GAAGD,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAyB1B,UAAU,CAAC0B,eAAD,CAArD,CAAtB;AACA,cAAM;AACJpB,UAAAA,WADI;AAEJI,UAAAA,gBAFI;AAGJF,UAAAA,eAHI;AAIJG,UAAAA,KAJI;AAKJF,UAAAA,YALI;AAMJF,UAAAA,gBANI;AAOJF,UAAAA;AAPI,YAQF,MAAMF,cAAc,CAACY,OAAD,EAAUS,aAAV,EAAyBH,WAAzB,CARxB;;AAUA,YAAIP,QAAJ,EAAc;AACZG,UAAAA,cAAc,CAAEU,eAAD,KAAsB,EACnC,GAAGA,eADgC;AAEnCtB,YAAAA,gBAFmC;AAGnCC,YAAAA,WAAW,EAAE,IAAIJ,SAAJ,CAAcI,WAAd,CAHsB;AAInCI,YAAAA,gBAAgB,EAAE,IAAIR,SAAJ,CAAcQ,gBAAd,CAJiB;AAKnCF,YAAAA,eAAe,EAAE,IAAIN,SAAJ,CAAcM,eAAd,CALkB;AAMnCC,YAAAA,YAAY,EAAE,IAAIP,SAAJ,CAAcO,YAAd,CANqB;AAOnCF,YAAAA,gBAAgB,EAAE,IAAIL,SAAJ,CAAcK,gBAAd,CAPiB;AAQnCI,YAAAA,KAAK,EAAE,IAAIT,SAAJ,CAAcS,KAAd;AAR4B,WAAtB,CAAD,CAAd;AAUD;AACF,OA1BD,SA0BU;AACRQ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAhCD;;AAkCA,QAAIJ,OAAO,IAAID,QAAf,EAAyB;AACvBM,MAAAA,gBAAgB;AACjB;AACF,GAtCQ,EAsCN,CAACL,OAAD,EAAUF,KAAV,EAAiBI,cAAjB,EAAiCH,QAAjC,EAA2CK,YAA3C,CAtCM,CAAT;AAwCA,SAAO,EAAE,GAAGH,WAAL;AAAkBE,IAAAA;AAAlB,GAAP;AACD,CA9CD;;GAAMN,iB;UACgBf,Y;;;AA+CtB,eAAee,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getActivePools } from 'utils/calls'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getVotingPower } from '../helpers'\r\n\r\ninterface State {\r\n  verificationHash: string\r\n  cakeBalance: BigNumber\r\n  cakeVaultBalance: BigNumber\r\n  cakePoolBalance: BigNumber\r\n  poolsBalance: BigNumber\r\n  cakeBnbLpBalance: BigNumber\r\n  total: BigNumber\r\n}\r\n\r\nconst initialState: State = {\r\n  verificationHash: null,\r\n  cakeBalance: BIG_ZERO,\r\n  cakeVaultBalance: BIG_ZERO,\r\n  cakePoolBalance: BIG_ZERO,\r\n  poolsBalance: BIG_ZERO,\r\n  cakeBnbLpBalance: BIG_ZERO,\r\n  total: BIG_ZERO,\r\n}\r\n\r\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\r\n  const { account } = useWeb3React()\r\n  const [votingPower, setVotingPower] = useState(initialState)\r\n  const [isLoading, setIsLoading] = useState(!!account)\r\n\r\n  useEffect(() => {\r\n    const fetchVotingPower = async () => {\r\n      setIsLoading(true)\r\n\r\n      try {\r\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n        const eligiblePools = await getActivePools(blockNumber)\r\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\r\n        const {\r\n          cakeBalance,\r\n          cakeBnbLpBalance,\r\n          cakePoolBalance,\r\n          total,\r\n          poolsBalance,\r\n          cakeVaultBalance,\r\n          verificationHash,\r\n        } = await getVotingPower(account, poolAddresses, blockNumber)\r\n\r\n        if (isActive) {\r\n          setVotingPower((prevVotingPower) => ({\r\n            ...prevVotingPower,\r\n            verificationHash,\r\n            cakeBalance: new BigNumber(cakeBalance),\r\n            cakeBnbLpBalance: new BigNumber(cakeBnbLpBalance),\r\n            cakePoolBalance: new BigNumber(cakePoolBalance),\r\n            poolsBalance: new BigNumber(poolsBalance),\r\n            cakeVaultBalance: new BigNumber(cakeVaultBalance),\r\n            total: new BigNumber(total),\r\n          }))\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (account && isActive) {\r\n      fetchVotingPower()\r\n    }\r\n  }, [account, block, setVotingPower, isActive, setIsLoading])\r\n\r\n  return { ...votingPower, isLoading }\r\n}\r\n\r\nexport default useGetVotingPower\r\n"]},"metadata":{},"sourceType":"module"}