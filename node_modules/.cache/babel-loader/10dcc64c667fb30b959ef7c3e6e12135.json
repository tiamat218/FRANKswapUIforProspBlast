{"ast":null,"code":"import{currencyEquals}from'@pancakeswap/sdk';import{ZERO_PERCENT,ONE_HUNDRED_PERCENT}from'../config/constants/index';// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(tradeA,tradeB){let minimumDelta=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ZERO_PERCENT;if(tradeA&&!tradeB)return false;if(tradeB&&!tradeA)return true;if(!tradeA||!tradeB)return undefined;if(tradeA.tradeType!==tradeB.tradeType||!currencyEquals(tradeA.inputAmount.currency,tradeB.inputAmount.currency)||!currencyEquals(tradeB.outputAmount.currency,tradeB.outputAmount.currency)){throw new Error('Trades are not comparable');}if(minimumDelta.equalTo(ZERO_PERCENT)){return tradeA.executionPrice.lessThan(tradeB.executionPrice);}return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);}export default isTradeBetter;","map":{"version":3,"names":["currencyEquals","ZERO_PERCENT","ONE_HUNDRED_PERCENT","isTradeBetter","tradeA","tradeB","minimumDelta","arguments","length","undefined","tradeType","inputAmount","currency","outputAmount","Error","equalTo","executionPrice","lessThan","raw","multiply","add"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/trades.ts"],"sourcesContent":["import { Trade, Percent, currencyEquals } from '@pancakeswap/sdk'\r\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index'\r\n\r\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\r\nexport function isTradeBetter(\r\n  tradeA: Trade | undefined | null,\r\n  tradeB: Trade | undefined | null,\r\n  minimumDelta: Percent = ZERO_PERCENT,\r\n): boolean | undefined {\r\n  if (tradeA && !tradeB) return false\r\n  if (tradeB && !tradeA) return true\r\n  if (!tradeA || !tradeB) return undefined\r\n\r\n  if (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\r\n  ) {\r\n    throw new Error('Trades are not comparable')\r\n  }\r\n\r\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\r\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\r\n  }\r\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\r\n}\r\n\r\nexport default isTradeBetter\r\n"],"mappings":"AAAA,OAAyBA,cAAc,KAAQ,kBAAkB,CACjE,OAASC,YAAY,CAAEC,mBAAmB,KAAQ,2BAA2B,CAE7E;AACA,MAAO,SAAS,CAAAC,aAAaA,CAC3BC,MAAgC,CAChCC,MAAgC,CAEX,IADrB,CAAAC,YAAqB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGN,YAAY,CAEpC,GAAIG,MAAM,EAAI,CAACC,MAAM,CAAE,MAAO,MAAK,CACnC,GAAIA,MAAM,EAAI,CAACD,MAAM,CAAE,MAAO,KAAI,CAClC,GAAI,CAACA,MAAM,EAAI,CAACC,MAAM,CAAE,MAAO,CAAAI,SAAS,CAExC,GACEL,MAAM,CAACM,SAAS,GAAKL,MAAM,CAACK,SAAS,EACrC,CAACV,cAAc,CAACI,MAAM,CAACO,WAAW,CAACC,QAAQ,CAAEP,MAAM,CAACM,WAAW,CAACC,QAAQ,CAAC,EACzE,CAACZ,cAAc,CAACK,MAAM,CAACQ,YAAY,CAACD,QAAQ,CAAEP,MAAM,CAACQ,YAAY,CAACD,QAAQ,CAAC,CAC3E,CACA,KAAM,IAAI,CAAAE,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA,GAAIR,YAAY,CAACS,OAAO,CAACd,YAAY,CAAC,CAAE,CACtC,MAAO,CAAAG,MAAM,CAACY,cAAc,CAACC,QAAQ,CAACZ,MAAM,CAACW,cAAc,CAAC,CAC9D,CACA,MAAO,CAAAZ,MAAM,CAACY,cAAc,CAACE,GAAG,CAACC,QAAQ,CAACb,YAAY,CAACc,GAAG,CAAClB,mBAAmB,CAAC,CAAC,CAACe,QAAQ,CAACZ,MAAM,CAACW,cAAc,CAAC,CAClH,CAEA,cAAe,CAAAb,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}