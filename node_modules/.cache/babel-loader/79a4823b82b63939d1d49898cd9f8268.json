{"ast":null,"code":"import { ChainId } from '@pancakeswap/sdk';\nimport addresses from 'config/constants/contracts';\nimport tokens from 'config/constants/tokens';\nexport const getAddress = address => {\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET];\n};\nexport const getCakeAddress = () => {\n  return getAddress(tokens.cake.address);\n};\nexport const getMasterChefAddress = () => {\n  return getAddress(addresses.masterChef);\n};\nexport const getMulticallAddress = () => {\n  return getAddress(addresses.multiCall);\n};\nexport const getWbnbAddress = () => {\n  return getAddress(tokens.wbnb.address);\n};\nexport const getLotteryV2Address = () => {\n  return getAddress(addresses.lotteryV2);\n};\nexport const getPancakeProfileAddress = () => {\n  return getAddress(addresses.pancakeProfile);\n};\nexport const getPancakeRabbitsAddress = () => {\n  return getAddress(addresses.pancakeRabbits);\n};\nexport const getBunnyFactoryAddress = () => {\n  return getAddress(addresses.bunnyFactory);\n};\nexport const getClaimRefundAddress = () => {\n  return getAddress(addresses.claimRefund);\n};\nexport const getPointCenterIfoAddress = () => {\n  return getAddress(addresses.pointCenterIfo);\n};\nexport const getBunnySpecialAddress = () => {\n  return getAddress(addresses.bunnySpecial);\n};\nexport const getTradingCompetitionAddress = () => {\n  return getAddress(addresses.tradingCompetition);\n};\nexport const getEasterNftAddress = () => {\n  return getAddress(addresses.easterNft);\n};\nexport const getCakeVaultAddress = () => {\n  return getAddress(addresses.cakeVault);\n};\nexport const getPredictionsAddress = () => {\n  return getAddress(addresses.predictions);\n};\nexport const getChainlinkOracleAddress = () => {\n  return getAddress(addresses.chainlinkOracle);\n};\nexport const getBunnySpecialCakeVaultAddress = () => {\n  return getAddress(addresses.bunnySpecialCakeVault);\n};\nexport const getBunnySpecialPredictionAddress = () => {\n  return getAddress(addresses.bunnySpecialPrediction);\n};","map":{"version":3,"names":["ChainId","addresses","tokens","getAddress","address","chainId","process","env","REACT_APP_CHAIN_ID","MAINNET","getCakeAddress","cake","getMasterChefAddress","masterChef","getMulticallAddress","multiCall","getWbnbAddress","wbnb","getLotteryV2Address","lotteryV2","getPancakeProfileAddress","pancakeProfile","getPancakeRabbitsAddress","pancakeRabbits","getBunnyFactoryAddress","bunnyFactory","getClaimRefundAddress","claimRefund","getPointCenterIfoAddress","pointCenterIfo","getBunnySpecialAddress","bunnySpecial","getTradingCompetitionAddress","tradingCompetition","getEasterNftAddress","easterNft","getCakeVaultAddress","cakeVault","getPredictionsAddress","predictions","getChainlinkOracleAddress","chainlinkOracle","getBunnySpecialCakeVaultAddress","bunnySpecialCakeVault","getBunnySpecialPredictionAddress","bunnySpecialPrediction"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/utils/addressHelpers.ts"],"sourcesContent":["import { ChainId } from '@pancakeswap/sdk'\r\nimport addresses from 'config/constants/contracts'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\r\n}\r\n\r\nexport const getCakeAddress = () => {\r\n  return getAddress(tokens.cake.address)\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef)\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return getAddress(addresses.multiCall)\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return getAddress(tokens.wbnb.address)\r\n}\r\nexport const getLotteryV2Address = () => {\r\n  return getAddress(addresses.lotteryV2)\r\n}\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile)\r\n}\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits)\r\n}\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory)\r\n}\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund)\r\n}\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo)\r\n}\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial)\r\n}\r\nexport const getTradingCompetitionAddress = () => {\r\n  return getAddress(addresses.tradingCompetition)\r\n}\r\nexport const getEasterNftAddress = () => {\r\n  return getAddress(addresses.easterNft)\r\n}\r\nexport const getCakeVaultAddress = () => {\r\n  return getAddress(addresses.cakeVault)\r\n}\r\nexport const getPredictionsAddress = () => {\r\n  return getAddress(addresses.predictions)\r\n}\r\nexport const getChainlinkOracleAddress = () => {\r\n  return getAddress(addresses.chainlinkOracle)\r\n}\r\nexport const getBunnySpecialCakeVaultAddress = () => {\r\n  return getAddress(addresses.bunnySpecialCakeVault)\r\n}\r\nexport const getBunnySpecialPredictionAddress = () => {\r\n  return getAddress(addresses.bunnySpecialPrediction)\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}