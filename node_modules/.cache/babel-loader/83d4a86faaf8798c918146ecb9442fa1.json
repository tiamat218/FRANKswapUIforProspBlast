{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { simpleRpcProvider } from 'utils/providers'; // eslint-disable-next-line import/no-unresolved\n\n/**\r\n * Provides a web3 provider with or without user's signer\r\n * Recreate web3 instance only if the provider change\r\n */\nconst useActiveWeb3React = () => {\n  _s();\n\n  const {\n    library,\n    chainId,\n    ...web3React\n  } = useWeb3React();\n  const refEth = useRef(library);\n  const [provider, setprovider] = useState(library || simpleRpcProvider);\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider);\n      refEth.current = library;\n    }\n  }, [library]);\n  return {\n    library: provider,\n    chainId: chainId !== null && chainId !== void 0 ? chainId : parseInt(process.env.REACT_APP_CHAIN_ID, 10),\n    ...web3React\n  };\n};\n\n_s(useActiveWeb3React, \"1y60JVnIM5zKCWUj++5tvnFFeyM=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useActiveWeb3React;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useActiveWeb3React.ts"],"names":["useEffect","useState","useRef","useWeb3React","simpleRpcProvider","useActiveWeb3React","library","chainId","web3React","refEth","provider","setprovider","current","parseInt","process","env","REACT_APP_CHAIN_ID"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,iBAAT,QAAkC,iBAAlC,C,CACA;;AAGA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,MAA+C;AAAA;;AACxE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoB,OAAGC;AAAvB,MAAqCL,YAAY,EAAvD;AACA,QAAMM,MAAM,GAAGP,MAAM,CAACI,OAAD,CAArB;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACK,OAAO,IAAIF,iBAAZ,CAAxC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAO,KAAKG,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,MAAAA,WAAW,CAACL,OAAO,IAAIF,iBAAZ,CAAX;AACAK,MAAAA,MAAM,CAACG,OAAP,GAAiBN,OAAjB;AACD;AACF,GALQ,EAKN,CAACA,OAAD,CALM,CAAT;AAOA,SAAO;AAAEA,IAAAA,OAAO,EAAEI,QAAX;AAAqBH,IAAAA,OAAO,EAAEA,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAaM,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,EAAiC,EAAjC,CAAjD;AAAuF,OAAGR;AAA1F,GAAP;AACD,CAbD;;GAAMH,kB;UACuCF,Y;;;AAc7C,eAAeE,kBAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\r\n\r\n/**\r\n * Provides a web3 provider with or without user's signer\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useActiveWeb3React = (): Web3ReactContextInterface<Web3Provider> => {\r\n  const { library, chainId, ...web3React } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [provider, setprovider] = useState(library || simpleRpcProvider)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setprovider(library || simpleRpcProvider)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return { library: provider, chainId: chainId ?? parseInt(process.env.REACT_APP_CHAIN_ID, 10), ...web3React }\r\n}\r\n\r\nexport default useActiveWeb3React\r\n"]},"metadata":{},"sourceType":"module"}