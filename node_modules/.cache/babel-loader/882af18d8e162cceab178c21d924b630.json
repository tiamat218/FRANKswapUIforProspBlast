{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { connectorLocalStorageKey } from '@pancakeswap/uikit';\nimport { connectorsByName } from 'utils/web3React';\nimport { setupNetwork } from 'utils/wallet';\nimport useToast from 'hooks/useToast';\nimport { profileClear } from 'state/profile';\nimport { useAppDispatch } from 'state';\nimport { useTranslation } from 'contexts/Localization';\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    activate,\n    deactivate\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const login = useCallback(connectorID => {\n    const connector = connectorsByName[connectorID];\n\n    if (connector) {\n      activate(connector, async error => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork();\n\n          if (hasSetup) {\n            activate(connector);\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey);\n\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            toastError(t('Provider Error'), t('No provider was found'));\n          } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\n            if (connector instanceof WalletConnectConnector) {\n              const walletConnector = connector;\n              walletConnector.walletConnectProvider = null;\n            }\n\n            toastError(t('Authorization Error'), t('Please authorize to access your account'));\n          } else {\n            toastError(error.name, error.message);\n          }\n        }\n      });\n    } else {\n      toastError(t('Unable to find connector'), t('The connector config is wrong'));\n    }\n  }, [t, activate, toastError]);\n  const logout = useCallback(() => {\n    dispatch(profileClear());\n    deactivate(); // This localStorage key is set by @web3-react/walletconnect-connector\n\n    if (window.localStorage.getItem('walletconnect')) {\n      connectorsByName.walletconnect.close();\n      connectorsByName.walletconnect.walletConnectProvider = null;\n    }\n  }, [deactivate, dispatch]);\n  return {\n    login,\n    logout\n  };\n};\n\n_s(useAuth, \"vdlyxzYnTaU+tTXUy9QK2PZ7rf8=\", false, function () {\n  return [useTranslation, useAppDispatch, useWeb3React, useToast];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useAuth.ts"],"names":["useCallback","useWeb3React","UnsupportedChainIdError","NoBscProviderError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","connectorLocalStorageKey","connectorsByName","setupNetwork","useToast","profileClear","useAppDispatch","useTranslation","useAuth","t","dispatch","activate","deactivate","toastError","login","connectorID","connector","error","hasSetup","window","localStorage","removeItem","walletConnector","walletConnectProvider","name","message","logout","getItem","walletconnect","close"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,EAAuBC,uBAAvB,QAAsD,kBAAtD;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SACEC,uBADF,EAEEC,wBAAwB,IAAIC,gCAF9B,QAGO,gCAHP;AAIA,SACED,wBAAwB,IAAIE,qCAD9B,EAEEC,sBAFF,QAGO,qCAHP;AAIA,SAAyBC,wBAAzB,QAAyD,oBAAzD;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAQF,cAAc,EAA5B;AACA,QAAMG,QAAQ,GAAGJ,cAAc,EAA/B;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2BnB,YAAY,EAA7C;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAiBT,QAAQ,EAA/B;AAEA,QAAMU,KAAK,GAAGtB,WAAW,CACtBuB,WAAD,IAAiC;AAC/B,UAAMC,SAAS,GAAGd,gBAAgB,CAACa,WAAD,CAAlC;;AACA,QAAIC,SAAJ,EAAe;AACbL,MAAAA,QAAQ,CAACK,SAAD,EAAY,MAAOC,KAAP,IAAwB;AAC1C,YAAIA,KAAK,YAAYvB,uBAArB,EAA8C;AAC5C,gBAAMwB,QAAQ,GAAG,MAAMf,YAAY,EAAnC;;AACA,cAAIe,QAAJ,EAAc;AACZP,YAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;AACF,SALD,MAKO;AACLG,UAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+BpB,wBAA/B;;AACA,cAAIgB,KAAK,YAAYrB,uBAAjB,IAA4CqB,KAAK,YAAYtB,kBAAjE,EAAqF;AACnFkB,YAAAA,UAAU,CAACJ,CAAC,CAAC,gBAAD,CAAF,EAAsBA,CAAC,CAAC,uBAAD,CAAvB,CAAV;AACD,WAFD,MAEO,IACLQ,KAAK,YAAYnB,gCAAjB,IACAmB,KAAK,YAAYlB,qCAFZ,EAGL;AACA,gBAAIiB,SAAS,YAAYhB,sBAAzB,EAAiD;AAC/C,oBAAMsB,eAAe,GAAGN,SAAxB;AACAM,cAAAA,eAAe,CAACC,qBAAhB,GAAwC,IAAxC;AACD;;AACDV,YAAAA,UAAU,CAACJ,CAAC,CAAC,qBAAD,CAAF,EAA2BA,CAAC,CAAC,yCAAD,CAA5B,CAAV;AACD,WATM,MASA;AACLI,YAAAA,UAAU,CAACI,KAAK,CAACO,IAAP,EAAaP,KAAK,CAACQ,OAAnB,CAAV;AACD;AACF;AACF,OAvBO,CAAR;AAwBD,KAzBD,MAyBO;AACLZ,MAAAA,UAAU,CAACJ,CAAC,CAAC,0BAAD,CAAF,EAAgCA,CAAC,CAAC,+BAAD,CAAjC,CAAV;AACD;AACF,GA/BsB,EAgCvB,CAACA,CAAD,EAAIE,QAAJ,EAAcE,UAAd,CAhCuB,CAAzB;AAmCA,QAAMa,MAAM,GAAGlC,WAAW,CAAC,MAAM;AAC/BkB,IAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR;AACAO,IAAAA,UAAU,GAFqB,CAG/B;;AACA,QAAIO,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4B,eAA5B,CAAJ,EAAkD;AAChDzB,MAAAA,gBAAgB,CAAC0B,aAAjB,CAA+BC,KAA/B;AACA3B,MAAAA,gBAAgB,CAAC0B,aAAjB,CAA+BL,qBAA/B,GAAuD,IAAvD;AACD;AACF,GARyB,EAQvB,CAACX,UAAD,EAAaF,QAAb,CARuB,CAA1B;AAUA,SAAO;AAAEI,IAAAA,KAAF;AAASY,IAAAA;AAAT,GAAP;AACD,CApDD;;GAAMlB,O;UACUD,c,EACGD,c,EACgBb,Y,EACVW,Q;;;AAkDzB,eAAeI,OAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector'\r\nimport { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { connectorsByName } from 'utils/web3React'\r\nimport { setupNetwork } from 'utils/wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { profileClear } from 'state/profile'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst useAuth = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { activate, deactivate } = useWeb3React()\r\n  const { toastError } = useToast()\r\n\r\n  const login = useCallback(\r\n    (connectorID: ConnectorNames) => {\r\n      const connector = connectorsByName[connectorID]\r\n      if (connector) {\r\n        activate(connector, async (error: Error) => {\r\n          if (error instanceof UnsupportedChainIdError) {\r\n            const hasSetup = await setupNetwork()\r\n            if (hasSetup) {\r\n              activate(connector)\r\n            }\r\n          } else {\r\n            window.localStorage.removeItem(connectorLocalStorageKey)\r\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n              toastError(t('Provider Error'), t('No provider was found'))\r\n            } else if (\r\n              error instanceof UserRejectedRequestErrorInjected ||\r\n              error instanceof UserRejectedRequestErrorWalletConnect\r\n            ) {\r\n              if (connector instanceof WalletConnectConnector) {\r\n                const walletConnector = connector as WalletConnectConnector\r\n                walletConnector.walletConnectProvider = null\r\n              }\r\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\r\n            } else {\r\n              toastError(error.name, error.message)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\r\n      }\r\n    },\r\n    [t, activate, toastError],\r\n  )\r\n\r\n  const logout = useCallback(() => {\r\n    dispatch(profileClear())\r\n    deactivate()\r\n    // This localStorage key is set by @web3-react/walletconnect-connector\r\n    if (window.localStorage.getItem('walletconnect')) {\r\n      connectorsByName.walletconnect.close()\r\n      connectorsByName.walletconnect.walletConnectProvider = null\r\n    }\r\n  }, [deactivate, dispatch])\r\n\r\n  return { login, logout }\r\n}\r\n\r\nexport default useAuth\r\n"]},"metadata":{},"sourceType":"module"}