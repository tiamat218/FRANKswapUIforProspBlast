{"ast":null,"code":"import { ethers } from 'ethers';\nimport { BetPosition } from 'state/types';\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance';\nimport getTimePeriods from 'utils/getTimePeriods';\nexport const formatUsdv2 = usd => {\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`;\n};\nexport const formatBnbv2 = bnb => {\n  const value = bnb || ethers.BigNumber.from(0);\n  return formatBigNumberToFixed(value, 4);\n};\nexport const padTime = num => num.toString().padStart(2, '0');\nexport const formatRoundTime = secondsBetweenBlocks => {\n  const {\n    hours,\n    minutes,\n    seconds\n  } = getTimePeriods(secondsBetweenBlocks);\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`;\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`;\n  }\n\n  return minutesSeconds;\n};\nexport const getHasRoundFailed = (round, blockNumber) => {\n  if (!round.endBlock) {\n    return false;\n  }\n\n  return blockNumber > round.endBlock && round.oracleCalled === false;\n};\nexport const getMultiplierv2 = (total, amount) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total);\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount);\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed);\n};\nexport const getPayoutv2 = (ledger, round) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  const {\n    bullAmount,\n    bearAmount,\n    rewardAmount\n  } = round;\n  const {\n    amount,\n    position\n  } = ledger;\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount));\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount);\n  return amountFixed.mulUnsafe(multiplier);\n};\nexport const getNetPayoutv2 = (ledger, round) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  const payout = getPayoutv2(ledger, round);\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount));\n  return payout.subUnsafe(amount);\n};\nexport const getPriceDifference = (price, lockPrice) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0);\n  }\n\n  return price.sub(lockPrice);\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/helpers.ts"],"names":["ethers","BetPosition","formatBigNumber","formatBigNumberToFixed","getTimePeriods","formatUsdv2","usd","formatBnbv2","bnb","value","BigNumber","from","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","hours","minutes","seconds","minutesSeconds","getHasRoundFailed","round","blockNumber","endBlock","oracleCalled","getMultiplierv2","total","amount","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPayoutv2","ledger","bullAmount","bearAmount","rewardAmount","position","amountFixed","multiplier","BULL","mulUnsafe","getNetPayoutv2","payout","subUnsafe","getPriceDifference","price","lockPrice","sub"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\r\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\r\n  const value = bnb || ethers.BigNumber.from(0)\r\n  return formatBigNumberToFixed(value, 4)\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\r\n  if (!round.endBlock) {\r\n    return false\r\n  }\r\n\r\n  return blockNumber > round.endBlock && round.oracleCalled === false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const { bullAmount, bearAmount, rewardAmount } = round\r\n  const { amount, position } = ledger\r\n\r\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\r\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return amountFixed.mulUnsafe(multiplier)\r\n}\r\n\r\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const payout = getPayoutv2(ledger, round)\r\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\r\n\r\n  return payout.subUnsafe(amount)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}