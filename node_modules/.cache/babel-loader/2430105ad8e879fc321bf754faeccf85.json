{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\Cells\\\\TotalStakedCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport BigNumber from 'bignumber.js';\nimport Balance from 'components/Balance';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`;\n_c = StyledCell;\n\nconst TotalStakedCell = ({\n  pool\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    sousId,\n    stakingToken,\n    totalStaked,\n    isAutoVault\n  } = pool;\n  const {\n    totalCakeInVault\n  } = useCakeVault();\n  const isManualCakePool = sousId === 0;\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals);\n    }\n\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault);\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals);\n    }\n\n    return getBalanceNumber(totalStaked, stakingToken.decimals);\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals]);\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: t('Total staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), totalStaked && totalStaked.gte(0) ? /*#__PURE__*/_jsxDEV(Flex, {\n        height: \"20px\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Balance, {\n          fontSize: \"16px\",\n          value: totalStakedBalance,\n          decimals: 0,\n          unit: ` ${stakingToken.symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TotalStakedCell, \"u7fwO+UC39P1NqbdWzZ3dMnoTOQ=\", false, function () {\n  return [useTranslation, useCakeVault];\n});\n\n_c2 = TotalStakedCell;\nexport default TotalStakedCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"TotalStakedCell\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx"],"names":["React","useMemo","Flex","Skeleton","Text","styled","useTranslation","BigNumber","Balance","useCakeVault","getBalanceNumber","BaseCell","CellContent","StyledCell","TotalStakedCell","pool","t","sousId","stakingToken","totalStaked","isAutoVault","totalCakeInVault","isManualCakePool","totalStakedBalance","decimals","manualCakeTotalMinusAutoVault","minus","gte","symbol"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,YAAtC;;AAMA,MAAMC,UAAU,GAAGR,MAAM,CAACM,QAAD,CAAW;AACpC;AACA,CAFA;KAAME,U;;AAIN,MAAMC,eAA+C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAQV,cAAc,EAA5B;AACA,QAAM;AAAEW,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,WAAxB;AAAqCC,IAAAA;AAArC,MAAqDL,IAA3D;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAuBZ,YAAY,EAAzC;AAEA,QAAMa,gBAAgB,GAAGL,MAAM,KAAK,CAApC;AAEA,QAAMM,kBAAkB,GAAGtB,OAAO,CAAC,MAAM;AACvC,QAAImB,WAAJ,EAAiB;AACf,aAAOV,gBAAgB,CAACW,gBAAD,EAAmBH,YAAY,CAACM,QAAhC,CAAvB;AACD;;AACD,QAAIF,gBAAJ,EAAsB;AACpB,YAAMG,6BAA6B,GAAG,IAAIlB,SAAJ,CAAcY,WAAd,EAA2BO,KAA3B,CAAiCL,gBAAjC,CAAtC;AACA,aAAOX,gBAAgB,CAACe,6BAAD,EAAgCP,YAAY,CAACM,QAA7C,CAAvB;AACD;;AACD,WAAOd,gBAAgB,CAACS,WAAD,EAAcD,YAAY,CAACM,QAA3B,CAAvB;AACD,GATiC,EAS/B,CAACJ,WAAD,EAAcC,gBAAd,EAAgCC,gBAAhC,EAAkDH,WAAlD,EAA+DD,YAAY,CAACM,QAA5E,CAT+B,CAAlC;AAWA,sBACE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAA,2BACE,QAAC,WAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAC,YAA5B;AAAyC,QAAA,SAAS,EAAC,MAAnD;AAAA,kBACGR,CAAC,CAAC,cAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cADF,EAIGG,WAAW,IAAIA,WAAW,CAACQ,GAAZ,CAAgB,CAAhB,CAAf,gBACC,QAAC,IAAD;AAAM,QAAA,MAAM,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAC,QAA/B;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,QAAQ,EAAC,MAAlB;AAAyB,UAAA,KAAK,EAAEJ,kBAAhC;AAAoD,UAAA,QAAQ,EAAE,CAA9D;AAAiE,UAAA,IAAI,EAAG,IAAGL,YAAY,CAACU,MAAO;AAA/F;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADD,gBAKC,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,MAAhB;AAAuB,QAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAlCD;;GAAMd,e;UACUR,c,EAEeG,Y;;;MAHzBK,e;AAoCN,eAAeA,eAAf","sourcesContent":["import React, { useMemo } from 'react'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { Pool } from 'state/types'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\n\r\ninterface TotalStakedCellProps {\r\n  pool: Pool\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 2 0 100px;\r\n`\r\n\r\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\r\n  const { t } = useTranslation()\r\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\r\n  const { totalCakeInVault } = useCakeVault()\r\n\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const totalStakedBalance = useMemo(() => {\r\n    if (isAutoVault) {\r\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\r\n    }\r\n    if (isManualCakePool) {\r\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\r\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\r\n    }\r\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\r\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {t('Total staked')}\r\n        </Text>\r\n        {totalStaked && totalStaked.gte(0) ? (\r\n          <Flex height=\"20px\" alignItems=\"center\">\r\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\r\n          </Flex>\r\n        ) : (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default TotalStakedCell\r\n"]},"metadata":{},"sourceType":"module"}