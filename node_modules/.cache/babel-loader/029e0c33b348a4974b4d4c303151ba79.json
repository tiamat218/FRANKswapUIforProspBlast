{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\ClaimPrizesModal\\\\ClaimPrizesInner.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { callWithEstimateGas } from 'utils/calls';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchUserLotteries } from 'state/lottery';\nimport { useAppDispatch } from 'state';\nimport Balance from 'components/Balance';\nimport useToast from 'hooks/useToast';\nimport { useLotteryV2Contract } from 'hooks/useContract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ClaimInnerContainer = ({\n  onSuccess,\n  roundsToClaim\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId\n  } = useLottery();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0);\n  const [pendingTx, setPendingTx] = useState(false);\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber()));\n  const lotteryContract = useLotteryV2Contract();\n  const activeClaimData = roundsToClaim[activeClaimIndex];\n  const cakePriceBusd = usePriceCakeBusd();\n  const cakeReward = activeClaimData.cakeTotal;\n  const dollarReward = cakeReward.times(cakePriceBusd);\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber();\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber();\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards, lotteryId) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.id;\n    });\n    const brackets = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.rewardBracket;\n    });\n    return {\n      lotteryId,\n      ticketIds,\n      brackets\n    };\n  };\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards, activeClaimData.roundId);\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1);\n      dispatch(fetchUserLotteries({\n        account,\n        currentLotteryId\n      }));\n    } else {\n      onSuccess();\n    }\n  };\n\n  const getTicketBatches = (ticketIds, brackets) => {\n    const requests = [];\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber();\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i);\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i);\n      requests.push({\n        ticketIds: ticketIdsSlice,\n        brackets: bracketsSlice\n      });\n    }\n\n    return requests;\n  };\n\n  const handleClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    setPendingTx(true);\n\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets]);\n      const receipt = await tx.wait();\n\n      if (receipt.status) {\n        toastSuccess(t('Prizes Collected!'), t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n          lotteryId\n        }));\n        setPendingTx(false);\n        handleProgressToNextClaim();\n      }\n    } catch (error) {\n      console.error(error);\n      toastError(t('Error'), t('%error% - Please try again.', {\n        error: error.message\n      }));\n      setPendingTx(false);\n    }\n  };\n\n  const handleBatchClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    const ticketBatches = getTicketBatches(ticketIds, brackets);\n    const transactionsToFire = ticketBatches.length;\n    const receipts = [];\n    setPendingTx(true); // eslint-disable-next-line no-restricted-syntax\n\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets]);\n        const receipt = await tx.wait();\n        /* eslint-enable no-await-in-loop */\n\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt);\n          setPendingBatchClaims(transactionsToFire - receipts.length); // More transactions are to be done within the batch. Issue toast to give user feedback.\n\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(t('Prizes Collected!'), t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation', {\n              claimNum: receipts.length,\n              claimTotal: transactionsToFire,\n              lotteryId\n            }));\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        setPendingTx(false);\n        toastError(t('Error'), t('%error% - Please try again.', {\n          error: error.message\n        }));\n        break;\n      }\n    } // Batch is finished\n\n\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false);\n      toastSuccess(t('Prizes Collected!'), t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n        lotteryId\n      }));\n      handleProgressToNextClaim();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mb: \"4px\",\n        textAlign: ['center', null, 'left'],\n        children: t('You won')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: ['flex-start', null, 'center'],\n        justifyContent: ['flex-start', null, 'space-between'],\n        flexDirection: ['column', null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Balance, {\n          textAlign: ['center', null, 'left'],\n          lineHeight: \"1.1\",\n          value: rewardAsBalance,\n          fontSize: \"44px\",\n          bold: true,\n          color: \"secondary\",\n          unit: \" CAKE!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PresentWonIcon, {\n          ml: ['0', null, '12px'],\n          width: \"64px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        mt: ['12px', null, '0'],\n        textAlign: ['center', null, 'left'],\n        value: dollarRewardAsBalance,\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        mt: \"8px\",\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: [t('Round'), \" #\", activeClaimData.roundId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        isLoading: pendingTx,\n        endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 32\n        }, this) : null,\n        mt: \"20px\",\n        width: \"100%\",\n        onClick: () => shouldBatchRequest ? handleBatchClaim() : handleClaim(),\n        children: [pendingTx ? t('Claiming') : t('Claim'), \" \", pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ClaimInnerContainer, \"Bb7sgeFB6KrFV59qAZykihmBOH8=\", false, function () {\n  return [useWeb3React, useTranslation, useAppDispatch, useLottery, useToast, useLotteryV2Contract, usePriceCakeBusd];\n});\n\n_c = ClaimInnerContainer;\nexport default ClaimInnerContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimInnerContainer\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","usePriceCakeBusd","useLottery","fetchUserLotteries","useAppDispatch","Balance","useToast","useLotteryV2Contract","ClaimInnerContainer","onSuccess","roundsToClaim","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","currentLotteryId","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","pendingBatchClaims","setPendingBatchClaims","Math","ceil","ticketsWithUnclaimedRewards","length","toNumber","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","receipt","wait","status","error","console","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { callWithEstimateGas } from 'utils/calls'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserLotteries } from 'state/lottery'\r\nimport { useAppDispatch } from 'state'\r\nimport Balance from 'components/Balance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useLotteryV2Contract } from 'hooks/useContract'\r\n\r\ninterface ClaimInnerProps {\r\n  roundsToClaim: LotteryTicketClaimData[]\r\n  onSuccess?: () => void\r\n}\r\n\r\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\r\n    Math.ceil(\r\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\r\n    ),\r\n  )\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const activeClaimData = roundsToClaim[activeClaimIndex]\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const cakeReward = activeClaimData.cakeTotal\r\n  const dollarReward = cakeReward.times(cakePriceBusd)\r\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\r\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\r\n\r\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\r\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.id\r\n    })\r\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.rewardBracket\r\n    })\r\n    return { lotteryId, ticketIds, brackets }\r\n  }\r\n\r\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\r\n    activeClaimData.ticketsWithUnclaimedRewards,\r\n    activeClaimData.roundId,\r\n  )\r\n\r\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\r\n\r\n  const handleProgressToNextClaim = () => {\r\n    if (roundsToClaim.length > activeClaimIndex + 1) {\r\n      // If there are still rounds to claim, move onto the next claim\r\n      setActiveClaimIndex(activeClaimIndex + 1)\r\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n    } else {\r\n      onSuccess()\r\n    }\r\n  }\r\n\r\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\r\n    const requests = []\r\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\r\n\r\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\r\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\r\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\r\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\r\n    }\r\n\r\n    return requests\r\n  }\r\n\r\n  const handleClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets])\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Prizes Collected!'),\r\n          t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n        )\r\n        setPendingTx(false)\r\n        handleProgressToNextClaim()\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleBatchClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\r\n    const transactionsToFire = ticketBatches.length\r\n    const receipts = []\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const ticketBatch of ticketBatches) {\r\n      try {\r\n        /* eslint-disable no-await-in-loop */\r\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [\r\n          lotteryId,\r\n          ticketBatch.ticketIds,\r\n          ticketBatch.brackets,\r\n        ])\r\n        const receipt = await tx.wait()\r\n        /* eslint-enable no-await-in-loop */\r\n        if (receipt.status) {\r\n          // One transaction within batch has succeeded\r\n          receipts.push(receipt)\r\n          setPendingBatchClaims(transactionsToFire - receipts.length)\r\n\r\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\r\n          if (receipts.length !== transactionsToFire) {\r\n            toastSuccess(\r\n              t('Prizes Collected!'),\r\n              t(\r\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',\r\n                {\r\n                  claimNum: receipts.length,\r\n                  claimTotal: transactionsToFire,\r\n                  lotteryId,\r\n                },\r\n              ),\r\n            )\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setPendingTx(false)\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        break\r\n      }\r\n    }\r\n\r\n    // Batch is finished\r\n    if (receipts.length === transactionsToFire) {\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        t('Prizes Collected!'),\r\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n      )\r\n      handleProgressToNextClaim()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex flexDirection=\"column\">\r\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\r\n          {t('You won')}\r\n        </Text>\r\n        <Flex\r\n          alignItems={['flex-start', null, 'center']}\r\n          justifyContent={['flex-start', null, 'space-between']}\r\n          flexDirection={['column', null, 'row']}\r\n        >\r\n          <Balance\r\n            textAlign={['center', null, 'left']}\r\n            lineHeight=\"1.1\"\r\n            value={rewardAsBalance}\r\n            fontSize=\"44px\"\r\n            bold\r\n            color=\"secondary\"\r\n            unit=\" CAKE!\"\r\n          />\r\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\r\n        </Flex>\r\n        <Balance\r\n          mt={['12px', null, '0']}\r\n          textAlign={['center', null, 'left']}\r\n          value={dollarRewardAsBalance}\r\n          fontSize=\"12px\"\r\n          color=\"textSubtle\"\r\n          unit=\" USD\"\r\n          prefix=\"~\"\r\n        />\r\n      </Flex>\r\n\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Round')} #{activeClaimData.roundId}\r\n        </Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          mt=\"20px\"\r\n          width=\"100%\"\r\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\r\n        >\r\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ClaimInnerContainer\r\n"]},"metadata":{},"sourceType":"module"}