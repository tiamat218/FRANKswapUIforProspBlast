{"ast":null,"code":"export const tokenEarnedPerThousandDollarsCompounding=_ref=>{let{numberOfDays,farmApr,tokenPrice,roundingDecimals=2,compoundFrequency=1,performanceFee=0}=_ref;// Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\nconst timesCompounded=365*compoundFrequency;// We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\nlet aprAsDecimal=farmApr/100;if(performanceFee){// Reduce the APR by the % performance fee\nconst feeRelativeToApr=farmApr/100*performanceFee;const aprAfterFee=farmApr-feeRelativeToApr;aprAsDecimal=aprAfterFee/100;}const daysAsDecimalOfYear=numberOfDays/365;// Calculate the starting TOKEN balance with a dollar balance of $1000.\nconst principal=1000/tokenPrice;// This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\nconst finalAmount=principal*(1+aprAsDecimal/timesCompounded)**(timesCompounded*daysAsDecimalOfYear);// To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\nconst interestEarned=finalAmount-principal;return parseFloat(interestEarned.toFixed(roundingDecimals));};export const getRoi=_ref2=>{let{amountEarned,amountInvested}=_ref2;const percentage=amountEarned/amountInvested*100;return percentage;};","map":{"version":3,"names":["tokenEarnedPerThousandDollarsCompounding","_ref","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","feeRelativeToApr","aprAfterFee","daysAsDecimalOfYear","principal","finalAmount","interestEarned","parseFloat","toFixed","getRoi","_ref2","amountEarned","amountInvested","percentage"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/compoundApyHelpers.ts"],"sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  let aprAsDecimal = farmApr / 100\r\n\r\n  if (performanceFee) {\r\n    // Reduce the APR by the % performance fee\r\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\r\n    const aprAfterFee = farmApr - feeRelativeToApr\r\n    aprAsDecimal = aprAfterFee / 100\r\n  }\r\n\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,wCAAwC,CAAGC,IAAA,EAOlD,IAPmD,CACvDC,YAAY,CACZC,OAAO,CACPC,UAAU,CACVC,gBAAgB,CAAG,CAAC,CACpBC,iBAAiB,CAAG,CAAC,CACrBC,cAAc,CAAG,CACnB,CAAC,CAAAN,IAAA,CACC;AACA,KAAM,CAAAO,eAAe,CAAG,GAAG,CAAGF,iBAAiB,CAC/C;AACA,GAAI,CAAAG,YAAY,CAAGN,OAAO,CAAG,GAAG,CAEhC,GAAII,cAAc,CAAE,CAClB;AACA,KAAM,CAAAG,gBAAgB,CAAIP,OAAO,CAAG,GAAG,CAAII,cAAc,CACzD,KAAM,CAAAI,WAAW,CAAGR,OAAO,CAAGO,gBAAgB,CAC9CD,YAAY,CAAGE,WAAW,CAAG,GAAG,CAClC,CAEA,KAAM,CAAAC,mBAAmB,CAAGV,YAAY,CAAG,GAAG,CAC9C;AACA,KAAM,CAAAW,SAAS,CAAG,IAAI,CAAGT,UAAU,CACnC;AACA,KAAM,CAAAU,WAAW,CAAGD,SAAS,CAAG,CAAC,CAAC,CAAGJ,YAAY,CAAGD,eAAe,IAAMA,eAAe,CAAGI,mBAAmB,CAAC,CAC/G;AACA,KAAM,CAAAG,cAAc,CAAGD,WAAW,CAAGD,SAAS,CAE9C,MAAO,CAAAG,UAAU,CAACD,cAAc,CAACE,OAAO,CAACZ,gBAAgB,CAAC,CAAC,CAC7D,CAAC,CAED,MAAO,MAAM,CAAAa,MAAM,CAAGC,KAAA,EAAsC,IAArC,CAAEC,YAAY,CAAEC,cAAe,CAAC,CAAAF,KAAA,CACrD,KAAM,CAAAG,UAAU,CAAIF,YAAY,CAAGC,cAAc,CAAI,GAAG,CACxD,MAAO,CAAAC,UAAU,CACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}