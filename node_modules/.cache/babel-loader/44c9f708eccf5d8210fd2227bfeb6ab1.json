{"ast":null,"code":"import { random } from 'lodash';\n/**\r\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\r\n */\n\nconst generateTicketNumbers = (numberOfTickets, userCurrentTickets, minNumber = 1000000, maxNumber = 1999999) => {\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\n  const existingTicketNumbers = (userCurrentTickets === null || userCurrentTickets === void 0 ? void 0 : userCurrentTickets.length) > 0 ? userCurrentTickets.map(ticket => {\n    return parseInt(ticket === null || ticket === void 0 ? void 0 : ticket.number);\n  }) : [];\n  const generatedTicketNumbers = [...existingTicketNumbers];\n\n  for (let count = 0; count < numberOfTickets; count++) {\n    let randomNumber = random(minNumber, maxNumber);\n\n    while (generatedTicketNumbers.includes(randomNumber)) {\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\n      randomNumber = random(minNumber, maxNumber);\n    }\n\n    generatedTicketNumbers.push(randomNumber);\n  } // Filter out the users' existing tickets\n\n\n  const ticketsToBuy = (userCurrentTickets === null || userCurrentTickets === void 0 ? void 0 : userCurrentTickets.length) > 0 ? generatedTicketNumbers.filter(ticketNumber => {\n    return !existingTicketNumbers.includes(ticketNumber);\n  }) : generatedTicketNumbers;\n  return ticketsToBuy;\n};\n\nexport default generateTicketNumbers;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/BuyTicketsModal/generateTicketNumbers.tsx"],"names":["random","generateTicketNumbers","numberOfTickets","userCurrentTickets","minNumber","maxNumber","existingTicketNumbers","length","map","ticket","parseInt","number","generatedTicketNumbers","count","randomNumber","includes","push","ticketsToBuy","filter","ticketNumber"],"mappings":"AACA,SAASA,MAAT,QAAuB,QAAvB;AAEA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,CAC5BC,eAD4B,EAE5BC,kBAF4B,EAG5BC,SAAS,GAAG,OAHgB,EAI5BC,SAAS,GAAG,OAJgB,KAKf;AACb;AACA,QAAMC,qBAAqB,GACzB,CAAAH,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEI,MAApB,IAA6B,CAA7B,GACIJ,kBAAkB,CAACK,GAAnB,CAAwBC,MAAD,IAAY;AACjC,WAAOC,QAAQ,CAACD,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,MAAT,CAAf;AACD,GAFD,CADJ,GAII,EALN;AAMA,QAAMC,sBAAsB,GAAG,CAAC,GAAGN,qBAAJ,CAA/B;;AAEA,OAAK,IAAIO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGX,eAA5B,EAA6CW,KAAK,EAAlD,EAAsD;AACpD,QAAIC,YAAY,GAAGd,MAAM,CAACI,SAAD,EAAYC,SAAZ,CAAzB;;AACA,WAAOO,sBAAsB,CAACG,QAAvB,CAAgCD,YAAhC,CAAP,EAAsD;AACpD;AACAA,MAAAA,YAAY,GAAGd,MAAM,CAACI,SAAD,EAAYC,SAAZ,CAArB;AACD;;AACDO,IAAAA,sBAAsB,CAACI,IAAvB,CAA4BF,YAA5B;AACD,GAjBY,CAmBb;;;AACA,QAAMG,YAAY,GAChB,CAAAd,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEI,MAApB,IAA6B,CAA7B,GACIK,sBAAsB,CAACM,MAAvB,CAA+BC,YAAD,IAAkB;AAC9C,WAAO,CAACb,qBAAqB,CAACS,QAAtB,CAA+BI,YAA/B,CAAR;AACD,GAFD,CADJ,GAIIP,sBALN;AAOA,SAAOK,YAAP;AACD,CAjCD;;AAmCA,eAAehB,qBAAf","sourcesContent":["import { LotteryTicket } from 'config/constants/types'\r\nimport { random } from 'lodash'\r\n\r\n/**\r\n * Generate a specific number of unique, randomised 7-digit lottery numbers between 1000000 & 1999999\r\n */\r\nconst generateTicketNumbers = (\r\n  numberOfTickets: number,\r\n  userCurrentTickets?: LotteryTicket[],\r\n  minNumber = 1000000,\r\n  maxNumber = 1999999,\r\n): number[] => {\r\n  // Populate array with existing tickets (if they have them) to ensure no duplicates when generating new numbers\r\n  const existingTicketNumbers =\r\n    userCurrentTickets?.length > 0\r\n      ? userCurrentTickets.map((ticket) => {\r\n          return parseInt(ticket?.number)\r\n        })\r\n      : []\r\n  const generatedTicketNumbers = [...existingTicketNumbers]\r\n\r\n  for (let count = 0; count < numberOfTickets; count++) {\r\n    let randomNumber = random(minNumber, maxNumber)\r\n    while (generatedTicketNumbers.includes(randomNumber)) {\r\n      // Catch for duplicates - generate a new number until the array doesn't include the random number generated\r\n      randomNumber = random(minNumber, maxNumber)\r\n    }\r\n    generatedTicketNumbers.push(randomNumber)\r\n  }\r\n\r\n  // Filter out the users' existing tickets\r\n  const ticketsToBuy =\r\n    userCurrentTickets?.length > 0\r\n      ? generatedTicketNumbers.filter((ticketNumber) => {\r\n          return !existingTicketNumbers.includes(ticketNumber)\r\n        })\r\n      : generatedTicketNumbers\r\n\r\n  return ticketsToBuy\r\n}\r\n\r\nexport default generateTicketNumbers\r\n"]},"metadata":{},"sourceType":"module"}