{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\PoolsTable\\\\Cells\\\\EarningsCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { PoolCategory } from 'config/constants/types';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { getCakeVaultEarnings } from 'views/Pools/helpers';\nimport BaseCell, { CellContent } from './BaseCell';\nimport CollectModal from '../../PoolCard/Modals/CollectModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`;\n_c = StyledCell;\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`;\n_c2 = HelpIconWrapper;\n\nconst EarningsCell = ({\n  pool,\n  account,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  const {\n    sousId,\n    earningToken,\n    poolCategory,\n    userData,\n    earningTokenPrice,\n    isAutoVault\n  } = pool;\n  const isManualCakePool = sousId === 0;\n  const earnings = (userData === null || userData === void 0 ? void 0 : userData.pendingReward) ? new BigNumber(userData.pendingReward) : BIG_ZERO; // These will be reassigned later if its Auto CAKE vault\n\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals);\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals);\n  let hasEarnings = account && earnings.gt(0);\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals);\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3);\n  const isBnbPool = poolCategory === PoolCategory.BINANCE; // Auto CAKE vault calculations\n\n  const {\n    userData: {\n      cakeAtLastUserAction,\n      userShares,\n      lastUserActionTime\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  } = getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice);\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000;\n  const dateTimeLastAction = new Date(lastActionInMs);\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString();\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', {\n    asset: earningToken.symbol\n  });\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance;\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings;\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance;\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Balance, {\n      fontSize: \"16px\",\n      value: autoCakeToDisplay,\n      decimals: 3,\n      bold: true,\n      unit: \" CAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Balance, {\n      fontSize: \"16px\",\n      value: autoUsdToDisplay,\n      decimals: 2,\n      bold: true,\n      prefix: \"~$\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), t('Earned since your last action'), /*#__PURE__*/_jsxDEV(Text, {\n      children: dateStringToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom'\n  });\n  const [onPresentCollect] = useModal( /*#__PURE__*/_jsxDEV(CollectModal, {\n    formattedBalance: formattedBalance,\n    fullBalance: fullBalance,\n    earningToken: earningToken,\n    earningsDollarValue: earningTokenDollarBalance,\n    sousId: sousId,\n    isBnbPool: isBnbPool,\n    isCompoundPool: isManualCakePool\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this));\n\n  const handleEarningsClick = event => {\n    event.stopPropagation();\n    onPresentCollect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: labelText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), !userDataLoaded && account ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mr: \"8px\",\n            height: \"32px\",\n            onClick: !isAutoVault && hasEarnings ? handleEarningsClick : undefined,\n            children: [/*#__PURE__*/_jsxDEV(Balance, {\n              mt: \"4px\",\n              bold: !isXs && !isSm,\n              fontSize: isXs || isSm ? '14px' : '16px',\n              color: hasEarnings ? 'primary' : 'textDisabled',\n              decimals: hasEarnings ? 5 : 1,\n              value: hasEarnings ? earningTokenBalance : 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), hasEarnings ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: earningTokenPrice > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n                display: \"inline\",\n                fontSize: \"12px\",\n                color: \"textSubtle\",\n                decimals: 2,\n                prefix: \"~\",\n                value: earningTokenDollarBalance,\n                unit: \" USD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 23\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(Text, {\n              mt: \"4px\",\n              fontSize: \"12px\",\n              color: \"textDisabled\",\n              children: \"0 USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), isAutoVault && hasEarnings && !isXs && !isSm && /*#__PURE__*/_jsxDEV(HelpIconWrapper, {\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n              color: \"textSubtle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EarningsCell, \"7ETc7xQBJB9D1wdvtF/2E0fgDK0=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useCakeVault, useTooltip, useModal];\n});\n\n_c3 = EarningsCell;\nexport default EarningsCell;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"HelpIconWrapper\");\n$RefreshReg$(_c3, \"EarningsCell\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolsTable/Cells/EarningsCell.tsx"],"names":["React","styled","Skeleton","Text","useTooltip","HelpIcon","Flex","Box","useModal","useMatchBreakpoints","BigNumber","PoolCategory","BIG_ZERO","formatNumber","getBalanceNumber","getFullDisplayBalance","Balance","useCakeVault","useTranslation","getCakeVaultEarnings","BaseCell","CellContent","CollectModal","StyledCell","theme","mediaQueries","sm","HelpIconWrapper","div","EarningsCell","pool","account","userDataLoaded","t","isXs","isSm","sousId","earningToken","poolCategory","userData","earningTokenPrice","isAutoVault","isManualCakePool","earnings","pendingReward","earningTokenBalance","decimals","earningTokenDollarBalance","multipliedBy","hasEarnings","gt","fullBalance","formattedBalance","isBnbPool","BINANCE","cakeAtLastUserAction","userShares","lastUserActionTime","pricePerFullShare","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString","labelText","asset","symbol","targetRef","tooltip","tooltipVisible","placement","onPresentCollect","handleEarningsClick","event","stopPropagation","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { Pool } from 'state/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport BaseCell, { CellContent } from './BaseCell'\r\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\r\n\r\ninterface EarningsCellProps {\r\n  pool: Pool\r\n  account: string\r\n  userDataLoaded: boolean\r\n}\r\n\r\nconst StyledCell = styled(BaseCell)`\r\n  flex: 4.5;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex: 1 0 120px;\r\n  }\r\n`\r\n\r\nconst HelpIconWrapper = styled.div`\r\n  align-self: center;\r\n`\r\n\r\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\r\n  const { t } = useTranslation()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice, isAutoVault } = pool\r\n  const isManualCakePool = sousId === 0\r\n\r\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\r\n  // These will be reassigned later if its Auto CAKE vault\r\n  let earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\r\n  let earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\r\n  let hasEarnings = account && earnings.gt(0)\r\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\r\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\r\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\r\n\r\n  // Auto CAKE vault calculations\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    earningTokenPrice,\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  const labelText = isAutoVault ? t('Recent CAKE profit') : t('%asset% Earned', { asset: earningToken.symbol })\r\n  earningTokenBalance = isAutoVault ? autoCakeToDisplay : earningTokenBalance\r\n  hasEarnings = isAutoVault ? hasAutoEarnings : hasEarnings\r\n  earningTokenDollarBalance = isAutoVault ? autoUsdToDisplay : earningTokenDollarBalance\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const [onPresentCollect] = useModal(\r\n    <CollectModal\r\n      formattedBalance={formattedBalance}\r\n      fullBalance={fullBalance}\r\n      earningToken={earningToken}\r\n      earningsDollarValue={earningTokenDollarBalance}\r\n      sousId={sousId}\r\n      isBnbPool={isBnbPool}\r\n      isCompoundPool={isManualCakePool}\r\n    />,\r\n  )\r\n\r\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation()\r\n    onPresentCollect()\r\n  }\r\n\r\n  return (\r\n    <StyledCell role=\"cell\">\r\n      <CellContent>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\r\n          {labelText}\r\n        </Text>\r\n        {!userDataLoaded && account ? (\r\n          <Skeleton width=\"80px\" height=\"16px\" />\r\n        ) : (\r\n          <>\r\n            {tooltipVisible && tooltip}\r\n            <Flex>\r\n              <Box mr=\"8px\" height=\"32px\" onClick={!isAutoVault && hasEarnings ? handleEarningsClick : undefined}>\r\n                <Balance\r\n                  mt=\"4px\"\r\n                  bold={!isXs && !isSm}\r\n                  fontSize={isXs || isSm ? '14px' : '16px'}\r\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\r\n                  decimals={hasEarnings ? 5 : 1}\r\n                  value={hasEarnings ? earningTokenBalance : 0}\r\n                />\r\n                {hasEarnings ? (\r\n                  <>\r\n                    {earningTokenPrice > 0 && (\r\n                      <Balance\r\n                        display=\"inline\"\r\n                        fontSize=\"12px\"\r\n                        color=\"textSubtle\"\r\n                        decimals={2}\r\n                        prefix=\"~\"\r\n                        value={earningTokenDollarBalance}\r\n                        unit=\" USD\"\r\n                      />\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\r\n                    0 USD\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n              {isAutoVault && hasEarnings && !isXs && !isSm && (\r\n                <HelpIconWrapper ref={targetRef}>\r\n                  <HelpIcon color=\"textSubtle\" />\r\n                </HelpIconWrapper>\r\n              )}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </CellContent>\r\n    </StyledCell>\r\n  )\r\n}\r\n\r\nexport default EarningsCell\r\n"]},"metadata":{},"sourceType":"module"}