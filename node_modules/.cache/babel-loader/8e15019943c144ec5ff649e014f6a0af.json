{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\MobileMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useWeb3React } from '@web3-react/core';\nimport { ArrowBackIcon, ArrowForwardIcon, ButtonMenu, ButtonMenuItem, Cards, ChartIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit';\nimport { useAppDispatch } from 'state';\nimport { PredictionStatus } from 'state/types';\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks';\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions';\nimport useSwiper from '../hooks/useSwiper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonNav = styled.div`\n  flex: none;\n`;\n_c = ButtonNav;\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`;\n_c2 = TabNav;\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({\n  theme\n}) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`;\n_c3 = StyledMobileMenu;\n\nconst getActiveIndex = (isHistoryOpen, isChartOpen) => {\n  if (isHistoryOpen) {\n    return 2;\n  }\n\n  if (isChartOpen) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst MobileMenu = () => {\n  _s();\n\n  const {\n    swiper\n  } = useSwiper();\n  const isHistoryOpen = useIsHistoryPaneOpen();\n  const isChartOpen = useIsChartPaneOpen();\n  const status = useGetPredictionsStatus();\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen);\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n\n  const handleItemClick = index => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true));\n        break;\n\n      case 1:\n        dispatch(setChartPaneState(true));\n        dispatch(setHistoryPaneState(false));\n        break;\n\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false));\n        dispatch(setChartPaneState(false));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledMobileMenu, {\n    children: [/*#__PURE__*/_jsxDEV(ButtonNav, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        onClick: () => swiper.slidePrev(),\n        disabled: status !== PredictionStatus.LIVE,\n        children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n          width: \"24px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TabNav, {\n      children: /*#__PURE__*/_jsxDEV(ButtonMenu, {\n        activeIndex: activeIndex,\n        scale: \"sm\",\n        variant: \"subtle\",\n        onItemClick: handleItemClick,\n        children: [/*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          children: /*#__PURE__*/_jsxDEV(Cards, {\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          children: /*#__PURE__*/_jsxDEV(ChartIcon, {\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ButtonMenuItem, {\n          disabled: !account,\n          children: /*#__PURE__*/_jsxDEV(HistoryIcon, {\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonNav, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        onClick: () => swiper.slideNext(),\n        disabled: status !== PredictionStatus.LIVE,\n        children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n          width: \"24px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MobileMenu, \"dcBqUJMKEaZBfhgYrrcvkgd8yWE=\", false, function () {\n  return [useSwiper, useIsHistoryPaneOpen, useIsChartPaneOpen, useGetPredictionsStatus, useAppDispatch, useWeb3React];\n});\n\n_c4 = MobileMenu;\nexport default MobileMenu;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ButtonNav\");\n$RefreshReg$(_c2, \"TabNav\");\n$RefreshReg$(_c3, \"StyledMobileMenu\");\n$RefreshReg$(_c4, \"MobileMenu\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/MobileMenu.tsx"],"names":["React","styled","useWeb3React","ArrowBackIcon","ArrowForwardIcon","ButtonMenu","ButtonMenuItem","Cards","ChartIcon","HistoryIcon","IconButton","useAppDispatch","PredictionStatus","useGetPredictionsStatus","useIsChartPaneOpen","useIsHistoryPaneOpen","setChartPaneState","setHistoryPaneState","useSwiper","ButtonNav","div","TabNav","StyledMobileMenu","theme","card","background","mediaQueries","lg","getActiveIndex","isHistoryOpen","isChartOpen","MobileMenu","swiper","status","activeIndex","dispatch","account","handleItemClick","index","slidePrev","LIVE","slideNext"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n"]},"metadata":{},"sourceType":"module"}