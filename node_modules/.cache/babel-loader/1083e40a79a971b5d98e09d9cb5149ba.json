{"ast":null,"code":"import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import{getBep20Contract,getCakeContract}from'utils/contractHelpers';import{BIG_ZERO}from'utils/bigNumber';import{simpleRpcProvider}from'utils/providers';import useRefresh from'./useRefresh';import useLastUpdated from'./useLastUpdated';export let FetchStatus;(function(FetchStatus){FetchStatus[\"NOT_FETCHED\"]=\"not-fetched\";FetchStatus[\"SUCCESS\"]=\"success\";FetchStatus[\"FAILED\"]=\"failed\";})(FetchStatus||(FetchStatus={}));const useTokenBalance=tokenAddress=>{const{NOT_FETCHED,SUCCESS,FAILED}=FetchStatus;const[balanceState,setBalanceState]=useState({balance:BIG_ZERO,fetchStatus:NOT_FETCHED});const{account}=useWeb3React();const{fastRefresh}=useRefresh();useEffect(()=>{const fetchBalance=async()=>{const contract=getBep20Contract(tokenAddress);try{const res=await contract.balanceOf(account);setBalanceState({balance:new BigNumber(res.toString()),fetchStatus:SUCCESS});}catch(e){console.error(e);setBalanceState(prev=>({...prev,fetchStatus:FAILED}));}};if(account){fetchBalance();}},[account,tokenAddress,fastRefresh,SUCCESS,FAILED]);return balanceState;};export const useTotalSupply=()=>{const{slowRefresh}=useRefresh();const[totalSupply,setTotalSupply]=useState();useEffect(()=>{async function fetchTotalSupply(){const cakeContract=getCakeContract();const supply=await cakeContract.totalSupply();setTotalSupply(new BigNumber(supply.toString()));}fetchTotalSupply();},[slowRefresh]);return totalSupply;};export const useBurnedBalance=tokenAddress=>{const[balance,setBalance]=useState(BIG_ZERO);const{slowRefresh}=useRefresh();useEffect(()=>{const fetchBalance=async()=>{const contract=getBep20Contract(tokenAddress);const res=await contract.balanceOf('0x000000000000000000000000000000000000dEaD');setBalance(new BigNumber(res.toString()));};fetchBalance();},[tokenAddress,slowRefresh]);return balance;};export const useGetBnbBalance=()=>{const[balance,setBalance]=useState(BIG_ZERO);const{account}=useWeb3React();const{lastUpdated,setLastUpdated}=useLastUpdated();useEffect(()=>{const fetchBalance=async()=>{const walletBalance=await simpleRpcProvider.getBalance(account);setBalance(new BigNumber(walletBalance.toString()));};if(account){fetchBalance();}},[account,lastUpdated,setBalance]);return{balance,refresh:setLastUpdated};};export default useTokenBalance;","map":{"version":3,"names":["useEffect","useState","BigNumber","useWeb3React","getBep20Contract","getCakeContract","BIG_ZERO","simpleRpcProvider","useRefresh","useLastUpdated","FetchStatus","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","balance","fetchStatus","account","fastRefresh","fetchBalance","contract","res","balanceOf","toString","e","console","error","prev","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","useBurnedBalance","setBalance","useGetBnbBalance","lastUpdated","setLastUpdated","walletBalance","getBalance","refresh"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/hooks/useTokenBalance.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useRefresh from './useRefresh'\r\nimport useLastUpdated from './useLastUpdated'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const walletBalance = await simpleRpcProvider.getBalance(account)\r\n      setBalance(new BigNumber(walletBalance.toString()))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance])\r\n\r\n  return { balance, refresh: setLastUpdated }\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}