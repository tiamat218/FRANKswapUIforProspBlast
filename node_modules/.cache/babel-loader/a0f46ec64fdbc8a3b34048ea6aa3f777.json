{"ast":null,"code":"import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import{Flex,Button,Text,AutoRenewIcon,PresentWonIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{getBalanceAmount}from'utils/formatBalance';import{callWithEstimateGas}from'utils/calls';import{usePriceCakeBusd}from'state/farms/hooks';import{useLottery}from'state/lottery/hooks';import{fetchUserLotteries}from'state/lottery';import{useAppDispatch}from'state';import Balance from'components/Balance';import useToast from'hooks/useToast';import{useLotteryV2Contract}from'hooks/useContract';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ClaimInnerContainer=_ref=>{let{onSuccess,roundsToClaim}=_ref;const{account}=useWeb3React();const{t}=useTranslation();const dispatch=useAppDispatch();const{maxNumberTicketsPerBuyOrClaim,currentLotteryId}=useLottery();const{toastSuccess,toastError}=useToast();const[activeClaimIndex,setActiveClaimIndex]=useState(0);const[pendingTx,setPendingTx]=useState(false);const[pendingBatchClaims,setPendingBatchClaims]=useState(Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length/maxNumberTicketsPerBuyOrClaim.toNumber()));const lotteryContract=useLotteryV2Contract();const activeClaimData=roundsToClaim[activeClaimIndex];const cakePriceBusd=usePriceCakeBusd();const cakeReward=activeClaimData.cakeTotal;const dollarReward=cakeReward.times(cakePriceBusd);const rewardAsBalance=getBalanceAmount(cakeReward).toNumber();const dollarRewardAsBalance=getBalanceAmount(dollarReward).toNumber();const parseUnclaimedTicketDataForClaimCall=(ticketsWithUnclaimedRewards,lotteryId)=>{const ticketIds=ticketsWithUnclaimedRewards.map(ticket=>{return ticket.id;});const brackets=ticketsWithUnclaimedRewards.map(ticket=>{return ticket.rewardBracket;});return{lotteryId,ticketIds,brackets};};const claimTicketsCallData=parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards,activeClaimData.roundId);const shouldBatchRequest=maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);const handleProgressToNextClaim=()=>{if(roundsToClaim.length>activeClaimIndex+1){// If there are still rounds to claim, move onto the next claim\nsetActiveClaimIndex(activeClaimIndex+1);dispatch(fetchUserLotteries({account,currentLotteryId}));}else{onSuccess();}};const getTicketBatches=(ticketIds,brackets)=>{const requests=[];const maxAsNumber=maxNumberTicketsPerBuyOrClaim.toNumber();for(let i=0;i<ticketIds.length;i+=maxAsNumber){const ticketIdsSlice=ticketIds.slice(i,maxAsNumber+i);const bracketsSlice=brackets.slice(i,maxAsNumber+i);requests.push({ticketIds:ticketIdsSlice,brackets:bracketsSlice});}return requests;};const handleClaim=async()=>{const{lotteryId,ticketIds,brackets}=claimTicketsCallData;setPendingTx(true);try{const tx=await callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketIds,brackets]);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Prizes Collected!'),t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId}));setPendingTx(false);handleProgressToNextClaim();}}catch(error){console.error(error);toastError(t('Error'),t('%error% - Please try again.',{error:error.message}));setPendingTx(false);}};const handleBatchClaim=async()=>{const{lotteryId,ticketIds,brackets}=claimTicketsCallData;const ticketBatches=getTicketBatches(ticketIds,brackets);const transactionsToFire=ticketBatches.length;const receipts=[];setPendingTx(true);// eslint-disable-next-line no-restricted-syntax\nfor(const ticketBatch of ticketBatches){try{/* eslint-disable no-await-in-loop */const tx=await callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketBatch.ticketIds,ticketBatch.brackets]);const receipt=await tx.wait();/* eslint-enable no-await-in-loop */if(receipt.status){// One transaction within batch has succeeded\nreceipts.push(receipt);setPendingBatchClaims(transactionsToFire-receipts.length);// More transactions are to be done within the batch. Issue toast to give user feedback.\nif(receipts.length!==transactionsToFire){toastSuccess(t('Prizes Collected!'),t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',{claimNum:receipts.length,claimTotal:transactionsToFire,lotteryId}));}}}catch(error){console.error(error);setPendingTx(false);toastError(t('Error'),t('%error% - Please try again.',{error:error.message}));break;}}// Batch is finished\nif(receipts.length===transactionsToFire){setPendingTx(false);toastSuccess(t('Prizes Collected!'),t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId}));handleProgressToNextClaim();}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Text,{mb:\"4px\",textAlign:['center',null,'left'],children:t('You won')}),/*#__PURE__*/_jsxs(Flex,{alignItems:['flex-start',null,'center'],justifyContent:['flex-start',null,'space-between'],flexDirection:['column',null,'row'],children:[/*#__PURE__*/_jsx(Balance,{textAlign:['center',null,'left'],lineHeight:\"1.1\",value:rewardAsBalance,fontSize:\"44px\",bold:true,color:\"secondary\",unit:\" CAKE!\"}),/*#__PURE__*/_jsx(PresentWonIcon,{ml:['0',null,'12px'],width:\"64px\"})]}),/*#__PURE__*/_jsx(Balance,{mt:['12px',null,'0'],textAlign:['center',null,'left'],value:dollarRewardAsBalance,fontSize:\"12px\",color:\"textSubtle\",unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Text,{mt:\"8px\",fontSize:\"12px\",color:\"textSubtle\",children:[t('Round'),\" #\",activeClaimData.roundId]})}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Button,{isLoading:pendingTx,endIcon:pendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,mt:\"20px\",width:\"100%\",onClick:()=>shouldBatchRequest?handleBatchClaim():handleClaim(),children:[pendingTx?t('Claiming'):t('Claim'),\" \",pendingBatchClaims>1?\"(\".concat(pendingBatchClaims,\")\"):'']})})]});};export default ClaimInnerContainer;","map":{"version":3,"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","usePriceCakeBusd","useLottery","fetchUserLotteries","useAppDispatch","Balance","useToast","useLotteryV2Contract","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ClaimInnerContainer","_ref","onSuccess","roundsToClaim","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","currentLotteryId","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","pendingBatchClaims","setPendingBatchClaims","Math","ceil","ticketsWithUnclaimedRewards","length","toNumber","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","receipt","wait","status","error","console","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal","children","flexDirection","mb","textAlign","alignItems","justifyContent","lineHeight","value","fontSize","bold","color","unit","ml","width","mt","prefix","isLoading","endIcon","spin","onClick","concat"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { callWithEstimateGas } from 'utils/calls'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { fetchUserLotteries } from 'state/lottery'\r\nimport { useAppDispatch } from 'state'\r\nimport Balance from 'components/Balance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useLotteryV2Contract } from 'hooks/useContract'\r\n\r\ninterface ClaimInnerProps {\r\n  roundsToClaim: LotteryTicketClaimData[]\r\n  onSuccess?: () => void\r\n}\r\n\r\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\r\n    Math.ceil(\r\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\r\n    ),\r\n  )\r\n  const lotteryContract = useLotteryV2Contract()\r\n  const activeClaimData = roundsToClaim[activeClaimIndex]\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const cakeReward = activeClaimData.cakeTotal\r\n  const dollarReward = cakeReward.times(cakePriceBusd)\r\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\r\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\r\n\r\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\r\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.id\r\n    })\r\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\r\n      return ticket.rewardBracket\r\n    })\r\n    return { lotteryId, ticketIds, brackets }\r\n  }\r\n\r\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\r\n    activeClaimData.ticketsWithUnclaimedRewards,\r\n    activeClaimData.roundId,\r\n  )\r\n\r\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\r\n\r\n  const handleProgressToNextClaim = () => {\r\n    if (roundsToClaim.length > activeClaimIndex + 1) {\r\n      // If there are still rounds to claim, move onto the next claim\r\n      setActiveClaimIndex(activeClaimIndex + 1)\r\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\r\n    } else {\r\n      onSuccess()\r\n    }\r\n  }\r\n\r\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\r\n    const requests = []\r\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\r\n\r\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\r\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\r\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\r\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\r\n    }\r\n\r\n    return requests\r\n  }\r\n\r\n  const handleClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets])\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(\r\n          t('Prizes Collected!'),\r\n          t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n        )\r\n        setPendingTx(false)\r\n        handleProgressToNextClaim()\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleBatchClaim = async () => {\r\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\r\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\r\n    const transactionsToFire = ticketBatches.length\r\n    const receipts = []\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const ticketBatch of ticketBatches) {\r\n      try {\r\n        /* eslint-disable no-await-in-loop */\r\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [\r\n          lotteryId,\r\n          ticketBatch.ticketIds,\r\n          ticketBatch.brackets,\r\n        ])\r\n        const receipt = await tx.wait()\r\n        /* eslint-enable no-await-in-loop */\r\n        if (receipt.status) {\r\n          // One transaction within batch has succeeded\r\n          receipts.push(receipt)\r\n          setPendingBatchClaims(transactionsToFire - receipts.length)\r\n\r\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\r\n          if (receipts.length !== transactionsToFire) {\r\n            toastSuccess(\r\n              t('Prizes Collected!'),\r\n              t(\r\n                'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transation',\r\n                {\r\n                  claimNum: receipts.length,\r\n                  claimTotal: transactionsToFire,\r\n                  lotteryId,\r\n                },\r\n              ),\r\n            )\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        setPendingTx(false)\r\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\r\n        break\r\n      }\r\n    }\r\n\r\n    // Batch is finished\r\n    if (receipts.length === transactionsToFire) {\r\n      setPendingTx(false)\r\n      toastSuccess(\r\n        t('Prizes Collected!'),\r\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\r\n      )\r\n      handleProgressToNextClaim()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex flexDirection=\"column\">\r\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\r\n          {t('You won')}\r\n        </Text>\r\n        <Flex\r\n          alignItems={['flex-start', null, 'center']}\r\n          justifyContent={['flex-start', null, 'space-between']}\r\n          flexDirection={['column', null, 'row']}\r\n        >\r\n          <Balance\r\n            textAlign={['center', null, 'left']}\r\n            lineHeight=\"1.1\"\r\n            value={rewardAsBalance}\r\n            fontSize=\"44px\"\r\n            bold\r\n            color=\"secondary\"\r\n            unit=\" CAKE!\"\r\n          />\r\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\r\n        </Flex>\r\n        <Balance\r\n          mt={['12px', null, '0']}\r\n          textAlign={['center', null, 'left']}\r\n          value={dollarRewardAsBalance}\r\n          fontSize=\"12px\"\r\n          color=\"textSubtle\"\r\n          unit=\" USD\"\r\n          prefix=\"~\"\r\n        />\r\n      </Flex>\r\n\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Round')} #{activeClaimData.roundId}\r\n        </Text>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"center\">\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          mt=\"20px\"\r\n          width=\"100%\"\r\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\r\n        >\r\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ClaimInnerContainer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}