{"ast":null,"code":"export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency;\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100;\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = farmApr / 100 * performanceFee;\n    const aprAfterFee = farmApr - feeRelativeToApr;\n    aprAsDecimal = aprAfterFee / 100;\n  }\n  const daysAsDecimalOfYear = numberOfDays / 365;\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice;\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear);\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal;\n  return parseFloat(interestEarned.toFixed(roundingDecimals));\n};\nexport const getRoi = ({\n  amountEarned,\n  amountInvested\n}) => {\n  const percentage = amountEarned / amountInvested * 100;\n  return percentage;\n};","map":{"version":3,"names":["tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","feeRelativeToApr","aprAfterFee","daysAsDecimalOfYear","principal","finalAmount","interestEarned","parseFloat","toFixed","getRoi","amountEarned","amountInvested","percentage"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/compoundApyHelpers.ts"],"sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\r\n  numberOfDays,\r\n  farmApr,\r\n  tokenPrice,\r\n  roundingDecimals = 2,\r\n  compoundFrequency = 1,\r\n  performanceFee = 0,\r\n}) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\r\n  const timesCompounded = 365 * compoundFrequency\r\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  let aprAsDecimal = farmApr / 100\r\n\r\n  if (performanceFee) {\r\n    // Reduce the APR by the % performance fee\r\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\r\n    const aprAfterFee = farmApr - feeRelativeToApr\r\n    aprAsDecimal = aprAfterFee / 100\r\n  }\r\n\r\n  const daysAsDecimalOfYear = numberOfDays / 365\r\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\r\n  const principal = 1000 / tokenPrice\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n\r\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\r\n}\r\n\r\nexport const getRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,wCAAwC,GAAGA,CAAC;EACvDC,YAAY;EACZC,OAAO;EACPC,UAAU;EACVC,gBAAgB,GAAG,CAAC;EACpBC,iBAAiB,GAAG,CAAC;EACrBC,cAAc,GAAG;AACnB,CAAC,KAAK;EACJ;EACA,MAAMC,eAAe,GAAG,GAAG,GAAGF,iBAAiB;EAC/C;EACA,IAAIG,YAAY,GAAGN,OAAO,GAAG,GAAG;EAEhC,IAAII,cAAc,EAAE;IAClB;IACA,MAAMG,gBAAgB,GAAIP,OAAO,GAAG,GAAG,GAAII,cAAc;IACzD,MAAMI,WAAW,GAAGR,OAAO,GAAGO,gBAAgB;IAC9CD,YAAY,GAAGE,WAAW,GAAG,GAAG;EAClC;EAEA,MAAMC,mBAAmB,GAAGV,YAAY,GAAG,GAAG;EAC9C;EACA,MAAMW,SAAS,GAAG,IAAI,GAAGT,UAAU;EACnC;EACA,MAAMU,WAAW,GAAGD,SAAS,GAAG,CAAC,CAAC,GAAGJ,YAAY,GAAGD,eAAe,MAAMA,eAAe,GAAGI,mBAAmB,CAAC;EAC/G;EACA,MAAMG,cAAc,GAAGD,WAAW,GAAGD,SAAS;EAE9C,OAAOG,UAAU,CAACD,cAAc,CAACE,OAAO,CAACZ,gBAAgB,CAAC,CAAC;AAC7D,CAAC;AAED,OAAO,MAAMa,MAAM,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAe,CAAC,KAAK;EAC1D,MAAMC,UAAU,GAAIF,YAAY,GAAGC,cAAc,GAAI,GAAG;EACxD,OAAOC,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}