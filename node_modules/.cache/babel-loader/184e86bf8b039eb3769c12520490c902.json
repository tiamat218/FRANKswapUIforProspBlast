{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { TokenAmount } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport { useTokenContract } from './useContract';\nimport { useSingleCallResult } from '../state/multicall/hooks';\n\nfunction useTokenAllowance(token, owner, spender) {\n  _s();\n\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result;\n  return useMemo(() => token && allowance ? new TokenAmount(token, allowance.toString()) : undefined, [token, allowance]);\n}\n\n_s(useTokenAllowance, \"BD3HZECpSGOif9kRQ74c6bW+yYc=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});\n\nexport default useTokenAllowance;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useTokenAllowance.ts"],"names":["TokenAmount","useMemo","useTokenContract","useSingleCallResult","useTokenAllowance","token","owner","spender","contract","address","inputs","allowance","result","toString","undefined"],"mappings":";;AAAA,SAAgBA,WAAhB,QAAmC,kBAAnC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAA0CC,KAA1C,EAA0DC,OAA1D,EAAqG;AAAA;;AACnG,QAAMC,QAAQ,GAAGN,gBAAgB,CAACG,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,OAAR,EAAiB,KAAjB,CAAjC;AAEA,QAAMC,MAAM,GAAGT,OAAO,CAAC,MAAM,CAACK,KAAD,EAAQC,OAAR,CAAP,EAAyB,CAACD,KAAD,EAAQC,OAAR,CAAzB,CAAtB;AACA,QAAMI,SAAS,GAAGR,mBAAmB,CAACK,QAAD,EAAW,WAAX,EAAwBE,MAAxB,CAAnB,CAAmDE,MAArE;AAEA,SAAOX,OAAO,CACZ,MAAOI,KAAK,IAAIM,SAAT,GAAqB,IAAIX,WAAJ,CAAgBK,KAAhB,EAAuBM,SAAS,CAACE,QAAV,EAAvB,CAArB,GAAoEC,SAD/D,EAEZ,CAACT,KAAD,EAAQM,SAAR,CAFY,CAAd;AAID;;GAVQP,iB;UACUF,gB,EAGCC,mB;;;AAQpB,eAAeC,iBAAf","sourcesContent":["import { Token, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useTokenContract } from './useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\r\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\r\n\r\n  return useMemo(\r\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\r\n    [token, allowance],\r\n  )\r\n}\r\n\r\nexport default useTokenAllowance\r\n"]},"metadata":{},"sourceType":"module"}