{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers';\nimport useRefresh from 'hooks/useRefresh';\nconst useFetchLotteryForPromos = () => {\n  _s();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [lotteryId, setLotteryId] = useState(null);\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState(null);\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const {\n        currentLotteryId\n      } = await fetchCurrentLotteryIdAndMaxBuy();\n      setLotteryId(currentLotteryId);\n    };\n    fetchCurrentID();\n  }, [setLotteryId]);\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const {\n        amountCollectedInCake\n      } = await fetchLottery(lotteryId);\n      setCurrentLotteryPrize(amountCollectedInCake);\n    };\n    if (lotteryId) {\n      fetchCurrentLotteryPrize();\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize]);\n  return {\n    currentLotteryPrize\n  };\n};\n_s(useFetchLotteryForPromos, \"fm/4i0fuUZOq/PfXu206lmPEqa8=\", false, function () {\n  return [useRefresh];\n});\nexport default useFetchLotteryForPromos;","map":{"version":3,"names":["useState","useEffect","fetchCurrentLotteryIdAndMaxBuy","fetchLottery","useRefresh","useFetchLotteryForPromos","_s","slowRefresh","lotteryId","setLotteryId","currentLotteryPrize","setCurrentLotteryPrize","fetchCurrentID","currentLotteryId","fetchCurrentLotteryPrize","amountCollectedInCake"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Home/hooks/useFetchLotteryForPromos.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\r\nimport useRefresh from 'hooks/useRefresh'\r\n\r\nconst useFetchLotteryForPromos = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [lotteryId, setLotteryId] = useState<string>(null)\r\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<string>(null)\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID\r\n    const fetchCurrentID = async () => {\r\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\r\n      setLotteryId(currentLotteryId)\r\n    }\r\n\r\n    fetchCurrentID()\r\n  }, [setLotteryId])\r\n\r\n  useEffect(() => {\r\n    // get public data for current lottery\r\n    const fetchCurrentLotteryPrize = async () => {\r\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\r\n      setCurrentLotteryPrize(amountCollectedInCake)\r\n    }\r\n\r\n    if (lotteryId) {\r\n      fetchCurrentLotteryPrize()\r\n    }\r\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize])\r\n\r\n  return { currentLotteryPrize }\r\n}\r\n\r\nexport default useFetchLotteryForPromos\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,8BAA8B,EAAEC,YAAY,QAAQ,uBAAuB;AACpF,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAY,CAAC,GAAGH,UAAU,CAAC,CAAC;EACpC,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAS,IAAI,CAAC;EACxD,MAAM,CAACU,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGX,QAAQ,CAAS,IAAI,CAAC;EAE5EC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAM;QAAEC;MAAiB,CAAC,GAAG,MAAMX,8BAA8B,CAAC,CAAC;MACnEO,YAAY,CAACI,gBAAgB,CAAC;IAChC,CAAC;IAEDD,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACH,YAAY,CAAC,CAAC;EAElBR,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C,MAAM;QAAEC;MAAsB,CAAC,GAAG,MAAMZ,YAAY,CAACK,SAAS,CAAC;MAC/DG,sBAAsB,CAACI,qBAAqB,CAAC;IAC/C,CAAC;IAED,IAAIP,SAAS,EAAE;MACbM,wBAAwB,CAAC,CAAC;IAC5B;EACF,CAAC,EAAE,CAACN,SAAS,EAAED,WAAW,EAAEI,sBAAsB,CAAC,CAAC;EAEpD,OAAO;IAAED;EAAoB,CAAC;AAChC,CAAC;AAAAJ,EAAA,CA5BKD,wBAAwB;EAAA,QACJD,UAAU;AAAA;AA6BpC,eAAeC,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module"}