{"ast":null,"code":"'use strict';\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\nconst {\n  baseTable\n} = require('./base-table');\n\n/**\n * @type {Map<CodecNumber,CodecName>}\n */\nconst nameTable = new Map();\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName];\n  nameTable.set(code, /** @type {CodecName} */encodingName);\n}\nmodule.exports = Object.freeze(nameTable);","map":{"version":3,"names":["baseTable","require","nameTable","Map","encodingName","code","set","module","exports","Object","freeze"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/multicodec/src/int-table.js"],"sourcesContent":["'use strict'\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nconst { baseTable } = require('./base-table')\n\n/**\n * @type {Map<CodecNumber,CodecName>}\n */\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, /** @type {CodecName} */(encodingName))\n}\n\nmodule.exports = Object.freeze(nameTable)\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AAEA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAE7C;AACA;AACA;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE3B,KAAK,MAAMC,YAAY,IAAIJ,SAAS,EAAE;EACpC,MAAMK,IAAI,GAAGL,SAAS,CAACI,YAAY,CAAC;EACpCF,SAAS,CAACI,GAAG,CAACD,IAAI,EAAE,wBAAyBD,YAAa,CAAC;AAC7D;AAEAG,MAAM,CAACC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACR,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}