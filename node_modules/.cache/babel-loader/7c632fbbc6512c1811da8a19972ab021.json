{"ast":null,"code":"import { ETHER, Token, TokenAmount, WETH } from '@pancakeswap/sdk';\nexport function wrappedCurrency(currency, chainId) {\n  return chainId && currency === ETHER ? WETH[chainId] : currency instanceof Token ? currency : undefined;\n}\nexport function wrappedCurrencyAmount(currencyAmount, chainId) {\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined;\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined;\n}\nexport function unwrappedToken(token) {\n  if (token.equals(WETH[token.chainId])) return ETHER;\n  return token;\n}","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/wrappedCurrency.ts"],"names":["ETHER","Token","TokenAmount","WETH","wrappedCurrency","currency","chainId","undefined","wrappedCurrencyAmount","currencyAmount","token","raw","unwrappedToken","equals"],"mappings":"AAAA,SAA4CA,KAA5C,EAAmDC,KAAnD,EAA0DC,WAA1D,EAAuEC,IAAvE,QAAmF,kBAAnF;AAEA,OAAO,SAASC,eAAT,CAAyBC,QAAzB,EAAyDC,OAAzD,EAA0G;AAC/G,SAAOA,OAAO,IAAID,QAAQ,KAAKL,KAAxB,GAAgCG,IAAI,CAACG,OAAD,CAApC,GAAgDD,QAAQ,YAAYJ,KAApB,GAA4BI,QAA5B,GAAuCE,SAA9F;AACD;AAED,OAAO,SAASC,qBAAT,CACLC,cADK,EAELH,OAFK,EAGoB;AACzB,QAAMI,KAAK,GAAGD,cAAc,IAAIH,OAAlB,GAA4BF,eAAe,CAACK,cAAc,CAACJ,QAAhB,EAA0BC,OAA1B,CAA3C,GAAgFC,SAA9F;AACA,SAAOG,KAAK,IAAID,cAAT,GAA0B,IAAIP,WAAJ,CAAgBQ,KAAhB,EAAuBD,cAAc,CAACE,GAAtC,CAA1B,GAAuEJ,SAA9E;AACD;AAED,OAAO,SAASK,cAAT,CAAwBF,KAAxB,EAAgD;AACrD,MAAIA,KAAK,CAACG,MAAN,CAAaV,IAAI,CAACO,KAAK,CAACJ,OAAP,CAAjB,CAAJ,EAAuC,OAAON,KAAP;AACvC,SAAOU,KAAP;AACD","sourcesContent":["import { ChainId, Currency, CurrencyAmount, ETHER, Token, TokenAmount, WETH } from '@pancakeswap/sdk'\r\n\r\nexport function wrappedCurrency(currency: Currency | undefined, chainId: ChainId | undefined): Token | undefined {\r\n  return chainId && currency === ETHER ? WETH[chainId] : currency instanceof Token ? currency : undefined\r\n}\r\n\r\nexport function wrappedCurrencyAmount(\r\n  currencyAmount: CurrencyAmount | undefined,\r\n  chainId: ChainId | undefined,\r\n): TokenAmount | undefined {\r\n  const token = currencyAmount && chainId ? wrappedCurrency(currencyAmount.currency, chainId) : undefined\r\n  return token && currencyAmount ? new TokenAmount(token, currencyAmount.raw) : undefined\r\n}\r\n\r\nexport function unwrappedToken(token: Token): Currency {\r\n  if (token.equals(WETH[token.chainId])) return ETHER\r\n  return token\r\n}\r\n"]},"metadata":{},"sourceType":"module"}