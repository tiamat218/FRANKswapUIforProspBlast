{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\YourHistoryCard\\\\FinishedRoundTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Text, Box, Flex } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { LotteryStatus } from 'config/constants/types';\nimport { useGetUserLotteriesGraphData } from 'state/lottery/hooks';\nimport FinishedRoundRow from './FinishedRoundRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr) auto;\n`;\n_c = Grid;\n\nconst FinishedRoundTable = ({\n  handleHistoryRowClick\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const filteredForClaimable = userLotteryData === null || userLotteryData === void 0 ? void 0 : userLotteryData.rounds.filter(round => {\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE;\n  });\n  const sortedByRoundId = filteredForClaimable === null || filteredForClaimable === void 0 ? void 0 : filteredForClaimable.sort((roundA, roundB) => {\n    return parseInt(roundB.lotteryId, 10) - parseInt(roundA.lotteryId, 10);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      px: \"24px\",\n      pt: \"24px\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        fontSize: \"12px\",\n        color: \"secondary\",\n        children: \"#\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        fontSize: \"12px\",\n        color: \"secondary\",\n        textTransform: \"uppercase\",\n        children: t('Date')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        fontSize: \"12px\",\n        color: \"secondary\",\n        textTransform: \"uppercase\",\n        children: t('Your Tickets')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        width: \"20px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      px: \"24px\",\n      pb: \"24px\",\n      flexDirection: \"column\",\n      overflowY: \"scroll\",\n      height: \"240px\",\n      children: userLotteryData && sortedByRoundId.map(finishedRound => /*#__PURE__*/_jsxDEV(FinishedRoundRow, {\n        roundId: finishedRound.lotteryId,\n        hasWon: finishedRound.claimed,\n        numberTickets: finishedRound.totalTickets,\n        endTime: finishedRound.endTime,\n        onClick: handleHistoryRowClick\n      }, finishedRound.lotteryId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FinishedRoundTable, \"Qr2OChCKJG5sZYlz999BglXEFoo=\", false, function () {\n  return [useTranslation, useGetUserLotteriesGraphData];\n});\n\n_c2 = FinishedRoundTable;\nexport default FinishedRoundTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"FinishedRoundTable\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/YourHistoryCard/FinishedRoundTable.tsx"],"names":["React","styled","Text","Box","Flex","useTranslation","LotteryStatus","useGetUserLotteriesGraphData","FinishedRoundRow","Grid","FinishedRoundTable","handleHistoryRowClick","t","userLotteryData","filteredForClaimable","rounds","filter","round","status","toLowerCase","CLAIMABLE","sortedByRoundId","sort","roundA","roundB","parseInt","lotteryId","map","finishedRound","claimed","totalTickets","endTime"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useGetUserLotteriesGraphData } from 'state/lottery/hooks'\r\nimport FinishedRoundRow from './FinishedRoundRow'\r\n\r\nconst Grid = styled(Box)`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr) auto;\r\n`\r\n\r\ninterface FinishedRoundTableProps {\r\n  handleHistoryRowClick: (string) => void\r\n}\r\n\r\nconst FinishedRoundTable: React.FC<FinishedRoundTableProps> = ({ handleHistoryRowClick }) => {\r\n  const { t } = useTranslation()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n\r\n  const filteredForClaimable = userLotteryData?.rounds.filter((round) => {\r\n    return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\r\n  })\r\n\r\n  const sortedByRoundId = filteredForClaimable?.sort((roundA, roundB) => {\r\n    return parseInt(roundB.lotteryId, 10) - parseInt(roundA.lotteryId, 10)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Grid px=\"24px\" pt=\"24px\" mb=\"8px\">\r\n        <Text bold fontSize=\"12px\" color=\"secondary\">\r\n          #\r\n        </Text>\r\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\r\n          {t('Date')}\r\n        </Text>\r\n        <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\">\r\n          {t('Your Tickets')}\r\n        </Text>\r\n        <Box width=\"20px\" />\r\n      </Grid>\r\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\" overflowY=\"scroll\" height=\"240px\">\r\n        {userLotteryData &&\r\n          sortedByRoundId.map((finishedRound) => (\r\n            <FinishedRoundRow\r\n              key={finishedRound.lotteryId}\r\n              roundId={finishedRound.lotteryId}\r\n              hasWon={finishedRound.claimed}\r\n              numberTickets={finishedRound.totalTickets}\r\n              endTime={finishedRound.endTime}\r\n              onClick={handleHistoryRowClick}\r\n            />\r\n          ))}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FinishedRoundTable\r\n"]},"metadata":{},"sourceType":"module"}