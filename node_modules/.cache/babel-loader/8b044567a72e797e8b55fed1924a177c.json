{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { PoolIds } from 'config/constants/types';\nimport { useBlock } from 'state/block/hooks';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV1Abi from 'config/abi/ifoV1.json';\nimport { getStatus } from '../helpers';\n\n/**\r\n * Gets all public data of an IFO\r\n */\nconst useGetPublicIfoData = ifo => {\n  _s();\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      // Not know\n      limitPerUserInLP: BIG_ZERO,\n      //  Not used\n      taxRate: 0,\n      //  Not used\n      sumTaxesOverflow: BIG_ZERO //  Not used\n    }\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map(method => ({\n      address,\n      name: method\n    }));\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls);\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0;\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0;\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock;\n\n    // Calculate the total progress until finished or until start\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO\n      }\n    }));\n  }, [address, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData]);\n  return {\n    ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n_s(useGetPublicIfoData, \"POVO37wzRNe4d50dRPrXVTTSJDA=\", false, function () {\n  return [useLpTokenPrice, useBlock];\n});\nexport default useGetPublicIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","BIG_ZERO","multicallv2","ifoV1Abi","getStatus","useGetPublicIfoData","ifo","_s","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","currentBlock","fetchIfoData","ifoCalls","map","method","name","startBlock","endBlock","raisingAmount","totalAmount","toNumber","totalBlocks","prev","currencyPriceInUSD","toString"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v1/useGetPublicIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const { currentBlock } = useBlock()\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n    }))\r\n\r\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      status,\r\n      blocksRemaining,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      progress,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      currencyPriceInUSD: null,\r\n      numberPoints: null,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prev.poolUnlimited,\r\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}