{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints';\nimport { getRoundIdsArray, fetchMultipleLotteries, hasRoundBeenClaimed } from './helpers';\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData';\n\nconst applyNodeDataToUserGraphResponse = (userNodeData, userGraphData, lotteryNodeData) => {\n  //   If no graph rounds response - return node data\n  if (userGraphData.length === 0) {\n    return lotteryNodeData.map(nodeRound => {\n      const ticketDataForRound = userNodeData.find(roundTickets => roundTickets.roundId === nodeRound.lotteryId);\n      return {\n        endTime: nodeRound.endTime,\n        status: nodeRound.status,\n        lotteryId: nodeRound.lotteryId.toString(),\n        claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\n        totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,\n        tickets: ticketDataForRound.userTickets\n      };\n    });\n  } //   Else if there is a graph response - merge with node data where node data is more accurate\n\n\n  const mergedResponse = userGraphData.map((graphRound, index) => {\n    const nodeRound = lotteryNodeData[index]; // if there is node data for this index, overwrite graph data. Otherwise - return graph data.\n\n    if (nodeRound) {\n      const ticketDataForRound = userNodeData.find(roundTickets => roundTickets.roundId === nodeRound.lotteryId); // if isLoading === true, there has been a node error - return graphRound\n\n      if (!nodeRound.isLoading) {\n        return {\n          endTime: nodeRound.endTime,\n          status: nodeRound.status,\n          lotteryId: nodeRound.lotteryId.toString(),\n          claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\n          totalTickets: graphRound.totalTickets,\n          tickets: ticketDataForRound.userTickets\n        };\n      }\n\n      return graphRound;\n    }\n\n    return graphRound;\n  });\n  return mergedResponse;\n};\n\nconst getGraphLotteryUser = async account => {\n  let user;\n  const blankUser = {\n    account,\n    totalCake: '',\n    totalTickets: '',\n    rounds: []\n  };\n\n  try {\n    const response = await request(GRAPH_API_LOTTERY, gql`\n        query getUserLotteries($account: ID!) {\n          user(id: $account) {\n            id\n            totalTickets\n            totalCake\n            rounds(first: 100, orderDirection: desc, orderBy: block) {\n              id\n              lottery {\n                id\n                endTime\n                status\n              }\n              claimed\n              totalTickets\n            }\n          }\n        }\n      `, {\n      account: account.toLowerCase()\n    });\n    const userRes = response.user; // If no user returned - return blank user\n\n    if (!userRes) {\n      user = blankUser;\n    } else {\n      user = {\n        account: userRes.id,\n        totalCake: userRes.totalCake,\n        totalTickets: userRes.totalTickets,\n        rounds: userRes.rounds.map(round => {\n          var _round$lottery, _round$lottery2, _round$lottery3;\n\n          return {\n            lotteryId: round === null || round === void 0 ? void 0 : (_round$lottery = round.lottery) === null || _round$lottery === void 0 ? void 0 : _round$lottery.id,\n            endTime: round === null || round === void 0 ? void 0 : (_round$lottery2 = round.lottery) === null || _round$lottery2 === void 0 ? void 0 : _round$lottery2.endTime,\n            claimed: round === null || round === void 0 ? void 0 : round.claimed,\n            totalTickets: round === null || round === void 0 ? void 0 : round.totalTickets,\n            status: round === null || round === void 0 ? void 0 : (_round$lottery3 = round.lottery) === null || _round$lottery3 === void 0 ? void 0 : _round$lottery3.status\n          };\n        })\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    user = blankUser;\n  }\n\n  return user;\n};\n\nconst getUserLotteryData = async (account, currentLotteryId) => {\n  const idsForTicketsNodeCall = getRoundIdsArray(currentLotteryId);\n  const roundDataAndUserTickets = await fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall, account);\n  const userRoundsNodeData = roundDataAndUserTickets.filter(round => round.userTickets.length > 0);\n  const idsForLotteriesNodeCall = userRoundsNodeData.map(round => round.roundId);\n  const lotteriesNodeData = await fetchMultipleLotteries(idsForLotteriesNodeCall);\n  const graphResponse = await getGraphLotteryUser(account);\n  const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData);\n  const graphResponseWithNodeRounds = { ...graphResponse,\n    rounds: mergedRoundData\n  };\n  return graphResponseWithNodeRounds;\n};\n\nexport default getUserLotteryData;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/lottery/getUserLotteryData.ts"],"names":["request","gql","GRAPH_API_LOTTERY","getRoundIdsArray","fetchMultipleLotteries","hasRoundBeenClaimed","fetchUserTicketsForMultipleRounds","applyNodeDataToUserGraphResponse","userNodeData","userGraphData","lotteryNodeData","length","map","nodeRound","ticketDataForRound","find","roundTickets","roundId","lotteryId","endTime","status","toString","claimed","userTickets","totalTickets","tickets","mergedResponse","graphRound","index","isLoading","getGraphLotteryUser","account","user","blankUser","totalCake","rounds","response","toLowerCase","userRes","id","round","lottery","error","console","getUserLotteryData","currentLotteryId","idsForTicketsNodeCall","roundDataAndUserTickets","userRoundsNodeData","filter","idsForLotteriesNodeCall","lotteriesNodeData","graphResponse","mergedRoundData","graphResponseWithNodeRounds"],"mappings":"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","sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { LotteryUserGraphEntity, LotteryResponse, UserRound } from 'state/types'\r\nimport { getRoundIdsArray, fetchMultipleLotteries, hasRoundBeenClaimed } from './helpers'\r\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\r\n\r\nconst applyNodeDataToUserGraphResponse = (\r\n  userNodeData: { roundId: string; userTickets: LotteryTicket[] }[],\r\n  userGraphData: UserRound[],\r\n  lotteryNodeData: LotteryResponse[],\r\n): UserRound[] => {\r\n  //   If no graph rounds response - return node data\r\n  if (userGraphData.length === 0) {\r\n    return lotteryNodeData.map((nodeRound) => {\r\n      const ticketDataForRound = userNodeData.find((roundTickets) => roundTickets.roundId === nodeRound.lotteryId)\r\n      return {\r\n        endTime: nodeRound.endTime,\r\n        status: nodeRound.status,\r\n        lotteryId: nodeRound.lotteryId.toString(),\r\n        claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\r\n        totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,\r\n        tickets: ticketDataForRound.userTickets,\r\n      }\r\n    })\r\n  }\r\n\r\n  //   Else if there is a graph response - merge with node data where node data is more accurate\r\n  const mergedResponse = userGraphData.map((graphRound, index) => {\r\n    const nodeRound = lotteryNodeData[index]\r\n    // if there is node data for this index, overwrite graph data. Otherwise - return graph data.\r\n    if (nodeRound) {\r\n      const ticketDataForRound = userNodeData.find((roundTickets) => roundTickets.roundId === nodeRound.lotteryId)\r\n      // if isLoading === true, there has been a node error - return graphRound\r\n      if (!nodeRound.isLoading) {\r\n        return {\r\n          endTime: nodeRound.endTime,\r\n          status: nodeRound.status,\r\n          lotteryId: nodeRound.lotteryId.toString(),\r\n          claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\r\n          totalTickets: graphRound.totalTickets,\r\n          tickets: ticketDataForRound.userTickets,\r\n        }\r\n      }\r\n      return graphRound\r\n    }\r\n    return graphRound\r\n  })\r\n  return mergedResponse\r\n}\r\n\r\nconst getGraphLotteryUser = async (account: string): Promise<LotteryUserGraphEntity> => {\r\n  let user\r\n  const blankUser = {\r\n    account,\r\n    totalCake: '',\r\n    totalTickets: '',\r\n    rounds: [],\r\n  }\r\n\r\n  try {\r\n    const response = await request(\r\n      GRAPH_API_LOTTERY,\r\n      gql`\r\n        query getUserLotteries($account: ID!) {\r\n          user(id: $account) {\r\n            id\r\n            totalTickets\r\n            totalCake\r\n            rounds(first: 100, orderDirection: desc, orderBy: block) {\r\n              id\r\n              lottery {\r\n                id\r\n                endTime\r\n                status\r\n              }\r\n              claimed\r\n              totalTickets\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { account: account.toLowerCase() },\r\n    )\r\n    const userRes = response.user\r\n\r\n    // If no user returned - return blank user\r\n    if (!userRes) {\r\n      user = blankUser\r\n    } else {\r\n      user = {\r\n        account: userRes.id,\r\n        totalCake: userRes.totalCake,\r\n        totalTickets: userRes.totalTickets,\r\n        rounds: userRes.rounds.map((round) => {\r\n          return {\r\n            lotteryId: round?.lottery?.id,\r\n            endTime: round?.lottery?.endTime,\r\n            claimed: round?.claimed,\r\n            totalTickets: round?.totalTickets,\r\n            status: round?.lottery?.status,\r\n          }\r\n        }),\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(error)\r\n    user = blankUser\r\n  }\r\n\r\n  return user\r\n}\r\n\r\nconst getUserLotteryData = async (account: string, currentLotteryId: string): Promise<LotteryUserGraphEntity> => {\r\n  const idsForTicketsNodeCall = getRoundIdsArray(currentLotteryId)\r\n  const roundDataAndUserTickets = await fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall, account)\r\n  const userRoundsNodeData = roundDataAndUserTickets.filter((round) => round.userTickets.length > 0)\r\n  const idsForLotteriesNodeCall = userRoundsNodeData.map((round) => round.roundId)\r\n\r\n  const lotteriesNodeData = await fetchMultipleLotteries(idsForLotteriesNodeCall)\r\n  const graphResponse = await getGraphLotteryUser(account)\r\n  const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData)\r\n  const graphResponseWithNodeRounds = { ...graphResponse, rounds: mergedRoundData }\r\n  return graphResponseWithNodeRounds\r\n}\r\n\r\nexport default getUserLotteryData\r\n"]},"metadata":{},"sourceType":"module"}