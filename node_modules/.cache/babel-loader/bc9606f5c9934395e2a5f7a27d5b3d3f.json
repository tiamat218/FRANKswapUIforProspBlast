{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Voting\\\\components\\\\Proposals\\\\TimeFrame.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Text } from '@pancakeswap/uikit';\nimport { toDate, format } from 'date-fns';\nimport { useTranslation } from 'contexts/Localization';\nimport { ProposalState } from 'state/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getFormattedDate = timestamp => {\n  const date = toDate(timestamp * 1000);\n  return format(date, 'MMM do, yyyy HH:mm');\n};\n\nconst TimeFrame = ({\n  startDate,\n  endDate,\n  proposalState\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const textProps = {\n    fontSize: '16px',\n    color: 'textSubtle',\n    ml: '8px'\n  };\n\n  if (proposalState === ProposalState.CLOSED) {\n    return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n      children: t('Ended %date%', {\n        date: getFormattedDate(endDate)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n      children: t('Starts %date%', {\n        date: getFormattedDate(startDate)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n    children: t('Ends %date%', {\n      date: getFormattedDate(endDate)\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TimeFrame, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TimeFrame;\nexport default TimeFrame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeFrame\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Voting/components/Proposals/TimeFrame.tsx"],"names":["React","Text","toDate","format","useTranslation","ProposalState","getFormattedDate","timestamp","date","TimeFrame","startDate","endDate","proposalState","t","textProps","fontSize","color","ml","CLOSED","PENDING"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,UAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,aAAT,QAA8B,aAA9B;;;AAQA,MAAMC,gBAAgB,GAAIC,SAAD,IAAuB;AAC9C,QAAMC,IAAI,GAAGN,MAAM,CAACK,SAAS,GAAG,IAAb,CAAnB;AACA,SAAOJ,MAAM,CAACK,IAAD,EAAO,oBAAP,CAAb;AACD,CAHD;;AAKA,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KAA2C;AAAA;;AACrF,QAAM;AAAEC,IAAAA;AAAF,MAAQT,cAAc,EAA5B;AACA,QAAMU,SAAS,GAAG;AAChBC,IAAAA,QAAQ,EAAE,MADM;AAEhBC,IAAAA,KAAK,EAAE,YAFS;AAGhBC,IAAAA,EAAE,EAAE;AAHY,GAAlB;;AAMA,MAAIL,aAAa,KAAKP,aAAa,CAACa,MAApC,EAA4C;AAC1C,wBAAO,QAAC,IAAD,OAAUJ,SAAV;AAAA,gBAAsBD,CAAC,CAAC,cAAD,EAAiB;AAAEL,QAAAA,IAAI,EAAEF,gBAAgB,CAACK,OAAD;AAAxB,OAAjB;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIC,aAAa,KAAKP,aAAa,CAACc,OAApC,EAA6C;AAC3C,wBAAO,QAAC,IAAD,OAAUL,SAAV;AAAA,gBAAsBD,CAAC,CAAC,eAAD,EAAkB;AAAEL,QAAAA,IAAI,EAAEF,gBAAgB,CAACI,SAAD;AAAxB,OAAlB;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,IAAD,OAAUI,SAAV;AAAA,cAAsBD,CAAC,CAAC,aAAD,EAAgB;AAAEL,MAAAA,IAAI,EAAEF,gBAAgB,CAACK,OAAD;AAAxB,KAAhB;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;GAAMF,S;UACUL,c;;;KADVK,S;AAmBN,eAAeA,SAAf","sourcesContent":["import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { toDate, format } from 'date-fns'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ProposalState } from 'state/types'\r\n\r\ninterface TimeFrameProps {\r\n  startDate: number\r\n  endDate: number\r\n  proposalState: ProposalState\r\n}\r\n\r\nconst getFormattedDate = (timestamp: number) => {\r\n  const date = toDate(timestamp * 1000)\r\n  return format(date, 'MMM do, yyyy HH:mm')\r\n}\r\n\r\nconst TimeFrame: React.FC<TimeFrameProps> = ({ startDate, endDate, proposalState }) => {\r\n  const { t } = useTranslation()\r\n  const textProps = {\r\n    fontSize: '16px',\r\n    color: 'textSubtle',\r\n    ml: '8px',\r\n  }\r\n\r\n  if (proposalState === ProposalState.CLOSED) {\r\n    return <Text {...textProps}>{t('Ended %date%', { date: getFormattedDate(endDate) })}</Text>\r\n  }\r\n\r\n  if (proposalState === ProposalState.PENDING) {\r\n    return <Text {...textProps}>{t('Starts %date%', { date: getFormattedDate(startDate) })}</Text>\r\n  }\r\n\r\n  return <Text {...textProps}>{t('Ends %date%', { date: getFormattedDate(endDate) })}</Text>\r\n}\r\n\r\nexport default TimeFrame\r\n"]},"metadata":{},"sourceType":"module"}