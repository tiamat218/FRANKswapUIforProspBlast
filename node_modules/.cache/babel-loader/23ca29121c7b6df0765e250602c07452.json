{"ast":null,"code":"'use strict';\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\nconst {\n  baseTable\n} = require('./generated-table');\nconst varintEncode = require('./util').varintEncode;\nconst nameToVarint = /** @type {NameUint8ArrayMap} */{};\nconst constantToCode = /** @type {ConstantCodeMap} */{};\nconst codeToName = /** @type {CodeNameMap} */{};\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */name;\n  const code = baseTable[codecName];\n  nameToVarint[codecName] = varintEncode(code);\n  const constant = /** @type {CodecConstant} */codecName.toUpperCase().replace(/-/g, '_');\n  constantToCode[constant] = code;\n  if (!codeToName[code]) {\n    codeToName[code] = codecName;\n  }\n}\nObject.freeze(nameToVarint);\nObject.freeze(constantToCode);\nObject.freeze(codeToName);\nconst nameToCode = Object.freeze(baseTable);\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n};","map":{"version":3,"names":["baseTable","require","varintEncode","nameToVarint","constantToCode","codeToName","name","codecName","code","constant","toUpperCase","replace","Object","freeze","nameToCode","module","exports"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/cids/node_modules/multicodec/src/maps.js"],"sourcesContent":["'use strict'\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nconst { baseTable } = require('./generated-table')\nconst varintEncode = require('./util').varintEncode\n\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\nconst constantToCode = /** @type {ConstantCodeMap} */({})\nconst codeToName = /** @type {CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */(name)\n  const code = baseTable[codecName]\n  nameToVarint[codecName] = varintEncode(code)\n\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\n  constantToCode[constant] = code\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName\n  }\n}\n\nObject.freeze(nameToVarint)\nObject.freeze(constantToCode)\nObject.freeze(codeToName)\nconst nameToCode = Object.freeze(baseTable)\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAClD,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,YAAY;AAEnD,MAAMC,YAAY,GAAG,gCAAkC,CAAC,CAAE;AAC1D,MAAMC,cAAc,GAAG,8BAA+B,CAAC,CAAE;AACzD,MAAMC,UAAU,GAAG,0BAA2B,CAAC,CAAE;;AAEjD;AACA,KAAK,MAAMC,IAAI,IAAIN,SAAS,EAAE;EAC5B,MAAMO,SAAS,GAAG,wBAAyBD,IAAK;EAChD,MAAME,IAAI,GAAGR,SAAS,CAACO,SAAS,CAAC;EACjCJ,YAAY,CAACI,SAAS,CAAC,GAAGL,YAAY,CAACM,IAAI,CAAC;EAE5C,MAAMC,QAAQ,GAAG,4BAA6BF,SAAS,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAE;EACzFP,cAAc,CAACK,QAAQ,CAAC,GAAGD,IAAI;EAE/B,IAAI,CAACH,UAAU,CAACG,IAAI,CAAC,EAAE;IACrBH,UAAU,CAACG,IAAI,CAAC,GAAGD,SAAS;EAC9B;AACF;AAEAK,MAAM,CAACC,MAAM,CAACV,YAAY,CAAC;AAC3BS,MAAM,CAACC,MAAM,CAACT,cAAc,CAAC;AAC7BQ,MAAM,CAACC,MAAM,CAACR,UAAU,CAAC;AACzB,MAAMS,UAAU,GAAGF,MAAM,CAACC,MAAM,CAACb,SAAS,CAAC;AAC3Ce,MAAM,CAACC,OAAO,GAAG;EACfb,YAAY;EACZC,cAAc;EACdU,UAAU;EACVT;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}