{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\NextDrawCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Card, CardHeader, CardBody, Flex, Heading, Text, Skeleton, Button, useModal, Box, CardFooter, ExpandableLabel } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { LotteryStatus } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport ViewTicketsModal from './ViewTicketsModal';\nimport BuyTicketsButton from './BuyTicketsButton';\nimport { dateTimeOptions } from '../helpers';\nimport RewardBrackets from './RewardBrackets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: auto;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    grid-column-gap: 32px;\n    grid-template-columns: auto 1fr;\n  }\n`;\n_c = Grid;\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: 520px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`;\n_c2 = StyledCard;\nconst NextDrawWrapper = styled.div`\n  background: ${({\n  theme\n}) => theme.colors.background};\n  padding: 24px;\n`;\n_c3 = NextDrawWrapper;\n\nconst NextDrawCard = () => {\n  _s();\n\n  var _userTickets$tickets;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound\n  } = useLottery();\n  const {\n    endTime,\n    amountCollectedInCake,\n    userTickets,\n    status\n  } = currentRound;\n  const [onPresentViewTicketsModal] = useModal( /*#__PURE__*/_jsxDEV(ViewTicketsModal, {\n    roundId: currentLotteryId,\n    roundStatus: status\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 48\n  }, this));\n  const [isExpanded, setIsExpanded] = useState(false);\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning;\n  const cakePriceBusd = usePriceCakeBusd();\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd);\n  const endTimeMs = parseInt(endTime, 10) * 1000;\n  const endDate = new Date(endTimeMs);\n  const isLotteryOpen = status === LotteryStatus.OPEN;\n  const userTicketCount = (userTickets === null || userTickets === void 0 ? void 0 : (_userTickets$tickets = userTickets.tickets) === null || _userTickets$tickets === void 0 ? void 0 : _userTickets$tickets.length) || 0;\n\n  const getPrizeBalances = () => {\n    if (status === LotteryStatus.CLOSE || status === LotteryStatus.CLAIMABLE) {\n      return /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        color: \"secondary\",\n        textAlign: ['center', null, null, 'left'],\n        children: [t('Calculating'), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"7px\",\n        height: 40,\n        width: 160\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"40px\",\n        color: \"secondary\",\n        textAlign: ['center', null, null, 'left'],\n        lineHeight: \"1\",\n        bold: true,\n        prefix: \"~$\",\n        value: getBalanceNumber(prizeInBusd),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 14,\n        width: 90\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        textAlign: ['center', null, null, 'left'],\n        unit: \" CAKE\",\n        value: getBalanceNumber(amountCollectedInCake),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n\n  const getNextDrawId = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${currentLotteryId} |`;\n    }\n\n    if (status === LotteryStatus.PENDING) {\n      return '';\n    }\n\n    return parseInt(currentLotteryId, 10) + 1;\n  };\n\n  const getNextDrawDateTime = () => {\n    if (status === LotteryStatus.OPEN) {\n      return `${t('Draw')}: ${endDate.toLocaleString(undefined, dateTimeOptions)}`;\n    }\n\n    return '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      p: \"16px 24px\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          mr: \"12px\",\n          children: t('Next Draw')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: [currentLotteryId && `#${getNextDrawId()}`, \" \", Boolean(endTime) && getNextDrawDateTime()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: ['center', null, null, 'flex-start'],\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            children: t('Prize Pot')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: \"column\",\n          mb: \"18px\",\n          children: getPrizeBalances()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          display: ['none', null, null, 'flex'],\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            children: t('Your tickets')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: ['column', null, null, 'row'],\n          alignItems: ['center', null, null, 'flex-start'],\n          children: [isLotteryOpen && /*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            mr: [null, null, null, '24px'],\n            alignItems: ['center', null, null, 'flex-start'],\n            children: [account && /*#__PURE__*/_jsxDEV(Flex, {\n              justifyContent: ['center', null, null, 'flex-start'],\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                display: \"inline\",\n                children: [t('You have'), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this), !userTickets.isLoading ? /*#__PURE__*/_jsxDEV(Balance, {\n                value: userTicketCount,\n                decimals: 0,\n                unit: ` ${t('tickets')}`,\n                display: \"inline\",\n                bold: true,\n                mx: \"4px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n                mx: \"4px\",\n                height: 20,\n                width: 40\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                display: \"inline\",\n                children: [\" \", t('this round')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this), !userTickets.isLoading && userTicketCount > 0 && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onPresentViewTicketsModal,\n              height: \"auto\",\n              width: \"fit-content\",\n              p: \"0\",\n              mb: ['32px', null, null, '0'],\n              variant: \"text\",\n              scale: \"sm\",\n              children: t('View your tickets')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(BuyTicketsButton, {\n            disabled: ticketBuyIsDisabled,\n            maxWidth: \"280px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      p: \"0\",\n      children: [isExpanded && /*#__PURE__*/_jsxDEV(NextDrawWrapper, {\n        children: /*#__PURE__*/_jsxDEV(RewardBrackets, {\n          lotteryData: currentRound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), (status === LotteryStatus.OPEN || status === LotteryStatus.CLOSE) && /*#__PURE__*/_jsxDEV(Flex, {\n        p: \"8px 24px\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(ExpandableLabel, {\n          expanded: isExpanded,\n          onClick: () => setIsExpanded(!isExpanded),\n          children: isExpanded ? t('Hide') : t('Details')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NextDrawCard, \"TAx+2hzid1M/DLeod0mOBXlxVEM=\", false, function () {\n  return [useTranslation, useWeb3React, useLottery, useModal, usePriceCakeBusd];\n});\n\n_c4 = NextDrawCard;\nexport default NextDrawCard;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"StyledCard\");\n$RefreshReg$(_c3, \"NextDrawWrapper\");\n$RefreshReg$(_c4, \"NextDrawCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/NextDrawCard.tsx"],"names":["React","useState","styled","Card","CardHeader","CardBody","Flex","Heading","Text","Skeleton","Button","useModal","Box","CardFooter","ExpandableLabel","useWeb3React","LotteryStatus","useTranslation","usePriceCakeBusd","useLottery","getBalanceNumber","Balance","ViewTicketsModal","BuyTicketsButton","dateTimeOptions","RewardBrackets","Grid","div","theme","mediaQueries","md","StyledCard","sm","NextDrawWrapper","colors","background","NextDrawCard","t","account","currentLotteryId","isTransitioning","currentRound","endTime","amountCollectedInCake","userTickets","status","onPresentViewTicketsModal","isExpanded","setIsExpanded","ticketBuyIsDisabled","OPEN","cakePriceBusd","prizeInBusd","times","endTimeMs","parseInt","endDate","Date","isLotteryOpen","userTicketCount","tickets","length","getPrizeBalances","CLOSE","CLAIMABLE","isNaN","getNextDrawId","PENDING","getNextDrawDateTime","toLocaleString","undefined","Boolean","isLoading"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  Skeleton,\r\n  Button,\r\n  useModal,\r\n  Box,\r\n  CardFooter,\r\n  ExpandableLabel,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { LotteryStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useLottery } from 'state/lottery/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\nimport ViewTicketsModal from './ViewTicketsModal'\r\nimport BuyTicketsButton from './BuyTicketsButton'\r\nimport { dateTimeOptions } from '../helpers'\r\nimport RewardBrackets from './RewardBrackets'\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-column-gap: 32px;\r\n    grid-template-columns: auto 1fr;\r\n  }\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 520px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    width: 756px;\r\n  }\r\n`\r\n\r\nconst NextDrawWrapper = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  padding: 24px;\r\n`\r\n\r\nconst NextDrawCard = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { currentLotteryId, isTransitioning, currentRound } = useLottery()\r\n  const { endTime, amountCollectedInCake, userTickets, status } = currentRound\r\n\r\n  const [onPresentViewTicketsModal] = useModal(<ViewTicketsModal roundId={currentLotteryId} roundStatus={status} />)\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\r\n\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\r\n  const endTimeMs = parseInt(endTime, 10) * 1000\r\n  const endDate = new Date(endTimeMs)\r\n  const isLotteryOpen = status === LotteryStatus.OPEN\r\n  const userTicketCount = userTickets?.tickets?.length || 0\r\n\r\n  const getPrizeBalances = () => {\r\n    if (status === LotteryStatus.CLOSE || status === LotteryStatus.CLAIMABLE) {\r\n      return (\r\n        <Heading scale=\"xl\" color=\"secondary\" textAlign={['center', null, null, 'left']}>\r\n          {t('Calculating')}...\r\n        </Heading>\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"7px\" height={40} width={160} />\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"40px\"\r\n            color=\"secondary\"\r\n            textAlign={['center', null, null, 'left']}\r\n            lineHeight=\"1\"\r\n            bold\r\n            prefix=\"~$\"\r\n            value={getBalanceNumber(prizeInBusd)}\r\n            decimals={0}\r\n          />\r\n        )}\r\n        {prizeInBusd.isNaN() ? (\r\n          <Skeleton my=\"2px\" height={14} width={90} />\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"14px\"\r\n            color=\"textSubtle\"\r\n            textAlign={['center', null, null, 'left']}\r\n            unit=\" CAKE\"\r\n            value={getBalanceNumber(amountCollectedInCake)}\r\n            decimals={0}\r\n          />\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getNextDrawId = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return `${currentLotteryId} |`\r\n    }\r\n    if (status === LotteryStatus.PENDING) {\r\n      return ''\r\n    }\r\n    return parseInt(currentLotteryId, 10) + 1\r\n  }\r\n\r\n  const getNextDrawDateTime = () => {\r\n    if (status === LotteryStatus.OPEN) {\r\n      return `${t('Draw')}: ${endDate.toLocaleString(undefined, dateTimeOptions)}`\r\n    }\r\n    return ''\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardHeader p=\"16px 24px\">\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading mr=\"12px\">{t('Next Draw')}</Heading>\r\n          <Text>\r\n            {currentLotteryId && `#${getNextDrawId()}`} {Boolean(endTime) && getNextDrawDateTime()}\r\n          </Text>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Grid>\r\n          <Flex justifyContent={['center', null, null, 'flex-start']}>\r\n            <Heading>{t('Prize Pot')}</Heading>\r\n          </Flex>\r\n          <Flex flexDirection=\"column\" mb=\"18px\">\r\n            {getPrizeBalances()}\r\n          </Flex>\r\n          <Box display={['none', null, null, 'flex']}>\r\n            <Heading>{t('Your tickets')}</Heading>\r\n          </Box>\r\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['center', null, null, 'flex-start']}>\r\n            {isLotteryOpen && (\r\n              <Flex\r\n                flexDirection=\"column\"\r\n                mr={[null, null, null, '24px']}\r\n                alignItems={['center', null, null, 'flex-start']}\r\n              >\r\n                {account && (\r\n                  <Flex justifyContent={['center', null, null, 'flex-start']}>\r\n                    <Text display=\"inline\">{t('You have')} </Text>\r\n                    {!userTickets.isLoading ? (\r\n                      <Balance\r\n                        value={userTicketCount}\r\n                        decimals={0}\r\n                        unit={` ${t('tickets')}`}\r\n                        display=\"inline\"\r\n                        bold\r\n                        mx=\"4px\"\r\n                      />\r\n                    ) : (\r\n                      <Skeleton mx=\"4px\" height={20} width={40} />\r\n                    )}\r\n                    <Text display=\"inline\"> {t('this round')}</Text>\r\n                  </Flex>\r\n                )}\r\n                {!userTickets.isLoading && userTicketCount > 0 && (\r\n                  <Button\r\n                    onClick={onPresentViewTicketsModal}\r\n                    height=\"auto\"\r\n                    width=\"fit-content\"\r\n                    p=\"0\"\r\n                    mb={['32px', null, null, '0']}\r\n                    variant=\"text\"\r\n                    scale=\"sm\"\r\n                  >\r\n                    {t('View your tickets')}\r\n                  </Button>\r\n                )}\r\n              </Flex>\r\n            )}\r\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} maxWidth=\"280px\" />\r\n          </Flex>\r\n        </Grid>\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        {isExpanded && (\r\n          <NextDrawWrapper>\r\n            <RewardBrackets lotteryData={currentRound} />\r\n          </NextDrawWrapper>\r\n        )}\r\n        {(status === LotteryStatus.OPEN || status === LotteryStatus.CLOSE) && (\r\n          <Flex p=\"8px 24px\" alignItems=\"center\" justifyContent=\"center\">\r\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n              {isExpanded ? t('Hide') : t('Details')}\r\n            </ExpandableLabel>\r\n          </Flex>\r\n        )}\r\n      </CardFooter>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default NextDrawCard\r\n"]},"metadata":{},"sourceType":"module"}