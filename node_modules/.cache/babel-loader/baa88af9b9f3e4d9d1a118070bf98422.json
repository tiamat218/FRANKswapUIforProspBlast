{"ast":null,"code":"import { CurrencyAmount, JSBI, Percent, TokenAmount } from '@pancakeswap/sdk';\nimport { BLOCKED_PRICE_IMPACT_NON_EXPERT, ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../config/constants';\nimport { Field } from '../state/swap/actions';\nimport { basisPointsToPercent } from './index';\nconst BASE_FEE = new Percent(JSBI.BigInt(25), JSBI.BigInt(10000));\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE); // computes price breakdown for the trade\n\n_c = INPUT_FRACTION_AFTER_FEE;\nexport function computeTradePriceBreakdown(trade) {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  const realizedLPFee = !trade ? undefined : ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(currentFee => currentFee.multiply(INPUT_FRACTION_AFTER_FEE), ONE_HUNDRED_PERCENT)); // remove lp fees from price impact\n\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined; // the x*y=k impact\n\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined; // the amount of the input that accrues to LPs\n\n  const realizedLPFeeAmount = realizedLPFee && trade && (trade.inputAmount instanceof TokenAmount ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient) : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient));\n  return {\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\n    realizedLPFee: realizedLPFeeAmount\n  };\n} // computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\n\nexport function computeSlippageAdjustedAmounts(trade, allowedSlippage) {\n  const pct = basisPointsToPercent(allowedSlippage);\n  return {\n    [Field.INPUT]: trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(pct),\n    [Field.OUTPUT]: trade === null || trade === void 0 ? void 0 : trade.minimumAmountOut(pct)\n  };\n}\nexport function warningSeverity(priceImpact) {\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT))) return 4;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH))) return 3;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM))) return 2;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW))) return 1;\n  return 0;\n}\nexport function formatExecutionPrice(trade, inverted) {\n  if (!trade) {\n    return '';\n  }\n\n  return inverted ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${trade.outputAmount.currency.symbol}` : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${trade.inputAmount.currency.symbol}`;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"INPUT_FRACTION_AFTER_FEE\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/prices.ts"],"names":["CurrencyAmount","JSBI","Percent","TokenAmount","BLOCKED_PRICE_IMPACT_NON_EXPERT","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","Field","basisPointsToPercent","BASE_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeTradePriceBreakdown","trade","realizedLPFee","undefined","route","pairs","reduce","currentFee","multiply","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFeePercent","numerator","denominator","realizedLPFeeAmount","inputAmount","token","raw","quotient","ether","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","pct","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","executionPrice","invert","toSignificant","currency","symbol","outputAmount"],"mappings":"AAAA,SAASA,cAAT,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkDC,WAAlD,QAA4E,kBAA5E;AACA,SACEC,+BADF,EAEEC,yBAFF,EAGEC,wBAHF,EAIEC,2BAJF,QAKO,qBALP;AAOA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,MAAMC,QAAQ,GAAG,IAAIR,OAAJ,CAAYD,IAAI,CAACU,MAAL,CAAY,EAAZ,CAAZ,EAA6BV,IAAI,CAACU,MAAL,CAAY,KAAZ,CAA7B,CAAjB;AACA,MAAMC,mBAAmB,GAAG,IAAIV,OAAJ,CAAYD,IAAI,CAACU,MAAL,CAAY,KAAZ,CAAZ,EAAgCV,IAAI,CAACU,MAAL,CAAY,KAAZ,CAAhC,CAA5B;AACA,MAAME,wBAAwB,GAAGD,mBAAmB,CAACE,QAApB,CAA6BJ,QAA7B,CAAjC,C,CAEA;;KAFMG,wB;AAGN,OAAO,SAASE,0BAAT,CAAoCC,KAApC,EAGL;AACA;AACA;AACA,QAAMC,aAAa,GAAG,CAACD,KAAD,GAClBE,SADkB,GAElBN,mBAAmB,CAACE,QAApB,CACEE,KAAK,CAACG,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,CACGC,UAAD,IAAoCA,UAAU,CAACC,QAAX,CAAoBV,wBAApB,CADtC,EAEED,mBAFF,CADF,CAFJ,CAHA,CAYA;;AACA,QAAMY,6BAA6B,GAAGR,KAAK,IAAIC,aAAT,GAAyBD,KAAK,CAACS,WAAN,CAAkBX,QAAlB,CAA2BG,aAA3B,CAAzB,GAAqEC,SAA3G,CAbA,CAeA;;AACA,QAAMQ,4BAA4B,GAAGF,6BAA6B,GAC9D,IAAItB,OAAJ,CAAYsB,6BAAZ,aAAYA,6BAAZ,uBAAYA,6BAA6B,CAAEG,SAA3C,EAAsDH,6BAAtD,aAAsDA,6BAAtD,uBAAsDA,6BAA6B,CAAEI,WAArF,CAD8D,GAE9DV,SAFJ,CAhBA,CAoBA;;AACA,QAAMW,mBAAmB,GACvBZ,aAAa,IACbD,KADA,KAECA,KAAK,CAACc,WAAN,YAA6B3B,WAA7B,GACG,IAAIA,WAAJ,CAAgBa,KAAK,CAACc,WAAN,CAAkBC,KAAlC,EAAyCd,aAAa,CAACM,QAAd,CAAuBP,KAAK,CAACc,WAAN,CAAkBE,GAAzC,EAA8CC,QAAvF,CADH,GAEGjC,cAAc,CAACkC,KAAf,CAAqBjB,aAAa,CAACM,QAAd,CAAuBP,KAAK,CAACc,WAAN,CAAkBE,GAAzC,EAA8CC,QAAnE,CAJJ,CADF;AAOA,SAAO;AAAEE,IAAAA,qBAAqB,EAAET,4BAAzB;AAAuDT,IAAAA,aAAa,EAAEY;AAAtE,GAAP;AACD,C,CAED;;AACA,OAAO,SAASO,8BAAT,CACLpB,KADK,EAELqB,eAFK,EAGkC;AACvC,QAAMC,GAAG,GAAG7B,oBAAoB,CAAC4B,eAAD,CAAhC;AACA,SAAO;AACL,KAAC7B,KAAK,CAAC+B,KAAP,GAAevB,KAAf,aAAeA,KAAf,uBAAeA,KAAK,CAAEwB,eAAP,CAAuBF,GAAvB,CADV;AAEL,KAAC9B,KAAK,CAACiC,MAAP,GAAgBzB,KAAhB,aAAgBA,KAAhB,uBAAgBA,KAAK,CAAE0B,gBAAP,CAAwBJ,GAAxB;AAFX,GAAP;AAID;AAED,OAAO,SAASK,eAAT,CAAyBlB,WAAzB,EAA8E;AACnF,MAAI,EAACA,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEmB,QAAb,CAAsBxC,+BAAtB,CAAD,CAAJ,EAA6D,OAAO,CAAP;AAC7D,MAAI,EAACqB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEmB,QAAb,CAAsBvC,yBAAtB,CAAD,CAAJ,EAAuD,OAAO,CAAP;AACvD,MAAI,EAACoB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEmB,QAAb,CAAsBrC,2BAAtB,CAAD,CAAJ,EAAyD,OAAO,CAAP;AACzD,MAAI,EAACkB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEmB,QAAb,CAAsBtC,wBAAtB,CAAD,CAAJ,EAAsD,OAAO,CAAP;AACtD,SAAO,CAAP;AACD;AAED,OAAO,SAASuC,oBAAT,CAA8B7B,KAA9B,EAA6C8B,QAA7C,EAAyE;AAC9E,MAAI,CAAC9B,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACD,SAAO8B,QAAQ,GACV,GAAE9B,KAAK,CAAC+B,cAAN,CAAqBC,MAArB,GAA8BC,aAA9B,CAA4C,CAA5C,CAA+C,IAAGjC,KAAK,CAACc,WAAN,CAAkBoB,QAAlB,CAA2BC,MAAO,MACrFnC,KAAK,CAACoC,YAAN,CAAmBF,QAAnB,CAA4BC,MAC7B,EAHU,GAIV,GAAEnC,KAAK,CAAC+B,cAAN,CAAqBE,aAArB,CAAmC,CAAnC,CAAsC,IAAGjC,KAAK,CAACoC,YAAN,CAAmBF,QAAnB,CAA4BC,MAAO,MAC7EnC,KAAK,CAACc,WAAN,CAAkBoB,QAAlB,CAA2BC,MAC5B,EANL;AAOD","sourcesContent":["import { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@pancakeswap/sdk'\r\nimport {\r\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\r\n  ALLOWED_PRICE_IMPACT_HIGH,\r\n  ALLOWED_PRICE_IMPACT_LOW,\r\n  ALLOWED_PRICE_IMPACT_MEDIUM,\r\n} from '../config/constants'\r\n\r\nimport { Field } from '../state/swap/actions'\r\nimport { basisPointsToPercent } from './index'\r\n\r\nconst BASE_FEE = new Percent(JSBI.BigInt(25), JSBI.BigInt(10000))\r\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\r\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\r\n\r\n// computes price breakdown for the trade\r\nexport function computeTradePriceBreakdown(trade?: Trade | null): {\r\n  priceImpactWithoutFee: Percent | undefined\r\n  realizedLPFee: CurrencyAmount | undefined | null\r\n} {\r\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\r\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\r\n  const realizedLPFee = !trade\r\n    ? undefined\r\n    : ONE_HUNDRED_PERCENT.subtract(\r\n        trade.route.pairs.reduce<Fraction>(\r\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\r\n          ONE_HUNDRED_PERCENT,\r\n        ),\r\n      )\r\n\r\n  // remove lp fees from price impact\r\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\r\n\r\n  // the x*y=k impact\r\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\r\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\r\n    : undefined\r\n\r\n  // the amount of the input that accrues to LPs\r\n  const realizedLPFeeAmount =\r\n    realizedLPFee &&\r\n    trade &&\r\n    (trade.inputAmount instanceof TokenAmount\r\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\r\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient))\r\n\r\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount }\r\n}\r\n\r\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\r\nexport function computeSlippageAdjustedAmounts(\r\n  trade: Trade | undefined,\r\n  allowedSlippage: number,\r\n): { [field in Field]?: CurrencyAmount } {\r\n  const pct = basisPointsToPercent(allowedSlippage)\r\n  return {\r\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\r\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\r\n  }\r\n}\r\n\r\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\r\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1\r\n  return 0\r\n}\r\n\r\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\r\n  if (!trade) {\r\n    return ''\r\n  }\r\n  return inverted\r\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\r\n        trade.outputAmount.currency.symbol\r\n      }`\r\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\r\n        trade.inputAmount.currency.symbol\r\n      }`\r\n}\r\n"]},"metadata":{},"sourceType":"module"}