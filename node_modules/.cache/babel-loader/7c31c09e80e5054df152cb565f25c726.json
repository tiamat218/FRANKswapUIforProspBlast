{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Collectibles\\\\components\\\\NftCard\\\\EasterNftCard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useProfile } from 'state/profile/hooks';\nimport { useEasterNftContract } from 'hooks/useContract';\nimport NftCard from './index';\n\n/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3\n};\nconst EasterNftCard = ({\n  nft,\n  ...props\n}) => {\n  _s();\n  const [isClaimable, setIsClaimable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    profile\n  } = useProfile();\n  const {\n    identifier\n  } = nft;\n  const {\n    team\n  } = profile !== null && profile !== void 0 ? profile : {};\n  const easterNftContract = useEasterNftContract();\n  const handleClaim = async () => {\n    const response = await easterNftContract.mintNFT();\n    await response.wait();\n    return response;\n  };\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account);\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false);\n    };\n    if (account && team) {\n      fetchClaimStatus();\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable]);\n  return /*#__PURE__*/_jsxDEV(NftCard, {\n    nft: nft,\n    ...props,\n    canClaim: isClaimable,\n    onClaim: handleClaim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n_s(EasterNftCard, \"i8uAVQc/OYUTh0HOYmQr+Q/8iyg=\", false, function () {\n  return [useWeb3React, useProfile, useEasterNftContract];\n});\n_c = EasterNftCard;\nexport default EasterNftCard;\nvar _c;\n$RefreshReg$(_c, \"EasterNftCard\");","map":{"version":3,"names":["React","useEffect","useState","useWeb3React","useProfile","useEasterNftContract","NftCard","jsxDEV","_jsxDEV","teamNftMap","EasterNftCard","nft","props","_s","isClaimable","setIsClaimable","account","profile","identifier","team","easterNftContract","handleClaim","response","mintNFT","wait","fetchClaimStatus","canClaim","id","onClaim","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Collectibles/components/NftCard/EasterNftCard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useEasterNftContract } from 'hooks/useContract'\r\nimport NftCard, { NftCardProps } from './index'\r\n\r\n/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */\r\nexport const teamNftMap = {\r\n  'easter-storm': 1,\r\n  'easter-flipper': 2,\r\n  'easter-caker': 3,\r\n}\r\n\r\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\r\n  const [isClaimable, setIsClaimable] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { profile } = useProfile()\r\n  const { identifier } = nft\r\n  const { team } = profile ?? {}\r\n  const easterNftContract = useEasterNftContract()\r\n\r\n  const handleClaim = async () => {\r\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\r\n    await response.wait()\r\n    return response\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchClaimStatus = async () => {\r\n      const canClaim = await easterNftContract.canClaim(account)\r\n\r\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\r\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\r\n    }\r\n\r\n    if (account && team) {\r\n      fetchClaimStatus()\r\n    }\r\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\r\n\r\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\r\n}\r\n\r\nexport default EasterNftCard\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,kBAAkB;AAE/C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,OAAOC,OAAO,MAAwB,SAAS;;AAE/C;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,OAAO,MAAMC,UAAU,GAAG;EACxB,cAAc,EAAE,CAAC;EACjB,gBAAgB,EAAE,CAAC;EACnB,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,aAAqC,GAAGA,CAAC;EAAEC,GAAG;EAAE,GAAGC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IAAEc;EAAQ,CAAC,GAAGb,YAAY,CAAC,CAAC;EAClC,MAAM;IAAEc;EAAQ,CAAC,GAAGb,UAAU,CAAC,CAAC;EAChC,MAAM;IAAEc;EAAW,CAAC,GAAGP,GAAG;EAC1B,MAAM;IAAEQ;EAAK,CAAC,GAAGF,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,CAAC;EAC9B,MAAMG,iBAAiB,GAAGf,oBAAoB,CAAC,CAAC;EAEhD,MAAMgB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,QAA8C,GAAG,MAAMF,iBAAiB,CAACG,OAAO,CAAC,CAAC;IACxF,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACrB,OAAOF,QAAQ;EACjB,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACd,MAAMwB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,QAAQ,GAAG,MAAMN,iBAAiB,CAACM,QAAQ,CAACV,OAAO,CAAC;;MAE1D;MACAD,cAAc,CAACW,QAAQ,GAAGP,IAAI,CAACQ,EAAE,KAAKlB,UAAU,CAACS,UAAU,CAAC,GAAG,KAAK,CAAC;IACvE,CAAC;IAED,IAAIF,OAAO,IAAIG,IAAI,EAAE;MACnBM,gBAAgB,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACT,OAAO,EAAEE,UAAU,EAAEC,IAAI,EAAEC,iBAAiB,EAAEL,cAAc,CAAC,CAAC;EAElE,oBAAOP,OAAA,CAACF,OAAO;IAACK,GAAG,EAAEA,GAAI;IAAA,GAAKC,KAAK;IAAEc,QAAQ,EAAEZ,WAAY;IAACc,OAAO,EAAEP;EAAY;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtF,CAAC;AAAAnB,EAAA,CA5BKH,aAAqC;EAAA,QAErBP,YAAY,EACZC,UAAU,EAGJC,oBAAoB;AAAA;AAAA4B,EAAA,GAN1CvB,aAAqC;AA8B3C,eAAeA,aAAa;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}