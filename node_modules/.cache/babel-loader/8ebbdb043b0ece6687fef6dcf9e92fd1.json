{"ast":null,"code":"import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{BscConnector}from'@binance-chain/bsc-connector';import{ConnectorNames}from'@pancakeswap/uikit';import{ethers}from'ethers';import getNodeUrl from'./getRpcUrl';const POLLING_INTERVAL=12000;const rpcUrl=getNodeUrl();const chainId=parseInt(process.env.REACT_APP_CHAIN_ID,10);const injected=new InjectedConnector({supportedChainIds:[chainId]});const walletconnect=new WalletConnectConnector({rpc:{[chainId]:rpcUrl},bridge:'https://pancakeswap.bridge.walletconnect.org/',qrcode:true,pollingInterval:POLLING_INTERVAL});const bscConnector=new BscConnector({supportedChainIds:[chainId]});export const connectorsByName={[ConnectorNames.Injected]:injected,[ConnectorNames.WalletConnect]:walletconnect,[ConnectorNames.BSC]:bscConnector};export const getLibrary=provider=>{const library=new ethers.providers.Web3Provider(provider);library.pollingInterval=POLLING_INTERVAL;return library;};/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */export const signMessage=async(provider,account,message)=>{var _provider$provider;if(window.BinanceChain){const{signature}=await window.BinanceChain.bnbSign(account,message);return signature;}/**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */if((_provider$provider=provider.provider)===null||_provider$provider===void 0?void 0:_provider$provider.wc){var _provider$provider2;const wcMessage=ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));const signature=await((_provider$provider2=provider.provider)===null||_provider$provider2===void 0?void 0:_provider$provider2.wc.signPersonalMessage([wcMessage,account]));return signature;}return provider.getSigner(account).signMessage(message);};","map":{"version":3,"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","ethers","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","connectorsByName","Injected","WalletConnect","BSC","getLibrary","provider","library","providers","Web3Provider","signMessage","account","message","_provider$provider","window","BinanceChain","signature","bnbSign","wc","_provider$provider2","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/utils/web3React.ts"],"sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\r\n  const library = new ethers.providers.Web3Provider(provider)\r\n  library.pollingInterval = POLLING_INTERVAL\r\n  return library\r\n}\r\n\r\n/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */\r\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\r\n  if (window.BinanceChain) {\r\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\r\n    return signature\r\n  }\r\n\r\n  /**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */\r\n  if (provider.provider?.wc) {\r\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\r\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\r\n    return signature\r\n  }\r\n\r\n  return provider.getSigner(account).signMessage(message)\r\n}\r\n"],"mappings":"AAAA,OAASA,iBAAiB,KAAQ,gCAAgC,CAClE,OAASC,sBAAsB,KAAQ,qCAAqC,CAC5E,OAASC,YAAY,KAAQ,8BAA8B,CAC3D,OAASC,cAAc,KAAQ,oBAAoB,CACnD,OAASC,MAAM,KAAQ,QAAQ,CAC/B,MAAO,CAAAC,UAAU,KAAM,aAAa,CAEpC,KAAM,CAAAC,gBAAgB,CAAG,KAAK,CAC9B,KAAM,CAAAC,MAAM,CAAGF,UAAU,CAAC,CAAC,CAC3B,KAAM,CAAAG,OAAO,CAAGC,QAAQ,CAACC,OAAO,CAACC,GAAG,CAACC,kBAAkB,CAAE,EAAE,CAAC,CAE5D,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAb,iBAAiB,CAAC,CAAEc,iBAAiB,CAAE,CAACN,OAAO,CAAE,CAAC,CAAC,CAExE,KAAM,CAAAO,aAAa,CAAG,GAAI,CAAAd,sBAAsB,CAAC,CAC/Ce,GAAG,CAAE,CAAE,CAACR,OAAO,EAAGD,MAAO,CAAC,CAC1BU,MAAM,CAAE,+CAA+C,CACvDC,MAAM,CAAE,IAAI,CACZC,eAAe,CAAEb,gBACnB,CAAC,CAAC,CAEF,KAAM,CAAAc,YAAY,CAAG,GAAI,CAAAlB,YAAY,CAAC,CAAEY,iBAAiB,CAAE,CAACN,OAAO,CAAE,CAAC,CAAC,CAEvE,MAAO,MAAM,CAAAa,gBAA4D,CAAG,CAC1E,CAAClB,cAAc,CAACmB,QAAQ,EAAGT,QAAQ,CACnC,CAACV,cAAc,CAACoB,aAAa,EAAGR,aAAa,CAC7C,CAACZ,cAAc,CAACqB,GAAG,EAAGJ,YACxB,CAAC,CAED,MAAO,MAAM,CAAAK,UAAU,CAAIC,QAAQ,EAAoC,CACrE,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAvB,MAAM,CAACwB,SAAS,CAACC,YAAY,CAACH,QAAQ,CAAC,CAC3DC,OAAO,CAACR,eAAe,CAAGb,gBAAgB,CAC1C,MAAO,CAAAqB,OAAO,CAChB,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,WAAW,CAAG,KAAAA,CAAOJ,QAAa,CAAEK,OAAe,CAAEC,OAAe,GAAsB,KAAAC,kBAAA,CACrG,GAAIC,MAAM,CAACC,YAAY,CAAE,CACvB,KAAM,CAAEC,SAAU,CAAC,CAAG,KAAM,CAAAF,MAAM,CAACC,YAAY,CAACE,OAAO,CAACN,OAAO,CAAEC,OAAO,CAAC,CACzE,MAAO,CAAAI,SAAS,CAClB,CAEA;AACF;AACA;AACA,KACE,IAAAH,kBAAA,CAAIP,QAAQ,CAACA,QAAQ,UAAAO,kBAAA,iBAAjBA,kBAAA,CAAmBK,EAAE,CAAE,KAAAC,mBAAA,CACzB,KAAM,CAAAC,SAAS,CAAGpC,MAAM,CAACqC,KAAK,CAACC,OAAO,CAACtC,MAAM,CAACqC,KAAK,CAACE,WAAW,CAACX,OAAO,CAAC,CAAC,CACzE,KAAM,CAAAI,SAAS,CAAG,OAAAG,mBAAA,CAAMb,QAAQ,CAACA,QAAQ,UAAAa,mBAAA,iBAAjBA,mBAAA,CAAmBD,EAAE,CAACM,mBAAmB,CAAC,CAACJ,SAAS,CAAET,OAAO,CAAC,CAAC,EACvF,MAAO,CAAAK,SAAS,CAClB,CAEA,MAAO,CAAAV,QAAQ,CAACmB,SAAS,CAACd,OAAO,CAAC,CAACD,WAAW,CAACE,OAAO,CAAC,CACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}