{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Swap\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { JSBI, Token } from '@pancakeswap/sdk';\nimport { Button, Text, ArrowDownIcon, Box, useModal } from '@pancakeswap/uikit';\nimport { useIsTransactionUnsupported } from 'hooks/Trades';\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter';\nimport { useTranslation } from 'contexts/Localization';\nimport SwapWarningTokens from 'config/constants/swapWarningTokens';\nimport { getAddress } from 'utils/addressHelpers';\nimport AddressInputPanel from './components/AddressInputPanel';\nimport { GreyCard } from '../../components/Card';\nimport Column, { AutoColumn } from '../../components/Layout/Column';\nimport ConfirmSwapModal from './components/ConfirmSwapModal';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { AutoRow, RowBetween } from '../../components/Layout/Row';\nimport AdvancedSwapDetailsDropdown from './components/AdvancedSwapDetailsDropdown';\nimport confirmPriceImpactWithoutFee from './components/confirmPriceImpactWithoutFee';\nimport { ArrowWrapper, SwapCallbackError, Wrapper } from './components/styleds';\nimport TradePrice from './components/TradePrice';\nimport ImportTokenWarningModal from './components/ImportTokenWarningModal';\nimport ProgressSteps from './components/ProgressSteps';\nimport { AppHeader, AppBody } from '../../components/App';\nimport ConnectWalletButton from '../../components/ConnectWalletButton';\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../config/constants';\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React';\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport { useSwapCallback } from '../../hooks/useSwapCallback';\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from '../../state/user/hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport CircleLoader from '../../components/Loader/CircleLoader';\nimport Page from '../Page';\nimport SwapWarningModal from './components/SwapWarningModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Label = styled(Text)`\n  font-size: 12px;\n  font-weight: bold;\n  color: ${({\n  theme\n}) => theme.colors.secondary};\n`;\n_c = Label;\nexport default function Swap({\n  history\n}) {\n  _s();\n\n  var _parsedAmounts$indepe, _parsedAmounts$indepe2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _currencies$Field$INP, _currencies$Field$INP2;\n\n  const loadedUrlParams = useDefaultsFromURLSearch();\n  const {\n    t\n  } = useTranslation(); // token warning stuff\n\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]); // dismiss warning if all imported tokens are in active lists\n\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault = urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !(token.address in defaultTokens);\n  });\n  const {\n    account\n  } = useActiveWeb3React(); // for expert mode\n\n  const [isExpertMode] = useExpertModeManager(); // get custom setting values for user\n\n  const [allowedSlippage] = useUserSlippageTolerance(); // swap state\n\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo();\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const trade = showWrap ? undefined : v2Trade;\n  const parsedAmounts = showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]); // modal and loading\n\n  const [{\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const noRoute = !route; // check whether the user has approved the router on the input token\n\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage); // check if user has gone through approval process, used to show two step buttons, reset on token change\n\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false); // mark when a user has submitted an approval, reset onTokenSelection for input field\n\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput))); // the callback to execute the swap\n\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useSwapCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n\n    if (!swapCallback) {\n      return;\n    }\n\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm]); // errors\n\n  const [showInverted, setShowInverted] = useState(false); // warnings on slippage\n\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee); // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    }); // if there was a tx hash, we want to clear the input\n\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn\n    });\n  }, [attemptingTxn, swapErrorMessage, trade, txHash]); // swap warning state\n\n  const [swapWarningCurrency, setSwapWarningCurrency] = useState(null);\n  const [onPresentSwapWarningModal] = useModal( /*#__PURE__*/_jsxDEV(SwapWarningModal, {\n    swapCurrency: swapWarningCurrency\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 48\n  }, this));\n\n  const shouldShowSwapWarning = swapCurrency => {\n    const isWarningToken = Object.entries(SwapWarningTokens).find(warningTokenConfig => {\n      const warningTokenData = warningTokenConfig[1];\n      const warningTokenAddress = getAddress(warningTokenData.address);\n      return swapCurrency.address === warningTokenAddress;\n    });\n    return Boolean(isWarningToken);\n  };\n\n  useEffect(() => {\n    if (swapWarningCurrency) {\n      onPresentSwapWarningModal();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [swapWarningCurrency]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n    onCurrencySelection(Field.INPUT, inputCurrency);\n    const showSwapWarning = shouldShowSwapWarning(inputCurrency);\n\n    if (showSwapWarning) {\n      setSwapWarningCurrency(inputCurrency);\n    } else {\n      setSwapWarningCurrency(null);\n    }\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact());\n    }\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => {\n    onCurrencySelection(Field.OUTPUT, outputCurrency);\n    const showSwapWarning = shouldShowSwapWarning(outputCurrency);\n\n    if (showSwapWarning) {\n      setSwapWarningCurrency(outputCurrency);\n    } else {\n      setSwapWarningCurrency(null);\n    }\n  }, [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n  const [onPresentImportTokenWarningModal] = useModal( /*#__PURE__*/_jsxDEV(ImportTokenWarningModal, {\n    tokens: importTokensNotInDefault,\n    onCancel: () => history.push('/swap/')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this));\n  useEffect(() => {\n    if (importTokensNotInDefault.length > 0) {\n      onPresentImportTokenWarningModal();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [importTokensNotInDefault.length]);\n  const [onPresentConfirmModal] = useModal( /*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n    trade: trade,\n    originalTrade: tradeToConfirm,\n    onAcceptChanges: handleAcceptChanges,\n    attemptingTxn: attemptingTxn,\n    txHash: txHash,\n    recipient: recipient,\n    allowedSlippage: allowedSlippage,\n    onConfirm: handleSwap,\n    swapErrorMessage: swapErrorMessage,\n    customOnDismiss: handleConfirmDismiss\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this), true, true, 'confirmSwapModal');\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(AppHeader, {\n        title: t('Exchange'),\n        subtitle: t('Trade tokens in an instant')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            label: independentField === Field.OUTPUT && !showWrap && trade ? t('From (estimated)') : t('From'),\n            value: formattedAmounts[Field.INPUT],\n            showMaxButton: !atMaxAmountInput,\n            currency: currencies[Field.INPUT],\n            onUserInput: handleTypeInput,\n            onMax: handleMaxInput,\n            onCurrencySelect: handleInputSelect,\n            otherCurrency: currencies[Field.OUTPUT],\n            id: \"swap-currency-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            justify: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: isExpertMode ? 'space-between' : 'center',\n              style: {\n                padding: '0 1rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: true,\n                children: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n                  width: \"16px\",\n                  onClick: () => {\n                    setApprovalSubmitted(false); // reset 2 step UI for approvals\n\n                    onSwitchTokens();\n                  },\n                  color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 17\n              }, this), recipient === null && !showWrap && isExpertMode ? /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"text\",\n                id: \"add-recipient-button\",\n                onClick: () => onChangeRecipient(''),\n                children: t('+ Add a send (optional)')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.OUTPUT],\n            onUserInput: handleTypeOutput,\n            label: independentField === Field.INPUT && !showWrap && trade ? t('To (estimated)') : t('To'),\n            showMaxButton: false,\n            currency: currencies[Field.OUTPUT],\n            onCurrencySelect: handleOutputSelect,\n            otherCurrency: currencies[Field.INPUT],\n            id: \"swap-currency-output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), isExpertMode && recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: \"space-between\",\n              style: {\n                padding: '0 1rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: false,\n                children: /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n                  width: \"16px\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"text\",\n                id: \"remove-recipient-button\",\n                onClick: () => onChangeRecipient(null),\n                children: t('- Remove send')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n              id: \"recipient\",\n              value: recipient,\n              onChange: onChangeRecipient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : null, showWrap ? null : /*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"8px\",\n            style: {\n              padding: '0 16px'\n            },\n            children: [Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n              align: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                children: t('Price')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                showInverted: showInverted,\n                setShowInverted: setShowInverted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 19\n            }, this), allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && /*#__PURE__*/_jsxDEV(RowBetween, {\n              align: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                children: t('Slippage Tolerance')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                bold: true,\n                color: \"primary\",\n                children: [allowedSlippage / 100, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"1rem\",\n          children: [swapIsUnsupported ? /*#__PURE__*/_jsxDEV(Button, {\n            width: \"100%\",\n            disabled: true,\n            mb: \"4px\",\n            children: t('Unsupported Asset')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this) : !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n            width: \"100%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }, this) : showWrap ? /*#__PURE__*/_jsxDEV(Button, {\n            width: \"100%\",\n            disabled: Boolean(wrapInputError),\n            onClick: onWrap,\n            children: wrapInputError !== null && wrapInputError !== void 0 ? wrapInputError : wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this) : noRoute && userHasSpecifiedInputOutput ? /*#__PURE__*/_jsxDEV(GreyCard, {\n            style: {\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: \"textSubtle\",\n              mb: \"4px\",\n              children: t('Insufficient liquidity for this trade.')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this), singleHopOnly && /*#__PURE__*/_jsxDEV(Text, {\n              color: \"textSubtle\",\n              mb: \"4px\",\n              children: t('Try enabling multi-hop trades.')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this) : showApproveFlow ? /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: approval === ApprovalState.APPROVED ? 'success' : 'primary',\n              onClick: approveCallback,\n              disabled: approval !== ApprovalState.NOT_APPROVED || approvalSubmitted,\n              width: \"48%\",\n              children: approval === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(AutoRow, {\n                gap: \"6px\",\n                justify: \"center\",\n                children: [t('Enabling'), \" \", /*#__PURE__*/_jsxDEV(CircleLoader, {\n                  stroke: \"white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 21\n              }, this) : approvalSubmitted && approval === ApprovalState.APPROVED ? t('Enabled') : t('Enable %asset%', {\n                asset: (_currencies$Field$INP = (_currencies$Field$INP2 = currencies[Field.INPUT]) === null || _currencies$Field$INP2 === void 0 ? void 0 : _currencies$Field$INP2.symbol) !== null && _currencies$Field$INP !== void 0 ? _currencies$Field$INP : ''\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: isValid && priceImpactSeverity > 2 ? 'danger' : 'primary',\n              onClick: () => {\n                if (isExpertMode) {\n                  handleSwap();\n                } else {\n                  setSwapState({\n                    tradeToConfirm: trade,\n                    attemptingTxn: false,\n                    swapErrorMessage: undefined,\n                    txHash: undefined\n                  });\n                  onPresentConfirmModal();\n                }\n              },\n              width: \"48%\",\n              id: \"swap-button\",\n              disabled: !isValid || approval !== ApprovalState.APPROVED || priceImpactSeverity > 3 && !isExpertMode,\n              children: priceImpactSeverity > 3 && !isExpertMode ? t('Price Impact High') : priceImpactSeverity > 2 ? t('Swap Anyway') : t('Swap')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary',\n            onClick: () => {\n              if (isExpertMode) {\n                handleSwap();\n              } else {\n                setSwapState({\n                  tradeToConfirm: trade,\n                  attemptingTxn: false,\n                  swapErrorMessage: undefined,\n                  txHash: undefined\n                });\n                onPresentConfirmModal();\n              }\n            },\n            id: \"swap-button\",\n            width: \"100%\",\n            disabled: !isValid || priceImpactSeverity > 3 && !isExpertMode || !!swapCallbackError,\n            children: swapInputError || (priceImpactSeverity > 3 && !isExpertMode ? `Price Impact Too High` : priceImpactSeverity > 2 ? t('Swap Anyway') : t('Swap'))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this), showApproveFlow && /*#__PURE__*/_jsxDEV(Column, {\n            style: {\n              marginTop: '1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(ProgressSteps, {\n              steps: [approval === ApprovalState.APPROVED]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n            error: swapErrorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 49\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), !swapIsUnsupported ? /*#__PURE__*/_jsxDEV(AdvancedSwapDetailsDropdown, {\n      trade: trade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      currencies: [currencies.INPUT, currencies.OUTPUT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Swap, \"BouAo2dxLy2LopeFC//dMVBn34E=\", false, function () {\n  return [useDefaultsFromURLSearch, useTranslation, useCurrency, useCurrency, useAllTokens, useActiveWeb3React, useExpertModeManager, useUserSlippageTolerance, useSwapState, useDerivedSwapInfo, useWrapCallback, useSwapActionHandlers, useApproveCallbackFromTrade, useSwapCallback, useUserSingleHopOnly, useModal, useIsTransactionUnsupported, useModal, useModal];\n});\n\n_c2 = Swap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Label\");\n$RefreshReg$(_c2, \"Swap\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Swap/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","styled","JSBI","Token","Button","Text","ArrowDownIcon","Box","useModal","useIsTransactionUnsupported","UnsupportedCurrencyFooter","useTranslation","SwapWarningTokens","getAddress","AddressInputPanel","GreyCard","Column","AutoColumn","ConfirmSwapModal","CurrencyInputPanel","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","confirmPriceImpactWithoutFee","ArrowWrapper","SwapCallbackError","Wrapper","TradePrice","ImportTokenWarningModal","ProgressSteps","AppHeader","AppBody","ConnectWalletButton","INITIAL_ALLOWED_SLIPPAGE","useActiveWeb3React","useCurrency","useAllTokens","ApprovalState","useApproveCallbackFromTrade","useSwapCallback","useWrapCallback","WrapType","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSlippageTolerance","useUserSingleHopOnly","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","CircleLoader","Page","SwapWarningModal","Label","theme","colors","secondary","Swap","history","loadedUrlParams","t","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","urlLoadedTokens","filter","c","defaultTokens","importTokensNotInDefault","token","address","account","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","wrapType","execute","onWrap","wrapInputError","INPUT","OUTPUT","showWrap","NOT_APPLICABLE","trade","undefined","parsedAmounts","inputAmount","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","swapWarningCurrency","setSwapWarningCurrency","onPresentSwapWarningModal","shouldShowSwapWarning","swapCurrency","isWarningToken","Object","entries","find","warningTokenConfig","warningTokenData","warningTokenAddress","handleInputSelect","inputCurrency","showSwapWarning","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","onPresentImportTokenWarningModal","push","length","onPresentConfirmModal","padding","executionPrice","WRAP","UNWRAP","textAlign","asset","symbol","marginTop"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { CurrencyAmount, JSBI, Token, Trade } from '@pancakeswap/sdk'\r\nimport { Button, Text, ArrowDownIcon, Box, useModal } from '@pancakeswap/uikit'\r\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\r\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport SwapWarningTokens from 'config/constants/swapWarningTokens'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport AddressInputPanel from './components/AddressInputPanel'\r\nimport { GreyCard } from '../../components/Card'\r\nimport Column, { AutoColumn } from '../../components/Layout/Column'\r\nimport ConfirmSwapModal from './components/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { AutoRow, RowBetween } from '../../components/Layout/Row'\r\nimport AdvancedSwapDetailsDropdown from './components/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from './components/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, SwapCallbackError, Wrapper } from './components/styleds'\r\nimport TradePrice from './components/TradePrice'\r\nimport ImportTokenWarningModal from './components/ImportTokenWarningModal'\r\nimport ProgressSteps from './components/ProgressSteps'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../config/constants'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState,\r\n} from '../../state/swap/hooks'\r\nimport { useExpertModeManager, useUserSlippageTolerance, useUserSingleHopOnly } from '../../state/user/hooks'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport CircleLoader from '../../components/Loader/CircleLoader'\r\nimport Page from '../Page'\r\nimport SwapWarningModal from './components/SwapWarningModal'\r\n\r\nconst Label = styled(Text)`\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport default function Swap({ history }: RouteComponentProps) {\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId),\r\n  ]\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency],\r\n  )\r\n\r\n  // dismiss warning if all imported tokens are in active lists\r\n  const defaultTokens = useAllTokens()\r\n  const importTokensNotInDefault =\r\n    urlLoadedTokens &&\r\n    urlLoadedTokens.filter((token: Token) => {\r\n      return !(token.address in defaultTokens)\r\n    })\r\n\r\n  const { account } = useActiveWeb3React()\r\n\r\n  // for expert mode\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n\r\n  const {\r\n    wrapType,\r\n    execute: onWrap,\r\n    inputError: wrapInputError,\r\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const trade = showWrap ? undefined : v2Trade\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount,\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  // modal and loading\r\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    tradeToConfirm: Trade | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined,\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const [singleHopOnly] = useUserSingleHopOnly()\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\r\n    swapCallback()\r\n      .then((hash) => {\r\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\r\n      })\r\n      .catch((error) => {\r\n        setSwapState({\r\n          attemptingTxn: false,\r\n          tradeToConfirm,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined,\r\n        })\r\n      })\r\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\r\n  }, [attemptingTxn, swapErrorMessage, trade, txHash])\r\n\r\n  // swap warning state\r\n  const [swapWarningCurrency, setSwapWarningCurrency] = useState(null)\r\n  const [onPresentSwapWarningModal] = useModal(<SwapWarningModal swapCurrency={swapWarningCurrency} />)\r\n\r\n  const shouldShowSwapWarning = (swapCurrency) => {\r\n    const isWarningToken = Object.entries(SwapWarningTokens).find((warningTokenConfig) => {\r\n      const warningTokenData = warningTokenConfig[1]\r\n      const warningTokenAddress = getAddress(warningTokenData.address)\r\n      return swapCurrency.address === warningTokenAddress\r\n    })\r\n    return Boolean(isWarningToken)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (swapWarningCurrency) {\r\n      onPresentSwapWarningModal()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [swapWarningCurrency])\r\n\r\n  const handleInputSelect = useCallback(\r\n    (inputCurrency) => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n      const showSwapWarning = shouldShowSwapWarning(inputCurrency)\r\n      if (showSwapWarning) {\r\n        setSwapWarningCurrency(inputCurrency)\r\n      } else {\r\n        setSwapWarningCurrency(null)\r\n      }\r\n    },\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    if (maxAmountInput) {\r\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n    }\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(\r\n    (outputCurrency) => {\r\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\r\n      const showSwapWarning = shouldShowSwapWarning(outputCurrency)\r\n      if (showSwapWarning) {\r\n        setSwapWarningCurrency(outputCurrency)\r\n      } else {\r\n        setSwapWarningCurrency(null)\r\n      }\r\n    },\r\n\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\r\n\r\n  const [onPresentImportTokenWarningModal] = useModal(\r\n    <ImportTokenWarningModal tokens={importTokensNotInDefault} onCancel={() => history.push('/swap/')} />,\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (importTokensNotInDefault.length > 0) {\r\n      onPresentImportTokenWarningModal()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [importTokensNotInDefault.length])\r\n\r\n  const [onPresentConfirmModal] = useModal(\r\n    <ConfirmSwapModal\r\n      trade={trade}\r\n      originalTrade={tradeToConfirm}\r\n      onAcceptChanges={handleAcceptChanges}\r\n      attemptingTxn={attemptingTxn}\r\n      txHash={txHash}\r\n      recipient={recipient}\r\n      allowedSlippage={allowedSlippage}\r\n      onConfirm={handleSwap}\r\n      swapErrorMessage={swapErrorMessage}\r\n      customOnDismiss={handleConfirmDismiss}\r\n    />,\r\n    true,\r\n    true,\r\n    'confirmSwapModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader title={t('Exchange')} subtitle={t('Trade tokens in an instant')} />\r\n        <Wrapper id=\"swap-page\">\r\n          <AutoColumn gap=\"md\">\r\n            <CurrencyInputPanel\r\n              label={independentField === Field.OUTPUT && !showWrap && trade ? t('From (estimated)') : t('From')}\r\n              value={formattedAmounts[Field.INPUT]}\r\n              showMaxButton={!atMaxAmountInput}\r\n              currency={currencies[Field.INPUT]}\r\n              onUserInput={handleTypeInput}\r\n              onMax={handleMaxInput}\r\n              onCurrencySelect={handleInputSelect}\r\n              otherCurrency={currencies[Field.OUTPUT]}\r\n              id=\"swap-currency-input\"\r\n            />\r\n            <AutoColumn justify=\"space-between\">\r\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                <ArrowWrapper clickable>\r\n                  <ArrowDownIcon\r\n                    width=\"16px\"\r\n                    onClick={() => {\r\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                      onSwitchTokens()\r\n                    }}\r\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\r\n                  />\r\n                </ArrowWrapper>\r\n                {recipient === null && !showWrap && isExpertMode ? (\r\n                  <Button variant=\"text\" id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                    {t('+ Add a send (optional)')}\r\n                  </Button>\r\n                ) : null}\r\n              </AutoRow>\r\n            </AutoColumn>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.OUTPUT]}\r\n              onUserInput={handleTypeOutput}\r\n              label={independentField === Field.INPUT && !showWrap && trade ? t('To (estimated)') : t('To')}\r\n              showMaxButton={false}\r\n              currency={currencies[Field.OUTPUT]}\r\n              onCurrencySelect={handleOutputSelect}\r\n              otherCurrency={currencies[Field.INPUT]}\r\n              id=\"swap-currency-output\"\r\n            />\r\n\r\n            {isExpertMode && recipient !== null && !showWrap ? (\r\n              <>\r\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                  <ArrowWrapper clickable={false}>\r\n                    <ArrowDownIcon width=\"16px\" />\r\n                  </ArrowWrapper>\r\n                  <Button variant=\"text\" id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                    {t('- Remove send')}\r\n                  </Button>\r\n                </AutoRow>\r\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n              </>\r\n            ) : null}\r\n\r\n            {showWrap ? null : (\r\n              <AutoColumn gap=\"8px\" style={{ padding: '0 16px' }}>\r\n                {Boolean(trade) && (\r\n                  <RowBetween align=\"center\">\r\n                    <Label>{t('Price')}</Label>\r\n                    <TradePrice\r\n                      price={trade?.executionPrice}\r\n                      showInverted={showInverted}\r\n                      setShowInverted={setShowInverted}\r\n                    />\r\n                  </RowBetween>\r\n                )}\r\n                {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                  <RowBetween align=\"center\">\r\n                    <Label>{t('Slippage Tolerance')}</Label>\r\n                    <Text bold color=\"primary\">\r\n                      {allowedSlippage / 100}%\r\n                    </Text>\r\n                  </RowBetween>\r\n                )}\r\n              </AutoColumn>\r\n            )}\r\n          </AutoColumn>\r\n          <Box mt=\"1rem\">\r\n            {swapIsUnsupported ? (\r\n              <Button width=\"100%\" disabled mb=\"4px\">\r\n                {t('Unsupported Asset')}\r\n              </Button>\r\n            ) : !account ? (\r\n              <ConnectWalletButton width=\"100%\" />\r\n            ) : showWrap ? (\r\n              <Button width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\r\n                {wrapInputError ??\r\n                  (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n              </Button>\r\n            ) : noRoute && userHasSpecifiedInputOutput ? (\r\n              <GreyCard style={{ textAlign: 'center' }}>\r\n                <Text color=\"textSubtle\" mb=\"4px\">\r\n                  {t('Insufficient liquidity for this trade.')}\r\n                </Text>\r\n                {singleHopOnly && (\r\n                  <Text color=\"textSubtle\" mb=\"4px\">\r\n                    {t('Try enabling multi-hop trades.')}\r\n                  </Text>\r\n                )}\r\n              </GreyCard>\r\n            ) : showApproveFlow ? (\r\n              <RowBetween>\r\n                <Button\r\n                  variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\r\n                  onClick={approveCallback}\r\n                  disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                  width=\"48%\"\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <AutoRow gap=\"6px\" justify=\"center\">\r\n                      {t('Enabling')} <CircleLoader stroke=\"white\" />\r\n                    </AutoRow>\r\n                  ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                    t('Enabled')\r\n                  ) : (\r\n                    t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\r\n                  onClick={() => {\r\n                    if (isExpertMode) {\r\n                      handleSwap()\r\n                    } else {\r\n                      setSwapState({\r\n                        tradeToConfirm: trade,\r\n                        attemptingTxn: false,\r\n                        swapErrorMessage: undefined,\r\n                        txHash: undefined,\r\n                      })\r\n                      onPresentConfirmModal()\r\n                    }\r\n                  }}\r\n                  width=\"48%\"\r\n                  id=\"swap-button\"\r\n                  disabled={\r\n                    !isValid || approval !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\r\n                  }\r\n                >\r\n                  {priceImpactSeverity > 3 && !isExpertMode\r\n                    ? t('Price Impact High')\r\n                    : priceImpactSeverity > 2\r\n                    ? t('Swap Anyway')\r\n                    : t('Swap')}\r\n                </Button>\r\n              </RowBetween>\r\n            ) : (\r\n              <Button\r\n                variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'primary'}\r\n                onClick={() => {\r\n                  if (isExpertMode) {\r\n                    handleSwap()\r\n                  } else {\r\n                    setSwapState({\r\n                      tradeToConfirm: trade,\r\n                      attemptingTxn: false,\r\n                      swapErrorMessage: undefined,\r\n                      txHash: undefined,\r\n                    })\r\n                    onPresentConfirmModal()\r\n                  }\r\n                }}\r\n                id=\"swap-button\"\r\n                width=\"100%\"\r\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\r\n              >\r\n                {swapInputError ||\r\n                  (priceImpactSeverity > 3 && !isExpertMode\r\n                    ? `Price Impact Too High`\r\n                    : priceImpactSeverity > 2\r\n                    ? t('Swap Anyway')\r\n                    : t('Swap'))}\r\n              </Button>\r\n            )}\r\n            {showApproveFlow && (\r\n              <Column style={{ marginTop: '1rem' }}>\r\n                <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\r\n              </Column>\r\n            )}\r\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n          </Box>\r\n        </Wrapper>\r\n      </AppBody>\r\n      {!swapIsUnsupported ? (\r\n        <AdvancedSwapDetailsDropdown trade={trade} />\r\n      ) : (\r\n        <UnsupportedCurrencyFooter currencies={[currencies.INPUT, currencies.OUTPUT]} />\r\n      )}\r\n    </Page>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}