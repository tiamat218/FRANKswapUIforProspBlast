{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import useActiveWeb3React from'hooks/useActiveWeb3React';import{addTransaction}from'./actions';// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(){const{chainId,account}=useActiveWeb3React();const dispatch=useDispatch();return useCallback(function(response){let{summary,approval,claim}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!account)return;if(!chainId)return;const{hash}=response;if(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash,from:account,chainId,approval,summary,claim}));},[dispatch,chainId,account]);}// returns all the transactions for the current chain\nexport function useAllTransactions(){var _state$chainId;const{chainId}=useActiveWeb3React();const state=useSelector(s=>s.transactions);return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useIsTransactionPending(transactionHash){const transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */export function isTransactionRecent(tx){return new Date().getTime()-tx.addedTime<86400000;}// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress,spender){const allTransactions=useAllTransactions();return useMemo(()=>typeof tokenAddress==='string'&&typeof spender==='string'&&Object.keys(allTransactions).some(hash=>{const tx=allTransactions[hash];if(!tx)return false;if(tx.receipt){return false;}const{approval}=tx;if(!approval)return false;return approval.spender===spender&&approval.tokenAddress===tokenAddress&&isTransactionRecent(tx);}),[allTransactions,spender,tokenAddress]);}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","claim","arguments","length","undefined","hash","Error","from","useAllTransactions","_state$chainId","state","s","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/transactions/hooks.tsx"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { addTransaction } from './actions'\r\nimport { TransactionDetails } from './reducer'\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: {\r\n    summary?: string\r\n    approval?: { tokenAddress: string; spender: string }\r\n    claim?: { recipient: string }\r\n  },\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      {\r\n        summary,\r\n        approval,\r\n        claim,\r\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return\r\n      if (!chainId) return\r\n\r\n      const { hash } = response\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.')\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\r\n    },\r\n    [dispatch, chainId, account],\r\n  )\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  return chainId ? state[chainId] ?? {} : {}\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions()\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false\r\n\r\n  return !transactions[transactionHash].receipt\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions()\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash]\r\n        if (!tx) return false\r\n        if (tx.receipt) {\r\n          return false\r\n        }\r\n        const { approval } = tx\r\n        if (!approval) return false\r\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}