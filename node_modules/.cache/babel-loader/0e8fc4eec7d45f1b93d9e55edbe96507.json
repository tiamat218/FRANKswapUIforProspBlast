{"ast":null,"code":"import{useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import{getPredictionsContract}from'utils/contractHelpers';const useIsRefundable=epoch=>{const[isRefundable,setIsRefundable]=useState(false);const{account}=useWeb3React();useEffect(()=>{const fetchRefundableStatus=async()=>{const predictionsContract=getPredictionsContract();const refundable=await predictionsContract.refundable(epoch,account);if(refundable){// Double check they have not already claimed\nconst ledger=await predictionsContract.ledger(epoch,account);setIsRefundable(ledger.claimed===false);}else{setIsRefundable(false);}};if(account){fetchRefundableStatus();}},[account,epoch,setIsRefundable]);return{isRefundable,setIsRefundable};};export default useIsRefundable;","map":{"version":3,"names":["useEffect","useState","useWeb3React","getPredictionsContract","useIsRefundable","epoch","isRefundable","setIsRefundable","account","fetchRefundableStatus","predictionsContract","refundable","ledger","claimed"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/hooks/useIsRefundable.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,sBAAsB,KAAQ,uBAAuB,CAE9D,KAAM,CAAAC,eAAe,CAAIC,KAAa,EAAK,CACzC,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAAEO,OAAQ,CAAC,CAAGN,YAAY,CAAC,CAAC,CAElCF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,qBAAqB,CAAG,KAAAA,CAAA,GAAY,CACxC,KAAM,CAAAC,mBAAmB,CAAGP,sBAAsB,CAAC,CAAC,CACpD,KAAM,CAAAQ,UAAU,CAAG,KAAM,CAAAD,mBAAmB,CAACC,UAAU,CAACN,KAAK,CAAEG,OAAO,CAAC,CAEvE,GAAIG,UAAU,CAAE,CACd;AACA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAF,mBAAmB,CAACE,MAAM,CAACP,KAAK,CAAEG,OAAO,CAAC,CAC/DD,eAAe,CAACK,MAAM,CAACC,OAAO,GAAK,KAAK,CAAC,CAC3C,CAAC,IAAM,CACLN,eAAe,CAAC,KAAK,CAAC,CACxB,CACF,CAAC,CAED,GAAIC,OAAO,CAAE,CACXC,qBAAqB,CAAC,CAAC,CACzB,CACF,CAAC,CAAE,CAACD,OAAO,CAAEH,KAAK,CAAEE,eAAe,CAAC,CAAC,CAErC,MAAO,CAAED,YAAY,CAAEC,eAAgB,CAAC,CAC1C,CAAC,CAED,cAAe,CAAAH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}