{"ast":null,"code":"import React from'react';import{Flex,Heading,Skeleton}from'@pancakeswap/uikit';import getTimePeriods from'utils/getTimePeriods';import Timer from'./Timer';import useNextEventCountdown from'../../hooks/useNextEventCountdown';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Countdown=_ref=>{let{nextEventTime,preCountdownText,postCountdownText}=_ref;const secondsRemaining=useNextEventCountdown(nextEventTime);const{days,hours,minutes}=getTimePeriods(secondsRemaining);return/*#__PURE__*/_jsx(_Fragment,{children:secondsRemaining?/*#__PURE__*/_jsxs(Flex,{display:\"inline-flex\",justifyContent:\"flex-end\",alignItems:\"flex-end\",children:[preCountdownText&&/*#__PURE__*/_jsx(Heading,{mr:\"12px\",color:\"#ffff\",children:preCountdownText}),/*#__PURE__*/_jsx(Timer,{minutes:minutes+1// We don't show seconds - so values from 0 - 59s should be shown as 1 min\n,hours:hours,days:days}),postCountdownText&&/*#__PURE__*/_jsx(Heading,{color:\"#ffff\",children:postCountdownText})]}):/*#__PURE__*/_jsx(Skeleton,{height:\"41px\",width:\"250px\"})});};export default Countdown;","map":{"version":3,"names":["React","Flex","Heading","Skeleton","getTimePeriods","Timer","useNextEventCountdown","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Countdown","_ref","nextEventTime","preCountdownText","postCountdownText","secondsRemaining","days","hours","minutes","children","display","justifyContent","alignItems","mr","color","height","width"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/Countdown/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport Timer from './Timer'\r\nimport useNextEventCountdown from '../../hooks/useNextEventCountdown'\r\n\r\ninterface CountdownProps {\r\n  nextEventTime: number\r\n  preCountdownText?: string\r\n  postCountdownText?: string\r\n}\r\n\r\nconst Countdown: React.FC<CountdownProps> = ({ nextEventTime, preCountdownText, postCountdownText }) => {\r\n  const secondsRemaining = useNextEventCountdown(nextEventTime)\r\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\r\n\r\n  return (\r\n    <>\r\n      {secondsRemaining ? (\r\n        <Flex display=\"inline-flex\" justifyContent=\"flex-end\" alignItems=\"flex-end\">\r\n          {preCountdownText && (\r\n            <Heading mr=\"12px\" color=\"#ffff\">\r\n              {preCountdownText}\r\n            </Heading>\r\n          )}\r\n          <Timer\r\n            minutes={minutes + 1} // We don't show seconds - so values from 0 - 59s should be shown as 1 min\r\n            hours={hours}\r\n            days={days}\r\n          />\r\n          {postCountdownText && <Heading color=\"#ffff\">{postCountdownText}</Heading>}\r\n        </Flex>\r\n      ) : (\r\n        <Skeleton height=\"41px\" width=\"250px\" />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Countdown\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,IAAI,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,oBAAoB,CAC5D,MAAO,CAAAC,cAAc,KAAM,sBAAsB,CACjD,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,qBAAqB,KAAM,mCAAmC,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAQrE,KAAM,CAAAC,SAAmC,CAAGC,IAAA,EAA4D,IAA3D,CAAEC,aAAa,CAAEC,gBAAgB,CAAEC,iBAAkB,CAAC,CAAAH,IAAA,CACjG,KAAM,CAAAI,gBAAgB,CAAGZ,qBAAqB,CAACS,aAAa,CAAC,CAC7D,KAAM,CAAEI,IAAI,CAAEC,KAAK,CAAEC,OAAQ,CAAC,CAAGjB,cAAc,CAACc,gBAAgB,CAAC,CAEjE,mBACEV,IAAA,CAAAI,SAAA,EAAAU,QAAA,CACGJ,gBAAgB,cACfR,KAAA,CAACT,IAAI,EAACsB,OAAO,CAAC,aAAa,CAACC,cAAc,CAAC,UAAU,CAACC,UAAU,CAAC,UAAU,CAAAH,QAAA,EACxEN,gBAAgB,eACfR,IAAA,CAACN,OAAO,EAACwB,EAAE,CAAC,MAAM,CAACC,KAAK,CAAC,OAAO,CAAAL,QAAA,CAC7BN,gBAAgB,CACV,CACV,cACDR,IAAA,CAACH,KAAK,EACJgB,OAAO,CAAEA,OAAO,CAAG,CAAG;AAAA,CACtBD,KAAK,CAAEA,KAAM,CACbD,IAAI,CAAEA,IAAK,CACZ,CAAC,CACDF,iBAAiB,eAAIT,IAAA,CAACN,OAAO,EAACyB,KAAK,CAAC,OAAO,CAAAL,QAAA,CAAEL,iBAAiB,CAAU,CAAC,EACtE,CAAC,cAEPT,IAAA,CAACL,QAAQ,EAACyB,MAAM,CAAC,MAAM,CAACC,KAAK,CAAC,OAAO,CAAE,CACxC,CACD,CAAC,CAEP,CAAC,CAED,cAAe,CAAAhB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}