{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport isArchivedPid from 'utils/farmHelpers';\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps';\nimport fetchFarms from './fetchFarms';\nimport fetchFarmsPrices from './fetchFarmsPrices';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nconst noAccountFarmConfig = farmsConfig.map(farm => ({\n  ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0'\n  }\n}));\nconst initialState = {\n  data: noAccountFarmConfig,\n  loadArchivedFarmsData: false,\n  userDataLoaded: false\n};\nexport const nonArchivedFarms = farmsConfig.filter(({\n  pid\n}) => !isArchivedPid(pid));\n\n// Async thunks\nexport const fetchFarmsPublicDataAsync = createAsyncThunk('farms/fetchFarmsPublicDataAsync', async pids => {\n  const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid));\n\n  // Add price helper farms\n  const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig);\n  const farms = await fetchFarms(farmsWithPriceHelpers);\n  const farmsWithPrices = await fetchFarmsPrices(farms);\n\n  // Filter out price helper LP config farms\n  const farmsWithoutHelperLps = farmsWithPrices.filter(farm => {\n    return farm.pid || farm.pid === 0;\n  });\n  return farmsWithoutHelperLps;\n});\nexport const fetchFarmUserDataAsync = createAsyncThunk('farms/fetchFarmUserDataAsync', async ({\n  account,\n  pids\n}) => {\n  const farmsToFetch = farmsConfig.filter(farmConfig => pids.includes(farmConfig.pid));\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch);\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch);\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch);\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch);\n  return userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      pid: farmsToFetch[index].pid,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index]\n    };\n  });\n});\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload;\n      state.loadArchivedFarmsData = loadArchivedFarmsData;\n    }\n  },\n  extraReducers: builder => {\n    // Update farms with live data\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\n      state.data = state.data.map(farm => {\n        const liveFarmData = action.payload.find(farmData => farmData.pid === farm.pid);\n        return {\n          ...farm,\n          ...liveFarmData\n        };\n      });\n    });\n\n    // Update farms with user data\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\n      action.payload.forEach(userDataEl => {\n        const {\n          pid\n        } = userDataEl;\n        const index = state.data.findIndex(farm => farm.pid === pid);\n        state.data[index] = {\n          ...state.data[index],\n          userData: userDataEl\n        };\n      });\n      state.userDataLoaded = true;\n    });\n  }\n});\n\n// Actions\nexport const {\n  setLoadArchivedFarmsData\n} = farmsSlice.actions;\nexport default farmsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","farmsConfig","isArchivedPid","priceHelperLpsConfig","fetchFarms","fetchFarmsPrices","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","noAccountFarmConfig","map","farm","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","filter","pid","fetchFarmsPublicDataAsync","pids","farmsToFetch","farmConfig","includes","farmsWithPriceHelpers","concat","farms","farmsWithPrices","farmsWithoutHelperLps","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","farmsSlice","name","reducers","setLoadArchivedFarmsData","state","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","find","farmData","forEach","userDataEl","findIndex","actions","reducer"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/farms/index.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      const loadArchivedFarmsData = action.payload\r\n      state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\nexport default farmsSlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}