{"ast":null,"code":"import request, { gql } from 'graphql-request';\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints';\nimport { ProposalState } from 'state/types';\nimport { simpleRpcProvider } from 'utils/providers';\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE) => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    first,\n    skip,\n    state\n  });\n  return response.proposals;\n};\nexport const getProposal = async id => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    id\n  });\n  return response.proposal;\n};\nexport const getVotes = async (first, skip, where) => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `, {\n    first,\n    skip,\n    where\n  });\n  return response.votes;\n};\nexport const getVoteVerificationStatuses = async (votes, block) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n  const votesToVerify = votes.map(vote => {\n    var _vote$metadata, _vote$metadata2;\n    return {\n      address: vote.voter,\n      verificationHash: (_vote$metadata = vote.metadata) === null || _vote$metadata === void 0 ? void 0 : _vote$metadata.verificationHash,\n      total: (_vote$metadata2 = vote.metadata) === null || _vote$metadata2 === void 0 ? void 0 : _vote$metadata2.votingPower\n    };\n  });\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify\n    })\n  });\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const data = await response.json();\n  return votes.reduce((accum, vote) => {\n    var _data$data$vote$voter;\n    return {\n      ...accum,\n      [vote.id]: ((_data$data$vote$voter = data.data[vote.voter.toLowerCase()]) === null || _data$data$vote$voter === void 0 ? void 0 : _data$data$vote$voter.isValid) === true\n    };\n  }, {});\n};\nexport const getAllVotes = async (proposalId, block, votesPerChunk = 1000) => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes = [];\n    const fetchVoteChunk = async newSkip => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, {\n          proposal: proposalId\n        });\n        if (voteChunk.length === 0) {\n          resolve(votes);\n        } else {\n          votes = [...votes, ...voteChunk];\n          fetchVoteChunk(newSkip + votesPerChunk);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    fetchVoteChunk(0);\n  });\n};","map":{"version":3,"names":["request","gql","SNAPSHOT_API","SNAPSHOT_VOTING_API","ProposalState","simpleRpcProvider","getProposals","first","skip","state","ACTIVE","response","proposals","getProposal","id","proposal","getVotes","where","votes","getVoteVerificationStatuses","block","blockNumber","getBlockNumber","votesToVerify","map","vote","_vote$metadata","_vote$metadata2","address","voter","verificationHash","metadata","total","votingPower","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","reduce","accum","_data$data$vote$voter","toLowerCase","isValid","getAllVotes","proposalId","votesPerChunk","Promise","resolve","reject","fetchVoteChunk","newSkip","voteChunk","length","error"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/voting/helpers.ts"],"sourcesContent":["import request, { gql } from 'graphql-request'\r\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\r\n  const response: { proposals: Proposal[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\r\n        proposals(\r\n          first: $first\r\n          skip: $skip\r\n          orderBy: \"end\"\r\n          orderDirection: desc\r\n          where: { space_in: \"cake.eth\", state: $state }\r\n        ) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, state },\r\n  )\r\n  return response.proposals\r\n}\r\n\r\nexport const getProposal = async (id: string): Promise<Proposal> => {\r\n  const response: { proposal: Proposal } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposal($id: String) {\r\n        proposal(id: $id) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { id },\r\n  )\r\n  return response.proposal\r\n}\r\n\r\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\r\n  const response: { votes: Vote[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\r\n        votes(first: $first, skip: $skip, where: $where) {\r\n          id\r\n          voter\r\n          created\r\n          choice\r\n          space {\r\n            id\r\n            name\r\n          }\r\n          proposal {\r\n            choices\r\n          }\r\n          metadata\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.votes\r\n}\r\n\r\nexport const getVoteVerificationStatuses = async (\r\n  votes: Vote[],\r\n  block?: number,\r\n): Promise<{ [key: string]: boolean }> => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n\r\n  const votesToVerify = votes.map((vote) => ({\r\n    address: vote.voter,\r\n    verificationHash: vote.metadata?.verificationHash,\r\n    total: vote.metadata?.votingPower,\r\n  }))\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      block: blockNumber,\r\n      votes: votesToVerify,\r\n    }),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return votes.reduce((accum, vote) => {\r\n    return {\r\n      ...accum,\r\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\r\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  return new Promise((resolve, reject) => {\r\n    let votes: Vote[] = []\r\n\r\n    const fetchVoteChunk = async (newSkip: number) => {\r\n      try {\r\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\r\n\r\n        if (voteChunk.length === 0) {\r\n          resolve(votes)\r\n        } else {\r\n          votes = [...votes, ...voteChunk]\r\n          fetchVoteChunk(newSkip + votesPerChunk)\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    fetchVoteChunk(0)\r\n  })\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}