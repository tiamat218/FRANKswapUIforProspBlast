{"ast":null,"code":"/* eslint-disable */\n\nfunction wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction waitRandom(min, max) {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)));\n}\n\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled');\n  }\n}\n\n/**\r\n * Throw this error if the function should retry\r\n */\nexport class RetryableError extends Error {}\n\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\nexport function retry(fn, {\n  n,\n  minWait,\n  maxWait\n}) {\n  let completed = false;\n  let rejectCancelled;\n  const promise = new Promise(async (resolve, reject) => {\n    rejectCancelled = reject;\n    while (true) {\n      let result;\n      try {\n        result = await fn();\n        if (!completed) {\n          resolve(result);\n          completed = true;\n        }\n        break;\n      } catch (error) {\n        if (completed) {\n          break;\n        }\n        if (n <= 0 || !(error instanceof RetryableError)) {\n          reject(error);\n          completed = true;\n          break;\n        }\n        n--;\n      }\n      await waitRandom(minWait, maxWait);\n    }\n  });\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return;\n      completed = true;\n      rejectCancelled(new CancelledError());\n    }\n  };\n}\n\n/* eslint-enable */","map":{"version":3,"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","constructor","RetryableError","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","reject","result","error","cancel"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/multicall/retry.ts"],"sourcesContent":["/* eslint-disable */\r\n\r\nfunction wait(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms))\r\n}\r\n\r\nfunction waitRandom(min: number, max: number): Promise<void> {\r\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\r\n}\r\n\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nexport class CancelledError extends Error {\r\n  constructor() {\r\n    super('Cancelled')\r\n  }\r\n}\r\n\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {}\r\n\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry<T>(\r\n  fn: () => Promise<T>,\r\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\r\n): { promise: Promise<T>; cancel: () => void } {\r\n  let completed = false\r\n  let rejectCancelled: (error: Error) => void\r\n  const promise = new Promise<T>(async (resolve, reject) => {\r\n    rejectCancelled = reject\r\n    while (true) {\r\n      let result: T\r\n      try {\r\n        result = await fn()\r\n        if (!completed) {\r\n          resolve(result)\r\n          completed = true\r\n        }\r\n        break\r\n      } catch (error) {\r\n        if (completed) {\r\n          break\r\n        }\r\n        if (n <= 0 || !(error instanceof RetryableError)) {\r\n          reject(error)\r\n          completed = true\r\n          break\r\n        }\r\n        n--\r\n      }\r\n      await waitRandom(minWait, maxWait)\r\n    }\r\n  })\r\n  return {\r\n    promise,\r\n    cancel: () => {\r\n      if (completed) return\r\n      completed = true\r\n      rejectCancelled(new CancelledError())\r\n    },\r\n  }\r\n}\r\n\r\n/* eslint-enable */\r\n"],"mappings":"AAAA;;AAEA,SAASA,IAAIA,CAACC,EAAU,EAAiB;EACvC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAC1D;AAEA,SAASI,UAAUA,CAACC,GAAW,EAAEC,GAAW,EAAiB;EAC3D,OAAOP,IAAI,CAACM,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGF,IAAI,CAACD,GAAG,CAAC,CAAC,EAAEA,GAAG,GAAGD,GAAG,CAAC,CAAC,CAAC;AACvE;;AAEA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,SAASC,KAAK,CAAC;EACxCC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,WAAW,CAAC;EACpB;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASF,KAAK,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,KAAKA,CACnBC,EAAoB,EACpB;EAAEC,CAAC;EAAEC,OAAO;EAAEC;AAAyD,CAAC,EAC3B;EAC7C,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAIC,eAAuC;EAC3C,MAAMC,OAAO,GAAG,IAAIpB,OAAO,CAAI,OAAOC,OAAO,EAAEoB,MAAM,KAAK;IACxDF,eAAe,GAAGE,MAAM;IACxB,OAAO,IAAI,EAAE;MACX,IAAIC,MAAS;MACb,IAAI;QACFA,MAAM,GAAG,MAAMR,EAAE,CAAC,CAAC;QACnB,IAAI,CAACI,SAAS,EAAE;UACdjB,OAAO,CAACqB,MAAM,CAAC;UACfJ,SAAS,GAAG,IAAI;QAClB;QACA;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd,IAAIL,SAAS,EAAE;UACb;QACF;QACA,IAAIH,CAAC,IAAI,CAAC,IAAI,EAAEQ,KAAK,YAAYX,cAAc,CAAC,EAAE;UAChDS,MAAM,CAACE,KAAK,CAAC;UACbL,SAAS,GAAG,IAAI;UAChB;QACF;QACAH,CAAC,EAAE;MACL;MACA,MAAMZ,UAAU,CAACa,OAAO,EAAEC,OAAO,CAAC;IACpC;EACF,CAAC,CAAC;EACF,OAAO;IACLG,OAAO;IACPI,MAAM,EAAEA,CAAA,KAAM;MACZ,IAAIN,SAAS,EAAE;MACfA,SAAS,GAAG,IAAI;MAChBC,eAAe,CAAC,IAAIV,cAAc,CAAC,CAAC,CAAC;IACvC;EACF,CAAC;AACH;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}