{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useReducer } from 'react';\nimport { parseRetreivedNumber } from '../../helpers';\nimport generateTicketNumbers from './generateTicketNumbers';\nconst getInitialState = ({\n  amount,\n  userCurrentTickets\n}) => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets);\n  const randomTicketsAsStringArray = randomTickets.map(ticket => parseRetreivedNumber(ticket.toString()).split(''));\n  const tickets = Array.from({\n    length: amount\n  }, (_, i) => i + 1).map(index => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true\n  }));\n  return {\n    tickets,\n    allComplete: true\n  };\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'updateTicket':\n      {\n        const tickets = [...state.tickets];\n        const {\n          ticketId,\n          newNumbers\n        } = action.payload;\n        const newDuplicates = state.tickets.filter(ticket => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''));\n\n        // If ticket was duplicate but not duplicate anymore with this update\n        // go through previously considered duplicates and remove id of this ticket\n        // from their duplicateWith array\n        const prevDuplicates = tickets[ticketId - 1].duplicateWith;\n        prevDuplicates.forEach(prevTicketId => {\n          if (!newDuplicates.map(({\n            id\n          }) => id).includes(prevTicketId)) {\n            const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith];\n            const indexToRemvoe = dupsToUpdate.findIndex(id => id === ticketId);\n            dupsToUpdate.splice(indexToRemvoe, 1);\n            tickets[prevTicketId - 1] = {\n              ...tickets[prevTicketId - 1],\n              duplicateWith: dupsToUpdate\n            };\n          }\n        });\n\n        // If found duplicates - update their duplicateWith array\n        if (newDuplicates.length !== 0) {\n          newDuplicates.forEach(duplicate => {\n            tickets[duplicate.id - 1] = {\n              ...duplicate,\n              duplicateWith: [...duplicate.duplicateWith, ticketId]\n            };\n          });\n        }\n        const updatedTicket = {\n          id: ticketId,\n          numbers: newNumbers,\n          duplicateWith: newDuplicates.map(ticket => ticket.id),\n          isComplete: newNumbers.join('').length === 6\n        };\n        tickets[ticketId - 1] = updatedTicket;\n\n        // Check if all tickets are filled\n        const allComplete = tickets.every(ticket => ticket.isComplete);\n        return {\n          tickets,\n          allComplete\n        };\n      }\n    case 'reset':\n      return getInitialState({\n        amount: action.payload.amount,\n        userCurrentTickets: action.payload.userCurrentTickets\n      });\n    default:\n      throw new Error();\n  }\n};\nexport const useTicketsReducer = (amount, userCurrentTickets) => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, {\n    amount,\n    userCurrentTickets\n  }, getInitialState);\n  useEffect(() => {\n    dispatch({\n      type: 'reset',\n      payload: {\n        amount,\n        userCurrentTickets\n      }\n    });\n  }, [amount, userCurrentTickets]);\n  const updateTicket = (ticketId, newNumbers) => {\n    dispatch({\n      type: 'updateTicket',\n      payload: {\n        ticketId,\n        newNumbers\n      }\n    });\n  };\n  const randomize = () => {\n    dispatch({\n      type: 'reset',\n      payload: {\n        amount,\n        userCurrentTickets\n      }\n    });\n  };\n  const getTicketsForPurchase = () => {\n    return state.tickets.map(ticket => {\n      const reversedTicket = [...ticket.numbers].map(num => parseInt(num, 10)).reverse();\n      reversedTicket.unshift(1);\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10);\n      return ticketAsNumber;\n    });\n  };\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase];\n};\n_s(useTicketsReducer, \"tOc7EycRfjCpzL+Fsypf13hPhwA=\");","map":{"version":3,"names":["useEffect","useReducer","parseRetreivedNumber","generateTicketNumbers","getInitialState","amount","userCurrentTickets","randomTickets","randomTicketsAsStringArray","map","ticket","toString","split","tickets","Array","from","length","_","i","index","id","numbers","duplicateWith","isComplete","allComplete","reducer","state","action","type","ticketId","newNumbers","payload","newDuplicates","filter","join","prevDuplicates","forEach","prevTicketId","includes","dupsToUpdate","indexToRemvoe","findIndex","splice","duplicate","updatedTicket","every","Error","useTicketsReducer","_s","dispatch","updateTicket","randomize","getTicketsForPurchase","reversedTicket","num","parseInt","reverse","unshift","ticketAsNumber"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx"],"sourcesContent":["import { LotteryTicket } from 'config/constants/types'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { parseRetreivedNumber } from '../../helpers'\r\nimport generateTicketNumbers from './generateTicketNumbers'\r\n\r\nexport interface Ticket {\r\n  id: number\r\n  numbers: string[]\r\n  duplicateWith: number[]\r\n  isComplete: boolean\r\n}\r\n\r\nexport interface TicketsState {\r\n  tickets: Ticket[]\r\n  allComplete: boolean\r\n}\r\n\r\nconst getInitialState = ({\r\n  amount,\r\n  userCurrentTickets,\r\n}: {\r\n  amount: number\r\n  userCurrentTickets: LotteryTicket[]\r\n}): TicketsState => {\r\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\r\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetreivedNumber(ticket.toString()).split(''))\r\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\r\n    id: index,\r\n    numbers: randomTicketsAsStringArray[index - 1],\r\n    duplicateWith: [],\r\n    isComplete: true,\r\n  }))\r\n  return {\r\n    tickets,\r\n    allComplete: true,\r\n  }\r\n}\r\n\r\nconst reducer = (state: TicketsState, action: any) => {\r\n  switch (action.type) {\r\n    case 'updateTicket': {\r\n      const tickets = [...state.tickets]\r\n      const { ticketId, newNumbers } = action.payload\r\n\r\n      const newDuplicates = state.tickets.filter(\r\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\r\n      )\r\n\r\n      // If ticket was duplicate but not duplicate anymore with this update\r\n      // go through previously considered duplicates and remove id of this ticket\r\n      // from their duplicateWith array\r\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\r\n      prevDuplicates.forEach((prevTicketId) => {\r\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\r\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\r\n          const indexToRemvoe = dupsToUpdate.findIndex((id) => id === ticketId)\r\n          dupsToUpdate.splice(indexToRemvoe, 1)\r\n          tickets[prevTicketId - 1] = {\r\n            ...tickets[prevTicketId - 1],\r\n            duplicateWith: dupsToUpdate,\r\n          }\r\n        }\r\n      })\r\n\r\n      // If found duplicates - update their duplicateWith array\r\n      if (newDuplicates.length !== 0) {\r\n        newDuplicates.forEach((duplicate) => {\r\n          tickets[duplicate.id - 1] = {\r\n            ...duplicate,\r\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\r\n          }\r\n        })\r\n      }\r\n\r\n      const updatedTicket = {\r\n        id: ticketId,\r\n        numbers: newNumbers,\r\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\r\n        isComplete: newNumbers.join('').length === 6,\r\n      }\r\n      tickets[ticketId - 1] = updatedTicket\r\n\r\n      // Check if all tickets are filled\r\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\r\n\r\n      return {\r\n        tickets,\r\n        allComplete,\r\n      }\r\n    }\r\n    case 'reset':\r\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\r\n    default:\r\n      throw new Error()\r\n  }\r\n}\r\n\r\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\r\n\r\nexport const useTicketsReducer = (\r\n  amount: number,\r\n  userCurrentTickets: LotteryTicket[],\r\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\r\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }, [amount, userCurrentTickets])\r\n\r\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\r\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\r\n  }\r\n\r\n  const randomize = () => {\r\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\r\n  }\r\n\r\n  const getTicketsForPurchase = () => {\r\n    return state.tickets.map((ticket) => {\r\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\r\n      reversedTicket.unshift(1)\r\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\r\n      return ticketAsNumber\r\n    })\r\n  }\r\n\r\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}