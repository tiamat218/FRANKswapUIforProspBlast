{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/frkul/Documents/swapUI_pancake-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState}from'react';import styled from'styled-components';import{Modal,Text,Flex,Image,Button,Slider,BalanceInput,AutoRenewIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useWeb3React}from'@web3-react/core';import{useAppDispatch}from'state';import{BIG_TEN}from'utils/bigNumber';import{usePriceCakeBusd}from'state/farms/hooks';import{useCakeVault}from'state/pools/hooks';import{useCakeVaultContract}from'hooks/useContract';import useTheme from'hooks/useTheme';import useWithdrawalFeeTimer from'views/Pools/hooks/useWithdrawalFeeTimer';import BigNumber from'bignumber.js';import{getFullDisplayBalance,formatNumber,getDecimalAmount}from'utils/formatBalance';import useToast from'hooks/useToast';import{fetchCakeVaultUserData}from'state/pools';import{getAddress}from'utils/addressHelpers';import{convertCakeToShares}from'../../helpers';import FeeSummary from'./FeeSummary';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const StyledButton=styled(Button)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex-grow: 1;\\n\"])));const callOptions={gasLimit:380000};const VaultStakeModal=_ref=>{let{pool,stakingMax,isRemovingStake=false,onDismiss}=_ref;const dispatch=useAppDispatch();const{stakingToken}=pool;const{account}=useWeb3React();const cakeVaultContract=useCakeVaultContract();const{userData:{lastDepositedTime,userShares},pricePerFullShare}=useCakeVault();const{t}=useTranslation();const{theme}=useTheme();const{toastSuccess,toastError}=useToast();const[pendingTx,setPendingTx]=useState(false);const[stakeAmount,setStakeAmount]=useState('');const[percent,setPercent]=useState(0);const{hasUnstakingFee}=useWithdrawalFeeTimer(parseInt(lastDepositedTime,10),userShares);const cakePriceBusd=usePriceCakeBusd();const usdValueStaked=cakePriceBusd.gt(0)&&stakeAmount?formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()):'';const handleStakeInputChange=input=>{if(input){const convertedInput=new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals));const percentage=Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber());setPercent(percentage>100?100:percentage);}else{setPercent(0);}setStakeAmount(input);};const handleChangePercent=sliderPercent=>{if(sliderPercent>0){const percentageOfStakingMax=stakingMax.dividedBy(100).multipliedBy(sliderPercent);const amountToStake=getFullDisplayBalance(percentageOfStakingMax,stakingToken.decimals,stakingToken.decimals);setStakeAmount(amountToStake);}else{setStakeAmount('');}setPercent(sliderPercent);};const handleWithdrawal=async convertedStakeAmount=>{setPendingTx(true);const shareStakeToWithdraw=convertCakeToShares(convertedStakeAmount,pricePerFullShare);// trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\nconst triggerWithdrawAllThreshold=new BigNumber(1000000000000);const sharesRemaining=userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);const isWithdrawingAll=sharesRemaining.lte(triggerWithdrawAllThreshold);if(isWithdrawingAll){try{const tx=await cakeVaultContract.withdrawAll(callOptions);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Unstaked!'),t('Your earnings have also been harvested to your wallet'));setPendingTx(false);onDismiss();dispatch(fetchCakeVaultUserData({account}));}}catch(error){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setPendingTx(false);}}else{// .toString() being called to fix a BigNumber error in prod\n// as suggested here https://github.com/ChainSafe/web3.js/issues/2077\ntry{const tx=await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(),callOptions);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Unstaked!'),t('Your earnings have also been harvested to your wallet'));setPendingTx(false);onDismiss();dispatch(fetchCakeVaultUserData({account}));}}catch(error){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setPendingTx(false);}}};const handleDeposit=async convertedStakeAmount=>{setPendingTx(true);try{// .toString() being called to fix a BigNumber error in prod\n// as suggested here https://github.com/ChainSafe/web3.js/issues/2077\nconst tx=await cakeVaultContract.deposit(convertedStakeAmount.toString(),callOptions);const receipt=await tx.wait();if(receipt.status){toastSuccess(t('Staked!'),t('Your funds have been staked in the pool'));setPendingTx(false);onDismiss();dispatch(fetchCakeVaultUserData({account}));}}catch(error){toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setPendingTx(false);}};const handleConfirmClick=async()=>{const convertedStakeAmount=getDecimalAmount(new BigNumber(stakeAmount),stakingToken.decimals);if(isRemovingStake){// unstaking\nhandleWithdrawal(convertedStakeAmount);}else{// staking\nhandleDeposit(convertedStakeAmount);}};return/*#__PURE__*/_jsxs(Modal,{title:isRemovingStake?t('Unstake'):t('Stake in Pool'),onDismiss:onDismiss,headerBackground:theme.colors.gradients.cardHeader,children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mb:\"8px\",children:[/*#__PURE__*/_jsxs(Text,{bold:true,children:[isRemovingStake?t('Unstake'):t('Stake'),\":\"]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",minWidth:\"70px\",children:[/*#__PURE__*/_jsx(Image,{src:\"/images/tokens/\".concat(getAddress(stakingToken.address),\".png\"),width:24,height:24,alt:stakingToken.symbol}),/*#__PURE__*/_jsx(Text,{ml:\"4px\",bold:true,children:stakingToken.symbol})]})]}),/*#__PURE__*/_jsx(BalanceInput,{value:stakeAmount,onUserInput:handleStakeInputChange,currencyValue:cakePriceBusd.gt(0)&&\"~\".concat(usdValueStaked||0,\" USD\"),decimals:stakingToken.decimals}),/*#__PURE__*/_jsx(Text,{mt:\"8px\",ml:\"auto\",color:\"textSubtle\",fontSize:\"12px\",mb:\"8px\",children:t('Balance: %balance%',{balance:getFullDisplayBalance(stakingMax,stakingToken.decimals)})}),/*#__PURE__*/_jsx(Slider,{min:0,max:100,value:percent,onValueChanged:handleChangePercent,name:\"stake\",valueLabel:\"\".concat(percent,\"%\"),step:1}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mt:\"8px\",children:[/*#__PURE__*/_jsx(StyledButton,{scale:\"xs\",mx:\"2px\",p:\"4px 16px\",variant:\"tertiary\",onClick:()=>handleChangePercent(25),children:\"25%\"}),/*#__PURE__*/_jsx(StyledButton,{scale:\"xs\",mx:\"2px\",p:\"4px 16px\",variant:\"tertiary\",onClick:()=>handleChangePercent(50),children:\"50%\"}),/*#__PURE__*/_jsx(StyledButton,{scale:\"xs\",mx:\"2px\",p:\"4px 16px\",variant:\"tertiary\",onClick:()=>handleChangePercent(75),children:\"75%\"}),/*#__PURE__*/_jsx(StyledButton,{scale:\"xs\",mx:\"2px\",p:\"4px 16px\",variant:\"tertiary\",onClick:()=>handleChangePercent(100),children:t('Max')})]}),isRemovingStake&&hasUnstakingFee&&/*#__PURE__*/_jsx(FeeSummary,{stakingTokenSymbol:stakingToken.symbol,stakeAmount:stakeAmount}),/*#__PURE__*/_jsx(Button,{isLoading:pendingTx,endIcon:pendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,onClick:handleConfirmClick,disabled:!stakeAmount||parseFloat(stakeAmount)===0,mt:\"24px\",children:pendingTx?t('Confirming'):t('Confirm')}),!isRemovingStake&&/*#__PURE__*/_jsx(Button,{mt:\"8px\",as:\"a\",external:true,href:\"/swap\",variant:\"secondary\",children:t('Get %symbol%',{symbol:stakingToken.symbol})})]});};export default VaultStakeModal;","map":{"version":3,"names":["React","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","useTranslation","useWeb3React","useAppDispatch","BIG_TEN","usePriceCakeBusd","useCakeVault","useCakeVaultContract","useTheme","useWithdrawalFeeTimer","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","useToast","fetchCakeVaultUserData","getAddress","convertCakeToShares","FeeSummary","jsxs","_jsxs","jsx","_jsx","StyledButton","_templateObject","_taggedTemplateLiteral","callOptions","gasLimit","VaultStakeModal","_ref","pool","stakingMax","isRemovingStake","onDismiss","dispatch","stakingToken","account","cakeVaultContract","userData","lastDepositedTime","userShares","pricePerFullShare","t","theme","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","hasUnstakingFee","parseInt","cakePriceBusd","usdValueStaked","gt","times","toNumber","handleStakeInputChange","input","convertedInput","multipliedBy","pow","decimals","percentage","Math","floor","dividedBy","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","sharesAsBigNumber","isWithdrawingAll","lte","tx","withdrawAll","receipt","wait","status","error","withdraw","toString","handleDeposit","deposit","handleConfirmClick","title","headerBackground","colors","gradients","cardHeader","children","alignItems","justifyContent","mb","bold","minWidth","src","concat","address","width","height","alt","symbol","ml","value","onUserInput","currencyValue","mt","color","fontSize","balance","min","max","onValueChanged","name","valueLabel","step","scale","mx","p","variant","onClick","stakingTokenSymbol","isLoading","endIcon","spin","disabled","parseFloat","as","external","href"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst callOptions = {\r\n  gasLimit: 380000,\r\n}\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      try {\r\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      try {\r\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    try {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      handleWithdrawal(convertedStakeAmount)\r\n    } else {\r\n      // staking\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href=\"/swap\" variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}