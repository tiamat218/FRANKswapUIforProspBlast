{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\CollectWinningsPopup.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled, { css, keyframes } from 'styled-components';\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit';\nimport { CSSTransition } from 'react-transition-group';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBetHistory } from 'state/predictions/helpers';\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks';\nimport { useAppDispatch } from 'state';\nimport { setHistoryPaneState } from 'state/predictions';\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`;\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`;\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`;\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`;\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`;\n_c = Wrapper;\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({\n  theme\n}) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`;\n_c2 = Popup;\n\nconst CollectWinningsPopup = () => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const ref = useRef(null);\n  const timer = useRef(null);\n  const {\n    account\n  } = useWeb3React();\n  const predictionStatus = useGetPredictionsStatus();\n  const isHistoryPaneOpen = useIsHistoryPaneOpen();\n  const dispatch = useAppDispatch();\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true));\n  };\n\n  const handleClick = () => {\n    setIsOpen(false);\n    clearInterval(timer.current);\n  }; // Check user's history for unclaimed winners\n\n\n  useEffect(() => {\n    let isCancelled = false;\n\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({\n          user: account.toLowerCase(),\n          claimed: false\n        });\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter(bet => {\n            return bet.position === bet.round.position;\n          });\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0);\n          }\n        }\n      }, 30000);\n    }\n\n    return () => {\n      clearInterval(timer.current);\n      isCancelled = true;\n    };\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen]); // Any time the history pane is open make sure the popup closes\n\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false);\n    }\n  }, [isHistoryPaneOpen, setIsOpen]);\n  return /*#__PURE__*/_jsxDEV(CSSTransition, {\n    in: isOpen,\n    unmountOnExit: true,\n    nodeRef: ref,\n    timeout: 1000,\n    classNames: \"popup\",\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(TrophyGoldIcon, {\n          width: \"64px\",\n          style: {\n            flex: 'none'\n          },\n          mr: \"8px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            flex: 1\n          },\n          onClick: handleOpenHistory,\n          children: t('Collect Winnings')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          onClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            color: \"primary\",\n            width: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectWinningsPopup, \"TT+Gl0Y0Ar9NFyk+oWitRi0L6Bk=\", false, function () {\n  return [useTranslation, useWeb3React, useGetPredictionsStatus, useIsHistoryPaneOpen, useAppDispatch];\n});\n\n_c3 = CollectWinningsPopup;\nexport default CollectWinningsPopup;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Popup\");\n$RefreshReg$(_c3, \"CollectWinningsPopup\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/CollectWinningsPopup.tsx"],"names":["React","useEffect","useRef","useState","useWeb3React","styled","css","keyframes","Button","CloseIcon","IconButton","TrophyGoldIcon","CSSTransition","useTranslation","getBetHistory","useGetPredictionsStatus","useIsHistoryPaneOpen","useAppDispatch","setHistoryPaneState","bounceInKeyframe","bounceOutKeyframe","bounceInAnimation","bounceOutAnimation","Wrapper","div","theme","mediaQueries","md","Popup","colors","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","ref","timer","account","predictionStatus","isHistoryPaneOpen","dispatch","handleOpenHistory","handleClick","clearInterval","current","isCancelled","setInterval","bets","user","toLowerCase","claimed","winnerBets","filter","bet","position","round","length","flex"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n"]},"metadata":{},"sourceType":"module"}