{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\swapUI_pancake-frontend\\\\src\\\\views\\\\TradingCompetition\\\\components\\\\BattleCta\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Flex, LaurelLeftIcon, LaurelRightIcon, Button, CheckmarkCircleIcon, useWalletModal, useModal } from '@pancakeswap/uikit';\nimport { useHistory } from 'react-router-dom';\nimport useAuth from 'hooks/useAuth';\nimport { useTranslation } from 'contexts/Localization';\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases';\nimport RegisterModal from '../RegisterModal';\nimport ClaimModal from '../ClaimModal';\nimport { Heading2Text } from '../CompetitionHeadingText';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  display: inline-flex;\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\n\n  svg {\n    margin-bottom: 6px;\n    height: 32px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.warning};\n  }\n`;\n_c = StyledCard;\nconst StyledButton = styled(Button)`\n  margin: 16px 20px 0;\n  z-index: 200;\n\n  svg {\n    margin: 0 4px 0 0;\n    height: 20px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.textDisabled};\n  }\n`;\n_c2 = StyledButton;\nconst StyledHeadingText = styled(Heading2Text)`\n  white-space: normal;\n`;\n_c3 = StyledHeadingText;\nconst BattleCta = ({\n  userTradingInformation,\n  currentPhase,\n  account,\n  isCompetitionLive,\n  profile,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  isLoading,\n  hasCompetitionEnded,\n  onRegisterSuccess,\n  onClaimSuccess\n}) => {\n  _s();\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const {\n    login,\n    logout\n  } = useAuth();\n  const {\n    onPresentConnectModal\n  } = useWalletModal(login, logout);\n  const [onPresentRegisterModal] = useModal( /*#__PURE__*/_jsxDEV(RegisterModal, {\n    profile: profile,\n    onRegisterSuccess: onRegisterSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), false);\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimModal, {\n    userTradingInformation: userTradingInformation,\n    onClaimSuccess: onClaimSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this), false);\n  const {\n    hasRegistered,\n    hasUserClaimed\n  } = userTradingInformation;\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded;\n  const isButtonDisabled = Boolean(isLoading || currentPhase.state === OVER || registeredAndNotStarted || finishedAndPrizesClaimed || finishedAndNothingToClaim);\n  const getHeadingText = () => {\n    // Competition live\n    if (isCompetitionLive) {\n      return t('Now Live!');\n    }\n    // Competition finished. Rewards being calculated\n    if (currentPhase.state === FINISHED) {\n      return `${t('Calculating prizes')}...`;\n    }\n    // All competition finished states\n    if (hasCompetitionEnded) {\n      return `${t('Finished')}!`;\n    }\n    // Competition not started\n    return t('Starting Soon');\n  };\n  const getButtonText = () => {\n    // No wallet connected\n    if (!account) {\n      return t('Connect Wallet');\n    }\n    // User not registered\n    if (!hasRegistered) {\n      return t('I want to Battle!');\n    }\n    // User registered and competition live\n    if (isCompetitionLive) {\n      return t('Trade Now');\n    }\n\n    // User registered and competition finished\n    if (hasCompetitionEnded) {\n      // Claim period has ended\n      if (currentPhase.state === OVER) {\n        return t('Claim period over');\n      }\n      // User has prizes to claim\n      if (userCanClaimPrizes) {\n        return t('Claim prizes');\n      }\n      // User has already claimed prizes\n      if (hasUserClaimed) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), \" \", t('Prizes Claimed!')]\n        }, void 0, true);\n      }\n      // User has nothing to claim\n      return t('Nothing to claim');\n    }\n\n    // User registered but competition has not started\n    if (!isCompetitionLive) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), \" \", t('Registered!')]\n      }, void 0, true);\n    }\n\n    // May be useful for debugging - if somehow none of the above conditions are met\n    return 'Whoopsie';\n  };\n  const handleCtaClick = () => {\n    // All conditions when button isn't disabled\n\n    // No wallet connected\n    if (!account) {\n      onPresentConnectModal();\n    }\n    // Wallet connected but user not registered\n    if (account && !hasRegistered) {\n      onPresentRegisterModal();\n    }\n    // Registered and competition is live\n    if (hasRegistered && isCompetitionLive) {\n      history.push('/swap');\n    }\n    // Registered and competition has finished\n    if (hasRegistered && hasCompetitionEnded) {\n      onPresentClaimModal();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(StyledHeadingText, {\n          children: getHeadingText()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), currentPhase.state !== FINISHED && /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(LaurelLeftIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n            disabled: isButtonDisabled,\n            onClick: () => handleCtaClick(),\n            children: getButtonText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LaurelRightIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(BattleCta, \"D0hK3FOERzjT0FzSjsaV95Y3M1U=\", false, function () {\n  return [useHistory, useTranslation, useAuth, useWalletModal, useModal, useModal];\n});\n_c4 = BattleCta;\nexport default BattleCta;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledButton\");\n$RefreshReg$(_c3, \"StyledHeadingText\");\n$RefreshReg$(_c4, \"BattleCta\");","map":{"version":3,"names":["React","styled","Card","CardBody","Flex","LaurelLeftIcon","LaurelRightIcon","Button","CheckmarkCircleIcon","useWalletModal","useModal","useHistory","useAuth","useTranslation","FINISHED","OVER","RegisterModal","ClaimModal","Heading2Text","jsxDEV","_jsxDEV","Fragment","_Fragment","StyledCard","theme","colors","warning","_c","StyledButton","textDisabled","_c2","StyledHeadingText","_c3","BattleCta","userTradingInformation","currentPhase","account","isCompetitionLive","profile","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","isLoading","hasCompetitionEnded","onRegisterSuccess","onClaimSuccess","_s","history","t","login","logout","onPresentConnectModal","onPresentRegisterModal","fileName","_jsxFileName","lineNumber","columnNumber","onPresentClaimModal","hasRegistered","hasUserClaimed","registeredAndNotStarted","isButtonDisabled","Boolean","state","getHeadingText","getButtonText","children","handleCtaClick","push","flexDirection","justifyContent","alignItems","disabled","onClick","_c4","$RefreshReg$"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/TradingCompetition/components/BattleCta/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  LaurelLeftIcon,\r\n  LaurelRightIcon,\r\n  Button,\r\n  CheckmarkCircleIcon,\r\n  useWalletModal,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FINISHED, OVER } from 'config/constants/trading-competition/easterPhases'\r\nimport RegisterModal from '../RegisterModal'\r\nimport ClaimModal from '../ClaimModal'\r\nimport { Heading2Text } from '../CompetitionHeadingText'\r\nimport { CompetitionProps } from '../../types'\r\n\r\nconst StyledCard = styled(Card)`\r\n  display: inline-flex;\r\n  background: linear-gradient(180deg, #7645d9 0%, #452a7a 100%);\r\n\r\n  svg {\r\n    margin-bottom: 6px;\r\n    height: 32px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.warning};\r\n  }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n  margin: 16px 20px 0;\r\n  z-index: 200;\r\n\r\n  svg {\r\n    margin: 0 4px 0 0;\r\n    height: 20px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.textDisabled};\r\n  }\r\n`\r\n\r\nconst StyledHeadingText = styled(Heading2Text)`\r\n  white-space: normal;\r\n`\r\n\r\nconst BattleCta: React.FC<CompetitionProps> = ({\r\n  userTradingInformation,\r\n  currentPhase,\r\n  account,\r\n  isCompetitionLive,\r\n  profile,\r\n  userCanClaimPrizes,\r\n  finishedAndPrizesClaimed,\r\n  finishedAndNothingToClaim,\r\n  isLoading,\r\n  hasCompetitionEnded,\r\n  onRegisterSuccess,\r\n  onClaimSuccess,\r\n}) => {\r\n  const history = useHistory()\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n  const [onPresentRegisterModal] = useModal(\r\n    <RegisterModal profile={profile} onRegisterSuccess={onRegisterSuccess} />,\r\n    false,\r\n  )\r\n  const [onPresentClaimModal] = useModal(\r\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\r\n    false,\r\n  )\r\n  const { hasRegistered, hasUserClaimed } = userTradingInformation\r\n  const registeredAndNotStarted = hasRegistered && !isCompetitionLive && !hasCompetitionEnded\r\n\r\n  const isButtonDisabled = Boolean(\r\n    isLoading ||\r\n      currentPhase.state === OVER ||\r\n      registeredAndNotStarted ||\r\n      finishedAndPrizesClaimed ||\r\n      finishedAndNothingToClaim,\r\n  )\r\n\r\n  const getHeadingText = () => {\r\n    // Competition live\r\n    if (isCompetitionLive) {\r\n      return t('Now Live!')\r\n    }\r\n    // Competition finished. Rewards being calculated\r\n    if (currentPhase.state === FINISHED) {\r\n      return `${t('Calculating prizes')}...`\r\n    }\r\n    // All competition finished states\r\n    if (hasCompetitionEnded) {\r\n      return `${t('Finished')}!`\r\n    }\r\n    // Competition not started\r\n    return t('Starting Soon')\r\n  }\r\n\r\n  const getButtonText = () => {\r\n    // No wallet connected\r\n    if (!account) {\r\n      return t('Connect Wallet')\r\n    }\r\n    // User not registered\r\n    if (!hasRegistered) {\r\n      return t('I want to Battle!')\r\n    }\r\n    // User registered and competition live\r\n    if (isCompetitionLive) {\r\n      return t('Trade Now')\r\n    }\r\n\r\n    // User registered and competition finished\r\n    if (hasCompetitionEnded) {\r\n      // Claim period has ended\r\n      if (currentPhase.state === OVER) {\r\n        return t('Claim period over')\r\n      }\r\n      // User has prizes to claim\r\n      if (userCanClaimPrizes) {\r\n        return t('Claim prizes')\r\n      }\r\n      // User has already claimed prizes\r\n      if (hasUserClaimed) {\r\n        return (\r\n          <>\r\n            <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\r\n          </>\r\n        )\r\n      }\r\n      // User has nothing to claim\r\n      return t('Nothing to claim')\r\n    }\r\n\r\n    // User registered but competition has not started\r\n    if (!isCompetitionLive) {\r\n      return (\r\n        <>\r\n          <CheckmarkCircleIcon /> {t('Registered!')}\r\n        </>\r\n      )\r\n    }\r\n\r\n    // May be useful for debugging - if somehow none of the above conditions are met\r\n    return 'Whoopsie'\r\n  }\r\n\r\n  const handleCtaClick = () => {\r\n    // All conditions when button isn't disabled\r\n\r\n    // No wallet connected\r\n    if (!account) {\r\n      onPresentConnectModal()\r\n    }\r\n    // Wallet connected but user not registered\r\n    if (account && !hasRegistered) {\r\n      onPresentRegisterModal()\r\n    }\r\n    // Registered and competition is live\r\n    if (hasRegistered && isCompetitionLive) {\r\n      history.push('/swap')\r\n    }\r\n    // Registered and competition has finished\r\n    if (hasRegistered && hasCompetitionEnded) {\r\n      onPresentClaimModal()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardBody>\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n          <StyledHeadingText>{getHeadingText()}</StyledHeadingText>\r\n          {/* Hide button if in the pre-claim, FINISHED phase */}\r\n          {currentPhase.state !== FINISHED && (\r\n            <Flex alignItems=\"flex-end\">\r\n              <LaurelLeftIcon />\r\n              <StyledButton disabled={isButtonDisabled} onClick={() => handleCtaClick()}>\r\n                {getButtonText()}\r\n              </StyledButton>\r\n              <LaurelRightIcon />\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default BattleCta\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SACEC,IAAI,EACJC,QAAQ,EACRC,IAAI,EACJC,cAAc,EACdC,eAAe,EACfC,MAAM,EACNC,mBAAmB,EACnBC,cAAc,EACdC,QAAQ,QACH,oBAAoB;AAC3B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,OAAO,MAAM,eAAe;AACnC,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,QAAQ,EAAEC,IAAI,QAAQ,mDAAmD;AAClF,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,YAAY,QAAQ,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGxD,MAAMC,UAAU,GAAGtB,MAAM,CAACC,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;EAAEsB;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACC,OAAO;AAC/C;AACA,CAAC;AAAAC,EAAA,GAVKJ,UAAU;AAYhB,MAAMK,YAAY,GAAG3B,MAAM,CAACM,MAAM,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;EAAEiB;AAAM,CAAC,KAAKA,KAAK,CAACC,MAAM,CAACI,YAAY;AACpD;AACA,CAAC;AAAAC,GAAA,GAVKF,YAAY;AAYlB,MAAMG,iBAAiB,GAAG9B,MAAM,CAACiB,YAAY,CAAC;AAC9C;AACA,CAAC;AAAAc,GAAA,GAFKD,iBAAiB;AAIvB,MAAME,SAAqC,GAAGA,CAAC;EAC7CC,sBAAsB;EACtBC,YAAY;EACZC,OAAO;EACPC,iBAAiB;EACjBC,OAAO;EACPC,kBAAkB;EAClBC,wBAAwB;EACxBC,yBAAyB;EACzBC,SAAS;EACTC,mBAAmB;EACnBC,iBAAiB;EACjBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,OAAO,GAAGpC,UAAU,CAAC,CAAC;EAC5B,MAAM;IAAEqC;EAAE,CAAC,GAAGnC,cAAc,CAAC,CAAC;EAC9B,MAAM;IAAEoC,KAAK;IAAEC;EAAO,CAAC,GAAGtC,OAAO,CAAC,CAAC;EACnC,MAAM;IAAEuC;EAAsB,CAAC,GAAG1C,cAAc,CAACwC,KAAK,EAAEC,MAAM,CAAC;EAC/D,MAAM,CAACE,sBAAsB,CAAC,GAAG1C,QAAQ,eACvCU,OAAA,CAACJ,aAAa;IAACsB,OAAO,EAAEA,OAAQ;IAACM,iBAAiB,EAAEA;EAAkB;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,EACzE,KACF,CAAC;EACD,MAAM,CAACC,mBAAmB,CAAC,GAAG/C,QAAQ,eACpCU,OAAA,CAACH,UAAU;IAACiB,sBAAsB,EAAEA,sBAAuB;IAACW,cAAc,EAAEA;EAAe;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,EAC9F,KACF,CAAC;EACD,MAAM;IAAEE,aAAa;IAAEC;EAAe,CAAC,GAAGzB,sBAAsB;EAChE,MAAM0B,uBAAuB,GAAGF,aAAa,IAAI,CAACrB,iBAAiB,IAAI,CAACM,mBAAmB;EAE3F,MAAMkB,gBAAgB,GAAGC,OAAO,CAC9BpB,SAAS,IACPP,YAAY,CAAC4B,KAAK,KAAKhD,IAAI,IAC3B6C,uBAAuB,IACvBpB,wBAAwB,IACxBC,yBACJ,CAAC;EAED,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,IAAI3B,iBAAiB,EAAE;MACrB,OAAOW,CAAC,CAAC,WAAW,CAAC;IACvB;IACA;IACA,IAAIb,YAAY,CAAC4B,KAAK,KAAKjD,QAAQ,EAAE;MACnC,OAAO,GAAGkC,CAAC,CAAC,oBAAoB,CAAC,KAAK;IACxC;IACA;IACA,IAAIL,mBAAmB,EAAE;MACvB,OAAO,GAAGK,CAAC,CAAC,UAAU,CAAC,GAAG;IAC5B;IACA;IACA,OAAOA,CAAC,CAAC,eAAe,CAAC;EAC3B,CAAC;EAED,MAAMiB,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,IAAI,CAAC7B,OAAO,EAAE;MACZ,OAAOY,CAAC,CAAC,gBAAgB,CAAC;IAC5B;IACA;IACA,IAAI,CAACU,aAAa,EAAE;MAClB,OAAOV,CAAC,CAAC,mBAAmB,CAAC;IAC/B;IACA;IACA,IAAIX,iBAAiB,EAAE;MACrB,OAAOW,CAAC,CAAC,WAAW,CAAC;IACvB;;IAEA;IACA,IAAIL,mBAAmB,EAAE;MACvB;MACA,IAAIR,YAAY,CAAC4B,KAAK,KAAKhD,IAAI,EAAE;QAC/B,OAAOiC,CAAC,CAAC,mBAAmB,CAAC;MAC/B;MACA;MACA,IAAIT,kBAAkB,EAAE;QACtB,OAAOS,CAAC,CAAC,cAAc,CAAC;MAC1B;MACA;MACA,IAAIW,cAAc,EAAE;QAClB,oBACEvC,OAAA,CAAAE,SAAA;UAAA4C,QAAA,gBACE9C,OAAA,CAACZ,mBAAmB;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC,EAACR,CAAC,CAAC,iBAAiB,CAAC;QAAA,eAC7C,CAAC;MAEP;MACA;MACA,OAAOA,CAAC,CAAC,kBAAkB,CAAC;IAC9B;;IAEA;IACA,IAAI,CAACX,iBAAiB,EAAE;MACtB,oBACEjB,OAAA,CAAAE,SAAA;QAAA4C,QAAA,gBACE9C,OAAA,CAACZ,mBAAmB;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,KAAC,EAACR,CAAC,CAAC,aAAa,CAAC;MAAA,eACzC,CAAC;IAEP;;IAEA;IACA,OAAO,UAAU;EACnB,CAAC;EAED,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAC3B;;IAEA;IACA,IAAI,CAAC/B,OAAO,EAAE;MACZe,qBAAqB,CAAC,CAAC;IACzB;IACA;IACA,IAAIf,OAAO,IAAI,CAACsB,aAAa,EAAE;MAC7BN,sBAAsB,CAAC,CAAC;IAC1B;IACA;IACA,IAAIM,aAAa,IAAIrB,iBAAiB,EAAE;MACtCU,OAAO,CAACqB,IAAI,CAAC,OAAO,CAAC;IACvB;IACA;IACA,IAAIV,aAAa,IAAIf,mBAAmB,EAAE;MACxCc,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC;EAED,oBACErC,OAAA,CAACG,UAAU;IAAA2C,QAAA,eACT9C,OAAA,CAACjB,QAAQ;MAAA+D,QAAA,eACP9C,OAAA,CAAChB,IAAI;QAACiE,aAAa,EAAC,QAAQ;QAACC,cAAc,EAAC,QAAQ;QAACC,UAAU,EAAC,QAAQ;QAAAL,QAAA,gBACtE9C,OAAA,CAACW,iBAAiB;UAAAmC,QAAA,EAAEF,cAAc,CAAC;QAAC;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CAAC,EAExDrB,YAAY,CAAC4B,KAAK,KAAKjD,QAAQ,iBAC9BM,OAAA,CAAChB,IAAI;UAACmE,UAAU,EAAC,UAAU;UAAAL,QAAA,gBACzB9C,OAAA,CAACf,cAAc;YAAAgD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClBpC,OAAA,CAACQ,YAAY;YAAC4C,QAAQ,EAAEX,gBAAiB;YAACY,OAAO,EAAEA,CAAA,KAAMN,cAAc,CAAC,CAAE;YAAAD,QAAA,EACvED,aAAa,CAAC;UAAC;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACfpC,OAAA,CAACd,eAAe;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CACP;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEjB,CAAC;AAAAV,EAAA,CA/IKb,SAAqC;EAAA,QAczBtB,UAAU,EACZE,cAAc,EACFD,OAAO,EACCH,cAAc,EACfC,QAAQ,EAIXA,QAAQ;AAAA;AAAAgE,GAAA,GAtBlCzC,SAAqC;AAiJ3C,eAAeA,SAAS;AAAA,IAAAN,EAAA,EAAAG,GAAA,EAAAE,GAAA,EAAA0C,GAAA;AAAAC,YAAA,CAAAhD,EAAA;AAAAgD,YAAA,CAAA7C,GAAA;AAAA6C,YAAA,CAAA3C,GAAA;AAAA2C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}