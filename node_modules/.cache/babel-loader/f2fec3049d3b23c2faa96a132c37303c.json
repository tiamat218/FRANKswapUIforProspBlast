{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useWeb3React}from'@web3-react/core';import{useProfile}from'state/profile/hooks';import{useEasterNftContract}from'hooks/useContract';import NftCard from'./index';/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";export const teamNftMap={'easter-storm':1,'easter-flipper':2,'easter-caker':3};const EasterNftCard=_ref=>{let{nft,...props}=_ref;const[isClaimable,setIsClaimable]=useState(false);const{account}=useWeb3React();const{profile}=useProfile();const{identifier}=nft;const{team}=profile!==null&&profile!==void 0?profile:{};const easterNftContract=useEasterNftContract();const handleClaim=async()=>{const response=await easterNftContract.mintNFT();await response.wait();return response;};useEffect(()=>{const fetchClaimStatus=async()=>{const canClaim=await easterNftContract.canClaim(account);// Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\nsetIsClaimable(canClaim?team.id===teamNftMap[identifier]:false);};if(account&&team){fetchClaimStatus();}},[account,identifier,team,easterNftContract,setIsClaimable]);return/*#__PURE__*/_jsx(NftCard,{nft:nft,...props,canClaim:isClaimable,onClaim:handleClaim});};export default EasterNftCard;","map":{"version":3,"names":["React","useEffect","useState","useWeb3React","useProfile","useEasterNftContract","NftCard","jsx","_jsx","teamNftMap","EasterNftCard","_ref","nft","props","isClaimable","setIsClaimable","account","profile","identifier","team","easterNftContract","handleClaim","response","mintNFT","wait","fetchClaimStatus","canClaim","id","onClaim"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Collectibles/components/NftCard/EasterNftCard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useEasterNftContract } from 'hooks/useContract'\r\nimport NftCard, { NftCardProps } from './index'\r\n\r\n/**\r\n * A map of NFT bunny Ids to Team ids\r\n * [identifier]: teamId\r\n */\r\nexport const teamNftMap = {\r\n  'easter-storm': 1,\r\n  'easter-flipper': 2,\r\n  'easter-caker': 3,\r\n}\r\n\r\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\r\n  const [isClaimable, setIsClaimable] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { profile } = useProfile()\r\n  const { identifier } = nft\r\n  const { team } = profile ?? {}\r\n  const easterNftContract = useEasterNftContract()\r\n\r\n  const handleClaim = async () => {\r\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\r\n    await response.wait()\r\n    return response\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchClaimStatus = async () => {\r\n      const canClaim = await easterNftContract.canClaim(account)\r\n\r\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\r\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\r\n    }\r\n\r\n    if (account && team) {\r\n      fetchClaimStatus()\r\n    }\r\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\r\n\r\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\r\n}\r\n\r\nexport default EasterNftCard\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,YAAY,KAAQ,kBAAkB,CAE/C,OAASC,UAAU,KAAQ,qBAAqB,CAChD,OAASC,oBAAoB,KAAQ,mBAAmB,CACxD,MAAO,CAAAC,OAAO,KAAwB,SAAS,CAE/C;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,yBAIA,MAAO,MAAM,CAAAC,UAAU,CAAG,CACxB,cAAc,CAAE,CAAC,CACjB,gBAAgB,CAAE,CAAC,CACnB,cAAc,CAAE,CAClB,CAAC,CAED,KAAM,CAAAC,aAAqC,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,GAAG,CAAE,GAAGC,KAAM,CAAC,CAAAF,IAAA,CAC9D,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAEc,OAAQ,CAAC,CAAGb,YAAY,CAAC,CAAC,CAClC,KAAM,CAAEc,OAAQ,CAAC,CAAGb,UAAU,CAAC,CAAC,CAChC,KAAM,CAAEc,UAAW,CAAC,CAAGN,GAAG,CAC1B,KAAM,CAAEO,IAAK,CAAC,CAAGF,OAAO,SAAPA,OAAO,UAAPA,OAAO,CAAI,CAAC,CAAC,CAC9B,KAAM,CAAAG,iBAAiB,CAAGf,oBAAoB,CAAC,CAAC,CAEhD,KAAM,CAAAgB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,KAAM,CAAAC,QAA8C,CAAG,KAAM,CAAAF,iBAAiB,CAACG,OAAO,CAAC,CAAC,CACxF,KAAM,CAAAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CACrB,MAAO,CAAAF,QAAQ,CACjB,CAAC,CAEDrB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAwB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,iBAAiB,CAACM,QAAQ,CAACV,OAAO,CAAC,CAE1D;AACAD,cAAc,CAACW,QAAQ,CAAGP,IAAI,CAACQ,EAAE,GAAKlB,UAAU,CAACS,UAAU,CAAC,CAAG,KAAK,CAAC,CACvE,CAAC,CAED,GAAIF,OAAO,EAAIG,IAAI,CAAE,CACnBM,gBAAgB,CAAC,CAAC,CACpB,CACF,CAAC,CAAE,CAACT,OAAO,CAAEE,UAAU,CAAEC,IAAI,CAAEC,iBAAiB,CAAEL,cAAc,CAAC,CAAC,CAElE,mBAAOP,IAAA,CAACF,OAAO,EAACM,GAAG,CAAEA,GAAI,IAAKC,KAAK,CAAEa,QAAQ,CAAEZ,WAAY,CAACc,OAAO,CAAEP,WAAY,CAAE,CAAC,CACtF,CAAC,CAED,cAAe,CAAAX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}