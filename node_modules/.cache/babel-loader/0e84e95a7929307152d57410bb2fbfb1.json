{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { useBlock } from 'state/block/hooks';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV2Abi from 'config/abi/ifoV2.json';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getStatus } from '../helpers';\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000;\nconst formatPool = pool => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO\n});\n\n/**\r\n * Gets all public data of an IFO\r\n */\nconst useGetPublicIfoData = ifo => {\n  _s();\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [{\n      address,\n      name: 'startBlock'\n    }, {\n      address,\n      name: 'endBlock'\n    }, {\n      address,\n      name: 'viewPoolInformation',\n      params: [0]\n    }, {\n      address,\n      name: 'viewPoolInformation',\n      params: [1]\n    }, {\n      address,\n      name: 'viewPoolTaxRateOverflow',\n      params: [1]\n    }, {\n      address,\n      name: 'numberPoints'\n    }];\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(ifoV2Abi, ifoCalls);\n    const poolBasicFormatted = formatPool(poolBasic);\n    const poolUnlimitedFormatted = formatPool(poolUnlimited);\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0;\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0;\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0;\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock;\n\n    // Calculate the total progress until finished or until start\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: {\n        ...poolBasicFormatted,\n        taxRate: 0\n      },\n      poolUnlimited: {\n        ...poolUnlimitedFormatted,\n        taxRate: taxRateNum\n      },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0\n    }));\n  }, [address, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData, fastRefresh]);\n  return {\n    ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n_s(useGetPublicIfoData, \"ajVxDbMo7A/XTfpLiIzJzSjnBc4=\", false, function () {\n  return [useLpTokenPrice, useRefresh, useBlock];\n});\nexport default useGetPublicIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useRefresh","multicallv2","ifoV2Abi","BIG_ZERO","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","toString","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","_s","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","currentBlock","fetchIfoData","ifoCalls","name","params","startBlock","endBlock","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","div","totalBlocks","prev","currencyPriceInUSD"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v2/useGetPublicIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus } from 'config/constants/types'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\r\n// 1,000,000,000 / 100\r\nconst TAX_PRECISION = 10000000000\r\n\r\nconst formatPool = (pool) => ({\r\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\r\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\r\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\r\n  hasTax: pool ? pool[3] : false,\r\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\r\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\r\n})\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  const [state, setState] = useState({\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    poolBasic: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    poolUnlimited: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: 0,\r\n  })\r\n  const { currentBlock } = useBlock()\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = [\r\n      {\r\n        address,\r\n        name: 'startBlock',\r\n      },\r\n      {\r\n        address,\r\n        name: 'endBlock',\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolInformation',\r\n        params: [0],\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolInformation',\r\n        params: [1],\r\n      },\r\n      {\r\n        address,\r\n        name: 'viewPoolTaxRateOverflow',\r\n        params: [1],\r\n      },\r\n      {\r\n        address,\r\n        name: 'numberPoints',\r\n      },\r\n    ]\r\n\r\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(\r\n      ifoV2Abi,\r\n      ifoCalls,\r\n    )\r\n\r\n    const poolBasicFormatted = formatPool(poolBasic)\r\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\r\n\r\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\r\n\r\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n    const totalBlocks = endBlockNum - startBlockNum\r\n    const blocksRemaining = endBlockNum - currentBlock\r\n\r\n    // Calculate the total progress until finished or until start\r\n    const progress =\r\n      currentBlock > startBlockNum\r\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n    setState((prev) => ({\r\n      ...prev,\r\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\r\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\r\n      status,\r\n      progress,\r\n      blocksRemaining,\r\n      startBlockNum,\r\n      endBlockNum,\r\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\r\n    }))\r\n  }, [address, currentBlock, releaseBlockNumber])\r\n\r\n  useEffect(() => {\r\n    fetchIfoData()\r\n  }, [fetchIfoData, fastRefresh])\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}