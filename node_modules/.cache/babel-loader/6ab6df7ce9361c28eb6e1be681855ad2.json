{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import{useRouteMatch,Link}from'react-router-dom';import styled from'styled-components';import{ButtonMenu,ButtonMenuItem,Toggle,Text,NotificationDot}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import ToggleView from'./ToggleView/ToggleView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ToggleWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  margin-left: 10px;\\n\\n  \",\" {\\n    margin-left: 8px;\\n  }\\n\"])),Text);const ViewControls=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex-wrap: wrap;\\n  justify-content: space-between;\\n  display: flex;\\n  align-items: center;\\n  width: 100%;\\n\\n  > div {\\n    padding: 8px 0px;\\n  }\\n\\n  \",\" {\\n    justify-content: flex-start;\\n    width: auto;\\n\\n    > div {\\n      padding: 0;\\n    }\\n  }\\n\"])),_ref=>{let{theme}=_ref;return theme.mediaQueries.sm;});const Wrapper=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  a {\\n    padding-left: 12px;\\n    padding-right: 12px;\\n  }\\n\\n  \",\" {\\n    margin-left: 16px;\\n  }\\n\"])),_ref2=>{let{theme}=_ref2;return theme.mediaQueries.sm;});const PoolTabButtons=_ref3=>{let{stakedOnly,setStakedOnly,hasStakeInFinishedPools,viewMode,setViewMode}=_ref3;const{url,isExact}=useRouteMatch();const{t}=useTranslation();const viewModeToggle=/*#__PURE__*/_jsx(ToggleView,{viewMode:viewMode,onToggle:mode=>setViewMode(mode)});const liveOrFinishedSwitch=/*#__PURE__*/_jsx(Wrapper,{children:/*#__PURE__*/_jsxs(ButtonMenu,{activeIndex:isExact?0:1,scale:\"sm\",variant:\"subtle\",children:[/*#__PURE__*/_jsx(ButtonMenuItem,{as:Link,to:\"\".concat(url),children:t('Live')}),/*#__PURE__*/_jsx(NotificationDot,{show:hasStakeInFinishedPools,children:/*#__PURE__*/_jsx(ButtonMenuItem,{as:Link,to:\"\".concat(url,\"/history\"),children:t('Finished')})})]})});const stakedOnlySwitch=/*#__PURE__*/_jsxs(ToggleWrapper,{children:[/*#__PURE__*/_jsx(Toggle,{checked:stakedOnly,onChange:()=>setStakedOnly(!stakedOnly),scale:\"sm\"}),/*#__PURE__*/_jsxs(Text,{children:[\" \",t('Staked only')]})]});return/*#__PURE__*/_jsxs(ViewControls,{children:[viewModeToggle,stakedOnlySwitch,liveOrFinishedSwitch]});};export default PoolTabButtons;","map":{"version":3,"names":["React","useRouteMatch","Link","styled","ButtonMenu","ButtonMenuItem","Toggle","Text","NotificationDot","useTranslation","ToggleView","jsx","_jsx","jsxs","_jsxs","ToggleWrapper","div","_templateObject","_taggedTemplateLiteral","ViewControls","_templateObject2","_ref","theme","mediaQueries","sm","Wrapper","_templateObject3","_ref2","PoolTabButtons","_ref3","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","url","isExact","t","viewModeToggle","onToggle","mode","liveOrFinishedSwitch","children","activeIndex","scale","variant","as","to","concat","show","stakedOnlySwitch","checked","onChange"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolTabButtons.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ToggleView, { ViewMode } from './ToggleView/ToggleView'\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n\r\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const { t } = useTranslation()\r\n\r\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n\r\n  const liveOrFinishedSwitch = (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedPools}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n\r\n  const stakedOnlySwitch = (\r\n    <ToggleWrapper>\r\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n      <Text> {t('Staked only')}</Text>\r\n    </ToggleWrapper>\r\n  )\r\n\r\n  return (\r\n    <ViewControls>\r\n      {viewModeToggle}\r\n      {stakedOnlySwitch}\r\n      {liveOrFinishedSwitch}\r\n    </ViewControls>\r\n  )\r\n}\r\n\r\nexport default PoolTabButtons\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}