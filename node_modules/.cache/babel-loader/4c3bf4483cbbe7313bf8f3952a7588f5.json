{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\components\\\\CakeVaultCard\\\\VaultStakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useCakeVaultContract } from 'hooks/useContract';\nimport useTheme from 'hooks/useTheme';\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { fetchCakeVaultUserData } from 'state/pools';\nimport { getAddress } from 'utils/addressHelpers';\nimport { convertCakeToShares } from '../../helpers';\nimport FeeSummary from './FeeSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`;\n_c = StyledButton;\nconst callOptions = {\n  gasLimit: 380000\n};\n\nconst VaultStakeModal = ({\n  pool,\n  stakingMax,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    stakingToken\n  } = pool;\n  const {\n    account\n  } = useWeb3React();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [percent, setPercent] = useState(0);\n  const {\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares);\n  const cakePriceBusd = usePriceCakeBusd();\n  const usdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : '';\n\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals));\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber());\n      setPercent(percentage > 100 ? 100 : percentage);\n    } else {\n      setPercent(0);\n    }\n\n    setStakeAmount(input);\n  };\n\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n\n    setPercent(sliderPercent);\n  };\n\n  const handleWithdrawal = async convertedStakeAmount => {\n    setPendingTx(true);\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare); // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000);\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await cakeVaultContract.withdrawAll(callOptions);\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions);\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n\n  const handleDeposit = async convertedStakeAmount => {\n    setPendingTx(true);\n\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions);\n      const receipt = await tx.wait();\n\n      if (receipt.status) {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'));\n        setPendingTx(false);\n        onDismiss();\n        dispatch(fetchCakeVaultUserData({\n          account\n        }));\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setPendingTx(false);\n    }\n  };\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount);\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${getAddress(stakingToken.address)}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mt: \"8px\",\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(stakingMax, stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), isRemovingStake && hasUnstakingFee && /*#__PURE__*/_jsxDEV(FeeSummary, {\n      stakingTokenSymbol: stakingToken.symbol,\n      stakeAmount: stakeAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      as: \"a\",\n      external: true,\n      href: \"/swap\",\n      variant: \"secondary\",\n      children: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VaultStakeModal, \"Kq8IdUGexXZ1OaXj1Cu+U5BIYzs=\", false, function () {\n  return [useAppDispatch, useWeb3React, useCakeVaultContract, useCakeVault, useTranslation, useTheme, useToast, useWithdrawalFeeTimer, usePriceCakeBusd];\n});\n\n_c2 = VaultStakeModal;\nexport default VaultStakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"VaultStakeModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx"],"names":["React","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","useTranslation","useWeb3React","useAppDispatch","BIG_TEN","usePriceCakeBusd","useCakeVault","useCakeVaultContract","useTheme","useWithdrawalFeeTimer","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","useToast","fetchCakeVaultUserData","getAddress","convertCakeToShares","FeeSummary","StyledButton","callOptions","gasLimit","VaultStakeModal","pool","stakingMax","isRemovingStake","onDismiss","dispatch","stakingToken","account","cakeVaultContract","userData","lastDepositedTime","userShares","pricePerFullShare","t","theme","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","hasUnstakingFee","parseInt","cakePriceBusd","usdValueStaked","gt","times","toNumber","handleStakeInputChange","input","convertedInput","multipliedBy","pow","decimals","percentage","Math","floor","dividedBy","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","sharesAsBigNumber","isWithdrawingAll","lte","tx","withdrawAll","receipt","wait","status","error","withdraw","toString","handleDeposit","deposit","handleConfirmClick","colors","gradients","cardHeader","address","symbol","balance","parseFloat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCakeVaultContract } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchCakeVaultUserData } from 'state/pools'\r\nimport { Pool } from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { convertCakeToShares } from '../../helpers'\r\nimport FeeSummary from './FeeSummary'\r\n\r\ninterface VaultStakeModalProps {\r\n  pool: Pool\r\n  stakingMax: BigNumber\r\n  isRemovingStake?: boolean\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  flex-grow: 1;\r\n`\r\n\r\nconst callOptions = {\r\n  gasLimit: 380000,\r\n}\r\n\r\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { stakingToken } = pool\r\n  const { account } = useWeb3React()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const {\r\n    userData: { lastDepositedTime, userShares },\r\n    pricePerFullShare,\r\n  } = useCakeVault()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [stakeAmount, setStakeAmount] = useState('')\r\n  const [percent, setPercent] = useState(0)\r\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const usdValueStaked =\r\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\r\n\r\n  const handleStakeInputChange = (input: string) => {\r\n    if (input) {\r\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\r\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\r\n      setPercent(percentage > 100 ? 100 : percentage)\r\n    } else {\r\n      setPercent(0)\r\n    }\r\n    setStakeAmount(input)\r\n  }\r\n\r\n  const handleChangePercent = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\r\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\r\n      setStakeAmount(amountToStake)\r\n    } else {\r\n      setStakeAmount('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\r\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\r\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\r\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\r\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\r\n\r\n    if (isWithdrawingAll) {\r\n      try {\r\n        const tx = await cakeVaultContract.withdrawAll(callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    } else {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      try {\r\n        const tx = await cakeVaultContract.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString(), callOptions)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n          setPendingTx(false)\r\n          onDismiss()\r\n          dispatch(fetchCakeVaultUserData({ account }))\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n        setPendingTx(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\r\n    setPendingTx(true)\r\n    try {\r\n      // .toString() being called to fix a BigNumber error in prod\r\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\r\n      const tx = await cakeVaultContract.deposit(convertedStakeAmount.toString(), callOptions)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\r\n        setPendingTx(false)\r\n        onDismiss()\r\n        dispatch(fetchCakeVaultUserData({ account }))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  const handleConfirmClick = async () => {\r\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\r\n    if (isRemovingStake) {\r\n      // unstaking\r\n      handleWithdrawal(convertedStakeAmount)\r\n    } else {\r\n      // staking\r\n      handleDeposit(convertedStakeAmount)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\r\n      onDismiss={onDismiss}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\r\n        <Flex alignItems=\"center\" minWidth=\"70px\">\r\n          <Image\r\n            src={`/images/tokens/${getAddress(stakingToken.address)}.png`}\r\n            width={24}\r\n            height={24}\r\n            alt={stakingToken.symbol}\r\n          />\r\n          <Text ml=\"4px\" bold>\r\n            {stakingToken.symbol}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <BalanceInput\r\n        value={stakeAmount}\r\n        onUserInput={handleStakeInputChange}\r\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\r\n        decimals={stakingToken.decimals}\r\n      />\r\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\r\n      </Text>\r\n      <Slider\r\n        min={0}\r\n        max={100}\r\n        value={percent}\r\n        onValueChanged={handleChangePercent}\r\n        name=\"stake\"\r\n        valueLabel={`${percent}%`}\r\n        step={1}\r\n      />\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\r\n          25%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\r\n          50%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\r\n          75%\r\n        </StyledButton>\r\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\r\n          {t('Max')}\r\n        </StyledButton>\r\n      </Flex>\r\n      {isRemovingStake && hasUnstakingFee && (\r\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\r\n      )}\r\n      <Button\r\n        isLoading={pendingTx}\r\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        onClick={handleConfirmClick}\r\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\r\n        mt=\"24px\"\r\n      >\r\n        {pendingTx ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n      {!isRemovingStake && (\r\n        <Button mt=\"8px\" as=\"a\" external href=\"/swap\" variant=\"secondary\">\r\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\r\n        </Button>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default VaultStakeModal\r\n"]},"metadata":{},"sourceType":"module"}