{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAllLists } from 'state/lists/hooks';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAllInactiveTokens } from 'hooks/Tokens';\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists';\nimport useWeb3Provider from 'hooks/useActiveWeb3React';\nimport useFetchListCallback from 'hooks/useFetchListCallback';\nimport useInterval from 'hooks/useInterval';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nexport default function Updater() {\n  _s();\n  const {\n    library\n  } = useWeb3Provider();\n  const dispatch = useDispatch();\n  const isWindowVisible = useIsWindowVisible();\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls();\n\n  // initiate loading\n  useAllInactiveTokens();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]);\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]);\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        // eslint-disable-next-line default-case\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          // update any active or inactive lists\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}\n_s(Updater, \"E0kuHtpo3bE1+I75mpY60gQkqiA=\", false, function () {\n  return [useWeb3Provider, useDispatch, useIsWindowVisible, useAllLists, useActiveListUrls, useAllInactiveTokens, useFetchListCallback, useInterval];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["useAllLists","getVersionUpgrade","VersionUpgrade","useCallback","useEffect","useDispatch","useAllInactiveTokens","UNSUPPORTED_LIST_URLS","useWeb3Provider","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","Updater","_s","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR","_c","$RefreshReg$"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/state/lists/updater.ts"],"sourcesContent":["import { useAllLists } from 'state/lists/hooks'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\nimport { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAllInactiveTokens } from 'hooks/Tokens'\r\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useFetchListCallback from 'hooks/useFetchListCallback'\r\nimport useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { AppDispatch } from '../index'\r\nimport { acceptListUpdate } from './actions'\r\nimport { useActiveListUrls } from './hooks'\r\n\r\nexport default function Updater(): null {\r\n  const { library } = useWeb3Provider()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  // get all loaded lists, and the active urls\r\n  const lists = useAllLists()\r\n  const activeListUrls = useActiveListUrls()\r\n\r\n  // initiate loading\r\n  useAllInactiveTokens()\r\n\r\n  const fetchList = useFetchListCallback()\r\n  const fetchAllListsCallback = useCallback(() => {\r\n    if (!isWindowVisible) return\r\n    Object.keys(lists).forEach((url) =>\r\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\r\n    )\r\n  }, [fetchList, isWindowVisible, lists])\r\n\r\n  // fetch all lists every 10 minutes, but only after we initialize library\r\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\r\n\r\n  // whenever a list is not loaded and not loading, try again to load it\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list.current && !list.loadingRequestId && !list.error) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\r\n  useEffect(() => {\r\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // automatically update lists if versions are minor/patch\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (list.current && list.pendingUpdate) {\r\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\r\n        // eslint-disable-next-line default-case\r\n        switch (bump) {\r\n          case VersionUpgrade.NONE:\r\n            throw new Error('unexpected no version bump')\r\n          // update any active or inactive lists\r\n          case VersionUpgrade.PATCH:\r\n          case VersionUpgrade.MINOR:\r\n          case VersionUpgrade.MAJOR:\r\n            dispatch(acceptListUpdate(listUrl))\r\n        }\r\n      }\r\n    })\r\n  }, [dispatch, lists, activeListUrls])\r\n\r\n  return null\r\n}\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,iBAAiB,EAAEC,cAAc,QAAQ,sBAAsB;AACxE,SAASC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,oBAAoB,QAAQ,cAAc;AACnD,SAASC,qBAAqB,QAAQ,wBAAwB;AAC9D,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,oBAAoB,MAAM,4BAA4B;AAC7D,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,kBAAkB,MAAM,0BAA0B;AAEzD,SAASC,gBAAgB,QAAQ,WAAW;AAC5C,SAASC,iBAAiB,QAAQ,SAAS;AAE3C,eAAe,SAASC,OAAOA,CAAA,EAAS;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAQ,CAAC,GAAGR,eAAe,CAAC,CAAC;EACrC,MAAMS,QAAQ,GAAGZ,WAAW,CAAc,CAAC;EAC3C,MAAMa,eAAe,GAAGP,kBAAkB,CAAC,CAAC;;EAE5C;EACA,MAAMQ,KAAK,GAAGnB,WAAW,CAAC,CAAC;EAC3B,MAAMoB,cAAc,GAAGP,iBAAiB,CAAC,CAAC;;EAE1C;EACAP,oBAAoB,CAAC,CAAC;EAEtB,MAAMe,SAAS,GAAGZ,oBAAoB,CAAC,CAAC;EACxC,MAAMa,qBAAqB,GAAGnB,WAAW,CAAC,MAAM;IAC9C,IAAI,CAACe,eAAe,EAAE;IACtBK,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,OAAO,CAAEC,GAAG,IAC7BL,SAAS,CAACK,GAAG,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,KAAK,CAAC,CACtF,CAAC;EACH,CAAC,EAAE,CAACP,SAAS,EAAEH,eAAe,EAAEC,KAAK,CAAC,CAAC;;EAEvC;EACAT,WAAW,CAACY,qBAAqB,EAAEN,OAAO,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;EAEnE;EACAZ,SAAS,CAAC,MAAM;IACdmB,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,OAAO,CAAEM,OAAO,IAAK;MACtC,MAAMC,IAAI,GAAGb,KAAK,CAACY,OAAO,CAAC;MAC3B,IAAI,CAACC,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACE,gBAAgB,IAAI,CAACF,IAAI,CAACJ,KAAK,EAAE;QAC1DP,SAAS,CAACU,OAAO,CAAC,CAACJ,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,KAAK,CAAC,CAAC;MACxF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,QAAQ,EAAEI,SAAS,EAAEL,OAAO,EAAEG,KAAK,CAAC,CAAC;;EAEzC;EACAf,SAAS,CAAC,MAAM;IACdmB,MAAM,CAACC,IAAI,CAACjB,qBAAqB,CAAC,CAACkB,OAAO,CAAEM,OAAO,IAAK;MACtD,MAAMC,IAAI,GAAGb,KAAK,CAACY,OAAO,CAAC;MAC3B,IAAI,CAACC,IAAI,IAAK,CAACA,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACE,gBAAgB,IAAI,CAACF,IAAI,CAACJ,KAAM,EAAE;QACrEP,SAAS,CAACU,OAAO,CAAC,CAACJ,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,KAAK,CAAC,CAAC;MACxF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,QAAQ,EAAEI,SAAS,EAAEL,OAAO,EAAEG,KAAK,CAAC,CAAC;;EAEzC;EACAf,SAAS,CAAC,MAAM;IACdmB,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,OAAO,CAAEM,OAAO,IAAK;MACtC,MAAMC,IAAI,GAAGb,KAAK,CAACY,OAAO,CAAC;MAC3B,IAAIC,IAAI,CAACC,OAAO,IAAID,IAAI,CAACG,aAAa,EAAE;QACtC,MAAMC,IAAI,GAAGnC,iBAAiB,CAAC+B,IAAI,CAACC,OAAO,CAACI,OAAO,EAAEL,IAAI,CAACG,aAAa,CAACE,OAAO,CAAC;QAChF;QACA,QAAQD,IAAI;UACV,KAAKlC,cAAc,CAACoC,IAAI;YACtB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;UAC/C;UACA,KAAKrC,cAAc,CAACsC,KAAK;UACzB,KAAKtC,cAAc,CAACuC,KAAK;UACzB,KAAKvC,cAAc,CAACwC,KAAK;YACvBzB,QAAQ,CAACL,gBAAgB,CAACmB,OAAO,CAAC,CAAC;QACvC;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACd,QAAQ,EAAEE,KAAK,EAAEC,cAAc,CAAC,CAAC;EAErC,OAAO,IAAI;AACb;AAACL,EAAA,CAhEuBD,OAAO;EAAA,QACTN,eAAe,EAClBH,WAAW,EACJM,kBAAkB,EAG5BX,WAAW,EACFa,iBAAiB,EAGxCP,oBAAoB,EAEFG,oBAAoB,EAStCC,WAAW;AAAA;AAAAiC,EAAA,GArBW7B,OAAO;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}