{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport identity from 'lodash/identity';\nimport { useEffect, useState } from 'react';\nconst defaultOptions = {\n  hydrate: identity,\n  dehydrate: identity\n};\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\n\nconst usePersistState = (initialValue, userOptions) => {\n  _s();\n\n  const {\n    localStorageKey,\n    hydrate,\n    dehydrate\n  } = { ...defaultOptions,\n    ...userOptions\n  };\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey);\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)));\n  }, [value, localStorageKey, dehydrate]);\n  return [value, setValue];\n};\n\n_s(usePersistState, \"Om4B//B98GckC3PyxPFRxYJWHiE=\");\n\nexport default usePersistState;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/usePersistState.ts"],"names":["identity","useEffect","useState","defaultOptions","hydrate","dehydrate","usePersistState","initialValue","userOptions","localStorageKey","value","setValue","valueFromLS","localStorage","getItem","JSON","parse","error","setItem","stringify"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAQA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEJ,QADY;AAErBK,EAAAA,SAAS,EAAEL;AAFU,CAAvB;AAKA;AACA;AACA;;AACA,MAAMM,eAAe,GAAG,CAACC,YAAD,EAAoBC,WAApB,KAA4D;AAAA;;AAClF,QAAM;AAAEC,IAAAA,eAAF;AAAmBL,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAA0C,EAAE,GAAGF,cAAL;AAAqB,OAAGK;AAAxB,GAAhD;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,MAAM;AACvC,QAAI;AACF,YAAMU,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBL,eAArB,CAApB;AAEA,aAAOG,WAAW,GAAGR,OAAO,CAACW,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAD,CAAV,GAAsCL,YAAxD;AACD,KAJD,CAIE,OAAOU,KAAP,EAAc;AACd,aAAOV,YAAP;AACD;AACF,GARiC,CAAlC;AAUAN,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY,CAACK,OAAb,CAAqBT,eAArB,EAAsCM,IAAI,CAACI,SAAL,CAAed,SAAS,CAACK,KAAD,CAAxB,CAAtC;AACD,GAFQ,EAEN,CAACA,KAAD,EAAQD,eAAR,EAAyBJ,SAAzB,CAFM,CAAT;AAIA,SAAO,CAACK,KAAD,EAAQC,QAAR,CAAP;AACD,CAjBD;;GAAML,e;;AAmBN,eAAeA,eAAf","sourcesContent":["import identity from 'lodash/identity'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface UsePersistStateOptions {\r\n  localStorageKey: string\r\n  hydrate?: (value: any) => any\r\n  dehydrate?: (value: any) => any\r\n}\r\n\r\nconst defaultOptions = {\r\n  hydrate: identity,\r\n  dehydrate: identity,\r\n}\r\n\r\n/**\r\n * Same as \"useState\" but saves the value to local storage each time it changes\r\n */\r\nconst usePersistState = (initialValue: any, userOptions: UsePersistStateOptions) => {\r\n  const { localStorageKey, hydrate, dehydrate } = { ...defaultOptions, ...userOptions }\r\n  const [value, setValue] = useState(() => {\r\n    try {\r\n      const valueFromLS = localStorage.getItem(localStorageKey)\r\n\r\n      return valueFromLS ? hydrate(JSON.parse(valueFromLS)) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(dehydrate(value)))\r\n  }, [value, localStorageKey, dehydrate])\r\n\r\n  return [value, setValue]\r\n}\r\n\r\nexport default usePersistState\r\n"]},"metadata":{},"sourceType":"module"}