{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Farms\\\\components\\\\DepositModal.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit';\nimport { ModalActions, ModalInput } from 'components/Modal';\nimport { useTranslation } from 'contexts/Localization';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DepositModal = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl\n}) => {\n  _s();\n\n  const [val, setVal] = useState('');\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n  const valNumber = new BigNumber(val);\n  const fullBalanceNumber = new BigNumber(fullBalance);\n  const handleChange = useCallback(e => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value.replace(/,/g, '.'));\n    }\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Stake LP tokens'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalInput, {\n      value: val,\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      max: fullBalance,\n      symbol: tokenName,\n      addLiquidityUrl: addLiquidityUrl,\n      inputTitle: t('Stake')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onDismiss,\n        width: \"100%\",\n        disabled: pendingTx,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        disabled: pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber),\n        onClick: async () => {\n          setPendingTx(true);\n\n          try {\n            await onConfirm(val);\n            toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'));\n            onDismiss();\n          } catch (e) {\n            toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n            console.error(e);\n          } finally {\n            setPendingTx(false);\n          }\n        },\n        children: pendingTx ? t('Confirming') : t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LinkExternal, {\n      href: addLiquidityUrl,\n      style: {\n        alignSelf: 'center'\n      },\n      children: t('Get %symbol%', {\n        symbol: tokenName\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DepositModal, \"dQcHiMm6teX+aw+Vmvfdo/s6wck=\", false, function () {\n  return [useToast, useTranslation];\n});\n\n_c = DepositModal;\nexport default DepositModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"DepositModal\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Farms/components/DepositModal.tsx"],"names":["BigNumber","React","useCallback","useMemo","useState","Button","Modal","LinkExternal","ModalActions","ModalInput","useTranslation","getFullDisplayBalance","useToast","DepositModal","max","onConfirm","onDismiss","tokenName","addLiquidityUrl","val","setVal","toastSuccess","toastError","pendingTx","setPendingTx","t","fullBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","value","replace","handleSelectMax","isFinite","eq","gt","console","error","alignSelf","symbol"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n"]},"metadata":{},"sourceType":"module"}