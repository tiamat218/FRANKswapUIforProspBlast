{"ast":null,"code":"/* eslint-disable no-param-reassign */import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{LotteryStatus}from'config/constants/types';import{fetchLottery,fetchCurrentLotteryIdAndMaxBuy}from'./helpers';import getLotteriesData from'./getLotteriesData';import getUserLotteryData from'./getUserLotteryData';const initialState={currentLotteryId:null,isTransitioning:false,maxNumberTicketsPerBuyOrClaim:null,currentRound:{isLoading:true,lotteryId:null,status:LotteryStatus.PENDING,startTime:'',endTime:'',priceTicketInCake:'',discountDivisor:'',treasuryFee:'',firstTicketId:'',lastTicketId:'',amountCollectedInCake:'',finalNumber:null,cakePerBracket:[],countWinnersPerBracket:[],rewardsBreakdown:[],userTickets:{isLoading:true,tickets:[]}},lotteriesData:null,userLotteryData:{account:'',totalCake:'',totalTickets:'',rounds:[]}};export const fetchCurrentLottery=createAsyncThunk('lottery/fetchCurrentLottery',async _ref=>{let{currentLotteryId}=_ref;const lotteryInfo=await fetchLottery(currentLotteryId);return lotteryInfo;});export const fetchCurrentLotteryId=createAsyncThunk('lottery/fetchCurrentLotteryId',async()=>{const currentIdAndMaxBuy=await fetchCurrentLotteryIdAndMaxBuy();return currentIdAndMaxBuy;});export const fetchUserTicketsAndLotteries=createAsyncThunk('lottery/fetchUserTicketsAndLotteries',async _ref2=>{var _userLotteriesRes$rou;let{account,currentLotteryId}=_ref2;const userLotteriesRes=await getUserLotteryData(account,currentLotteryId);const userParticipationInCurrentRound=(_userLotteriesRes$rou=userLotteriesRes.rounds)===null||_userLotteriesRes$rou===void 0?void 0:_userLotteriesRes$rou.find(round=>round.lotteryId===currentLotteryId);const userTickets=userParticipationInCurrentRound===null||userParticipationInCurrentRound===void 0?void 0:userParticipationInCurrentRound.tickets;// User has not bought tickets for the current lottery, or there has been an error\nif(!userTickets||userTickets.length===0){return{userTickets:null,userLotteries:userLotteriesRes};}return{userTickets,userLotteries:userLotteriesRes};});export const fetchPublicLotteries=createAsyncThunk('lottery/fetchPublicLotteries',async _ref3=>{let{currentLotteryId}=_ref3;const lotteries=await getLotteriesData(currentLotteryId);return lotteries;});export const fetchUserLotteries=createAsyncThunk('lottery/fetchUserLotteries',async _ref4=>{let{account,currentLotteryId}=_ref4;const userLotteries=await getUserLotteryData(account,currentLotteryId);return userLotteries;});export const setLotteryIsTransitioning=createAsyncThunk(\"lottery/setIsTransitioning\",async _ref5=>{let{isTransitioning}=_ref5;return{isTransitioning};});export const LotterySlice=createSlice({name:'Lottery',initialState,reducers:{setLotteryPublicData:(state,action)=>{state=action.payload;}},extraReducers:builder=>{builder.addCase(fetchCurrentLottery.fulfilled,(state,action)=>{state.currentRound={...state.currentRound,...action.payload};});builder.addCase(fetchCurrentLotteryId.fulfilled,(state,action)=>{state.currentLotteryId=action.payload.currentLotteryId;state.maxNumberTicketsPerBuyOrClaim=action.payload.maxNumberTicketsPerBuyOrClaim;});builder.addCase(fetchUserTicketsAndLotteries.fulfilled,(state,action)=>{state.currentRound.userTickets.isLoading=false;state.currentRound.userTickets.tickets=action.payload.userTickets;state.userLotteryData=action.payload.userLotteries;});builder.addCase(fetchPublicLotteries.fulfilled,(state,action)=>{state.lotteriesData=action.payload;});builder.addCase(fetchUserLotteries.fulfilled,(state,action)=>{state.userLotteryData=action.payload;});builder.addCase(setLotteryIsTransitioning.fulfilled,(state,action)=>{state.isTransitioning=action.payload.isTransitioning;});}});// Actions\nexport const{setLotteryPublicData}=LotterySlice.actions;export default LotterySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","LotteryStatus","fetchLottery","fetchCurrentLotteryIdAndMaxBuy","getLotteriesData","getUserLotteryData","initialState","currentLotteryId","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","lotteryId","status","PENDING","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","userTickets","tickets","lotteriesData","userLotteryData","account","totalCake","totalTickets","rounds","fetchCurrentLottery","_ref","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","_ref2","_userLotteriesRes$rou","userLotteriesRes","userParticipationInCurrentRound","find","round","length","userLotteries","fetchPublicLotteries","_ref3","lotteries","fetchUserLotteries","_ref4","setLotteryIsTransitioning","_ref5","LotterySlice","name","reducers","setLotteryPublicData","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/lottery/index.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\r\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\r\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers'\r\nimport getLotteriesData from './getLotteriesData'\r\nimport getUserLotteryData from './getUserLotteryData'\r\n\r\ninterface PublicLotteryData {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n}\r\n\r\nconst initialState: LotteryState = {\r\n  currentLotteryId: null,\r\n  isTransitioning: false,\r\n  maxNumberTicketsPerBuyOrClaim: null,\r\n  currentRound: {\r\n    isLoading: true,\r\n    lotteryId: null,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n    userTickets: {\r\n      isLoading: true,\r\n      tickets: [],\r\n    },\r\n  },\r\n  lotteriesData: null,\r\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\r\n}\r\n\r\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\r\n  'lottery/fetchCurrentLottery',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteryInfo = await fetchLottery(currentLotteryId)\r\n    return lotteryInfo\r\n  },\r\n)\r\n\r\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\r\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\r\n  return currentIdAndMaxBuy\r\n})\r\n\r\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\r\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId)\r\n  const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round) => round.lotteryId === currentLotteryId)\r\n  const userTickets = userParticipationInCurrentRound?.tickets\r\n\r\n  // User has not bought tickets for the current lottery, or there has been an error\r\n  if (!userTickets || userTickets.length === 0) {\r\n    return { userTickets: null, userLotteries: userLotteriesRes }\r\n  }\r\n\r\n  return { userTickets, userLotteries: userLotteriesRes }\r\n})\r\n\r\nexport const fetchPublicLotteries = createAsyncThunk<LotteryRoundGraphEntity[], { currentLotteryId: string }>(\r\n  'lottery/fetchPublicLotteries',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteries = await getLotteriesData(currentLotteryId)\r\n    return lotteries\r\n  },\r\n)\r\n\r\nexport const fetchUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteries = await getUserLotteryData(account, currentLotteryId)\r\n  return userLotteries\r\n})\r\n\r\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\r\n  `lottery/setIsTransitioning`,\r\n  async ({ isTransitioning }) => {\r\n    return { isTransitioning }\r\n  },\r\n)\r\n\r\nexport const LotterySlice = createSlice({\r\n  name: 'Lottery',\r\n  initialState,\r\n  reducers: {\r\n    setLotteryPublicData: (state, action) => {\r\n      state = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\r\n      state.currentRound = { ...state.currentRound, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\r\n      state.currentLotteryId = action.payload.currentLotteryId\r\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\r\n    })\r\n    builder.addCase(\r\n      fetchUserTicketsAndLotteries.fulfilled,\r\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\r\n        state.currentRound.userTickets.isLoading = false\r\n        state.currentRound.userTickets.tickets = action.payload.userTickets\r\n        state.userLotteryData = action.payload.userLotteries\r\n      },\r\n    )\r\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\r\n      state.lotteriesData = action.payload\r\n    })\r\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      state.userLotteryData = action.payload\r\n    })\r\n    builder.addCase(\r\n      setLotteryIsTransitioning.fulfilled,\r\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\r\n        state.isTransitioning = action.payload.isTransitioning\r\n      },\r\n    )\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLotteryPublicData } = LotterySlice.actions\r\n\r\nexport default LotterySlice.reducer\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}