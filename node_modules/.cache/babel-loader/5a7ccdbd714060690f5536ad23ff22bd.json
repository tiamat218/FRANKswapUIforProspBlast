{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\contexts\\\\RefreshContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\nconst RefreshContext = /*#__PURE__*/React.createContext({\n  slow: 0,\n  fast: 0\n}); // Check if the tab is active in the user browser\n\nconst useIsBrowserTabActive = () => {\n  _s();\n\n  const isBrowserTabActiveRef = useRef(true);\n  useEffect(() => {\n    const onVisibilityChange = () => {\n      isBrowserTabActiveRef.current = !document.hidden;\n    };\n\n    window.addEventListener('visibilitychange', onVisibilityChange);\n    return () => {\n      window.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, []);\n  return isBrowserTabActiveRef;\n}; // This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\n\n\n_s(useIsBrowserTabActive, \"dHtYsQ80fnJK1GTuqt9M0MimixU=\");\n\nconst RefreshContextProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const isBrowserTabActiveRef = useIsBrowserTabActive();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setFast(prev => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (isBrowserTabActiveRef.current) {\n        setSlow(prev => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [isBrowserTabActiveRef]);\n  return /*#__PURE__*/_jsxDEV(RefreshContext.Provider, {\n    value: {\n      slow,\n      fast\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(RefreshContextProvider, \"wbvesbeiso+IX+rX4jBoetIyo3s=\", false, function () {\n  return [useIsBrowserTabActive];\n});\n\n_c = RefreshContextProvider;\nexport { RefreshContext, RefreshContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"RefreshContextProvider\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/contexts/RefreshContext.tsx"],"names":["React","useState","useEffect","useRef","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","useIsBrowserTabActive","isBrowserTabActiveRef","onVisibilityChange","current","document","hidden","window","addEventListener","removeEventListener","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,MAAMC,aAAa,GAAG,KAAtB;AACA,MAAMC,aAAa,GAAG,KAAtB;AAEA,MAAMC,cAAc,gBAAGN,KAAK,CAACO,aAAN,CAAoB;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE;AAAjB,CAApB,CAAvB,C,CAEA;;AACA,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AAClC,QAAMC,qBAAqB,GAAGR,MAAM,CAAC,IAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,kBAAkB,GAAG,MAAM;AAC/BD,MAAAA,qBAAqB,CAACE,OAAtB,GAAgC,CAACC,QAAQ,CAACC,MAA1C;AACD,KAFD;;AAIAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4CL,kBAA5C;AAEA,WAAO,MAAM;AACXI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,kBAA3B,EAA+CN,kBAA/C;AACD,KAFD;AAGD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOD,qBAAP;AACD,CAhBD,C,CAkBA;;;GAlBMD,qB;;AAmBN,MAAMS,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/C,QAAM,CAACZ,IAAD,EAAOa,OAAP,IAAkBpB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOa,OAAP,IAAkBrB,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMU,qBAAqB,GAAGD,qBAAqB,EAAnD;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIb,qBAAqB,CAACE,OAA1B,EAAmC;AACjCS,QAAAA,OAAO,CAAEG,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBrB,aAJyB,CAA5B;AAKA,WAAO,MAAMsB,aAAa,CAACH,QAAD,CAA1B;AACD,GAPQ,EAON,CAACZ,qBAAD,CAPM,CAAT;AASAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIb,qBAAqB,CAACE,OAA1B,EAAmC;AACjCQ,QAAAA,OAAO,CAAEI,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBpB,aAJyB,CAA5B;AAKA,WAAO,MAAMqB,aAAa,CAACH,QAAD,CAA1B;AACD,GAPQ,EAON,CAACZ,qBAAD,CAPM,CAAT;AASA,sBAAO,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEH,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhC;AAAA,cAAiDW;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBD;;IAAMD,sB;UAG0BT,qB;;;KAH1BS,sB;AA0BN,SAASb,cAAT,EAAyBa,sBAAzB","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// Check if the tab is active in the user browser\r\nconst useIsBrowserTabActive = () => {\r\n  const isBrowserTabActiveRef = useRef(true)\r\n\r\n  useEffect(() => {\r\n    const onVisibilityChange = () => {\r\n      isBrowserTabActiveRef.current = !document.hidden\r\n    }\r\n\r\n    window.addEventListener('visibilitychange', onVisibilityChange)\r\n\r\n    return () => {\r\n      window.removeEventListener('visibilitychange', onVisibilityChange)\r\n    }\r\n  }, [])\r\n\r\n  return isBrowserTabActiveRef\r\n}\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n  const isBrowserTabActiveRef = useIsBrowserTabActive()\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (isBrowserTabActiveRef.current) {\r\n        setFast((prev) => prev + 1)\r\n      }\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [isBrowserTabActiveRef])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      if (isBrowserTabActiveRef.current) {\r\n        setSlow((prev) => prev + 1)\r\n      }\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [isBrowserTabActiveRef])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n"]},"metadata":{},"sourceType":"module"}