{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Pools\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport { useTranslation } from 'contexts/Localization';\nimport usePersistState from 'hooks/usePersistState';\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks';\nimport { usePollFarmsData } from 'state/farms/hooks';\nimport { latinise } from 'utils/latinise';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport Loading from 'components/Loading';\nimport PoolCard from './components/PoolCard';\nimport CakeVaultCard from './components/CakeVaultCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport BountyCard from './components/BountyCard';\nimport HelpButton from './components/HelpButton';\nimport PoolsTable from './components/PoolsTable/PoolsTable';\nimport { ViewMode } from './components/ToggleView/ToggleView';\nimport { getAprData, getCakeVaultEarnings } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`;\n_c = CardLayout;\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c2 = PoolControls;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c3 = FilterContainer;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c4 = LabelWrapper;\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`;\n_c5 = ControlStretch;\nconst NUMBER_OF_POOLS_VISIBLE = 12;\n\nconst Pools = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pools: poolsWithoutAutoVault,\n    userDataLoaded\n  } = usePools(account);\n  const [stakedOnly, setStakedOnly] = usePersistState(false, {\n    localStorageKey: 'pancake_pool_staked'\n  });\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const loadMoreRef = useRef(null);\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, {\n    localStorageKey: 'pancake_pool_view'\n  });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortOption, setSortOption] = useState('hot');\n  const chosenPoolsLength = useRef(0);\n  const {\n    userData: {\n      cakeAtLastUserAction,\n      userShares\n    },\n    fees: {\n      performanceFee\n    },\n    pricePerFullShare,\n    totalCakeInVault\n  } = useCakeVault();\n  const accountHasVaultShares = userShares && userShares.gt(0);\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find(pool => pool.sousId === 0);\n    const cakeAutoVault = { ...cakePool,\n      isAutoVault: true\n    };\n    return [cakeAutoVault, ...poolsWithoutAutoVault];\n  }, [poolsWithoutAutoVault]); // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, pool => pool.isFinished), [pools]);\n  const stakedOnlyFinishedPools = useMemo(() => finishedPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [finishedPools, accountHasVaultShares]);\n  const stakedOnlyOpenPools = useMemo(() => openPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [openPools, accountHasVaultShares]);\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0;\n  usePollFarmsData();\n  useFetchCakeVault();\n  useFetchPublicPoolsData();\n  useEffect(() => {\n    const showMorePools = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible(poolsCurrentlyVisible => {\n          if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n            return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE;\n          }\n\n          return poolsCurrentlyVisible;\n        });\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [observerIsSet]);\n  const showFinishedPools = location.pathname.includes('history');\n\n  const handleChangeSearchQuery = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  const sortPools = poolsToSort => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(poolsToSort, pool => pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0, 'desc');\n\n      case 'earned':\n        return orderBy(poolsToSort, pool => {\n          if (!pool.userData || !pool.earningTokenPrice) {\n            return 0;\n          }\n\n          return pool.isAutoVault ? getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, pool.earningTokenPrice).autoUsdToDisplay : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber();\n        }, 'desc');\n\n      case 'totalStaked':\n        return orderBy(poolsToSort, pool => pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber(), 'desc');\n\n      default:\n        return poolsToSort;\n    }\n  };\n\n  let chosenPools;\n\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools;\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools;\n  }\n\n  if (searchQuery) {\n    const lowercaseQuery = latinise(searchQuery.toLowerCase());\n    chosenPools = chosenPools.filter(pool => latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery));\n  }\n\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible);\n  chosenPoolsLength.current = chosenPools.length;\n\n  const cardLayout = /*#__PURE__*/_jsxDEV(CardLayout, {\n    children: chosenPools.map(pool => pool.isAutoVault ? /*#__PURE__*/_jsxDEV(CakeVaultCard, {\n      pool: pool,\n      showStakedOnly: stakedOnly\n    }, \"auto-cake\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(PoolCard, {\n      pool: pool,\n      account: account\n    }, pool.sousId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n\n  const tableLayout = /*#__PURE__*/_jsxDEV(PoolsTable, {\n    pools: chosenPools,\n    account: account,\n    userDataLoaded: userDataLoaded\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 23\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        flexDirection: ['column', null, null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          flexDirection: \"column\",\n          mr: ['8px', 0],\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h1\",\n            scale: \"xxl\",\n            color: \"secondary\",\n            mb: \"24px\",\n            children: t('Syrup Pools')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('Just stake some tokens to earn.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('High APR, low risk.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          height: \"fit-content\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          mt: ['24px', null, '0'],\n          children: [/*#__PURE__*/_jsxDEV(HelpButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BountyCard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(PoolControls, {\n        children: [/*#__PURE__*/_jsxDEV(PoolTabButtons, {\n          stakedOnly: stakedOnly,\n          setStakedOnly: setStakedOnly,\n          hasStakeInFinishedPools: hasStakeInFinishedPools,\n          viewMode: viewMode,\n          setViewMode: setViewMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ControlStretch, {\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                options: [{\n                  label: t('Hot'),\n                  value: 'hot'\n                }, {\n                  label: t('APR'),\n                  value: 'apr'\n                }, {\n                  label: t('Earned'),\n                  value: 'earned'\n                }, {\n                  label: t('Total staked'),\n                  value: 'totalStaked'\n                }],\n                onChange: handleSortOptionChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeSearchQuery,\n              placeholder: \"Search Pools\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), showFinishedPools && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"20px\",\n        color: \"failure\",\n        pb: \"32px\",\n        children: t('These pools are no longer distributing rewards. Please unstake your tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        mb: \"4px\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), viewMode === ViewMode.CARD ? cardLayout : tableLayout, /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        mx: \"auto\",\n        mt: \"12px\",\n        src: \"/images/decorations/3d-syrup-bunnies.png\",\n        alt: \"Pancake illustration\",\n        width: 192,\n        height: 184.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pools, \"07fCAbuJL7jrf2i85jsZWBzugo0=\", false, function () {\n  return [useLocation, useTranslation, useWeb3React, usePools, usePersistState, usePersistState, useCakeVault, usePollFarmsData, useFetchCakeVault, useFetchPublicPoolsData];\n});\n\n_c6 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"CardLayout\");\n$RefreshReg$(_c2, \"PoolControls\");\n$RefreshReg$(_c3, \"FilterContainer\");\n$RefreshReg$(_c4, \"LabelWrapper\");\n$RefreshReg$(_c5, \"ControlStretch\");\n$RefreshReg$(_c6, \"Pools\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/index.tsx"],"names":["React","useEffect","useMemo","useRef","useState","useLocation","styled","BigNumber","useWeb3React","Heading","Flex","Image","Text","orderBy","partition","useTranslation","usePersistState","useFetchPublicPoolsData","usePools","useFetchCakeVault","useCakeVault","usePollFarmsData","latinise","FlexLayout","Page","PageHeader","SearchInput","Select","Loading","PoolCard","CakeVaultCard","PoolTabButtons","BountyCard","HelpButton","PoolsTable","ViewMode","getAprData","getCakeVaultEarnings","CardLayout","PoolControls","div","theme","mediaQueries","sm","FilterContainer","LabelWrapper","ControlStretch","NUMBER_OF_POOLS_VISIBLE","Pools","location","t","account","pools","poolsWithoutAutoVault","userDataLoaded","stakedOnly","setStakedOnly","localStorageKey","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","viewMode","setViewMode","TABLE","searchQuery","setSearchQuery","sortOption","setSortOption","chosenPoolsLength","userData","cakeAtLastUserAction","userShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","accountHasVaultShares","gt","performanceFeeAsDecimal","cakePool","find","pool","sousId","cakeAutoVault","isAutoVault","finishedPools","openPools","isFinished","stakedOnlyFinishedPools","filter","stakedBalance","isGreaterThan","stakedOnlyOpenPools","hasStakeInFinishedPools","length","showMorePools","entries","entry","isIntersecting","poolsCurrentlyVisible","current","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","showFinishedPools","pathname","includes","handleChangeSearchQuery","event","target","value","handleSortOptionChange","option","sortPools","poolsToSort","apr","earningTokenPrice","autoUsdToDisplay","pendingReward","times","toNumber","totalStaked","chosenPools","lowercaseQuery","toLowerCase","earningToken","symbol","slice","cardLayout","map","tableLayout","label","marginLeft","CARD"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useFetchPublicPoolsData, usePools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks'\r\nimport { usePollFarmsData } from 'state/farms/hooks'\r\nimport { latinise } from 'utils/latinise'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { Pool } from 'state/types'\r\nimport Loading from 'components/Loading'\r\nimport PoolCard from './components/PoolCard'\r\nimport CakeVaultCard from './components/CakeVaultCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport BountyCard from './components/BountyCard'\r\nimport HelpButton from './components/HelpButton'\r\nimport PoolsTable from './components/PoolsTable/PoolsTable'\r\nimport { ViewMode } from './components/ToggleView/ToggleView'\r\nimport { getAprData, getCakeVaultEarnings } from './helpers'\r\n\r\nconst CardLayout = styled(FlexLayout)`\r\n  justify-content: center;\r\n`\r\n\r\nconst PoolControls = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst ControlStretch = styled(Flex)`\r\n  > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst NUMBER_OF_POOLS_VISIBLE = 12\r\n\r\nconst Pools: React.FC = () => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools(account)\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, { localStorageKey: 'pancake_pool_staked' })\r\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_pool_view' })\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenPoolsLength = useRef(0)\r\n  const {\r\n    userData: { cakeAtLastUserAction, userShares },\r\n    fees: { performanceFee },\r\n    pricePerFullShare,\r\n    totalCakeInVault,\r\n  } = useCakeVault()\r\n  const accountHasVaultShares = userShares && userShares.gt(0)\r\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\r\n\r\n  const pools = useMemo(() => {\r\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\r\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\r\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\r\n  }, [poolsWithoutAutoVault])\r\n\r\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\r\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\r\n  const stakedOnlyFinishedPools = useMemo(\r\n    () =>\r\n      finishedPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [finishedPools, accountHasVaultShares],\r\n  )\r\n  const stakedOnlyOpenPools = useMemo(\r\n    () =>\r\n      openPools.filter((pool) => {\r\n        if (pool.isAutoVault) {\r\n          return accountHasVaultShares\r\n        }\r\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\r\n      }),\r\n    [openPools, accountHasVaultShares],\r\n  )\r\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n  usePollFarmsData()\r\n  useFetchCakeVault()\r\n  useFetchPublicPoolsData()\r\n\r\n  useEffect(() => {\r\n    const showMorePools = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\r\n          if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\r\n            return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\r\n          }\r\n          return poolsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [observerIsSet])\r\n\r\n  const showFinishedPools = location.pathname.includes('history')\r\n\r\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const sortPools = (poolsToSort: Pool[]) => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\r\n          'desc',\r\n        )\r\n      case 'earned':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => {\r\n            if (!pool.userData || !pool.earningTokenPrice) {\r\n              return 0\r\n            }\r\n            return pool.isAutoVault\r\n              ? getCakeVaultEarnings(\r\n                  account,\r\n                  cakeAtLastUserAction,\r\n                  userShares,\r\n                  pricePerFullShare,\r\n                  pool.earningTokenPrice,\r\n                ).autoUsdToDisplay\r\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\r\n          },\r\n          'desc',\r\n        )\r\n      case 'totalStaked':\r\n        return orderBy(\r\n          poolsToSort,\r\n          (pool: Pool) => (pool.isAutoVault ? totalCakeInVault.toNumber() : pool.totalStaked.toNumber()),\r\n          'desc',\r\n        )\r\n      default:\r\n        return poolsToSort\r\n    }\r\n  }\r\n\r\n  let chosenPools\r\n  if (showFinishedPools) {\r\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\r\n  } else {\r\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\r\n  }\r\n\r\n  if (searchQuery) {\r\n    const lowercaseQuery = latinise(searchQuery.toLowerCase())\r\n    chosenPools = chosenPools.filter((pool) =>\r\n      latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\r\n    )\r\n  }\r\n\r\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible)\r\n  chosenPoolsLength.current = chosenPools.length\r\n\r\n  const cardLayout = (\r\n    <CardLayout>\r\n      {chosenPools.map((pool) =>\r\n        pool.isAutoVault ? (\r\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\r\n        ) : (\r\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\r\n        ),\r\n      )}\r\n    </CardLayout>\r\n  )\r\n\r\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\r\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\r\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n              {t('Syrup Pools')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('Just stake some tokens to earn.')}\r\n            </Heading>\r\n            <Heading scale=\"md\" color=\"text\">\r\n              {t('High APR, low risk.')}\r\n            </Heading>\r\n          </Flex>\r\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\r\n            <HelpButton />\r\n            <BountyCard />\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        <PoolControls>\r\n          <PoolTabButtons\r\n            stakedOnly={stakedOnly}\r\n            setStakedOnly={setStakedOnly}\r\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\r\n            viewMode={viewMode}\r\n            setViewMode={setViewMode}\r\n          />\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Sort by')}\r\n              </Text>\r\n              <ControlStretch>\r\n                <Select\r\n                  options={[\r\n                    {\r\n                      label: t('Hot'),\r\n                      value: 'hot',\r\n                    },\r\n                    {\r\n                      label: t('APR'),\r\n                      value: 'apr',\r\n                    },\r\n                    {\r\n                      label: t('Earned'),\r\n                      value: 'earned',\r\n                    },\r\n                    {\r\n                      label: t('Total staked'),\r\n                      value: 'totalStaked',\r\n                    },\r\n                  ]}\r\n                  onChange={handleSortOptionChange}\r\n                />\r\n              </ControlStretch>\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\r\n                {t('Search')}\r\n              </Text>\r\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </PoolControls>\r\n        {showFinishedPools && (\r\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\r\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\r\n          </Text>\r\n        )}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\" mb=\"4px\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\r\n        <div ref={loadMoreRef} />\r\n        <Image\r\n          mx=\"auto\"\r\n          mt=\"12px\"\r\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\r\n          alt=\"Pancake illustration\"\r\n          width={192}\r\n          height={184.5}\r\n        />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pools\r\n"]},"metadata":{},"sourceType":"module"}