{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\n\nconst now = () => new Date().getTime();\n\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, {\n  payload: {\n    chainId,\n    from,\n    hash,\n    approval,\n    summary,\n    claim\n  }\n}) => {\n  var _transactions$chainId, _transactions$chainId2;\n\n  if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n    throw Error('Attempted to add existing transaction.');\n  }\n\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    approval,\n    summary,\n    claim,\n    from,\n    addedTime: now()\n  };\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, {\n  payload: {\n    chainId\n  }\n}) => {\n  if (!transactions[chainId]) return;\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, {\n  payload: {\n    chainId,\n    hash,\n    blockNumber\n  }\n}) => {\n  var _transactions$chainId3;\n\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, {\n  payload: {\n    hash,\n    chainId,\n    receipt\n  }\n}) => {\n  var _transactions$chainId4;\n\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n\n  if (!tx) {\n    return;\n  }\n\n  tx.receipt = receipt;\n  tx.confirmedTime = now();\n}));","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/transactions/reducer.ts"],"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","payload","chainId","from","hash","approval","summary","claim","Error","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,oBAHF,EAIEC,mBAJF,QAMO,WANP;;AAQA,MAAMC,GAAG,GAAG,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AAoBA,OAAO,MAAMC,YAA8B,GAAG,EAAvC;AAEP,eAAeR,aAAa,CAACQ,YAAD,EAAgBC,OAAD,IACzCA,OAAO,CACJC,OADH,CACWT,cADX,EAC2B,CAACU,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,OAAjC;AAA0CC,IAAAA;AAA1C;AAAX,CAAf,KAAkF;AAAA;;AACzG,+BAAIP,YAAY,CAACE,OAAD,CAAhB,0DAAI,sBAAwBE,IAAxB,CAAJ,EAAmC;AACjC,UAAMI,KAAK,CAAC,wCAAD,CAAX;AACD;;AACD,QAAMC,GAAG,6BAAGT,YAAY,CAACE,OAAD,CAAf,2EAA4B,EAArC;AACAO,EAAAA,GAAG,CAACL,IAAD,CAAH,GAAY;AAAEA,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,KAA3B;AAAkCJ,IAAAA,IAAlC;AAAwCO,IAAAA,SAAS,EAAEhB,GAAG;AAAtD,GAAZ;AACAM,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwBO,GAAxB;AACD,CARH,EASGV,OATH,CASWP,oBATX,EASiC,CAACQ,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAAf,KAA4C;AACzE,MAAI,CAACF,YAAY,CAACE,OAAD,CAAjB,EAA4B;AAC5BF,EAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwB,EAAxB;AACD,CAZH,EAaGH,OAbH,CAaWR,kBAbX,EAa+B,CAACS,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAF;AAAWE,IAAAA,IAAX;AAAiBO,IAAAA;AAAjB;AAAX,CAAf,KAA+D;AAAA;;AAC1F,QAAMC,EAAE,6BAAGZ,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBE,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACD,MAAI,CAACA,EAAE,CAACC,sBAAR,EAAgC;AAC9BD,IAAAA,EAAE,CAACC,sBAAH,GAA4BF,WAA5B;AACD,GAFD,MAEO;AACLC,IAAAA,EAAE,CAACC,sBAAH,GAA4BC,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAsBC,EAAE,CAACC,sBAAzB,CAA5B;AACD;AACF,CAvBH,EAwBGd,OAxBH,CAwBWN,mBAxBX,EAwBgC,CAACO,YAAD,EAAe;AAAEC,EAAAA,OAAO,EAAE;AAAEG,IAAAA,IAAF;AAAQF,IAAAA,OAAR;AAAiBc,IAAAA;AAAjB;AAAX,CAAf,KAA2D;AAAA;;AACvF,QAAMJ,EAAE,6BAAGZ,YAAY,CAACE,OAAD,CAAf,2DAAG,uBAAwBE,IAAxB,CAAX;;AACA,MAAI,CAACQ,EAAL,EAAS;AACP;AACD;;AACDA,EAAAA,EAAE,CAACI,OAAH,GAAaA,OAAb;AACAJ,EAAAA,EAAE,CAACK,aAAH,GAAmBvB,GAAG,EAAtB;AACD,CA/BH,CAD0B,CAA5B","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions'\r\n\r\nconst now = () => new Date().getTime()\r\n\r\nexport interface TransactionDetails {\r\n  hash: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n  claim?: { recipient: string }\r\n  receipt?: SerializableTransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  addedTime: number\r\n  confirmedTime?: number\r\n  from: string\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails\r\n  }\r\n}\r\n\r\nexport const initialState: TransactionState = {}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.')\r\n      }\r\n      const txs = transactions[chainId] ?? {}\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\r\n      transactions[chainId] = txs\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return\r\n      transactions[chainId] = {}\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      tx.receipt = receipt\r\n      tx.confirmedTime = now()\r\n    }),\r\n)\r\n"]},"metadata":{},"sourceType":"module"}