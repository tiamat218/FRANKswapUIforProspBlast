{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport erc20ABI from 'config/abi/erc20.json';\nimport multicall from 'utils/multicall';\nimport { getMasterchefContract } from 'utils/contractHelpers';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport BigNumber from 'bignumber.js'; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nconst nonBnbPools = poolsConfig.filter(p => p.stakingToken.symbol !== 'BNB');\nconst bnbPools = poolsConfig.filter(p => p.stakingToken.symbol === 'BNB');\nconst nonMasterPools = poolsConfig.filter(p => p.sousId !== 0);\nconst masterChefContract = getMasterchefContract();\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'allowance',\n    params: [account, getAddress(p.contractAddress)]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserBalances = async account => {\n  // Non BNB pools\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'balanceOf',\n    params: [account]\n  }));\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  const tokenBalances = nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON()\n  }), {}); // BNB pools\n\n  const bnbBalance = await simpleRpcProvider.getBalance(account);\n  const bnbBalances = bnbPools.reduce((acc, pool) => ({ ...acc,\n    [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON()\n  }), {});\n  return { ...tokenBalances,\n    ...bnbBalances\n  };\n};\nexport const fetchUserStakeBalances = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account]\n  }));\n  const userInfo = await multicall(sousChefABI, calls);\n  const stakedBalances = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const {\n    amount: masterPoolAmount\n  } = await masterChefContract.userInfo('0', account);\n  return { ...stakedBalances,\n    0: new BigNumber(masterPoolAmount.toString()).toJSON()\n  };\n};\nexport const fetchUserPendingRewards = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account]\n  }));\n  const res = await multicall(sousChefABI, calls);\n  const pendingRewards = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(res[index]).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const pendingReward = await masterChefContract.pendingCake('0', account);\n  return { ...pendingRewards,\n    0: new BigNumber(pendingReward.toString()).toJSON()\n  };\n};","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","sousChefABI","erc20ABI","multicall","getMasterchefContract","getAddress","simpleRpcProvider","BigNumber","nonBnbPools","filter","p","stakingToken","symbol","bnbPools","nonMasterPools","sousId","masterChefContract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","bnbBalance","getBalance","bnbBalances","toString","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingReward","pendingCake"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,OAAOC,SAAP,MAAsB,cAAtB,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGR,WAAW,CAACS,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,YAAF,CAAeC,MAAf,KAA0B,KAApD,CAApB;AACA,MAAMC,QAAQ,GAAGb,WAAW,CAACS,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,YAAF,CAAeC,MAAf,KAA0B,KAApD,CAAjB;AACA,MAAME,cAAc,GAAGd,WAAW,CAACS,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACK,MAAF,KAAa,CAAvC,CAAvB;AACA,MAAMC,kBAAkB,GAAGZ,qBAAqB,EAAhD;AAEA,OAAO,MAAMa,mBAAmB,GAAG,MAAOC,OAAP,IAAmB;AACpD,QAAMC,KAAK,GAAGX,WAAW,CAACY,GAAZ,CAAiBV,CAAD,KAAQ;AACpCW,IAAAA,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACC,YAAF,CAAeU,OAAhB,CADiB;AAEpCC,IAAAA,IAAI,EAAE,WAF8B;AAGpCC,IAAAA,MAAM,EAAE,CAACL,OAAD,EAAUb,UAAU,CAACK,CAAC,CAACc,eAAH,CAApB;AAH4B,GAAR,CAAhB,CAAd;AAMA,QAAMC,UAAU,GAAG,MAAMtB,SAAS,CAACD,QAAD,EAAWiB,KAAX,CAAlC;AACA,SAAOX,WAAW,CAACkB,MAAZ,CACL,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EAAE,GAAGF,GAAL;AAAU,KAACC,IAAI,CAACb,MAAN,GAAe,IAAIR,SAAJ,CAAckB,UAAU,CAACI,KAAD,CAAxB,EAAiCC,MAAjC;AAAzB,GAAvB,CADK,EAEL,EAFK,CAAP;AAID,CAZM;AAcP,OAAO,MAAMC,iBAAiB,GAAG,MAAOb,OAAP,IAAmB;AAClD;AACA,QAAMC,KAAK,GAAGX,WAAW,CAACY,GAAZ,CAAiBV,CAAD,KAAQ;AACpCW,IAAAA,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACC,YAAF,CAAeU,OAAhB,CADiB;AAEpCC,IAAAA,IAAI,EAAE,WAF8B;AAGpCC,IAAAA,MAAM,EAAE,CAACL,OAAD;AAH4B,GAAR,CAAhB,CAAd;AAKA,QAAMc,gBAAgB,GAAG,MAAM7B,SAAS,CAACD,QAAD,EAAWiB,KAAX,CAAxC;AACA,QAAMc,aAAa,GAAGzB,WAAW,CAACkB,MAAZ,CACpB,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EAAE,GAAGF,GAAL;AAAU,KAACC,IAAI,CAACb,MAAN,GAAe,IAAIR,SAAJ,CAAcyB,gBAAgB,CAACH,KAAD,CAA9B,EAAuCC,MAAvC;AAAzB,GAAvB,CADoB,EAEpB,EAFoB,CAAtB,CARkD,CAalD;;AACA,QAAMI,UAAU,GAAG,MAAM5B,iBAAiB,CAAC6B,UAAlB,CAA6BjB,OAA7B,CAAzB;AACA,QAAMkB,WAAW,GAAGvB,QAAQ,CAACa,MAAT,CAClB,CAACC,GAAD,EAAMC,IAAN,MAAgB,EAAE,GAAGD,GAAL;AAAU,KAACC,IAAI,CAACb,MAAN,GAAe,IAAIR,SAAJ,CAAc2B,UAAU,CAACG,QAAX,EAAd,EAAqCP,MAArC;AAAzB,GAAhB,CADkB,EAElB,EAFkB,CAApB;AAKA,SAAO,EAAE,GAAGG,aAAL;AAAoB,OAAGG;AAAvB,GAAP;AACD,CArBM;AAuBP,OAAO,MAAME,sBAAsB,GAAG,MAAOpB,OAAP,IAAmB;AACvD,QAAMC,KAAK,GAAGL,cAAc,CAACM,GAAf,CAAoBV,CAAD,KAAQ;AACvCW,IAAAA,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACc,eAAH,CADoB;AAEvCF,IAAAA,IAAI,EAAE,UAFiC;AAGvCC,IAAAA,MAAM,EAAE,CAACL,OAAD;AAH+B,GAAR,CAAnB,CAAd;AAKA,QAAMqB,QAAQ,GAAG,MAAMpC,SAAS,CAACF,WAAD,EAAckB,KAAd,CAAhC;AACA,QAAMqB,cAAc,GAAG1B,cAAc,CAACY,MAAf,CACrB,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EACrB,GAAGF,GADkB;AAErB,KAACC,IAAI,CAACb,MAAN,GAAe,IAAIR,SAAJ,CAAcgC,QAAQ,CAACV,KAAD,CAAR,CAAgBY,MAAhB,CAAuBC,IAArC,EAA2CZ,MAA3C;AAFM,GAAvB,CADqB,EAKrB,EALqB,CAAvB,CAPuD,CAevD;;AACA,QAAM;AAAEW,IAAAA,MAAM,EAAEE;AAAV,MAA+B,MAAM3B,kBAAkB,CAACuB,QAAnB,CAA4B,GAA5B,EAAiCrB,OAAjC,CAA3C;AAEA,SAAO,EAAE,GAAGsB,cAAL;AAAqB,OAAG,IAAIjC,SAAJ,CAAcoC,gBAAgB,CAACN,QAAjB,EAAd,EAA2CP,MAA3C;AAAxB,GAAP;AACD,CAnBM;AAqBP,OAAO,MAAMc,uBAAuB,GAAG,MAAO1B,OAAP,IAAmB;AACxD,QAAMC,KAAK,GAAGL,cAAc,CAACM,GAAf,CAAoBV,CAAD,KAAQ;AACvCW,IAAAA,OAAO,EAAEhB,UAAU,CAACK,CAAC,CAACc,eAAH,CADoB;AAEvCF,IAAAA,IAAI,EAAE,eAFiC;AAGvCC,IAAAA,MAAM,EAAE,CAACL,OAAD;AAH+B,GAAR,CAAnB,CAAd;AAKA,QAAM2B,GAAG,GAAG,MAAM1C,SAAS,CAACF,WAAD,EAAckB,KAAd,CAA3B;AACA,QAAM2B,cAAc,GAAGhC,cAAc,CAACY,MAAf,CACrB,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EACrB,GAAGF,GADkB;AAErB,KAACC,IAAI,CAACb,MAAN,GAAe,IAAIR,SAAJ,CAAcsC,GAAG,CAAChB,KAAD,CAAjB,EAA0BC,MAA1B;AAFM,GAAvB,CADqB,EAKrB,EALqB,CAAvB,CAPwD,CAexD;;AACA,QAAMiB,aAAa,GAAG,MAAM/B,kBAAkB,CAACgC,WAAnB,CAA+B,GAA/B,EAAoC9B,OAApC,CAA5B;AAEA,SAAO,EAAE,GAAG4B,cAAL;AAAqB,OAAG,IAAIvC,SAAJ,CAAcwC,aAAa,CAACV,QAAd,EAAd,EAAwCP,MAAxC;AAAxB,GAAP;AACD,CAnBM","sourcesContent":["import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst masterChefContract = getMasterchefContract()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.pendingCake('0', account)\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}