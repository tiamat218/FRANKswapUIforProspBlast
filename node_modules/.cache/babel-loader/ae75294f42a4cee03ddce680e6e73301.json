{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers';\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance';\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\n  return {\n    cakeAsNumberBalance,\n    cakeAsBigNumber,\n    cakeAsDisplayBalance\n  };\n};\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\n  return {\n    sharesAsNumberBalance,\n    sharesAsBigNumber,\n    sharesAsDisplayBalance\n  };\n};\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288;\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1;\nexport const getAprData = (pool, performanceFee) => {\n  const {\n    isAutoVault,\n    earningTokenPrice,\n    apr\n  } = pool;\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimals = isHighValueToken ? 4 : 2;\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY;\n  if (isAutoVault) {\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice;\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n      numberOfDays: 365,\n      farmApr: apr,\n      tokenPrice: earningTokenPrice,\n      roundingDecimals,\n      compoundFrequency,\n      performanceFee\n    });\n    const autoApr = getRoi({\n      amountEarned: tokenEarnedPerThousand365D,\n      amountInvested: oneThousandDollarsWorthOfToken\n    });\n    return {\n      apr: autoApr,\n      isHighValueToken,\n      roundingDecimals,\n      compoundFrequency\n    };\n  }\n  return {\n    apr,\n    isHighValueToken,\n    roundingDecimals,\n    compoundFrequency\n  };\n};\nexport const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice) => {\n  const hasAutoEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction);\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0;\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\n  return {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  };\n};\nexport const getPoolBlockInfo = (pool, currentBlock) => {\n  const {\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\n  return {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  };\n};","map":{"version":3,"names":["BigNumber","getRoi","tokenEarnedPerThousandDollarsCompounding","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","earningTokenPrice","apr","isHighValueToken","Math","round","roundingDecimals","compoundFrequency","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","numberOfDays","farmApr","tokenPrice","autoApr","amountEarned","amountInvested","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/views/Pools/helpers.tsx"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { Pool } from 'state/types'\r\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\r\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\r\n\r\nexport const getAprData = (pool: Pool, performanceFee: number) => {\r\n  const { isAutoVault, earningTokenPrice, apr } = pool\r\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\r\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\r\n  const roundingDecimals = isHighValueToken ? 4 : 2\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\r\n\r\n  if (isAutoVault) {\r\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\r\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\r\n      numberOfDays: 365,\r\n      farmApr: apr,\r\n      tokenPrice: earningTokenPrice,\r\n      roundingDecimals,\r\n      compoundFrequency,\r\n      performanceFee,\r\n    })\r\n    const autoApr = getRoi({\r\n      amountEarned: tokenEarnedPerThousand365D,\r\n      amountInvested: oneThousandDollarsWorthOfToken,\r\n    })\r\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n  }\r\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}