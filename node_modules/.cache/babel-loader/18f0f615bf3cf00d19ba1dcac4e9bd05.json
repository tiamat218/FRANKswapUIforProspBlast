{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nexport const fetchFarmUserAllowances = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChefAddress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\nexport const fetchFarmUserTokenBalances = async (account, farmsToFetch) => {\n  const calls = farmsToFetch.map(farm => {\n    const lpContractAddress = getAddress(farm.lpAddresses);\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  });\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\nexport const fetchFarmUserStakedBalances = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    return {\n      address: masterChefAddress,\n      name: 'userInfo',\n      params: [farm.pid, account]\n    };\n  });\n  const rawStakedBalances = await multicall(masterchefABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON();\n  });\n  return parsedStakedBalances;\n};\nexport const fetchFarmUserEarnings = async (account, farmsToFetch) => {\n  const masterChefAddress = getMasterChefAddress();\n  const calls = farmsToFetch.map(farm => {\n    return {\n      address: masterChefAddress,\n      name: 'pendingCake',\n      params: [farm.pid, account]\n    };\n  });\n  const rawEarnings = await multicall(masterchefABI, calls);\n  const parsedEarnings = rawEarnings.map(earnings => {\n    return new BigNumber(earnings).toJSON();\n  });\n  return parsedEarnings;\n};","map":{"version":3,"names":["BigNumber","erc20ABI","masterchefABI","multicall","getAddress","getMasterChefAddress","fetchFarmUserAllowances","account","farmsToFetch","masterChefAddress","calls","map","farm","lpContractAddress","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/farms/fetchFarmUser.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { FarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: FarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'pendingCake',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}