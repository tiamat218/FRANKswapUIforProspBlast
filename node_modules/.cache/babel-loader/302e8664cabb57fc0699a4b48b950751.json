{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Predictions\\\\components\\\\RoundCard\\\\OpenRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { BetPosition } from 'state/types';\nimport { useGetIntervalBlocks } from 'state/hooks';\nimport { useBlock } from 'state/block/hooks';\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions';\nimport useToast from 'hooks/useToast';\nimport CardFlip from '../CardFlip';\nimport { formatBnbv2 } from '../../helpers';\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport Card from './Card';\nimport CardHeader from './CardHeader';\nimport SetPositionCard from './SetPositionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OpenRoundCard = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    isSettingPosition: false,\n    position: BetPosition.BULL\n  });\n  const {\n    t\n  } = useTranslation();\n  const interval = useGetIntervalBlocks();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    isSettingPosition,\n    position\n  } = state;\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING);\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase();\n  const {\n    targetRef,\n    tooltipVisible,\n    tooltip\n  } = useTooltip( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      whiteSpace: 'nowrap'\n    },\n    children: `${formatBnbv2(betAmount)} BNB`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), {\n    placement: 'top'\n  }); // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING);\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false;\n    }\n\n    if (round.lockPrice !== null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const canEnterPosition = getCanEnterPosition();\n\n  const handleBack = () => setState(prevState => ({ ...prevState,\n    isSettingPosition: false\n  }));\n\n  const handleSetPosition = newPosition => {\n    setState(prevState => ({ ...prevState,\n      isSettingPosition: true,\n      position: newPosition\n    }));\n  };\n\n  const togglePosition = () => {\n    setState(prevState => ({ ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL\n    }));\n  };\n\n  const handleSuccess = async () => {\n    await dispatch(fetchLedgerData({\n      account,\n      epochs: [round.epoch]\n    }));\n    handleBack();\n    toastSuccess(t('Success!'), t('%position% position entered', {\n      position: positionDisplay\n    }));\n  };\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? /*#__PURE__*/_jsxDEV(ArrowUpIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 44\n    }, this) : /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 83\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardFlip, {\n    isFlipped: isSettingPosition,\n    height: \"404px\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        status: \"next\",\n        epoch: round.epoch,\n        blockNumber: estimatedLockBlock,\n        icon: /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"white\",\n          mr: \"4px\",\n          width: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this),\n        title: t('Next')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        p: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bullMultiplier,\n          hasEntered: hasEnteredUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n          isNext: canEnterPosition,\n          isLive: !canEnterPosition,\n          children: canEnterPosition ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount,\n              mb: \"8px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BULL),\n              mb: \"4px\",\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter UP')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BEAR),\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter DOWN')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: targetRef,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: true,\n                startIcon: getPositionEnteredIcon(),\n                width: \"100%\",\n                mb: \"8px\",\n                children: t('%position% Entered', {\n                  position: positionDisplay\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), tooltipVisible && tooltip]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bearMultiplier,\n          betPosition: BetPosition.BEAR,\n          hasEntered: hasEnteredDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SetPositionCard, {\n      onBack: handleBack,\n      onSuccess: handleSuccess,\n      position: position,\n      togglePosition: togglePosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OpenRoundCard, \"EugmB405IVjMdoc/fOHsbYgo39I=\", false, function () {\n  return [useTranslation, useGetIntervalBlocks, useToast, useWeb3React, useAppDispatch, useBlock, useTooltip];\n});\n\n_c = OpenRoundCard;\nexport default OpenRoundCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenRoundCard\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx"],"names":["React","useState","useWeb3React","CardBody","PlayCircleOutlineIcon","Button","useTooltip","ArrowUpIcon","ArrowDownIcon","useTranslation","useAppDispatch","BetPosition","useGetIntervalBlocks","useBlock","BLOCK_PADDING","fetchLedgerData","useToast","CardFlip","formatBnbv2","RoundResultBox","PrizePoolRow","MultiplierArrow","Card","CardHeader","SetPositionCard","OpenRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","state","setState","isSettingPosition","position","BULL","t","interval","toastSuccess","account","dispatch","currentBlock","isBufferPhase","startBlock","positionDisplay","toUpperCase","targetRef","tooltipVisible","tooltip","whiteSpace","placement","estimatedLockBlock","getCanEnterPosition","lockPrice","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","togglePosition","BEAR","handleSuccess","epochs","epoch","getPositionEnteredIcon","totalAmount"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { useGetIntervalBlocks } from 'state/hooks'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\r\nimport useToast from 'hooks/useToast'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport Card from './Card'\r\nimport CardHeader from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const interval = useGetIntervalBlocks()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { currentBlock } = useBlock()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\r\n  // to the start block\r\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\r\n\r\n  const getCanEnterPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getCanEnterPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          blockNumber={estimatedLockBlock}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n"]},"metadata":{},"sourceType":"module"}