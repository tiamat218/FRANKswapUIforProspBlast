{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\components\\\\PageSection\\\\CurvedDivider.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ConcaveTop, ConcaveBottom, ConvexTop, ConvexBottom } from './svg/CurvedSvg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  background: ${({\n  theme,\n  dividerFill\n}) => {\n  if (theme.isDark) {\n    return (dividerFill === null || dividerFill === void 0 ? void 0 : dividerFill.dark) || (dividerFill === null || dividerFill === void 0 ? void 0 : dividerFill.light) || 'none';\n  }\n\n  return (dividerFill === null || dividerFill === void 0 ? void 0 : dividerFill.light) || (dividerFill === null || dividerFill === void 0 ? void 0 : dividerFill.dark) || 'none';\n}};\n  z-index: ${({\n  index\n}) => index};\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n_c = Wrapper;\nconst ComponentWrapper = styled.div`\n  z-index: ${({\n  index\n}) => index + 1};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n_c2 = ComponentWrapper;\n\nconst CurvedDivider = ({\n  index,\n  dividerPosition,\n  dividerComponent,\n  concave,\n  clipFill,\n  dividerFill\n}) => {\n  const showConvexTop = dividerPosition === 'top' && !concave;\n  const showConvexBottom = dividerPosition === 'bottom' && !concave;\n  const showConcaveTop = dividerPosition === 'top' && concave;\n  const showConcaveBottom = dividerPosition === 'bottom' && concave;\n\n  const getconcaveDivider = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showConcaveTop && /*#__PURE__*/_jsxDEV(ConcaveTop, {\n        clipFill: clipFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 28\n      }, this), showConcaveBottom && /*#__PURE__*/_jsxDEV(ConcaveBottom, {\n        clipFill: clipFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true);\n  };\n\n  const getConvexDivider = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showConvexTop && /*#__PURE__*/_jsxDEV(ConvexTop, {\n        clipFill: clipFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 27\n      }, this), showConvexBottom && /*#__PURE__*/_jsxDEV(ConvexBottom, {\n        clipFill: clipFill\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    index: index,\n    dividerFill: dividerFill,\n    children: [dividerComponent && /*#__PURE__*/_jsxDEV(ComponentWrapper, {\n      index: index,\n      children: dividerComponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 28\n    }, this), getconcaveDivider(), getConvexDivider()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = CurvedDivider;\nexport default CurvedDivider;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"ComponentWrapper\");\n$RefreshReg$(_c3, \"CurvedDivider\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/components/PageSection/CurvedDivider.tsx"],"names":["React","styled","ConcaveTop","ConcaveBottom","ConvexTop","ConvexBottom","Wrapper","div","theme","dividerFill","isDark","dark","light","index","ComponentWrapper","CurvedDivider","dividerPosition","dividerComponent","concave","clipFill","showConvexTop","showConvexBottom","showConcaveTop","showConcaveBottom","getconcaveDivider","getConvexDivider"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,SAApC,EAA+CC,YAA/C,QAAmE,iBAAnE;;;AAeA,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAkB;AACzC,gBAAgB,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AACxC,MAAID,KAAK,CAACE,MAAV,EAAkB;AAChB,WAAO,CAAAD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEE,IAAb,MAAqBF,WAArB,aAAqBA,WAArB,uBAAqBA,WAAW,CAAEG,KAAlC,KAA2C,MAAlD;AACD;;AACD,SAAO,CAAAH,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,KAAb,MAAsBH,WAAtB,aAAsBA,WAAtB,uBAAsBA,WAAW,CAAEE,IAAnC,KAA2C,MAAlD;AACD,CAAC;AACJ,aAAa,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAeA,KAAM;AAClC;AACA;AACA;AACA;AACA,CAZA;KAAMP,O;AAcN,MAAMQ,gBAAgB,GAAGb,MAAM,CAACM,GAAkB;AAClD,aAAa,CAAC;AAAEM,EAAAA;AAAF,CAAD,KAAeA,KAAK,GAAG,CAAE;AACtC;AACA;AACA;AACA;AACA,CANA;MAAMC,gB;;AAQN,MAAMC,aAA2C,GAAG,CAAC;AACnDF,EAAAA,KADmD;AAEnDG,EAAAA,eAFmD;AAGnDC,EAAAA,gBAHmD;AAInDC,EAAAA,OAJmD;AAKnDC,EAAAA,QALmD;AAMnDV,EAAAA;AANmD,CAAD,KAO9C;AACJ,QAAMW,aAAa,GAAGJ,eAAe,KAAK,KAApB,IAA6B,CAACE,OAApD;AACA,QAAMG,gBAAgB,GAAGL,eAAe,KAAK,QAApB,IAAgC,CAACE,OAA1D;AACA,QAAMI,cAAc,GAAGN,eAAe,KAAK,KAApB,IAA6BE,OAApD;AACA,QAAMK,iBAAiB,GAAGP,eAAe,KAAK,QAApB,IAAgCE,OAA1D;;AAEA,QAAMM,iBAAiB,GAAG,MAAM;AAC9B,wBACE;AAAA,iBACGF,cAAc,iBAAI,QAAC,UAAD;AAAY,QAAA,QAAQ,EAAEH;AAAtB;AAAA;AAAA;AAAA;AAAA,cADrB,EAEGI,iBAAiB,iBAAI,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAEJ;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFxB;AAAA,oBADF;AAMD,GAPD;;AASA,QAAMM,gBAAgB,GAAG,MAAM;AAC7B,wBACE;AAAA,iBACGL,aAAa,iBAAI,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAED;AAArB;AAAA;AAAA;AAAA;AAAA,cADpB,EAEGE,gBAAgB,iBAAI,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAEF;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFvB;AAAA,oBADF;AAMD,GAPD;;AASA,sBACE,QAAC,OAAD;AAAS,IAAA,KAAK,EAAEN,KAAhB;AAAuB,IAAA,WAAW,EAAEJ,WAApC;AAAA,eACGQ,gBAAgB,iBAAI,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEJ,KAAzB;AAAA,gBAAiCI;AAAjC;AAAA;AAAA;AAAA;AAAA,YADvB,EAEGO,iBAAiB,EAFpB,EAGGC,gBAAgB,EAHnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAtCD;;MAAMV,a;AAwCN,eAAeA,aAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ConcaveTop, ConcaveBottom, ConvexTop, ConvexBottom } from './svg/CurvedSvg'\r\nimport { DividerFill, ClipFill } from './types'\r\n\r\ninterface CurvedDividerProps extends WrapperProps {\r\n  svgFill?: string\r\n  dividerComponent?: React.ReactNode\r\n  dividerPosition?: 'top' | 'bottom'\r\n  concave?: boolean\r\n  clipFill?: ClipFill\r\n}\r\ninterface WrapperProps {\r\n  index: number\r\n  dividerFill?: DividerFill\r\n}\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n  background: ${({ theme, dividerFill }) => {\r\n    if (theme.isDark) {\r\n      return dividerFill?.dark || dividerFill?.light || 'none'\r\n    }\r\n    return dividerFill?.light || dividerFill?.dark || 'none'\r\n  }};\r\n  z-index: ${({ index }) => index};\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n`\r\n\r\nconst ComponentWrapper = styled.div<WrapperProps>`\r\n  z-index: ${({ index }) => index + 1};\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`\r\n\r\nconst CurvedDivider: React.FC<CurvedDividerProps> = ({\r\n  index,\r\n  dividerPosition,\r\n  dividerComponent,\r\n  concave,\r\n  clipFill,\r\n  dividerFill,\r\n}) => {\r\n  const showConvexTop = dividerPosition === 'top' && !concave\r\n  const showConvexBottom = dividerPosition === 'bottom' && !concave\r\n  const showConcaveTop = dividerPosition === 'top' && concave\r\n  const showConcaveBottom = dividerPosition === 'bottom' && concave\r\n\r\n  const getconcaveDivider = () => {\r\n    return (\r\n      <>\r\n        {showConcaveTop && <ConcaveTop clipFill={clipFill} />}\r\n        {showConcaveBottom && <ConcaveBottom clipFill={clipFill} />}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getConvexDivider = () => {\r\n    return (\r\n      <>\r\n        {showConvexTop && <ConvexTop clipFill={clipFill} />}\r\n        {showConvexBottom && <ConvexBottom clipFill={clipFill} />}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper index={index} dividerFill={dividerFill}>\r\n      {dividerComponent && <ComponentWrapper index={index}>{dividerComponent}</ComponentWrapper>}\r\n      {getconcaveDivider()}\r\n      {getConvexDivider()}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CurvedDivider\r\n"]},"metadata":{},"sourceType":"module"}