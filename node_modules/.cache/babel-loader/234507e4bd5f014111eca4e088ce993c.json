{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Devrim\\\\Documents\\\\FRANKswapUIforProspBlast\\\\src\\\\views\\\\Lottery\\\\components\\\\RewardBracketDetail.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport Balance from 'components/Balance';\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RewardBracketDetail = ({\n  rewardBracket,\n  cakeAmount,\n  numberWinners,\n  isHistoricRound,\n  isBurn,\n  isLoading\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const cakePriceBusd = usePriceCakeBusd();\n\n  const getRewardText = () => {\n    const numberMatch = rewardBracket + 1;\n\n    if (isBurn) {\n      return t('Burn');\n    }\n\n    if (rewardBracket === 5) {\n      return t('Match all %numberMatch%', {\n        numberMatch\n      });\n    }\n\n    return t('Match first %numberMatch%', {\n      numberMatch\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: [isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      mb: \"4px\",\n      mt: \"8px\",\n      height: 16,\n      width: 80\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      color: isBurn ? 'failure' : 'secondary',\n      children: getRewardText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [isLoading || cakeAmount.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"4px\",\n        mr: \"10px\",\n        height: 20,\n        width: 110\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"20px\",\n        bold: true,\n        unit: \" CAKE\",\n        value: getBalanceNumber(cakeAmount),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), isLoading || cakeAmount.isNaN() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          mt: \"4px\",\n          mb: \"16px\",\n          height: 12,\n          width: 70\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        prefix: \"~$\",\n        value: getBalanceNumber(cakeAmount.times(cakePriceBusd)),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), isHistoricRound && cakeAmount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [numberWinners !== '0' && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: [getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2), \" CAKE \", t('each')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: [numberWinners, \" \", t('Winners')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardBracketDetail, \"vmqtI5HVIrEp4jEZDUzzJIWSERY=\", false, function () {\n  return [useTranslation, usePriceCakeBusd];\n});\n\n_c = RewardBracketDetail;\nexport default RewardBracketDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"RewardBracketDetail\");","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Lottery/components/RewardBracketDetail.tsx"],"names":["React","Flex","Skeleton","Text","useTranslation","usePriceCakeBusd","Balance","getBalanceNumber","getFullDisplayBalance","RewardBracketDetail","rewardBracket","cakeAmount","numberWinners","isHistoricRound","isBurn","isLoading","t","cakePriceBusd","getRewardText","numberMatch","isNaN","times","div","parseInt"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface RewardBracketDetailProps {\r\n  cakeAmount: BigNumber\r\n  rewardBracket?: number\r\n  numberWinners?: string\r\n  isBurn?: boolean\r\n  isHistoricRound?: boolean\r\n  isLoading?: boolean\r\n}\r\n\r\nconst RewardBracketDetail: React.FC<RewardBracketDetailProps> = ({\r\n  rewardBracket,\r\n  cakeAmount,\r\n  numberWinners,\r\n  isHistoricRound,\r\n  isBurn,\r\n  isLoading,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  const getRewardText = () => {\r\n    const numberMatch = rewardBracket + 1\r\n    if (isBurn) {\r\n      return t('Burn')\r\n    }\r\n    if (rewardBracket === 5) {\r\n      return t('Match all %numberMatch%', { numberMatch })\r\n    }\r\n    return t('Match first %numberMatch%', { numberMatch })\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      {isLoading ? (\r\n        <Skeleton mb=\"4px\" mt=\"8px\" height={16} width={80} />\r\n      ) : (\r\n        <Text bold color={isBurn ? 'failure' : 'secondary'}>\r\n          {getRewardText()}\r\n        </Text>\r\n      )}\r\n      <>\r\n        {isLoading || cakeAmount.isNaN() ? (\r\n          <Skeleton my=\"4px\" mr=\"10px\" height={20} width={110} />\r\n        ) : (\r\n          <Balance fontSize=\"20px\" bold unit=\" CAKE\" value={getBalanceNumber(cakeAmount)} decimals={0} />\r\n        )}\r\n        {isLoading || cakeAmount.isNaN() ? (\r\n          <>\r\n            <Skeleton mt=\"4px\" mb=\"16px\" height={12} width={70} />\r\n          </>\r\n        ) : (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            prefix=\"~$\"\r\n            value={getBalanceNumber(cakeAmount.times(cakePriceBusd))}\r\n            decimals={0}\r\n          />\r\n        )}\r\n        {isHistoricRound && cakeAmount && (\r\n          <>\r\n            {numberWinners !== '0' && (\r\n              <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                {getFullDisplayBalance(cakeAmount.div(parseInt(numberWinners, 10)), 18, 2)} CAKE {t('each')}\r\n              </Text>\r\n            )}\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {numberWinners} {t('Winners')}\r\n            </Text>\r\n          </>\r\n        )}\r\n      </>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RewardBracketDetail\r\n"]},"metadata":{},"sourceType":"module"}