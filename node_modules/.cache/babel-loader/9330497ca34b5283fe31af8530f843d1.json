{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{Field,resetMintState,typeInput}from'./actions';const initialState={independentField:Field.CURRENCY_A,typedValue:'',otherTypedValue:''};export default createReducer(initialState,builder=>builder.addCase(resetMintState,()=>initialState).addCase(typeInput,(state,_ref)=>{let{payload:{field,typedValue,noLiquidity}}=_ref;if(noLiquidity){// they're typing into the field they've last typed in\nif(field===state.independentField){return{...state,independentField:field,typedValue};}// they're typing into a new field, store the other value\nreturn{...state,independentField:field,typedValue,otherTypedValue:state.typedValue};}return{...state,independentField:field,typedValue,otherTypedValue:''};}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","_ref","payload","field","noLiquidity"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, resetMintState, typeInput } from './actions'\r\n\r\nexport interface MintState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly otherTypedValue: string // for the case when there's no liquidity\r\n}\r\n\r\nconst initialState: MintState = {\r\n  independentField: Field.CURRENCY_A,\r\n  typedValue: '',\r\n  otherTypedValue: '',\r\n}\r\n\r\nexport default createReducer<MintState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(resetMintState, () => initialState)\r\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\r\n      if (noLiquidity) {\r\n        // they're typing into the field they've last typed in\r\n        if (field === state.independentField) {\r\n          return {\r\n            ...state,\r\n            independentField: field,\r\n            typedValue,\r\n          }\r\n        }\r\n        // they're typing into a new field, store the other value\r\n\r\n        return {\r\n          ...state,\r\n          independentField: field,\r\n          typedValue,\r\n          otherTypedValue: state.typedValue,\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n        otherTypedValue: '',\r\n      }\r\n    }),\r\n)\r\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,kBAAkB,CAChD,OAASC,KAAK,CAAEC,cAAc,CAAEC,SAAS,KAAQ,WAAW,CAQ5D,KAAM,CAAAC,YAAuB,CAAG,CAC9BC,gBAAgB,CAAEJ,KAAK,CAACK,UAAU,CAClCC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,EACnB,CAAC,CAED,cAAe,CAAAR,aAAa,CAAYI,YAAY,CAAGK,OAAO,EAC5DA,OAAO,CACJC,OAAO,CAACR,cAAc,CAAE,IAAME,YAAY,CAAC,CAC3CM,OAAO,CAACP,SAAS,CAAE,CAACQ,KAAK,CAAAC,IAAA,GAAsD,IAApD,CAAEC,OAAO,CAAE,CAAEC,KAAK,CAAEP,UAAU,CAAEQ,WAAY,CAAE,CAAC,CAAAH,IAAA,CACzE,GAAIG,WAAW,CAAE,CACf;AACA,GAAID,KAAK,GAAKH,KAAK,CAACN,gBAAgB,CAAE,CACpC,MAAO,CACL,GAAGM,KAAK,CACRN,gBAAgB,CAAES,KAAK,CACvBP,UACF,CAAC,CACH,CACA;AAEA,MAAO,CACL,GAAGI,KAAK,CACRN,gBAAgB,CAAES,KAAK,CACvBP,UAAU,CACVC,eAAe,CAAEG,KAAK,CAACJ,UACzB,CAAC,CACH,CACA,MAAO,CACL,GAAGI,KAAK,CACRN,gBAAgB,CAAES,KAAK,CACvBP,UAAU,CACVC,eAAe,CAAE,EACnB,CAAC,CACH,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}