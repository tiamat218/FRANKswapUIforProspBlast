{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { simpleRpcProvider } from 'utils/providers';\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\n\nconst useBlockCountdown = blockNumber => {\n  _s();\n\n  const timer = useRef(null);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  useEffect(() => {\n    const startCountdown = async () => {\n      const currentBlock = await simpleRpcProvider.getBlockNumber();\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME); // Clear previous interval\n\n        if (timer.current) {\n          clearInterval(timer.current);\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining(prevSecondsRemaining => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current);\n            }\n\n            return prevSecondsRemaining - 1;\n          });\n        }, 1000);\n      }\n    };\n\n    startCountdown();\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, [setSecondsRemaining, blockNumber, timer]);\n  return secondsRemaining;\n};\n\n_s(useBlockCountdown, \"L/8B19HXGe7mB9ThV0OJov/Kjlw=\");\n\nexport default useBlockCountdown;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/useGetBlockCountdown.ts"],"names":["useEffect","useRef","useState","BSC_BLOCK_TIME","simpleRpcProvider","useBlockCountdown","blockNumber","timer","secondsRemaining","setSecondsRemaining","startCountdown","currentBlock","getBlockNumber","current","clearInterval","setInterval","prevSecondsRemaining"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAIC,WAAD,IAAyB;AAAA;;AACjD,QAAMC,KAAK,GAAGN,MAAM,CAAgC,IAAhC,CAApB;AACA,QAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,CAAD,CAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,cAAc,GAAG,YAAY;AACjC,YAAMC,YAAY,GAAG,MAAMP,iBAAiB,CAACQ,cAAlB,EAA3B;;AAEA,UAAIN,WAAW,GAAGK,YAAlB,EAAgC;AAC9BF,QAAAA,mBAAmB,CAAC,CAACH,WAAW,GAAGK,YAAf,IAA+BR,cAAhC,CAAnB,CAD8B,CAG9B;;AACA,YAAII,KAAK,CAACM,OAAV,EAAmB;AACjBC,UAAAA,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb;AACD;;AAEDN,QAAAA,KAAK,CAACM,OAAN,GAAgBE,WAAW,CAAC,MAAM;AAChCN,UAAAA,mBAAmB,CAAEO,oBAAD,IAA0B;AAC5C,gBAAIA,oBAAoB,KAAK,CAA7B,EAAgC;AAC9BF,cAAAA,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb;AACD;;AAED,mBAAOG,oBAAoB,GAAG,CAA9B;AACD,WANkB,CAAnB;AAOD,SAR0B,EAQxB,IARwB,CAA3B;AASD;AACF,KArBD;;AAuBAN,IAAAA,cAAc;AAEd,WAAO,MAAM;AACXI,MAAAA,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb;AACD,KAFD;AAGD,GA7BQ,EA6BN,CAACJ,mBAAD,EAAsBH,WAAtB,EAAmCC,KAAnC,CA7BM,CAAT;AA+BA,SAAOC,gBAAP;AACD,CApCD;;GAAMH,iB;;AAsCN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\n/**\r\n * Returns a countdown in seconds of a given block\r\n */\r\nconst useBlockCountdown = (blockNumber: number) => {\r\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const startCountdown = async () => {\r\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n      if (blockNumber > currentBlock) {\r\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\r\n\r\n        // Clear previous interval\r\n        if (timer.current) {\r\n          clearInterval(timer.current)\r\n        }\r\n\r\n        timer.current = setInterval(() => {\r\n          setSecondsRemaining((prevSecondsRemaining) => {\r\n            if (prevSecondsRemaining === 1) {\r\n              clearInterval(timer.current)\r\n            }\r\n\r\n            return prevSecondsRemaining - 1\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n\r\n    startCountdown()\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n    }\r\n  }, [setSecondsRemaining, blockNumber, timer])\r\n\r\n  return secondsRemaining\r\n}\r\n\r\nexport default useBlockCountdown\r\n"]},"metadata":{},"sourceType":"module"}