{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addMulticallListeners, errorFetchingMulticallResults, fetchingMulticallResults, removeMulticallListeners, toCallKey, updateMulticallResults } from './actions';\nconst initialState = {\n  callResults: {}\n};\nexport default createReducer(initialState, builder => builder.addCase(addMulticallListeners, (state, {\n  payload: {\n    calls,\n    chainId,\n    options: {\n      blocksPerFetch = 1\n    } = {}\n  }\n}) => {\n  var _listeners$chainId;\n\n  const listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n  listeners[chainId] = (_listeners$chainId = listeners[chainId]) !== null && _listeners$chainId !== void 0 ? _listeners$chainId : {};\n  calls.forEach(call => {\n    var _listeners$chainId$ca, _listeners$chainId$ca2;\n\n    const callKey = toCallKey(call);\n    listeners[chainId][callKey] = (_listeners$chainId$ca = listeners[chainId][callKey]) !== null && _listeners$chainId$ca !== void 0 ? _listeners$chainId$ca : {};\n    listeners[chainId][callKey][blocksPerFetch] = ((_listeners$chainId$ca2 = listeners[chainId][callKey][blocksPerFetch]) !== null && _listeners$chainId$ca2 !== void 0 ? _listeners$chainId$ca2 : 0) + 1;\n  });\n}).addCase(removeMulticallListeners, (state, {\n  payload: {\n    chainId,\n    calls,\n    options: {\n      blocksPerFetch = 1\n    } = {}\n  }\n}) => {\n  const listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n  if (!listeners[chainId]) return;\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    if (!listeners[chainId][callKey]) return;\n    if (!listeners[chainId][callKey][blocksPerFetch]) return;\n\n    if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n      delete listeners[chainId][callKey][blocksPerFetch];\n    } else {\n      listeners[chainId][callKey][blocksPerFetch]--;\n    }\n  });\n}).addCase(fetchingMulticallResults, (state, {\n  payload: {\n    chainId,\n    fetchingBlockNumber,\n    calls\n  }\n}) => {\n  var _state$callResults$ch;\n\n  state.callResults[chainId] = (_state$callResults$ch = state.callResults[chainId]) !== null && _state$callResults$ch !== void 0 ? _state$callResults$ch : {};\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    const current = state.callResults[chainId][callKey];\n\n    if (!current) {\n      state.callResults[chainId][callKey] = {\n        fetchingBlockNumber\n      };\n    } else {\n      var _current$fetchingBloc;\n\n      if (((_current$fetchingBloc = current.fetchingBlockNumber) !== null && _current$fetchingBloc !== void 0 ? _current$fetchingBloc : 0) >= fetchingBlockNumber) return;\n      state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\n    }\n  });\n}).addCase(errorFetchingMulticallResults, (state, {\n  payload: {\n    fetchingBlockNumber,\n    chainId,\n    calls\n  }\n}) => {\n  var _state$callResults$ch2;\n\n  state.callResults[chainId] = (_state$callResults$ch2 = state.callResults[chainId]) !== null && _state$callResults$ch2 !== void 0 ? _state$callResults$ch2 : {};\n  calls.forEach(call => {\n    const callKey = toCallKey(call);\n    const current = state.callResults[chainId][callKey];\n    if (!current) return; // only should be dispatched if we are already fetching\n\n    if (current.fetchingBlockNumber === fetchingBlockNumber) {\n      delete current.fetchingBlockNumber;\n      current.data = null;\n      current.blockNumber = fetchingBlockNumber;\n    }\n  });\n}).addCase(updateMulticallResults, (state, {\n  payload: {\n    chainId,\n    results,\n    blockNumber\n  }\n}) => {\n  var _state$callResults$ch3;\n\n  state.callResults[chainId] = (_state$callResults$ch3 = state.callResults[chainId]) !== null && _state$callResults$ch3 !== void 0 ? _state$callResults$ch3 : {};\n  Object.keys(results).forEach(callKey => {\n    var _current$blockNumber;\n\n    const current = state.callResults[chainId][callKey];\n    if (((_current$blockNumber = current === null || current === void 0 ? void 0 : current.blockNumber) !== null && _current$blockNumber !== void 0 ? _current$blockNumber : 0) > blockNumber) return;\n    state.callResults[chainId][callKey] = {\n      data: results[callKey],\n      blockNumber\n    };\n  });\n}));","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/multicall/reducer.ts"],"names":["createReducer","addMulticallListeners","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","payload","calls","chainId","options","blocksPerFetch","listeners","callListeners","forEach","call","callKey","fetchingBlockNumber","current","data","blockNumber","results","Object","keys"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number\r\n      }\r\n    }\r\n  }\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null\r\n        blockNumber?: number\r\n        fetchingBlockNumber?: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\r\n      const listeners: MulticallState['callListeners'] = state.callListeners\r\n        ? state.callListeners\r\n        : (state.callListeners = {})\r\n      listeners[chainId] = listeners[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\r\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\r\n      })\r\n    })\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\r\n        const listeners: MulticallState['callListeners'] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {})\r\n\r\n        if (!listeners[chainId]) return\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call)\r\n          if (!listeners[chainId][callKey]) return\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch]\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--\r\n          }\r\n        })\r\n      },\r\n    )\r\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) {\r\n          state.callResults[chainId][callKey] = {\r\n            fetchingBlockNumber,\r\n          }\r\n        } else {\r\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\r\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) return // only should be dispatched if we are already fetching\r\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n          delete current.fetchingBlockNumber\r\n          current.data = null\r\n          current.blockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      Object.keys(results).forEach((callKey) => {\r\n        const current = state.callResults[chainId][callKey]\r\n        if ((current?.blockNumber ?? 0) > blockNumber) return\r\n        state.callResults[chainId][callKey] = {\r\n          data: results[callKey],\r\n          blockNumber,\r\n        }\r\n      })\r\n    }),\r\n)\r\n"]},"metadata":{},"sourceType":"module"}