{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'contexts/Localization';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { multicallv2 } from 'utils/multicall';\nimport profileABI from 'config/abi/pancakeProfile.json';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport useToast from 'hooks/useToast';\nconst useGetProfileCosts = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: BIG_ZERO,\n    numberCakeToRegister: BIG_ZERO,\n    numberCakeToUpdate: BIG_ZERO\n  });\n  const {\n    toastError\n  } = useToast();\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map(method => ({\n          address: getPancakeProfileAddress(),\n          name: method\n        }));\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2(profileABI, calls);\n        setCosts({\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate.toString()),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister.toString()),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate.toString())\n        });\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'));\n      }\n    };\n    fetchCosts();\n  }, [setCosts, toastError, t]);\n  return costs;\n};\n_s(useGetProfileCosts, \"9v8qGnnYoln9qzNO2tawKcnLqRY=\", false, function () {\n  return [useTranslation, useToast];\n});\nexport default useGetProfileCosts;","map":{"version":3,"names":["useEffect","useState","useTranslation","BigNumber","BIG_ZERO","multicallv2","profileABI","getPancakeProfileAddress","useToast","useGetProfileCosts","_s","t","costs","setCosts","numberCakeToReactivate","numberCakeToRegister","numberCakeToUpdate","toastError","fetchCosts","calls","map","method","address","name","toString","error"],"sources":["C:/Users/Devrim/Documents/swapUIforProspBlast/src/views/Profile/hooks/useGetProfileCosts.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: BIG_ZERO,\r\n    numberCakeToRegister: BIG_ZERO,\r\n    numberCakeToUpdate: BIG_ZERO,\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2(\r\n          profileABI,\r\n          calls,\r\n        )\r\n\r\n        setCosts({\r\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate.toString()),\r\n          numberCakeToRegister: new BigNumber(numberCakeToRegister.toString()),\r\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate.toString()),\r\n        })\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return costs\r\n}\r\n\r\nexport default useGetProfileCosts\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,WAAW,QAAQ,iBAAiB;AAC7C,OAAOC,UAAU,MAAM,gCAAgC;AACvD,SAASC,wBAAwB,QAAQ,sBAAsB;AAC/D,OAAOC,QAAQ,MAAM,gBAAgB;AAErC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAE,CAAC,GAAGT,cAAc,CAAC,CAAC;EAC9B,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC;IACjCa,sBAAsB,EAAEV,QAAQ;IAChCW,oBAAoB,EAAEX,QAAQ;IAC9BY,kBAAkB,EAAEZ;EACtB,CAAC,CAAC;EACF,MAAM;IAAEa;EAAW,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAEjCR,SAAS,CAAC,MAAM;IACd,MAAMkB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,KAAK,GAAG,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,oBAAoB,CAAC,CAACC,GAAG,CAAEC,MAAM,KAAM;UACtGC,OAAO,EAAEf,wBAAwB,CAAC,CAAC;UACnCgB,IAAI,EAAEF;QACR,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,CAACP,sBAAsB,CAAC,EAAE,CAACC,oBAAoB,CAAC,EAAE,CAACC,kBAAkB,CAAC,CAAC,GAAG,MAAMX,WAAW,CAChGC,UAAU,EACVa,KACF,CAAC;QAEDN,QAAQ,CAAC;UACPC,sBAAsB,EAAE,IAAIX,SAAS,CAACW,sBAAsB,CAACU,QAAQ,CAAC,CAAC,CAAC;UACxET,oBAAoB,EAAE,IAAIZ,SAAS,CAACY,oBAAoB,CAACS,QAAQ,CAAC,CAAC,CAAC;UACpER,kBAAkB,EAAE,IAAIb,SAAS,CAACa,kBAAkB,CAACQ,QAAQ,CAAC,CAAC;QACjE,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdR,UAAU,CAACN,CAAC,CAAC,OAAO,CAAC,EAAEA,CAAC,CAAC,2CAA2C,CAAC,CAAC;MACxE;IACF,CAAC;IAEDO,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACL,QAAQ,EAAEI,UAAU,EAAEN,CAAC,CAAC,CAAC;EAE7B,OAAOC,KAAK;AACd,CAAC;AAAAF,EAAA,CAnCKD,kBAAkB;EAAA,QACRP,cAAc,EAMLM,QAAQ;AAAA;AA8BjC,eAAeC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module"}