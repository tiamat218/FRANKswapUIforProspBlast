{"ast":null,"code":"const MINUTE_IN_SECONDS=60;const HOUR_IN_SECONDS=3600;const DAY_IN_SECONDS=86400;const MONTH_IN_SECONDS=2629800;const YEAR_IN_SECONDS=31557600;/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */const getTimePeriods=seconds=>{let delta=Math.abs(seconds);const timeLeft={years:0,months:0,days:0,hours:0,minutes:0,seconds:0};if(delta>=YEAR_IN_SECONDS){timeLeft.years=Math.floor(delta/YEAR_IN_SECONDS);delta-=timeLeft.years*YEAR_IN_SECONDS;}if(delta>=MONTH_IN_SECONDS){timeLeft.months=Math.floor(delta/MONTH_IN_SECONDS);delta-=timeLeft.months*MONTH_IN_SECONDS;}if(delta>=DAY_IN_SECONDS){timeLeft.days=Math.floor(delta/DAY_IN_SECONDS);delta-=timeLeft.days*DAY_IN_SECONDS;}if(delta>=HOUR_IN_SECONDS){timeLeft.hours=Math.floor(delta/HOUR_IN_SECONDS);delta-=timeLeft.hours*HOUR_IN_SECONDS;}if(delta>=MINUTE_IN_SECONDS){timeLeft.minutes=Math.floor(delta/MINUTE_IN_SECONDS);delta-=timeLeft.minutes*MINUTE_IN_SECONDS;}timeLeft.seconds=delta;return timeLeft;};export default getTimePeriods;","map":{"version":3,"names":["MINUTE_IN_SECONDS","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/utils/getTimePeriods.ts"],"sourcesContent":["const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n"],"mappings":"AAAA,KAAM,CAAAA,iBAAiB,CAAG,EAAE,CAC5B,KAAM,CAAAC,eAAe,CAAG,IAAI,CAC5B,KAAM,CAAAC,cAAc,CAAG,KAAK,CAC5B,KAAM,CAAAC,gBAAgB,CAAG,OAAO,CAChC,KAAM,CAAAC,eAAe,CAAG,QAAQ,CAEhC;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,cAAc,CAAIC,OAAe,EAAK,CAC1C,GAAI,CAAAC,KAAK,CAAGC,IAAI,CAACC,GAAG,CAACH,OAAO,CAAC,CAC7B,KAAM,CAAAI,QAAQ,CAAG,CACfC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CAAC,CACTC,IAAI,CAAE,CAAC,CACPC,KAAK,CAAE,CAAC,CACRC,OAAO,CAAE,CAAC,CACVT,OAAO,CAAE,CACX,CAAC,CAED,GAAIC,KAAK,EAAIH,eAAe,CAAE,CAC5BM,QAAQ,CAACC,KAAK,CAAGH,IAAI,CAACQ,KAAK,CAACT,KAAK,CAAGH,eAAe,CAAC,CACpDG,KAAK,EAAIG,QAAQ,CAACC,KAAK,CAAGP,eAAe,CAC3C,CAEA,GAAIG,KAAK,EAAIJ,gBAAgB,CAAE,CAC7BO,QAAQ,CAACE,MAAM,CAAGJ,IAAI,CAACQ,KAAK,CAACT,KAAK,CAAGJ,gBAAgB,CAAC,CACtDI,KAAK,EAAIG,QAAQ,CAACE,MAAM,CAAGT,gBAAgB,CAC7C,CAEA,GAAII,KAAK,EAAIL,cAAc,CAAE,CAC3BQ,QAAQ,CAACG,IAAI,CAAGL,IAAI,CAACQ,KAAK,CAACT,KAAK,CAAGL,cAAc,CAAC,CAClDK,KAAK,EAAIG,QAAQ,CAACG,IAAI,CAAGX,cAAc,CACzC,CAEA,GAAIK,KAAK,EAAIN,eAAe,CAAE,CAC5BS,QAAQ,CAACI,KAAK,CAAGN,IAAI,CAACQ,KAAK,CAACT,KAAK,CAAGN,eAAe,CAAC,CACpDM,KAAK,EAAIG,QAAQ,CAACI,KAAK,CAAGb,eAAe,CAC3C,CAEA,GAAIM,KAAK,EAAIP,iBAAiB,CAAE,CAC9BU,QAAQ,CAACK,OAAO,CAAGP,IAAI,CAACQ,KAAK,CAACT,KAAK,CAAGP,iBAAiB,CAAC,CACxDO,KAAK,EAAIG,QAAQ,CAACK,OAAO,CAAGf,iBAAiB,CAC/C,CAEAU,QAAQ,CAACJ,OAAO,CAAGC,KAAK,CAExB,MAAO,CAAAG,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAL,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}