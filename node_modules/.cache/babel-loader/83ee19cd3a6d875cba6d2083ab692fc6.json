{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../../state/multicall/hooks';\nimport isZero from '../../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract';\nimport useDebounce from '../useDebounce';\nexport default function useENSAddress(ensName) {\n  _s();\n\n  var _resolverAddress$resu, _address$result$, _address$result;\n\n  const debouncedName = useDebounce(ensName, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined];\n\n    try {\n      return [namehash(debouncedName)];\n    } catch (error) {\n      console.error('Invalid ENS name:', error);\n      return [undefined];\n    }\n  }, [debouncedName]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false);\n  const address = useSingleCallResult(resolverContract, 'addr', ensNodeArgument);\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult);\n  return {\n    address: isResolverAddressValid ? (_address$result$ = (_address$result = address.result) === null || _address$result === void 0 ? void 0 : _address$result[0]) !== null && _address$result$ !== void 0 ? _address$result$ : null : null,\n    loading: resolverAddress.loading || address.loading\n  };\n}\n\n_s(useENSAddress, \"/lEk8vCrILZ1VpeoA0HEYquqhM4=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/hooks/ENS/useENSName.ts"],"names":["namehash","useMemo","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","ensName","debouncedName","ensNodeArgument","undefined","error","console","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","address","isResolverAddressValid","loading"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,gBAAhE;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,eAAe,SAASC,aAAT,CAAuBC,OAAvB,EAA8F;AAAA;;AAAA;;AAC3G,QAAMC,aAAa,GAAGH,WAAW,CAACE,OAAD,EAAU,GAAV,CAAjC;AACA,QAAME,eAAe,GAAGT,OAAO,CAAC,MAAM;AACpC,QAAI,CAACQ,aAAL,EAAoB,OAAO,CAACE,SAAD,CAAP;;AACpB,QAAI;AACF,aAAO,CAACX,QAAQ,CAACS,aAAD,CAAT,CAAP;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;AACA,aAAO,CAACD,SAAD,CAAP;AACD;AACF,GAR8B,EAQ5B,CAACF,aAAD,CAR4B,CAA/B;AAUA,QAAMK,iBAAiB,GAAGV,uBAAuB,CAAC,KAAD,CAAjD;AACA,QAAMW,eAAe,GAAGb,mBAAmB,CAACY,iBAAD,EAAoB,UAApB,EAAgCJ,eAAhC,CAA3C;AACA,QAAMM,qBAAqB,4BAAGD,eAAe,CAACE,MAAnB,0DAAG,sBAAyB,CAAzB,CAA9B;AAEA,QAAMC,gBAAgB,GAAGb,sBAAsB,CAACW,qBAAqB,IAAIL,SAA1B,EAAqC,KAArC,CAA/C;AACA,QAAMQ,OAAO,GAAGjB,mBAAmB,CAACgB,gBAAD,EAAmB,MAAnB,EAA2BR,eAA3B,CAAnC;AAEA,QAAMU,sBAAsB,GAAGJ,qBAAqB,IAAI,CAACb,MAAM,CAACa,qBAAD,CAA/D;AAEA,SAAO;AACLG,IAAAA,OAAO,EAAEC,sBAAsB,0CAAGD,OAAO,CAACF,MAAX,oDAAG,gBAAiB,CAAjB,CAAH,+DAA0B,IAA1B,GAAiC,IAD3D;AAELI,IAAAA,OAAO,EAAEN,eAAe,CAACM,OAAhB,IAA2BF,OAAO,CAACE;AAFvC,GAAP;AAID;;GAzBuBd,a;UACAD,W,EAWIF,uB,EACFF,mB,EAGCG,sB,EACTH,mB","sourcesContent":["import { namehash } from 'ethers/lib/utils'\r\nimport { useMemo } from 'react'\r\nimport { useSingleCallResult } from '../../state/multicall/hooks'\r\nimport isZero from '../../utils/isZero'\r\nimport { useENSRegistrarContract, useENSResolverContract } from '../useContract'\r\nimport useDebounce from '../useDebounce'\r\n\r\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\r\n  const debouncedName = useDebounce(ensName, 200)\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedName) return [undefined]\r\n    try {\r\n      return [namehash(debouncedName)]\r\n    } catch (error) {\r\n      console.error('Invalid ENS name:', error)\r\n      return [undefined]\r\n    }\r\n  }, [debouncedName])\r\n\r\n  const registrarContract = useENSRegistrarContract(false)\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\r\n  const resolverAddressResult = resolverAddress.result?.[0]\r\n\r\n  const resolverContract = useENSResolverContract(resolverAddressResult || undefined, false)\r\n  const address = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\r\n\r\n  const isResolverAddressValid = resolverAddressResult && !isZero(resolverAddressResult)\r\n\r\n  return {\r\n    address: isResolverAddressValid ? address.result?.[0] ?? null : null,\r\n    loading: resolverAddress.loading || address.loading,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}