{"ast":null,"code":"import BigNumber from'bignumber.js';import{convertSharesToCake}from'views/Pools/helpers';import{multicallv2}from'utils/multicall';import cakeVaultAbi from'config/abi/cakeVault.json';import{getCakeVaultAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';export const fetchPublicVaultData=async()=>{try{const calls=['getPricePerFullShare','totalShares','calculateHarvestCakeRewards','calculateTotalPendingCakeRewards'].map(method=>({address:getCakeVaultAddress(),name:method}));const[[sharePrice],[shares],[estimatedCakeBountyReward],[totalPendingCakeHarvest]]=await multicallv2(cakeVaultAbi,calls);const totalSharesAsBigNumber=shares?new BigNumber(shares.toString()):BIG_ZERO;const sharePriceAsBigNumber=sharePrice?new BigNumber(sharePrice.toString()):BIG_ZERO;const totalCakeInVaultEstimate=convertSharesToCake(totalSharesAsBigNumber,sharePriceAsBigNumber);return{totalShares:totalSharesAsBigNumber.toJSON(),pricePerFullShare:sharePriceAsBigNumber.toJSON(),totalCakeInVault:totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),estimatedCakeBountyReward:new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),totalPendingCakeHarvest:new BigNumber(totalPendingCakeHarvest.toString()).toJSON()};}catch(error){return{totalShares:null,pricePerFullShare:null,totalCakeInVault:null,estimatedCakeBountyReward:null,totalPendingCakeHarvest:null};}};export const fetchVaultFees=async()=>{try{const calls=['performanceFee','callFee','withdrawFee','withdrawFeePeriod'].map(method=>({address:getCakeVaultAddress(),name:method}));const[[performanceFee],[callFee],[withdrawalFee],[withdrawalFeePeriod]]=await multicallv2(cakeVaultAbi,calls);return{performanceFee:performanceFee.toNumber(),callFee:callFee.toNumber(),withdrawalFee:withdrawalFee.toNumber(),withdrawalFeePeriod:withdrawalFeePeriod.toNumber()};}catch(error){return{performanceFee:null,callFee:null,withdrawalFee:null,withdrawalFeePeriod:null};}};export default fetchPublicVaultData;","map":{"version":3,"names":["BigNumber","convertSharesToCake","multicallv2","cakeVaultAbi","getCakeVaultAddress","BIG_ZERO","fetchPublicVaultData","calls","map","method","address","name","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","toString","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","toJSON","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","error","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","toNumber"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/state/pools/fetchVaultPublic.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicVaultData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n    ].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\r\n      cakeVaultAbi,\r\n      calls,\r\n    )\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchVaultFees = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicVaultData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}