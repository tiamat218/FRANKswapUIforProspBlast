{"ast":null,"code":"import{useEffect,useState,useCallback}from'react';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{PoolIds}from'config/constants/types';import{useERC20,useIfoV1Contract}from'hooks/useContract';import{multicallv2}from'utils/multicall';import ifoV1Abi from'config/abi/ifoV1.json';import{getAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';import useIfoAllowance from'../useIfoAllowance';/**\r\n * Gets all data from an IFO related to a wallet\r\n */const useGetWalletIfoData=ifo=>{const[state,setState]=useState({[PoolIds.poolUnlimited]:{amountTokenCommittedInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO// Not used\n}});const{address,currency}=ifo;const{poolUnlimited}=state;const{account}=useWeb3React();const contract=useIfoV1Contract(address);const currencyContract=useERC20(getAddress(currency.address));const allowance=useIfoAllowance(currencyContract,address,poolUnlimited.isPendingTx);const setPendingTx=status=>setState(prevState=>({[PoolIds.poolUnlimited]:{...prevState.poolUnlimited,isPendingTx:status}}));const setIsClaimed=()=>{setState(prevState=>({[PoolIds.poolUnlimited]:{...prevState.poolUnlimited,hasClaimed:true}}));};const fetchIfoData=useCallback(async()=>{const ifoCalls=['getOfferingAmount','userInfo','getRefundingAmount'].map(method=>({address,name:method,params:[account]}));const[offeringAmount,userInfoResponse,refundingAmount]=await multicallv2(ifoV1Abi,ifoCalls);const parsedUserInfo=userInfoResponse?{amount:new BigNumber(userInfoResponse.amount.toString()),claimed:userInfoResponse.claimed}:{amount:BIG_ZERO,claimed:false};setState(prevState=>({[PoolIds.poolUnlimited]:{...prevState.poolUnlimited,amountTokenCommittedInLP:parsedUserInfo.amount,hasClaimed:parsedUserInfo.claimed,offeringAmountInToken:offeringAmount?new BigNumber(offeringAmount[0].toString()):BIG_ZERO,refundingAmountInLP:refundingAmount?new BigNumber(refundingAmount[0].toString()):BIG_ZERO}}));},[account,address]);useEffect(()=>{if(account){fetchIfoData();}},[account,fetchIfoData]);return{...state,allowance,contract,setPendingTx,setIsClaimed,fetchIfoData};};export default useGetWalletIfoData;","map":{"version":3,"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","PoolIds","useERC20","useIfoV1Contract","multicallv2","ifoV1Abi","getAddress","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","state","setState","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","amount","toString","claimed"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Ifos/hooks/v1/useGetWalletIfoData.ts"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>({\r\n    [PoolIds.poolUnlimited]: {\r\n      amountTokenCommittedInLP: BIG_ZERO,\r\n      hasClaimed: false,\r\n      isPendingTx: false,\r\n      offeringAmountInToken: BIG_ZERO,\r\n      refundingAmountInLP: BIG_ZERO,\r\n      taxAmountInLP: BIG_ZERO, // Not used\r\n    },\r\n  })\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(getAddress(currency.address))\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchIfoData()\r\n    }\r\n  }, [account, fetchIfoData])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}