{"ast":null,"code":"import{useEffect,useMemo}from'react';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import useRefresh from'hooks/useRefresh';import{fetchCurrentLotteryId,fetchCurrentLottery,fetchUserTicketsAndLotteries,fetchPublicLotteries}from'.';import{useProcessLotteryResponse}from'./helpers';// Lottery\nexport const useGetCurrentLotteryId=()=>{return useSelector(state=>state.lottery.currentLotteryId);};export const useGetUserLotteriesGraphData=()=>{return useSelector(state=>state.lottery.userLotteryData);};export const useGetUserLotteryGraphRoundById=lotteryId=>{const userLotteriesData=useGetUserLotteriesGraphData();return userLotteriesData.rounds.find(userRound=>userRound.lotteryId===lotteryId);};export const useGetLotteriesGraphData=()=>{return useSelector(state=>state.lottery.lotteriesData);};export const useGetLotteryGraphDataById=lotteryId=>{const lotteriesData=useGetLotteriesGraphData();return lotteriesData.find(lottery=>lottery.id===lotteryId);};export const useFetchLottery=()=>{const{account}=useWeb3React();const{fastRefresh}=useRefresh();const dispatch=useAppDispatch();const currentLotteryId=useGetCurrentLotteryId();useEffect(()=>{// get current lottery ID & max ticket buy\ndispatch(fetchCurrentLotteryId());},[dispatch]);useEffect(()=>{if(currentLotteryId){// Get historical lottery data from nodes + subgraph\ndispatch(fetchPublicLotteries({currentLotteryId}));// get public data for current lottery\ndispatch(fetchCurrentLottery({currentLotteryId}));}},[dispatch,currentLotteryId,fastRefresh]);useEffect(()=>{// get user tickets for current lottery, and user lottery subgraph data\nif(account&&currentLotteryId){dispatch(fetchUserTicketsAndLotteries({account,currentLotteryId}));}},[dispatch,currentLotteryId,account]);};export const useLottery=()=>{const currentRound=useSelector(state=>state.lottery.currentRound);const processedCurrentRound=useProcessLotteryResponse(currentRound);const isTransitioning=useSelector(state=>state.lottery.isTransitioning);const currentLotteryId=useGetCurrentLotteryId();const userLotteryData=useGetUserLotteriesGraphData();const lotteriesData=useGetLotteriesGraphData();const maxNumberTicketsPerBuyOrClaimAsString=useSelector(state=>state.lottery.maxNumberTicketsPerBuyOrClaim);const maxNumberTicketsPerBuyOrClaim=useMemo(()=>{return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString);},[maxNumberTicketsPerBuyOrClaimAsString]);return{currentLotteryId,maxNumberTicketsPerBuyOrClaim,isTransitioning,userLotteryData,lotteriesData,currentRound:processedCurrentRound};};","map":{"version":3,"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","useRefresh","fetchCurrentLotteryId","fetchCurrentLottery","fetchUserTicketsAndLotteries","fetchPublicLotteries","useProcessLotteryResponse","useGetCurrentLotteryId","state","lottery","currentLotteryId","useGetUserLotteriesGraphData","userLotteryData","useGetUserLotteryGraphRoundById","lotteryId","userLotteriesData","rounds","find","userRound","useGetLotteriesGraphData","lotteriesData","useGetLotteryGraphDataById","id","useFetchLottery","account","fastRefresh","dispatch","useLottery","currentRound","processedCurrentRound","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim"],"sources":["C:/Users/frkul/Documents/swapUI_pancake-frontend/src/state/lottery/hooks.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { State } from '../types'\r\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\r\nimport { useProcessLotteryResponse } from './helpers'\r\n\r\n// Lottery\r\nexport const useGetCurrentLotteryId = () => {\r\n  return useSelector((state: State) => state.lottery.currentLotteryId)\r\n}\r\n\r\nexport const useGetUserLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.userLotteryData)\r\n}\r\n\r\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\r\n  const userLotteriesData = useGetUserLotteriesGraphData()\r\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\r\n}\r\n\r\nexport const useGetLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.lotteriesData)\r\n}\r\n\r\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  return lotteriesData.find((lottery) => lottery.id === lotteryId)\r\n}\r\n\r\nexport const useFetchLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID & max ticket buy\r\n    dispatch(fetchCurrentLotteryId())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      // Get historical lottery data from nodes + subgraph\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      // get public data for current lottery\r\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    // get user tickets for current lottery, and user lottery subgraph data\r\n    if (account && currentLotteryId) {\r\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, account])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\r\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\r\n\r\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\r\n\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n\r\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\r\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\r\n  )\r\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\r\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\r\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\r\n\r\n  return {\r\n    currentLotteryId,\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    isTransitioning,\r\n    userLotteryData,\r\n    lotteriesData,\r\n    currentRound: processedCurrentRound,\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}