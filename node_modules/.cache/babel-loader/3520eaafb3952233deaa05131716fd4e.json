{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'contexts/Localization';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { multicallv2 } from 'utils/multicall';\nimport profileABI from 'config/abi/pancakeProfile.json';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport useToast from 'hooks/useToast';\n\nconst useGetProfileCosts = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: BIG_ZERO,\n    numberCakeToRegister: BIG_ZERO,\n    numberCakeToUpdate: BIG_ZERO\n  });\n  const {\n    toastError\n  } = useToast();\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map(method => ({\n          address: getPancakeProfileAddress(),\n          name: method\n        }));\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2(profileABI, calls);\n        setCosts({\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate.toString()),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister.toString()),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate.toString())\n        });\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'));\n      }\n    };\n\n    fetchCosts();\n  }, [setCosts, toastError, t]);\n  return costs;\n};\n\n_s(useGetProfileCosts, \"9v8qGnnYoln9qzNO2tawKcnLqRY=\", false, function () {\n  return [useTranslation, useToast];\n});\n\nexport default useGetProfileCosts;","map":{"version":3,"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Profile/hooks/useGetProfileCosts.ts"],"names":["useEffect","useState","useTranslation","BigNumber","BIG_ZERO","multicallv2","profileABI","getPancakeProfileAddress","useToast","useGetProfileCosts","t","costs","setCosts","numberCakeToReactivate","numberCakeToRegister","numberCakeToUpdate","toastError","fetchCosts","calls","map","method","address","name","toString","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAQR,cAAc,EAA5B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC;AACjCY,IAAAA,sBAAsB,EAAET,QADS;AAEjCU,IAAAA,oBAAoB,EAAEV,QAFW;AAGjCW,IAAAA,kBAAkB,EAAEX;AAHa,GAAD,CAAlC;AAKA,QAAM;AAAEY,IAAAA;AAAF,MAAiBR,QAAQ,EAA/B;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,KAAK,GAAG,CAAC,wBAAD,EAA2B,sBAA3B,EAAmD,oBAAnD,EAAyEC,GAAzE,CAA8EC,MAAD,KAAa;AACtGC,UAAAA,OAAO,EAAEd,wBAAwB,EADqE;AAEtGe,UAAAA,IAAI,EAAEF;AAFgG,SAAb,CAA7E,CAAd;AAIA,cAAM,CAAC,CAACP,sBAAD,CAAD,EAA2B,CAACC,oBAAD,CAA3B,EAAmD,CAACC,kBAAD,CAAnD,IAA2E,MAAMV,WAAW,CAChGC,UADgG,EAEhGY,KAFgG,CAAlG;AAKAN,QAAAA,QAAQ,CAAC;AACPC,UAAAA,sBAAsB,EAAE,IAAIV,SAAJ,CAAcU,sBAAsB,CAACU,QAAvB,EAAd,CADjB;AAEPT,UAAAA,oBAAoB,EAAE,IAAIX,SAAJ,CAAcW,oBAAoB,CAACS,QAArB,EAAd,CAFf;AAGPR,UAAAA,kBAAkB,EAAE,IAAIZ,SAAJ,CAAcY,kBAAkB,CAACQ,QAAnB,EAAd;AAHb,SAAD,CAAR;AAKD,OAfD,CAeE,OAAOC,KAAP,EAAc;AACdR,QAAAA,UAAU,CAACN,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,2CAAD,CAAd,CAAV;AACD;AACF,KAnBD;;AAqBAO,IAAAA,UAAU;AACX,GAvBQ,EAuBN,CAACL,QAAD,EAAWI,UAAX,EAAuBN,CAAvB,CAvBM,CAAT;AAyBA,SAAOC,KAAP;AACD,CAnCD;;GAAMF,kB;UACUP,c,EAMSM,Q;;;AA8BzB,eAAeC,kBAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: BIG_ZERO,\r\n    numberCakeToRegister: BIG_ZERO,\r\n    numberCakeToUpdate: BIG_ZERO,\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2(\r\n          profileABI,\r\n          calls,\r\n        )\r\n\r\n        setCosts({\r\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate.toString()),\r\n          numberCakeToRegister: new BigNumber(numberCakeToRegister.toString()),\r\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate.toString()),\r\n        })\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return costs\r\n}\r\n\r\nexport default useGetProfileCosts\r\n"]},"metadata":{},"sourceType":"module"}