{"ast":null,"code":"import React from'react';import{Button,AutoRenewIcon,Skeleton}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useERC20}from'hooks/useContract';import{getAddress}from'utils/addressHelpers';import{useApprovePool}from'../../../hooks/useApprove';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const ApprovalAction=_ref=>{let{pool,isLoading=false}=_ref;const{sousId,stakingToken,earningToken}=pool;const{t}=useTranslation();const stakingTokenContract=useERC20(stakingToken.address?getAddress(stakingToken.address):'');const{handleApprove,requestedApproval}=useApprovePool(stakingTokenContract,sousId,earningToken.symbol);return/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(Skeleton,{width:\"100%\",height:\"52px\"}):/*#__PURE__*/_jsx(Button,{isLoading:requestedApproval,endIcon:requestedApproval?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,disabled:requestedApproval,onClick:handleApprove,width:\"100%\",children:t('Enable')})});};export default ApprovalAction;","map":{"version":3,"names":["React","Button","AutoRenewIcon","Skeleton","useTranslation","useERC20","getAddress","useApprovePool","jsx","_jsx","Fragment","_Fragment","ApprovalAction","_ref","pool","isLoading","sousId","stakingToken","earningToken","t","stakingTokenContract","address","handleApprove","requestedApproval","symbol","children","width","height","endIcon","spin","color","disabled","onClick"],"sources":["C:/Users/Devrim/Documents/FRANKswapUIforProspBlast/src/views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { Pool } from 'state/types'\r\nimport { useApprovePool } from '../../../hooks/useApprove'\r\n\r\ninterface ApprovalActionProps {\r\n  pool: Pool\r\n  isLoading?: boolean\r\n}\r\n\r\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\r\n  const { sousId, stakingToken, earningToken } = pool\r\n  const { t } = useTranslation()\r\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\r\n  const { handleApprove, requestedApproval } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol)\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Skeleton width=\"100%\" height=\"52px\" />\r\n      ) : (\r\n        <Button\r\n          isLoading={requestedApproval}\r\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          disabled={requestedApproval}\r\n          onClick={handleApprove}\r\n          width=\"100%\"\r\n        >\r\n          {t('Enable')}\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ApprovalAction\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,MAAM,CAAEC,aAAa,CAAEC,QAAQ,KAAQ,oBAAoB,CACpE,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,QAAQ,KAAQ,mBAAmB,CAC5C,OAASC,UAAU,KAAQ,sBAAsB,CAEjD,OAASC,cAAc,KAAQ,2BAA2B,QAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAO1D,KAAM,CAAAC,cAA6C,CAAGC,IAAA,EAAiC,IAAhC,CAAEC,IAAI,CAAEC,SAAS,CAAG,KAAM,CAAC,CAAAF,IAAA,CAChF,KAAM,CAAEG,MAAM,CAAEC,YAAY,CAAEC,YAAa,CAAC,CAAGJ,IAAI,CACnD,KAAM,CAAEK,CAAE,CAAC,CAAGf,cAAc,CAAC,CAAC,CAC9B,KAAM,CAAAgB,oBAAoB,CAAGf,QAAQ,CAACY,YAAY,CAACI,OAAO,CAAGf,UAAU,CAACW,YAAY,CAACI,OAAO,CAAC,CAAG,EAAE,CAAC,CACnG,KAAM,CAAEC,aAAa,CAAEC,iBAAkB,CAAC,CAAGhB,cAAc,CAACa,oBAAoB,CAAEJ,MAAM,CAAEE,YAAY,CAACM,MAAM,CAAC,CAE9G,mBACEf,IAAA,CAAAE,SAAA,EAAAc,QAAA,CACGV,SAAS,cACRN,IAAA,CAACN,QAAQ,EAACuB,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAAE,CAAC,cAEvClB,IAAA,CAACR,MAAM,EACLc,SAAS,CAAEQ,iBAAkB,CAC7BK,OAAO,CAAEL,iBAAiB,cAAGd,IAAA,CAACP,aAAa,EAAC2B,IAAI,MAACC,KAAK,CAAC,cAAc,CAAE,CAAC,CAAG,IAAK,CAChFC,QAAQ,CAAER,iBAAkB,CAC5BS,OAAO,CAAEV,aAAc,CACvBI,KAAK,CAAC,MAAM,CAAAD,QAAA,CAEXN,CAAC,CAAC,QAAQ,CAAC,CACN,CACT,CACD,CAAC,CAEP,CAAC,CAED,cAAe,CAAAP,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}